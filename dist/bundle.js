(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Bundle = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
/*
 2017 Julian Garnier
 Released under the MIT license
*/
var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(e,r,p){if(p.get||p.set)throw new TypeError("ES3 does not support getters and setters.");e!=Array.prototype&&e!=Object.prototype&&(e[r]=p.value)};$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global&&null!=global?global:e};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(e){return $jscomp.SYMBOL_PREFIX+(e||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var e=$jscomp.global.Symbol.iterator;e||(e=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[e]&&$jscomp.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(e){var r=0;return $jscomp.iteratorPrototype(function(){return r<e.length?{done:!1,value:e[r++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(e){$jscomp.initSymbolIterator();e={next:e};e[$jscomp.global.Symbol.iterator]=function(){return this};return e};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(e,r){$jscomp.initSymbolIterator();e instanceof String&&(e+="");var p=0,m={next:function(){if(p<e.length){var u=p++;return{value:r(u,e[u]),done:!1}}m.next=function(){return{done:!0,value:void 0}};return m.next()}};m[Symbol.iterator]=function(){return m};return m};
$jscomp.polyfill=function(e,r,p,m){if(r){p=$jscomp.global;e=e.split(".");for(m=0;m<e.length-1;m++){var u=e[m];u in p||(p[u]={});p=p[u]}e=e[e.length-1];m=p[e];r=r(m);r!=m&&null!=r&&$jscomp.defineProperty(p,e,{configurable:!0,writable:!0,value:r})}};$jscomp.polyfill("Array.prototype.keys",function(e){return e?e:function(){return $jscomp.iteratorFromArray(this,function(e){return e})}},"es6-impl","es3");var $jscomp$this=this;
(function(e,r){"function"===typeof define&&define.amd?define([],r):"object"===typeof module&&module.exports?module.exports=r():e.anime=r()})(this,function(){function e(a){if(!h.col(a))try{return document.querySelectorAll(a)}catch(c){}}function r(a,c){for(var d=a.length,b=2<=arguments.length?arguments[1]:void 0,f=[],n=0;n<d;n++)if(n in a){var k=a[n];c.call(b,k,n,a)&&f.push(k)}return f}function p(a){return a.reduce(function(a,d){return a.concat(h.arr(d)?p(d):d)},[])}function m(a){if(h.arr(a))return a;
h.str(a)&&(a=e(a)||a);return a instanceof NodeList||a instanceof HTMLCollection?[].slice.call(a):[a]}function u(a,c){return a.some(function(a){return a===c})}function C(a){var c={},d;for(d in a)c[d]=a[d];return c}function D(a,c){var d=C(a),b;for(b in a)d[b]=c.hasOwnProperty(b)?c[b]:a[b];return d}function z(a,c){var d=C(a),b;for(b in c)d[b]=h.und(a[b])?c[b]:a[b];return d}function T(a){a=a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(a,c,d,k){return c+c+d+d+k+k});var c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);
a=parseInt(c[1],16);var d=parseInt(c[2],16),c=parseInt(c[3],16);return"rgba("+a+","+d+","+c+",1)"}function U(a){function c(a,c,b){0>b&&(b+=1);1<b&&--b;return b<1/6?a+6*(c-a)*b:.5>b?c:b<2/3?a+(c-a)*(2/3-b)*6:a}var d=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(a);a=parseInt(d[1])/360;var b=parseInt(d[2])/100,f=parseInt(d[3])/100,d=d[4]||1;if(0==b)f=b=a=f;else{var n=.5>f?f*(1+b):f+b-f*b,k=2*f-n,f=c(k,n,a+1/3),b=c(k,n,a);a=c(k,n,a-1/3)}return"rgba("+
255*f+","+255*b+","+255*a+","+d+")"}function y(a){if(a=/([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a))return a[2]}function V(a){if(-1<a.indexOf("translate")||"perspective"===a)return"px";if(-1<a.indexOf("rotate")||-1<a.indexOf("skew"))return"deg"}function I(a,c){return h.fnc(a)?a(c.target,c.id,c.total):a}function E(a,c){if(c in a.style)return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase())||"0"}function J(a,c){if(h.dom(a)&&
u(W,c))return"transform";if(h.dom(a)&&(a.getAttribute(c)||h.svg(a)&&a[c]))return"attribute";if(h.dom(a)&&"transform"!==c&&E(a,c))return"css";if(null!=a[c])return"object"}function X(a,c){var d=V(c),d=-1<c.indexOf("scale")?1:0+d;a=a.style.transform;if(!a)return d;for(var b=[],f=[],n=[],k=/(\w+)\((.+?)\)/g;b=k.exec(a);)f.push(b[1]),n.push(b[2]);a=r(n,function(a,b){return f[b]===c});return a.length?a[0]:d}function K(a,c){switch(J(a,c)){case "transform":return X(a,c);case "css":return E(a,c);case "attribute":return a.getAttribute(c)}return a[c]||
0}function L(a,c){var d=/^(\*=|\+=|-=)/.exec(a);if(!d)return a;var b=y(a)||0;c=parseFloat(c);a=parseFloat(a.replace(d[0],""));switch(d[0][0]){case "+":return c+a+b;case "-":return c-a+b;case "*":return c*a+b}}function F(a,c){return Math.sqrt(Math.pow(c.x-a.x,2)+Math.pow(c.y-a.y,2))}function M(a){a=a.points;for(var c=0,d,b=0;b<a.numberOfItems;b++){var f=a.getItem(b);0<b&&(c+=F(d,f));d=f}return c}function N(a){if(a.getTotalLength)return a.getTotalLength();switch(a.tagName.toLowerCase()){case "circle":return 2*
Math.PI*a.getAttribute("r");case "rect":return 2*a.getAttribute("width")+2*a.getAttribute("height");case "line":return F({x:a.getAttribute("x1"),y:a.getAttribute("y1")},{x:a.getAttribute("x2"),y:a.getAttribute("y2")});case "polyline":return M(a);case "polygon":var c=a.points;return M(a)+F(c.getItem(c.numberOfItems-1),c.getItem(0))}}function Y(a,c){function d(b){b=void 0===b?0:b;return a.el.getPointAtLength(1<=c+b?c+b:0)}var b=d(),f=d(-1),n=d(1);switch(a.property){case "x":return b.x;case "y":return b.y;
case "angle":return 180*Math.atan2(n.y-f.y,n.x-f.x)/Math.PI}}function O(a,c){var d=/-?\d*\.?\d+/g,b;b=h.pth(a)?a.totalLength:a;if(h.col(b))if(h.rgb(b)){var f=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(b);b=f?"rgba("+f[1]+",1)":b}else b=h.hex(b)?T(b):h.hsl(b)?U(b):void 0;else f=(f=y(b))?b.substr(0,b.length-f.length):b,b=c&&!/\s/g.test(b)?f+c:f;b+="";return{original:b,numbers:b.match(d)?b.match(d).map(Number):[0],strings:h.str(a)||c?b.split(d):[]}}function P(a){a=a?p(h.arr(a)?a.map(m):m(a)):[];return r(a,
function(a,d,b){return b.indexOf(a)===d})}function Z(a){var c=P(a);return c.map(function(a,b){return{target:a,id:b,total:c.length}})}function aa(a,c){var d=C(c);if(h.arr(a)){var b=a.length;2!==b||h.obj(a[0])?h.fnc(c.duration)||(d.duration=c.duration/b):a={value:a}}return m(a).map(function(a,b){b=b?0:c.delay;a=h.obj(a)&&!h.pth(a)?a:{value:a};h.und(a.delay)&&(a.delay=b);return a}).map(function(a){return z(a,d)})}function ba(a,c){var d={},b;for(b in a){var f=I(a[b],c);h.arr(f)&&(f=f.map(function(a){return I(a,
c)}),1===f.length&&(f=f[0]));d[b]=f}d.duration=parseFloat(d.duration);d.delay=parseFloat(d.delay);return d}function ca(a){return h.arr(a)?A.apply(this,a):Q[a]}function da(a,c){var d;return a.tweens.map(function(b){b=ba(b,c);var f=b.value,e=K(c.target,a.name),k=d?d.to.original:e,k=h.arr(f)?f[0]:k,w=L(h.arr(f)?f[1]:f,k),e=y(w)||y(k)||y(e);b.from=O(k,e);b.to=O(w,e);b.start=d?d.end:a.offset;b.end=b.start+b.delay+b.duration;b.easing=ca(b.easing);b.elasticity=(1E3-Math.min(Math.max(b.elasticity,1),999))/
1E3;b.isPath=h.pth(f);b.isColor=h.col(b.from.original);b.isColor&&(b.round=1);return d=b})}function ea(a,c){return r(p(a.map(function(a){return c.map(function(b){var c=J(a.target,b.name);if(c){var d=da(b,a);b={type:c,property:b.name,animatable:a,tweens:d,duration:d[d.length-1].end,delay:d[0].delay}}else b=void 0;return b})})),function(a){return!h.und(a)})}function R(a,c,d,b){var f="delay"===a;return c.length?(f?Math.min:Math.max).apply(Math,c.map(function(b){return b[a]})):f?b.delay:d.offset+b.delay+
b.duration}function fa(a){var c=D(ga,a),d=D(S,a),b=Z(a.targets),f=[],e=z(c,d),k;for(k in a)e.hasOwnProperty(k)||"targets"===k||f.push({name:k,offset:e.offset,tweens:aa(a[k],d)});a=ea(b,f);return z(c,{children:[],animatables:b,animations:a,duration:R("duration",a,c,d),delay:R("delay",a,c,d)})}function q(a){function c(){return window.Promise&&new Promise(function(a){return p=a})}function d(a){return g.reversed?g.duration-a:a}function b(a){for(var b=0,c={},d=g.animations,f=d.length;b<f;){var e=d[b],
k=e.animatable,h=e.tweens,n=h.length-1,l=h[n];n&&(l=r(h,function(b){return a<b.end})[0]||l);for(var h=Math.min(Math.max(a-l.start-l.delay,0),l.duration)/l.duration,w=isNaN(h)?1:l.easing(h,l.elasticity),h=l.to.strings,p=l.round,n=[],m=void 0,m=l.to.numbers.length,t=0;t<m;t++){var x=void 0,x=l.to.numbers[t],q=l.from.numbers[t],x=l.isPath?Y(l.value,w*x):q+w*(x-q);p&&(l.isColor&&2<t||(x=Math.round(x*p)/p));n.push(x)}if(l=h.length)for(m=h[0],w=0;w<l;w++)p=h[w+1],t=n[w],isNaN(t)||(m=p?m+(t+p):m+(t+" "));
else m=n[0];ha[e.type](k.target,e.property,m,c,k.id);e.currentValue=m;b++}if(b=Object.keys(c).length)for(d=0;d<b;d++)H||(H=E(document.body,"transform")?"transform":"-webkit-transform"),g.animatables[d].target.style[H]=c[d].join(" ");g.currentTime=a;g.progress=a/g.duration*100}function f(a){if(g[a])g[a](g)}function e(){g.remaining&&!0!==g.remaining&&g.remaining--}function k(a){var k=g.duration,n=g.offset,w=n+g.delay,r=g.currentTime,x=g.reversed,q=d(a);if(g.children.length){var u=g.children,v=u.length;
if(q>=g.currentTime)for(var G=0;G<v;G++)u[G].seek(q);else for(;v--;)u[v].seek(q)}if(q>=w||!k)g.began||(g.began=!0,f("begin")),f("run");if(q>n&&q<k)b(q);else if(q<=n&&0!==r&&(b(0),x&&e()),q>=k&&r!==k||!k)b(k),x||e();f("update");a>=k&&(g.remaining?(t=h,"alternate"===g.direction&&(g.reversed=!g.reversed)):(g.pause(),g.completed||(g.completed=!0,f("complete"),"Promise"in window&&(p(),m=c()))),l=0)}a=void 0===a?{}:a;var h,t,l=0,p=null,m=c(),g=fa(a);g.reset=function(){var a=g.direction,c=g.loop;g.currentTime=
0;g.progress=0;g.paused=!0;g.began=!1;g.completed=!1;g.reversed="reverse"===a;g.remaining="alternate"===a&&1===c?2:c;b(0);for(a=g.children.length;a--;)g.children[a].reset()};g.tick=function(a){h=a;t||(t=h);k((l+h-t)*q.speed)};g.seek=function(a){k(d(a))};g.pause=function(){var a=v.indexOf(g);-1<a&&v.splice(a,1);g.paused=!0};g.play=function(){g.paused&&(g.paused=!1,t=0,l=d(g.currentTime),v.push(g),B||ia())};g.reverse=function(){g.reversed=!g.reversed;t=0;l=d(g.currentTime)};g.restart=function(){g.pause();
g.reset();g.play()};g.finished=m;g.reset();g.autoplay&&g.play();return g}var ga={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:"normal",autoplay:!0,offset:0},S={duration:1E3,delay:0,easing:"easeOutElastic",elasticity:500,round:0},W="translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective".split(" "),H,h={arr:function(a){return Array.isArray(a)},obj:function(a){return-1<Object.prototype.toString.call(a).indexOf("Object")},
pth:function(a){return h.obj(a)&&a.hasOwnProperty("totalLength")},svg:function(a){return a instanceof SVGElement},dom:function(a){return a.nodeType||h.svg(a)},str:function(a){return"string"===typeof a},fnc:function(a){return"function"===typeof a},und:function(a){return"undefined"===typeof a},hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},rgb:function(a){return/^rgb/.test(a)},hsl:function(a){return/^hsl/.test(a)},col:function(a){return h.hex(a)||h.rgb(a)||h.hsl(a)}},A=function(){function a(a,
d,b){return(((1-3*b+3*d)*a+(3*b-6*d))*a+3*d)*a}return function(c,d,b,f){if(0<=c&&1>=c&&0<=b&&1>=b){var e=new Float32Array(11);if(c!==d||b!==f)for(var k=0;11>k;++k)e[k]=a(.1*k,c,b);return function(k){if(c===d&&b===f)return k;if(0===k)return 0;if(1===k)return 1;for(var h=0,l=1;10!==l&&e[l]<=k;++l)h+=.1;--l;var l=h+(k-e[l])/(e[l+1]-e[l])*.1,n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(.001<=n){for(h=0;4>h;++h){n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(0===n)break;var m=a(l,c,b)-k,l=l-m/n}k=l}else if(0===
n)k=l;else{var l=h,h=h+.1,g=0;do m=l+(h-l)/2,n=a(m,c,b)-k,0<n?h=m:l=m;while(1e-7<Math.abs(n)&&10>++g);k=m}return a(k,d,f)}}}}(),Q=function(){function a(a,b){return 0===a||1===a?a:-Math.pow(2,10*(a-1))*Math.sin(2*(a-1-b/(2*Math.PI)*Math.asin(1))*Math.PI/b)}var c="Quad Cubic Quart Quint Sine Expo Circ Back Elastic".split(" "),d={In:[[.55,.085,.68,.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],a],Out:[[.25,
.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],function(b,c){return 1-a(1-b,c)}],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],function(b,c){return.5>b?a(2*b,c)/2:1-a(-2*b+2,c)/2}]},b={linear:A(.25,.25,.75,.75)},f={},e;for(e in d)f.type=e,d[f.type].forEach(function(a){return function(d,f){b["ease"+a.type+c[f]]=h.fnc(d)?
d:A.apply($jscomp$this,d)}}(f)),f={type:f.type};return b}(),ha={css:function(a,c,d){return a.style[c]=d},attribute:function(a,c,d){return a.setAttribute(c,d)},object:function(a,c,d){return a[c]=d},transform:function(a,c,d,b,f){b[f]||(b[f]=[]);b[f].push(c+"("+d+")")}},v=[],B=0,ia=function(){function a(){B=requestAnimationFrame(c)}function c(c){var b=v.length;if(b){for(var d=0;d<b;)v[d]&&v[d].tick(c),d++;a()}else cancelAnimationFrame(B),B=0}return a}();q.version="2.2.0";q.speed=1;q.running=v;q.remove=
function(a){a=P(a);for(var c=v.length;c--;)for(var d=v[c],b=d.animations,f=b.length;f--;)u(a,b[f].animatable.target)&&(b.splice(f,1),b.length||d.pause())};q.getValue=K;q.path=function(a,c){var d=h.str(a)?e(a)[0]:a,b=c||100;return function(a){return{el:d,property:a,totalLength:N(d)*(b/100)}}};q.setDashoffset=function(a){var c=N(a);a.setAttribute("stroke-dasharray",c);return c};q.bezier=A;q.easings=Q;q.timeline=function(a){var c=q(a);c.pause();c.duration=0;c.add=function(d){c.children.forEach(function(a){a.began=
!0;a.completed=!0});m(d).forEach(function(b){var d=z(b,D(S,a||{}));d.targets=d.targets||a.targets;b=c.duration;var e=d.offset;d.autoplay=!1;d.direction=c.direction;d.offset=h.und(e)?b:L(e,b);c.began=!0;c.completed=!0;c.seek(d.offset);d=q(d);d.began=!0;d.completed=!0;d.duration>b&&(c.duration=d.duration);c.children.push(d)});c.seek(0);c.reset();c.autoplay&&c.restart();return c};return c};q.random=function(a,c){return Math.floor(Math.random()*(c-a+1))+a};return q});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],3:[function(require,module,exports){
'use strict';

module.exports = {
    "facebook": {
        url: 'https://www.facebook.com/udinejs',
        icon: 'fab fa-facebook-f'
    },
    "twitter": {
        url: 'https://twitter.com/Udine_JS',
        icon: 'fab fa-twitter'
    },
    "instagram": {
        url: 'https://www.instagram.com/udinejs',
        icon: 'fab fa-instagram'
    }
};

},{}],4:[function(require,module,exports){
'use strict';

var $ = require('jquery');
var anime = require('animejs');

var writer = require('./scripts/writer');
var socials = require('./data/socials');

var runLogoAnimation = function runLogoAnimation() {
    var logo_square = anime.timeline({
        autoplay: true
    });

    logo_square.add({
        targets: '.ico path.square',
        strokeDashoffset: [anime.setDashoffset, 0],
        easing: 'easeInOutSine',
        duration: 1200
    }).add({
        targets: '.ico path.square',
        fill: '#f0dc4f',
        easing: 'easeInOutSine',
        duration: 800
    });

    var logo_j = anime({
        targets: '.ico path.j',
        strokeDashoffset: [anime.setDashoffset, 0],
        easing: 'easeInOutSine',
        duration: 600
    });

    var logo_s = anime({
        delay: 600,
        targets: '.ico path.s',
        strokeDashoffset: [anime.setDashoffset, 0],
        easing: 'easeInOutSine',
        duration: 600
    });
};

var addSocialsListeners = function addSocialsListeners() {
    $('#socials-container').children().each(function (i, element) {
        element.addEventListener('click', function () {
            window.open(socials[element.id].url, '_blank');
        }, false);
    });
};

var init = function init() {
    runLogoAnimation();

    setTimeout(function () {
        writer.titles();
    }, 500);

    $(window).scroll(function () {
        if ($(this).scrollTop() >= 100) {
            $('footer').css({
                'transform': 'translateY(0px)'
            });
        }
    });
};

window.onload = function () {
    init();
    addSocialsListeners();
};

},{"./data/socials":3,"./scripts/writer":5,"animejs":1,"jquery":2}],5:[function(require,module,exports){
'use strict';

var $ = require('jquery');

var len = 0;

var write = function write(target, text, cb) {
    target.html(text.substr(0, len++));
    if (len < text.length + 1) {
        setTimeout(function () {
            write(target, text, cb);
        }, Math.ceil(Math.random() * 200) + 10);
    } else {
        cb();
    }
};

module.exports = {
    titles: function titles() {
        write($('#cover-title'), 'udine js', function () {
            setTimeout(function () {
                $('#down-icon').fadeIn();
            }, 250);
        });
    }
};

},{"jquery":2}]},{},[4])(4)
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYW5pbWVqcy9hbmltZS5taW4uanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwic3JjL2RhdGEvc29jaWFscy5qcyIsInNyYy9pbmRleC5qcyIsInNyYy9zY3JpcHRzL3dyaXRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNW5VQSxPQUFPLE9BQVAsR0FBaUI7QUFDYixnQkFBWTtBQUNSLGFBQUssa0NBREc7QUFFUixjQUFNO0FBRkUsS0FEQztBQUtiLGVBQVc7QUFDUCxhQUFLLDhCQURFO0FBRVAsY0FBTTtBQUZDLEtBTEU7QUFTYixpQkFBYTtBQUNULGFBQUssbUNBREk7QUFFVCxjQUFNO0FBRkc7QUFUQSxDQUFqQjs7Ozs7QUNBQSxJQUFNLElBQUksUUFBUSxRQUFSLENBQVY7QUFDQSxJQUFNLFFBQVEsUUFBUSxTQUFSLENBQWQ7O0FBRUEsSUFBTSxTQUFVLFFBQVEsa0JBQVIsQ0FBaEI7QUFDQSxJQUFNLFVBQVUsUUFBUSxnQkFBUixDQUFoQjs7QUFFQSxJQUFNLG1CQUFtQixTQUFuQixnQkFBbUIsR0FBTTtBQUMzQixRQUFNLGNBQWMsTUFBTSxRQUFOLENBQWU7QUFDL0Isa0JBQVU7QUFEcUIsS0FBZixDQUFwQjs7QUFJQSxnQkFDQyxHQURELENBQ0s7QUFDRCxpQkFBa0Isa0JBRGpCO0FBRUQsMEJBQWtCLENBQUMsTUFBTSxhQUFQLEVBQXNCLENBQXRCLENBRmpCO0FBR0QsZ0JBQWtCLGVBSGpCO0FBSUQsa0JBQWtCO0FBSmpCLEtBREwsRUFNRyxHQU5ILENBTU87QUFDSCxpQkFBVSxrQkFEUDtBQUVILGNBQVUsU0FGUDtBQUdILGdCQUFVLGVBSFA7QUFJSCxrQkFBVTtBQUpQLEtBTlA7O0FBYUEsUUFBTSxTQUFTLE1BQU07QUFDakIsaUJBQWtCLGFBREQ7QUFFakIsMEJBQWtCLENBQUMsTUFBTSxhQUFQLEVBQXNCLENBQXRCLENBRkQ7QUFHakIsZ0JBQWtCLGVBSEQ7QUFJakIsa0JBQWtCO0FBSkQsS0FBTixDQUFmOztBQU9BLFFBQU0sU0FBUyxNQUFNO0FBQ2pCLGVBQWtCLEdBREQ7QUFFakIsaUJBQWtCLGFBRkQ7QUFHakIsMEJBQWtCLENBQUMsTUFBTSxhQUFQLEVBQXNCLENBQXRCLENBSEQ7QUFJakIsZ0JBQWtCLGVBSkQ7QUFLakIsa0JBQWtCO0FBTEQsS0FBTixDQUFmO0FBT0gsQ0FoQ0Q7O0FBa0NBLElBQU0sc0JBQXNCLFNBQXRCLG1CQUFzQixHQUFNO0FBQzlCLE1BQUUsb0JBQUYsRUFBd0IsUUFBeEIsR0FBbUMsSUFBbkMsQ0FBd0MsVUFBQyxDQUFELEVBQUksT0FBSixFQUFnQjtBQUNwRCxnQkFBUSxnQkFBUixDQUF5QixPQUF6QixFQUFrQyxZQUFNO0FBQ3BDLG1CQUFPLElBQVAsQ0FBWSxRQUFRLFFBQVEsRUFBaEIsRUFBb0IsR0FBaEMsRUFBcUMsUUFBckM7QUFDSCxTQUZELEVBRUcsS0FGSDtBQUdILEtBSkQ7QUFLSCxDQU5EOztBQVFBLElBQU0sT0FBTyxTQUFQLElBQU8sR0FBTTtBQUNmOztBQUVBLGVBQVcsWUFBWTtBQUNuQixlQUFPLE1BQVA7QUFDSCxLQUZELEVBRUcsR0FGSDs7QUFJQSxNQUFFLE1BQUYsRUFBVSxNQUFWLENBQWlCLFlBQVk7QUFDekIsWUFBSSxFQUFFLElBQUYsRUFBUSxTQUFSLE1BQXVCLEdBQTNCLEVBQWdDO0FBQzVCLGNBQUUsUUFBRixFQUFZLEdBQVosQ0FBZ0I7QUFDWiw2QkFBYTtBQURELGFBQWhCO0FBR0g7QUFDSixLQU5EO0FBT0gsQ0FkRDs7QUFnQkEsT0FBTyxNQUFQLEdBQWlCLFlBQU07QUFDbkI7QUFDQTtBQUNILENBSEQ7Ozs7O0FDaEVBLElBQU0sSUFBSSxRQUFRLFFBQVIsQ0FBVjs7QUFFQSxJQUFJLE1BQU0sQ0FBVjs7QUFFQSxJQUFNLFFBQVEsU0FBUixLQUFRLENBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxFQUFmLEVBQXNCO0FBQ2hDLFdBQU8sSUFBUCxDQUFZLEtBQUssTUFBTCxDQUFZLENBQVosRUFBZSxLQUFmLENBQVo7QUFDQSxRQUFJLE1BQU0sS0FBSyxNQUFMLEdBQWMsQ0FBeEIsRUFBMkI7QUFDdkIsbUJBQVcsWUFBTTtBQUNiLGtCQUFNLE1BQU4sRUFBYyxJQUFkLEVBQW9CLEVBQXBCO0FBQ0gsU0FGRCxFQUVHLEtBQUssSUFBTCxDQUFVLEtBQUssTUFBTCxLQUFnQixHQUExQixJQUFpQyxFQUZwQztBQUdILEtBSkQsTUFJTztBQUNIO0FBQ0g7QUFDSixDQVREOztBQVdBLE9BQU8sT0FBUCxHQUFpQjtBQUNiLFVBRGEsb0JBQ0o7QUFDTCxjQUFNLEVBQUUsY0FBRixDQUFOLEVBQXlCLFVBQXpCLEVBQXFDLFlBQVk7QUFDN0MsdUJBQVcsWUFBTTtBQUNiLGtCQUFFLFlBQUYsRUFBZ0IsTUFBaEI7QUFDSCxhQUZELEVBRUcsR0FGSDtBQUdILFNBSkQ7QUFLSDtBQVBZLENBQWpCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKlxuIDIwMTcgSnVsaWFuIEdhcm5pZXJcbiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiovXG52YXIgJGpzY29tcD17c2NvcGU6e319OyRqc2NvbXAuZGVmaW5lUHJvcGVydHk9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUscixwKXtpZihwLmdldHx8cC5zZXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkVTMyBkb2VzIG5vdCBzdXBwb3J0IGdldHRlcnMgYW5kIHNldHRlcnMuXCIpO2UhPUFycmF5LnByb3RvdHlwZSYmZSE9T2JqZWN0LnByb3RvdHlwZSYmKGVbcl09cC52YWx1ZSl9OyRqc2NvbXAuZ2V0R2xvYmFsPWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdz09PWU/ZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZudWxsIT1nbG9iYWw/Z2xvYmFsOmV9OyRqc2NvbXAuZ2xvYmFsPSRqc2NvbXAuZ2V0R2xvYmFsKHRoaXMpOyRqc2NvbXAuU1lNQk9MX1BSRUZJWD1cImpzY29tcF9zeW1ib2xfXCI7XG4kanNjb21wLmluaXRTeW1ib2w9ZnVuY3Rpb24oKXskanNjb21wLmluaXRTeW1ib2w9ZnVuY3Rpb24oKXt9OyRqc2NvbXAuZ2xvYmFsLlN5bWJvbHx8KCRqc2NvbXAuZ2xvYmFsLlN5bWJvbD0kanNjb21wLlN5bWJvbCl9OyRqc2NvbXAuc3ltYm9sQ291bnRlcl89MDskanNjb21wLlN5bWJvbD1mdW5jdGlvbihlKXtyZXR1cm4gJGpzY29tcC5TWU1CT0xfUFJFRklYKyhlfHxcIlwiKSskanNjb21wLnN5bWJvbENvdW50ZXJfKyt9O1xuJGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3I9ZnVuY3Rpb24oKXskanNjb21wLmluaXRTeW1ib2woKTt2YXIgZT0kanNjb21wLmdsb2JhbC5TeW1ib2wuaXRlcmF0b3I7ZXx8KGU9JGpzY29tcC5nbG9iYWwuU3ltYm9sLml0ZXJhdG9yPSRqc2NvbXAuZ2xvYmFsLlN5bWJvbChcIml0ZXJhdG9yXCIpKTtcImZ1bmN0aW9uXCIhPXR5cGVvZiBBcnJheS5wcm90b3R5cGVbZV0mJiRqc2NvbXAuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLGUse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiAkanNjb21wLmFycmF5SXRlcmF0b3IodGhpcyl9fSk7JGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3I9ZnVuY3Rpb24oKXt9fTskanNjb21wLmFycmF5SXRlcmF0b3I9ZnVuY3Rpb24oZSl7dmFyIHI9MDtyZXR1cm4gJGpzY29tcC5pdGVyYXRvclByb3RvdHlwZShmdW5jdGlvbigpe3JldHVybiByPGUubGVuZ3RoP3tkb25lOiExLHZhbHVlOmVbcisrXX06e2RvbmU6ITB9fSl9O1xuJGpzY29tcC5pdGVyYXRvclByb3RvdHlwZT1mdW5jdGlvbihlKXskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO2U9e25leHQ6ZX07ZVskanNjb21wLmdsb2JhbC5TeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3JldHVybiBlfTskanNjb21wLmFycmF5PSRqc2NvbXAuYXJyYXl8fHt9OyRqc2NvbXAuaXRlcmF0b3JGcm9tQXJyYXk9ZnVuY3Rpb24oZSxyKXskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO2UgaW5zdGFuY2VvZiBTdHJpbmcmJihlKz1cIlwiKTt2YXIgcD0wLG09e25leHQ6ZnVuY3Rpb24oKXtpZihwPGUubGVuZ3RoKXt2YXIgdT1wKys7cmV0dXJue3ZhbHVlOnIodSxlW3VdKSxkb25lOiExfX1tLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fTtyZXR1cm4gbS5uZXh0KCl9fTttW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbX07cmV0dXJuIG19O1xuJGpzY29tcC5wb2x5ZmlsbD1mdW5jdGlvbihlLHIscCxtKXtpZihyKXtwPSRqc2NvbXAuZ2xvYmFsO2U9ZS5zcGxpdChcIi5cIik7Zm9yKG09MDttPGUubGVuZ3RoLTE7bSsrKXt2YXIgdT1lW21dO3UgaW4gcHx8KHBbdV09e30pO3A9cFt1XX1lPWVbZS5sZW5ndGgtMV07bT1wW2VdO3I9cihtKTtyIT1tJiZudWxsIT1yJiYkanNjb21wLmRlZmluZVByb3BlcnR5KHAsZSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnJ9KX19OyRqc2NvbXAucG9seWZpbGwoXCJBcnJheS5wcm90b3R5cGUua2V5c1wiLGZ1bmN0aW9uKGUpe3JldHVybiBlP2U6ZnVuY3Rpb24oKXtyZXR1cm4gJGpzY29tcC5pdGVyYXRvckZyb21BcnJheSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBlfSl9fSxcImVzNi1pbXBsXCIsXCJlczNcIik7dmFyICRqc2NvbXAkdGhpcz10aGlzO1xuKGZ1bmN0aW9uKGUscil7XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10scik6XCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXIoKTplLmFuaW1lPXIoKX0pKHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2lmKCFoLmNvbChhKSl0cnl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYSl9Y2F0Y2goYyl7fX1mdW5jdGlvbiByKGEsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGI9Mjw9YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwLGY9W10sbj0wO248ZDtuKyspaWYobiBpbiBhKXt2YXIgaz1hW25dO2MuY2FsbChiLGssbixhKSYmZi5wdXNoKGspfXJldHVybiBmfWZ1bmN0aW9uIHAoYSl7cmV0dXJuIGEucmVkdWNlKGZ1bmN0aW9uKGEsZCl7cmV0dXJuIGEuY29uY2F0KGguYXJyKGQpP3AoZCk6ZCl9LFtdKX1mdW5jdGlvbiBtKGEpe2lmKGguYXJyKGEpKXJldHVybiBhO1xuaC5zdHIoYSkmJihhPWUoYSl8fGEpO3JldHVybiBhIGluc3RhbmNlb2YgTm9kZUxpc3R8fGEgaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbj9bXS5zbGljZS5jYWxsKGEpOlthXX1mdW5jdGlvbiB1KGEsYyl7cmV0dXJuIGEuc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYT09PWN9KX1mdW5jdGlvbiBDKGEpe3ZhciBjPXt9LGQ7Zm9yKGQgaW4gYSljW2RdPWFbZF07cmV0dXJuIGN9ZnVuY3Rpb24gRChhLGMpe3ZhciBkPUMoYSksYjtmb3IoYiBpbiBhKWRbYl09Yy5oYXNPd25Qcm9wZXJ0eShiKT9jW2JdOmFbYl07cmV0dXJuIGR9ZnVuY3Rpb24geihhLGMpe3ZhciBkPUMoYSksYjtmb3IoYiBpbiBjKWRbYl09aC51bmQoYVtiXSk/Y1tiXTphW2JdO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7YT1hLnJlcGxhY2UoL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaSxmdW5jdGlvbihhLGMsZCxrKXtyZXR1cm4gYytjK2QrZCtrK2t9KTt2YXIgYz0vXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoYSk7XG5hPXBhcnNlSW50KGNbMV0sMTYpO3ZhciBkPXBhcnNlSW50KGNbMl0sMTYpLGM9cGFyc2VJbnQoY1szXSwxNik7cmV0dXJuXCJyZ2JhKFwiK2ErXCIsXCIrZCtcIixcIitjK1wiLDEpXCJ9ZnVuY3Rpb24gVShhKXtmdW5jdGlvbiBjKGEsYyxiKXswPmImJihiKz0xKTsxPGImJi0tYjtyZXR1cm4gYjwxLzY/YSs2KihjLWEpKmI6LjU+Yj9jOmI8Mi8zP2ErKGMtYSkqKDIvMy1iKSo2OmF9dmFyIGQ9L2hzbFxcKChcXGQrKSxcXHMqKFtcXGQuXSspJSxcXHMqKFtcXGQuXSspJVxcKS9nLmV4ZWMoYSl8fC9oc2xhXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKylcXCkvZy5leGVjKGEpO2E9cGFyc2VJbnQoZFsxXSkvMzYwO3ZhciBiPXBhcnNlSW50KGRbMl0pLzEwMCxmPXBhcnNlSW50KGRbM10pLzEwMCxkPWRbNF18fDE7aWYoMD09YilmPWI9YT1mO2Vsc2V7dmFyIG49LjU+Zj9mKigxK2IpOmYrYi1mKmIsaz0yKmYtbixmPWMoayxuLGErMS8zKSxiPWMoayxuLGEpO2E9YyhrLG4sYS0xLzMpfXJldHVyblwicmdiYShcIitcbjI1NSpmK1wiLFwiKzI1NSpiK1wiLFwiKzI1NSphK1wiLFwiK2QrXCIpXCJ9ZnVuY3Rpb24geShhKXtpZihhPS8oW1xcK1xcLV0/WzAtOSNcXC5dKykoJXxweHxwdHxlbXxyZW18aW58Y218bW18ZXh8Y2h8cGN8dnd8dmh8dm1pbnx2bWF4fGRlZ3xyYWR8dHVybik/JC8uZXhlYyhhKSlyZXR1cm4gYVsyXX1mdW5jdGlvbiBWKGEpe2lmKC0xPGEuaW5kZXhPZihcInRyYW5zbGF0ZVwiKXx8XCJwZXJzcGVjdGl2ZVwiPT09YSlyZXR1cm5cInB4XCI7aWYoLTE8YS5pbmRleE9mKFwicm90YXRlXCIpfHwtMTxhLmluZGV4T2YoXCJza2V3XCIpKXJldHVyblwiZGVnXCJ9ZnVuY3Rpb24gSShhLGMpe3JldHVybiBoLmZuYyhhKT9hKGMudGFyZ2V0LGMuaWQsYy50b3RhbCk6YX1mdW5jdGlvbiBFKGEsYyl7aWYoYyBpbiBhLnN0eWxlKXJldHVybiBnZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoYy5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKSl8fFwiMFwifWZ1bmN0aW9uIEooYSxjKXtpZihoLmRvbShhKSYmXG51KFcsYykpcmV0dXJuXCJ0cmFuc2Zvcm1cIjtpZihoLmRvbShhKSYmKGEuZ2V0QXR0cmlidXRlKGMpfHxoLnN2ZyhhKSYmYVtjXSkpcmV0dXJuXCJhdHRyaWJ1dGVcIjtpZihoLmRvbShhKSYmXCJ0cmFuc2Zvcm1cIiE9PWMmJkUoYSxjKSlyZXR1cm5cImNzc1wiO2lmKG51bGwhPWFbY10pcmV0dXJuXCJvYmplY3RcIn1mdW5jdGlvbiBYKGEsYyl7dmFyIGQ9VihjKSxkPS0xPGMuaW5kZXhPZihcInNjYWxlXCIpPzE6MCtkO2E9YS5zdHlsZS50cmFuc2Zvcm07aWYoIWEpcmV0dXJuIGQ7Zm9yKHZhciBiPVtdLGY9W10sbj1bXSxrPS8oXFx3KylcXCgoLis/KVxcKS9nO2I9ay5leGVjKGEpOylmLnB1c2goYlsxXSksbi5wdXNoKGJbMl0pO2E9cihuLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGZbYl09PT1jfSk7cmV0dXJuIGEubGVuZ3RoP2FbMF06ZH1mdW5jdGlvbiBLKGEsYyl7c3dpdGNoKEooYSxjKSl7Y2FzZSBcInRyYW5zZm9ybVwiOnJldHVybiBYKGEsYyk7Y2FzZSBcImNzc1wiOnJldHVybiBFKGEsYyk7Y2FzZSBcImF0dHJpYnV0ZVwiOnJldHVybiBhLmdldEF0dHJpYnV0ZShjKX1yZXR1cm4gYVtjXXx8XG4wfWZ1bmN0aW9uIEwoYSxjKXt2YXIgZD0vXihcXCo9fFxcKz18LT0pLy5leGVjKGEpO2lmKCFkKXJldHVybiBhO3ZhciBiPXkoYSl8fDA7Yz1wYXJzZUZsb2F0KGMpO2E9cGFyc2VGbG9hdChhLnJlcGxhY2UoZFswXSxcIlwiKSk7c3dpdGNoKGRbMF1bMF0pe2Nhc2UgXCIrXCI6cmV0dXJuIGMrYStiO2Nhc2UgXCItXCI6cmV0dXJuIGMtYStiO2Nhc2UgXCIqXCI6cmV0dXJuIGMqYStifX1mdW5jdGlvbiBGKGEsYyl7cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhjLngtYS54LDIpK01hdGgucG93KGMueS1hLnksMikpfWZ1bmN0aW9uIE0oYSl7YT1hLnBvaW50cztmb3IodmFyIGM9MCxkLGI9MDtiPGEubnVtYmVyT2ZJdGVtcztiKyspe3ZhciBmPWEuZ2V0SXRlbShiKTswPGImJihjKz1GKGQsZikpO2Q9Zn1yZXR1cm4gY31mdW5jdGlvbiBOKGEpe2lmKGEuZ2V0VG90YWxMZW5ndGgpcmV0dXJuIGEuZ2V0VG90YWxMZW5ndGgoKTtzd2l0Y2goYS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpe2Nhc2UgXCJjaXJjbGVcIjpyZXR1cm4gMipcbk1hdGguUEkqYS5nZXRBdHRyaWJ1dGUoXCJyXCIpO2Nhc2UgXCJyZWN0XCI6cmV0dXJuIDIqYS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSsyKmEuZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpO2Nhc2UgXCJsaW5lXCI6cmV0dXJuIEYoe3g6YS5nZXRBdHRyaWJ1dGUoXCJ4MVwiKSx5OmEuZ2V0QXR0cmlidXRlKFwieTFcIil9LHt4OmEuZ2V0QXR0cmlidXRlKFwieDJcIikseTphLmdldEF0dHJpYnV0ZShcInkyXCIpfSk7Y2FzZSBcInBvbHlsaW5lXCI6cmV0dXJuIE0oYSk7Y2FzZSBcInBvbHlnb25cIjp2YXIgYz1hLnBvaW50cztyZXR1cm4gTShhKStGKGMuZ2V0SXRlbShjLm51bWJlck9mSXRlbXMtMSksYy5nZXRJdGVtKDApKX19ZnVuY3Rpb24gWShhLGMpe2Z1bmN0aW9uIGQoYil7Yj12b2lkIDA9PT1iPzA6YjtyZXR1cm4gYS5lbC5nZXRQb2ludEF0TGVuZ3RoKDE8PWMrYj9jK2I6MCl9dmFyIGI9ZCgpLGY9ZCgtMSksbj1kKDEpO3N3aXRjaChhLnByb3BlcnR5KXtjYXNlIFwieFwiOnJldHVybiBiLng7Y2FzZSBcInlcIjpyZXR1cm4gYi55O1xuY2FzZSBcImFuZ2xlXCI6cmV0dXJuIDE4MCpNYXRoLmF0YW4yKG4ueS1mLnksbi54LWYueCkvTWF0aC5QSX19ZnVuY3Rpb24gTyhhLGMpe3ZhciBkPS8tP1xcZCpcXC4/XFxkKy9nLGI7Yj1oLnB0aChhKT9hLnRvdGFsTGVuZ3RoOmE7aWYoaC5jb2woYikpaWYoaC5yZ2IoYikpe3ZhciBmPS9yZ2JcXCgoXFxkKyxcXHMqW1xcZF0rLFxccypbXFxkXSspXFwpL2cuZXhlYyhiKTtiPWY/XCJyZ2JhKFwiK2ZbMV0rXCIsMSlcIjpifWVsc2UgYj1oLmhleChiKT9UKGIpOmguaHNsKGIpP1UoYik6dm9pZCAwO2Vsc2UgZj0oZj15KGIpKT9iLnN1YnN0cigwLGIubGVuZ3RoLWYubGVuZ3RoKTpiLGI9YyYmIS9cXHMvZy50ZXN0KGIpP2YrYzpmO2IrPVwiXCI7cmV0dXJue29yaWdpbmFsOmIsbnVtYmVyczpiLm1hdGNoKGQpP2IubWF0Y2goZCkubWFwKE51bWJlcik6WzBdLHN0cmluZ3M6aC5zdHIoYSl8fGM/Yi5zcGxpdChkKTpbXX19ZnVuY3Rpb24gUChhKXthPWE/cChoLmFycihhKT9hLm1hcChtKTptKGEpKTpbXTtyZXR1cm4gcihhLFxuZnVuY3Rpb24oYSxkLGIpe3JldHVybiBiLmluZGV4T2YoYSk9PT1kfSl9ZnVuY3Rpb24gWihhKXt2YXIgYz1QKGEpO3JldHVybiBjLm1hcChmdW5jdGlvbihhLGIpe3JldHVybnt0YXJnZXQ6YSxpZDpiLHRvdGFsOmMubGVuZ3RofX0pfWZ1bmN0aW9uIGFhKGEsYyl7dmFyIGQ9QyhjKTtpZihoLmFycihhKSl7dmFyIGI9YS5sZW5ndGg7MiE9PWJ8fGgub2JqKGFbMF0pP2guZm5jKGMuZHVyYXRpb24pfHwoZC5kdXJhdGlvbj1jLmR1cmF0aW9uL2IpOmE9e3ZhbHVlOmF9fXJldHVybiBtKGEpLm1hcChmdW5jdGlvbihhLGIpe2I9Yj8wOmMuZGVsYXk7YT1oLm9iaihhKSYmIWgucHRoKGEpP2E6e3ZhbHVlOmF9O2gudW5kKGEuZGVsYXkpJiYoYS5kZWxheT1iKTtyZXR1cm4gYX0pLm1hcChmdW5jdGlvbihhKXtyZXR1cm4geihhLGQpfSl9ZnVuY3Rpb24gYmEoYSxjKXt2YXIgZD17fSxiO2ZvcihiIGluIGEpe3ZhciBmPUkoYVtiXSxjKTtoLmFycihmKSYmKGY9Zi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIEkoYSxcbmMpfSksMT09PWYubGVuZ3RoJiYoZj1mWzBdKSk7ZFtiXT1mfWQuZHVyYXRpb249cGFyc2VGbG9hdChkLmR1cmF0aW9uKTtkLmRlbGF5PXBhcnNlRmxvYXQoZC5kZWxheSk7cmV0dXJuIGR9ZnVuY3Rpb24gY2EoYSl7cmV0dXJuIGguYXJyKGEpP0EuYXBwbHkodGhpcyxhKTpRW2FdfWZ1bmN0aW9uIGRhKGEsYyl7dmFyIGQ7cmV0dXJuIGEudHdlZW5zLm1hcChmdW5jdGlvbihiKXtiPWJhKGIsYyk7dmFyIGY9Yi52YWx1ZSxlPUsoYy50YXJnZXQsYS5uYW1lKSxrPWQ/ZC50by5vcmlnaW5hbDplLGs9aC5hcnIoZik/ZlswXTprLHc9TChoLmFycihmKT9mWzFdOmYsayksZT15KHcpfHx5KGspfHx5KGUpO2IuZnJvbT1PKGssZSk7Yi50bz1PKHcsZSk7Yi5zdGFydD1kP2QuZW5kOmEub2Zmc2V0O2IuZW5kPWIuc3RhcnQrYi5kZWxheStiLmR1cmF0aW9uO2IuZWFzaW5nPWNhKGIuZWFzaW5nKTtiLmVsYXN0aWNpdHk9KDFFMy1NYXRoLm1pbihNYXRoLm1heChiLmVsYXN0aWNpdHksMSksOTk5KSkvXG4xRTM7Yi5pc1BhdGg9aC5wdGgoZik7Yi5pc0NvbG9yPWguY29sKGIuZnJvbS5vcmlnaW5hbCk7Yi5pc0NvbG9yJiYoYi5yb3VuZD0xKTtyZXR1cm4gZD1ifSl9ZnVuY3Rpb24gZWEoYSxjKXtyZXR1cm4gcihwKGEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBjLm1hcChmdW5jdGlvbihiKXt2YXIgYz1KKGEudGFyZ2V0LGIubmFtZSk7aWYoYyl7dmFyIGQ9ZGEoYixhKTtiPXt0eXBlOmMscHJvcGVydHk6Yi5uYW1lLGFuaW1hdGFibGU6YSx0d2VlbnM6ZCxkdXJhdGlvbjpkW2QubGVuZ3RoLTFdLmVuZCxkZWxheTpkWzBdLmRlbGF5fX1lbHNlIGI9dm9pZCAwO3JldHVybiBifSl9KSksZnVuY3Rpb24oYSl7cmV0dXJuIWgudW5kKGEpfSl9ZnVuY3Rpb24gUihhLGMsZCxiKXt2YXIgZj1cImRlbGF5XCI9PT1hO3JldHVybiBjLmxlbmd0aD8oZj9NYXRoLm1pbjpNYXRoLm1heCkuYXBwbHkoTWF0aCxjLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYlthXX0pKTpmP2IuZGVsYXk6ZC5vZmZzZXQrYi5kZWxheStcbmIuZHVyYXRpb259ZnVuY3Rpb24gZmEoYSl7dmFyIGM9RChnYSxhKSxkPUQoUyxhKSxiPVooYS50YXJnZXRzKSxmPVtdLGU9eihjLGQpLGs7Zm9yKGsgaW4gYSllLmhhc093blByb3BlcnR5KGspfHxcInRhcmdldHNcIj09PWt8fGYucHVzaCh7bmFtZTprLG9mZnNldDplLm9mZnNldCx0d2VlbnM6YWEoYVtrXSxkKX0pO2E9ZWEoYixmKTtyZXR1cm4geihjLHtjaGlsZHJlbjpbXSxhbmltYXRhYmxlczpiLGFuaW1hdGlvbnM6YSxkdXJhdGlvbjpSKFwiZHVyYXRpb25cIixhLGMsZCksZGVsYXk6UihcImRlbGF5XCIsYSxjLGQpfSl9ZnVuY3Rpb24gcShhKXtmdW5jdGlvbiBjKCl7cmV0dXJuIHdpbmRvdy5Qcm9taXNlJiZuZXcgUHJvbWlzZShmdW5jdGlvbihhKXtyZXR1cm4gcD1hfSl9ZnVuY3Rpb24gZChhKXtyZXR1cm4gZy5yZXZlcnNlZD9nLmR1cmF0aW9uLWE6YX1mdW5jdGlvbiBiKGEpe2Zvcih2YXIgYj0wLGM9e30sZD1nLmFuaW1hdGlvbnMsZj1kLmxlbmd0aDtiPGY7KXt2YXIgZT1kW2JdLFxuaz1lLmFuaW1hdGFibGUsaD1lLnR3ZWVucyxuPWgubGVuZ3RoLTEsbD1oW25dO24mJihsPXIoaCxmdW5jdGlvbihiKXtyZXR1cm4gYTxiLmVuZH0pWzBdfHxsKTtmb3IodmFyIGg9TWF0aC5taW4oTWF0aC5tYXgoYS1sLnN0YXJ0LWwuZGVsYXksMCksbC5kdXJhdGlvbikvbC5kdXJhdGlvbix3PWlzTmFOKGgpPzE6bC5lYXNpbmcoaCxsLmVsYXN0aWNpdHkpLGg9bC50by5zdHJpbmdzLHA9bC5yb3VuZCxuPVtdLG09dm9pZCAwLG09bC50by5udW1iZXJzLmxlbmd0aCx0PTA7dDxtO3QrKyl7dmFyIHg9dm9pZCAwLHg9bC50by5udW1iZXJzW3RdLHE9bC5mcm9tLm51bWJlcnNbdF0seD1sLmlzUGF0aD9ZKGwudmFsdWUsdyp4KTpxK3cqKHgtcSk7cCYmKGwuaXNDb2xvciYmMjx0fHwoeD1NYXRoLnJvdW5kKHgqcCkvcCkpO24ucHVzaCh4KX1pZihsPWgubGVuZ3RoKWZvcihtPWhbMF0sdz0wO3c8bDt3KyspcD1oW3crMV0sdD1uW3ddLGlzTmFOKHQpfHwobT1wP20rKHQrcCk6bSsodCtcIiBcIikpO1xuZWxzZSBtPW5bMF07aGFbZS50eXBlXShrLnRhcmdldCxlLnByb3BlcnR5LG0sYyxrLmlkKTtlLmN1cnJlbnRWYWx1ZT1tO2IrK31pZihiPU9iamVjdC5rZXlzKGMpLmxlbmd0aClmb3IoZD0wO2Q8YjtkKyspSHx8KEg9RShkb2N1bWVudC5ib2R5LFwidHJhbnNmb3JtXCIpP1widHJhbnNmb3JtXCI6XCItd2Via2l0LXRyYW5zZm9ybVwiKSxnLmFuaW1hdGFibGVzW2RdLnRhcmdldC5zdHlsZVtIXT1jW2RdLmpvaW4oXCIgXCIpO2cuY3VycmVudFRpbWU9YTtnLnByb2dyZXNzPWEvZy5kdXJhdGlvbioxMDB9ZnVuY3Rpb24gZihhKXtpZihnW2FdKWdbYV0oZyl9ZnVuY3Rpb24gZSgpe2cucmVtYWluaW5nJiYhMCE9PWcucmVtYWluaW5nJiZnLnJlbWFpbmluZy0tfWZ1bmN0aW9uIGsoYSl7dmFyIGs9Zy5kdXJhdGlvbixuPWcub2Zmc2V0LHc9bitnLmRlbGF5LHI9Zy5jdXJyZW50VGltZSx4PWcucmV2ZXJzZWQscT1kKGEpO2lmKGcuY2hpbGRyZW4ubGVuZ3RoKXt2YXIgdT1nLmNoaWxkcmVuLHY9dS5sZW5ndGg7XG5pZihxPj1nLmN1cnJlbnRUaW1lKWZvcih2YXIgRz0wO0c8djtHKyspdVtHXS5zZWVrKHEpO2Vsc2UgZm9yKDt2LS07KXVbdl0uc2VlayhxKX1pZihxPj13fHwhaylnLmJlZ2FufHwoZy5iZWdhbj0hMCxmKFwiYmVnaW5cIikpLGYoXCJydW5cIik7aWYocT5uJiZxPGspYihxKTtlbHNlIGlmKHE8PW4mJjAhPT1yJiYoYigwKSx4JiZlKCkpLHE+PWsmJnIhPT1rfHwhayliKGspLHh8fGUoKTtmKFwidXBkYXRlXCIpO2E+PWsmJihnLnJlbWFpbmluZz8odD1oLFwiYWx0ZXJuYXRlXCI9PT1nLmRpcmVjdGlvbiYmKGcucmV2ZXJzZWQ9IWcucmV2ZXJzZWQpKTooZy5wYXVzZSgpLGcuY29tcGxldGVkfHwoZy5jb21wbGV0ZWQ9ITAsZihcImNvbXBsZXRlXCIpLFwiUHJvbWlzZVwiaW4gd2luZG93JiYocCgpLG09YygpKSkpLGw9MCl9YT12b2lkIDA9PT1hP3t9OmE7dmFyIGgsdCxsPTAscD1udWxsLG09YygpLGc9ZmEoYSk7Zy5yZXNldD1mdW5jdGlvbigpe3ZhciBhPWcuZGlyZWN0aW9uLGM9Zy5sb29wO2cuY3VycmVudFRpbWU9XG4wO2cucHJvZ3Jlc3M9MDtnLnBhdXNlZD0hMDtnLmJlZ2FuPSExO2cuY29tcGxldGVkPSExO2cucmV2ZXJzZWQ9XCJyZXZlcnNlXCI9PT1hO2cucmVtYWluaW5nPVwiYWx0ZXJuYXRlXCI9PT1hJiYxPT09Yz8yOmM7YigwKTtmb3IoYT1nLmNoaWxkcmVuLmxlbmd0aDthLS07KWcuY2hpbGRyZW5bYV0ucmVzZXQoKX07Zy50aWNrPWZ1bmN0aW9uKGEpe2g9YTt0fHwodD1oKTtrKChsK2gtdCkqcS5zcGVlZCl9O2cuc2Vlaz1mdW5jdGlvbihhKXtrKGQoYSkpfTtnLnBhdXNlPWZ1bmN0aW9uKCl7dmFyIGE9di5pbmRleE9mKGcpOy0xPGEmJnYuc3BsaWNlKGEsMSk7Zy5wYXVzZWQ9ITB9O2cucGxheT1mdW5jdGlvbigpe2cucGF1c2VkJiYoZy5wYXVzZWQ9ITEsdD0wLGw9ZChnLmN1cnJlbnRUaW1lKSx2LnB1c2goZyksQnx8aWEoKSl9O2cucmV2ZXJzZT1mdW5jdGlvbigpe2cucmV2ZXJzZWQ9IWcucmV2ZXJzZWQ7dD0wO2w9ZChnLmN1cnJlbnRUaW1lKX07Zy5yZXN0YXJ0PWZ1bmN0aW9uKCl7Zy5wYXVzZSgpO1xuZy5yZXNldCgpO2cucGxheSgpfTtnLmZpbmlzaGVkPW07Zy5yZXNldCgpO2cuYXV0b3BsYXkmJmcucGxheSgpO3JldHVybiBnfXZhciBnYT17dXBkYXRlOnZvaWQgMCxiZWdpbjp2b2lkIDAscnVuOnZvaWQgMCxjb21wbGV0ZTp2b2lkIDAsbG9vcDoxLGRpcmVjdGlvbjpcIm5vcm1hbFwiLGF1dG9wbGF5OiEwLG9mZnNldDowfSxTPXtkdXJhdGlvbjoxRTMsZGVsYXk6MCxlYXNpbmc6XCJlYXNlT3V0RWxhc3RpY1wiLGVsYXN0aWNpdHk6NTAwLHJvdW5kOjB9LFc9XCJ0cmFuc2xhdGVYIHRyYW5zbGF0ZVkgdHJhbnNsYXRlWiByb3RhdGUgcm90YXRlWCByb3RhdGVZIHJvdGF0ZVogc2NhbGUgc2NhbGVYIHNjYWxlWSBzY2FsZVogc2tld1ggc2tld1kgcGVyc3BlY3RpdmVcIi5zcGxpdChcIiBcIiksSCxoPXthcnI6ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoYSl9LG9iajpmdW5jdGlvbihhKXtyZXR1cm4tMTxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkuaW5kZXhPZihcIk9iamVjdFwiKX0sXG5wdGg6ZnVuY3Rpb24oYSl7cmV0dXJuIGgub2JqKGEpJiZhLmhhc093blByb3BlcnR5KFwidG90YWxMZW5ndGhcIil9LHN2ZzpmdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIFNWR0VsZW1lbnR9LGRvbTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlVHlwZXx8aC5zdmcoYSl9LHN0cjpmdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF9LGZuYzpmdW5jdGlvbihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYX0sdW5kOmZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYX0saGV4OmZ1bmN0aW9uKGEpe3JldHVybi8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KGEpfSxyZ2I6ZnVuY3Rpb24oYSl7cmV0dXJuL15yZ2IvLnRlc3QoYSl9LGhzbDpmdW5jdGlvbihhKXtyZXR1cm4vXmhzbC8udGVzdChhKX0sY29sOmZ1bmN0aW9uKGEpe3JldHVybiBoLmhleChhKXx8aC5yZ2IoYSl8fGguaHNsKGEpfX0sQT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxcbmQsYil7cmV0dXJuKCgoMS0zKmIrMypkKSphKygzKmItNipkKSkqYSszKmQpKmF9cmV0dXJuIGZ1bmN0aW9uKGMsZCxiLGYpe2lmKDA8PWMmJjE+PWMmJjA8PWImJjE+PWIpe3ZhciBlPW5ldyBGbG9hdDMyQXJyYXkoMTEpO2lmKGMhPT1kfHxiIT09Zilmb3IodmFyIGs9MDsxMT5rOysrayllW2tdPWEoLjEqayxjLGIpO3JldHVybiBmdW5jdGlvbihrKXtpZihjPT09ZCYmYj09PWYpcmV0dXJuIGs7aWYoMD09PWspcmV0dXJuIDA7aWYoMT09PWspcmV0dXJuIDE7Zm9yKHZhciBoPTAsbD0xOzEwIT09bCYmZVtsXTw9azsrK2wpaCs9LjE7LS1sO3ZhciBsPWgrKGstZVtsXSkvKGVbbCsxXS1lW2xdKSouMSxuPTMqKDEtMypiKzMqYykqbCpsKzIqKDMqYi02KmMpKmwrMypjO2lmKC4wMDE8PW4pe2ZvcihoPTA7ND5oOysraCl7bj0zKigxLTMqYiszKmMpKmwqbCsyKigzKmItNipjKSpsKzMqYztpZigwPT09bilicmVhazt2YXIgbT1hKGwsYyxiKS1rLGw9bC1tL259az1sfWVsc2UgaWYoMD09PVxubilrPWw7ZWxzZXt2YXIgbD1oLGg9aCsuMSxnPTA7ZG8gbT1sKyhoLWwpLzIsbj1hKG0sYyxiKS1rLDA8bj9oPW06bD1tO3doaWxlKDFlLTc8TWF0aC5hYnMobikmJjEwPisrZyk7az1tfXJldHVybiBhKGssZCxmKX19fX0oKSxRPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe3JldHVybiAwPT09YXx8MT09PWE/YTotTWF0aC5wb3coMiwxMCooYS0xKSkqTWF0aC5zaW4oMiooYS0xLWIvKDIqTWF0aC5QSSkqTWF0aC5hc2luKDEpKSpNYXRoLlBJL2IpfXZhciBjPVwiUXVhZCBDdWJpYyBRdWFydCBRdWludCBTaW5lIEV4cG8gQ2lyYyBCYWNrIEVsYXN0aWNcIi5zcGxpdChcIiBcIiksZD17SW46W1suNTUsLjA4NSwuNjgsLjUzXSxbLjU1LC4wNTUsLjY3NSwuMTldLFsuODk1LC4wMywuNjg1LC4yMl0sWy43NTUsLjA1LC44NTUsLjA2XSxbLjQ3LDAsLjc0NSwuNzE1XSxbLjk1LC4wNSwuNzk1LC4wMzVdLFsuNiwuMDQsLjk4LC4zMzVdLFsuNiwtLjI4LC43MzUsLjA0NV0sYV0sT3V0OltbLjI1LFxuLjQ2LC40NSwuOTRdLFsuMjE1LC42MSwuMzU1LDFdLFsuMTY1LC44NCwuNDQsMV0sWy4yMywxLC4zMiwxXSxbLjM5LC41NzUsLjU2NSwxXSxbLjE5LDEsLjIyLDFdLFsuMDc1LC44MiwuMTY1LDFdLFsuMTc1LC44ODUsLjMyLDEuMjc1XSxmdW5jdGlvbihiLGMpe3JldHVybiAxLWEoMS1iLGMpfV0sSW5PdXQ6W1suNDU1LC4wMywuNTE1LC45NTVdLFsuNjQ1LC4wNDUsLjM1NSwxXSxbLjc3LDAsLjE3NSwxXSxbLjg2LDAsLjA3LDFdLFsuNDQ1LC4wNSwuNTUsLjk1XSxbMSwwLDAsMV0sWy43ODUsLjEzNSwuMTUsLjg2XSxbLjY4LC0uNTUsLjI2NSwxLjU1XSxmdW5jdGlvbihiLGMpe3JldHVybi41PmI/YSgyKmIsYykvMjoxLWEoLTIqYisyLGMpLzJ9XX0sYj17bGluZWFyOkEoLjI1LC4yNSwuNzUsLjc1KX0sZj17fSxlO2ZvcihlIGluIGQpZi50eXBlPWUsZFtmLnR5cGVdLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGQsZil7YltcImVhc2VcIithLnR5cGUrY1tmXV09aC5mbmMoZCk/XG5kOkEuYXBwbHkoJGpzY29tcCR0aGlzLGQpfX0oZikpLGY9e3R5cGU6Zi50eXBlfTtyZXR1cm4gYn0oKSxoYT17Y3NzOmZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gYS5zdHlsZVtjXT1kfSxhdHRyaWJ1dGU6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBhLnNldEF0dHJpYnV0ZShjLGQpfSxvYmplY3Q6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBhW2NdPWR9LHRyYW5zZm9ybTpmdW5jdGlvbihhLGMsZCxiLGYpe2JbZl18fChiW2ZdPVtdKTtiW2ZdLnB1c2goYytcIihcIitkK1wiKVwiKX19LHY9W10sQj0wLGlhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe0I9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGMpfWZ1bmN0aW9uIGMoYyl7dmFyIGI9di5sZW5ndGg7aWYoYil7Zm9yKHZhciBkPTA7ZDxiOyl2W2RdJiZ2W2RdLnRpY2soYyksZCsrO2EoKX1lbHNlIGNhbmNlbEFuaW1hdGlvbkZyYW1lKEIpLEI9MH1yZXR1cm4gYX0oKTtxLnZlcnNpb249XCIyLjIuMFwiO3Euc3BlZWQ9MTtxLnJ1bm5pbmc9djtxLnJlbW92ZT1cbmZ1bmN0aW9uKGEpe2E9UChhKTtmb3IodmFyIGM9di5sZW5ndGg7Yy0tOylmb3IodmFyIGQ9dltjXSxiPWQuYW5pbWF0aW9ucyxmPWIubGVuZ3RoO2YtLTspdShhLGJbZl0uYW5pbWF0YWJsZS50YXJnZXQpJiYoYi5zcGxpY2UoZiwxKSxiLmxlbmd0aHx8ZC5wYXVzZSgpKX07cS5nZXRWYWx1ZT1LO3EucGF0aD1mdW5jdGlvbihhLGMpe3ZhciBkPWguc3RyKGEpP2UoYSlbMF06YSxiPWN8fDEwMDtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJue2VsOmQscHJvcGVydHk6YSx0b3RhbExlbmd0aDpOKGQpKihiLzEwMCl9fX07cS5zZXREYXNob2Zmc2V0PWZ1bmN0aW9uKGEpe3ZhciBjPU4oYSk7YS5zZXRBdHRyaWJ1dGUoXCJzdHJva2UtZGFzaGFycmF5XCIsYyk7cmV0dXJuIGN9O3EuYmV6aWVyPUE7cS5lYXNpbmdzPVE7cS50aW1lbGluZT1mdW5jdGlvbihhKXt2YXIgYz1xKGEpO2MucGF1c2UoKTtjLmR1cmF0aW9uPTA7Yy5hZGQ9ZnVuY3Rpb24oZCl7Yy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuYmVnYW49XG4hMDthLmNvbXBsZXRlZD0hMH0pO20oZCkuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD16KGIsRChTLGF8fHt9KSk7ZC50YXJnZXRzPWQudGFyZ2V0c3x8YS50YXJnZXRzO2I9Yy5kdXJhdGlvbjt2YXIgZT1kLm9mZnNldDtkLmF1dG9wbGF5PSExO2QuZGlyZWN0aW9uPWMuZGlyZWN0aW9uO2Qub2Zmc2V0PWgudW5kKGUpP2I6TChlLGIpO2MuYmVnYW49ITA7Yy5jb21wbGV0ZWQ9ITA7Yy5zZWVrKGQub2Zmc2V0KTtkPXEoZCk7ZC5iZWdhbj0hMDtkLmNvbXBsZXRlZD0hMDtkLmR1cmF0aW9uPmImJihjLmR1cmF0aW9uPWQuZHVyYXRpb24pO2MuY2hpbGRyZW4ucHVzaChkKX0pO2Muc2VlaygwKTtjLnJlc2V0KCk7Yy5hdXRvcGxheSYmYy5yZXN0YXJ0KCk7cmV0dXJuIGN9O3JldHVybiBjfTtxLnJhbmRvbT1mdW5jdGlvbihhLGMpe3JldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGMtYSsxKSkrYX07cmV0dXJuIHF9KTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMy4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOC0wMS0yMFQxNzoyNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jLCBub2RlICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cdFx0XHRcdGlmICggbm9kZVsgaSBdICkge1xuXHRcdFx0XHRcdHNjcmlwdFsgaSBdID0gbm9kZVsgaSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4zLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYywgbm9kZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM2IHx8IFwiYWJzb2x1dGVcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cdFx0KSApO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94O1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IHZhbHVlSXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiB8fFxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkge1xuXG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdO1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHByb3ZpZGUgYm9yZGVyLWJveCB2YWx1ZXNcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYm94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpID09PSBzdHlsZXMucG9zaXRpb24gKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZmFjZWJvb2tcIjoge1xuICAgICAgICB1cmw6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vdWRpbmVqcycsXG4gICAgICAgIGljb246ICdmYWIgZmEtZmFjZWJvb2stZidcbiAgICB9LFxuICAgIFwidHdpdHRlclwiOiB7XG4gICAgICAgIHVybDogJ2h0dHBzOi8vdHdpdHRlci5jb20vVWRpbmVfSlMnLFxuICAgICAgICBpY29uOiAnZmFiIGZhLXR3aXR0ZXInXG4gICAgfSxcbiAgICBcImluc3RhZ3JhbVwiOiB7XG4gICAgICAgIHVybDogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vdWRpbmVqcycsXG4gICAgICAgIGljb246ICdmYWIgZmEtaW5zdGFncmFtJ1xuICAgIH1cbn0iLCJjb25zdCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5jb25zdCBhbmltZSA9IHJlcXVpcmUoJ2FuaW1lanMnKTtcblxuY29uc3Qgd3JpdGVyICA9IHJlcXVpcmUoJy4vc2NyaXB0cy93cml0ZXInKTtcbmNvbnN0IHNvY2lhbHMgPSByZXF1aXJlKCcuL2RhdGEvc29jaWFscycpO1xuXG5jb25zdCBydW5Mb2dvQW5pbWF0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IGxvZ29fc3F1YXJlID0gYW5pbWUudGltZWxpbmUoe1xuICAgICAgICBhdXRvcGxheTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgbG9nb19zcXVhcmVcbiAgICAuYWRkKHtcbiAgICAgICAgdGFyZ2V0cyAgICAgICAgIDogJy5pY28gcGF0aC5zcXVhcmUnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiBbYW5pbWUuc2V0RGFzaG9mZnNldCwgMF0sXG4gICAgICAgIGVhc2luZyAgICAgICAgICA6ICdlYXNlSW5PdXRTaW5lJyxcbiAgICAgICAgZHVyYXRpb24gICAgICAgIDogMTIwMFxuICAgIH0pLmFkZCh7XG4gICAgICAgIHRhcmdldHMgOiAnLmljbyBwYXRoLnNxdWFyZScsXG4gICAgICAgIGZpbGwgICAgOiAnI2YwZGM0ZicsXG4gICAgICAgIGVhc2luZyAgOiAnZWFzZUluT3V0U2luZScsXG4gICAgICAgIGR1cmF0aW9uOiA4MDBcbiAgICB9KTtcblxuICAgIGNvbnN0IGxvZ29faiA9IGFuaW1lKHtcbiAgICAgICAgdGFyZ2V0cyAgICAgICAgIDogJy5pY28gcGF0aC5qJyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogW2FuaW1lLnNldERhc2hvZmZzZXQsIDBdLFxuICAgICAgICBlYXNpbmcgICAgICAgICAgOiAnZWFzZUluT3V0U2luZScsXG4gICAgICAgIGR1cmF0aW9uICAgICAgICA6IDYwMFxuICAgIH0pO1xuXG4gICAgY29uc3QgbG9nb19zID0gYW5pbWUoe1xuICAgICAgICBkZWxheSAgICAgICAgICAgOiA2MDAsXG4gICAgICAgIHRhcmdldHMgICAgICAgICA6ICcuaWNvIHBhdGgucycsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IFthbmltZS5zZXREYXNob2Zmc2V0LCAwXSxcbiAgICAgICAgZWFzaW5nICAgICAgICAgIDogJ2Vhc2VJbk91dFNpbmUnLFxuICAgICAgICBkdXJhdGlvbiAgICAgICAgOiA2MDAsXG4gICAgfSk7XG59O1xuXG5jb25zdCBhZGRTb2NpYWxzTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICQoJyNzb2NpYWxzLWNvbnRhaW5lcicpLmNoaWxkcmVuKCkuZWFjaCgoaSwgZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oc29jaWFsc1tlbGVtZW50LmlkXS51cmwsICdfYmxhbmsnKTtcbiAgICAgICAgfSwgZmFsc2UpXG4gICAgfSk7XG59O1xuXG5jb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIHJ1bkxvZ29BbmltYXRpb24oKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB3cml0ZXIudGl0bGVzKCk7XG4gICAgfSwgNTAwKTtcblxuICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+PSAxMDApIHtcbiAgICAgICAgICAgICQoJ2Zvb3RlcicpLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVZKDBweCknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxud2luZG93Lm9ubG9hZCA9ICgoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIGFkZFNvY2lhbHNMaXN0ZW5lcnMoKTtcbn0pOyIsImNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcblxubGV0IGxlbiA9IDA7XG5cbmNvbnN0IHdyaXRlID0gKHRhcmdldCwgdGV4dCwgY2IpID0+IHtcbiAgICB0YXJnZXQuaHRtbCh0ZXh0LnN1YnN0cigwLCBsZW4rKykpO1xuICAgIGlmIChsZW4gPCB0ZXh0Lmxlbmd0aCArIDEpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB3cml0ZSh0YXJnZXQsIHRleHQsIGNiKTtcbiAgICAgICAgfSwgTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAyMDApICsgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdGl0bGVzKCkge1xuICAgICAgICB3cml0ZSgkKCcjY292ZXItdGl0bGUnKSwgJ3VkaW5lIGpzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgJCgnI2Rvd24taWNvbicpLmZhZGVJbigpO1xuICAgICAgICAgICAgfSwgMjUwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTsiXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WVc1cGJXVnFjeTloYm1sdFpTNXRhVzR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12YW5GMVpYSjVMMlJwYzNRdmFuRjFaWEo1TG1weklpd2ljM0pqTDJSaGRHRXZjMjlqYVdGc2N5NXFjeUlzSW5OeVl5OXBibVJsZUM1cWN5SXNJbk55WXk5elkzSnBjSFJ6TDNkeWFYUmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTm9RMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRE5XNVZRU3hQUVVGUExFOUJRVkFzUjBGQmFVSTdRVUZEWWl4blFrRkJXVHRCUVVOU0xHRkJRVXNzYTBOQlJFYzdRVUZGVWl4alFVRk5PMEZCUmtVc1MwRkVRenRCUVV0aUxHVkJRVmM3UVVGRFVDeGhRVUZMTERoQ1FVUkZPMEZCUlZBc1kwRkJUVHRCUVVaRExFdEJURVU3UVVGVFlpeHBRa0ZCWVR0QlFVTlVMR0ZCUVVzc2JVTkJSRWs3UVVGRlZDeGpRVUZOTzBGQlJrYzdRVUZVUVN4RFFVRnFRanM3T3pzN1FVTkJRU3hKUVVGTkxFbEJRVWtzVVVGQlVTeFJRVUZTTEVOQlFWWTdRVUZEUVN4SlFVRk5MRkZCUVZFc1VVRkJVU3hUUVVGU0xFTkJRV1E3TzBGQlJVRXNTVUZCVFN4VFFVRlZMRkZCUVZFc2EwSkJRVklzUTBGQmFFSTdRVUZEUVN4SlFVRk5MRlZCUVZVc1VVRkJVU3huUWtGQlVpeERRVUZvUWpzN1FVRkZRU3hKUVVGTkxHMUNRVUZ0UWl4VFFVRnVRaXhuUWtGQmJVSXNSMEZCVFR0QlFVTXpRaXhSUVVGTkxHTkJRV01zVFVGQlRTeFJRVUZPTEVOQlFXVTdRVUZETDBJc2EwSkJRVlU3UVVGRWNVSXNTMEZCWml4RFFVRndRanM3UVVGSlFTeG5Ra0ZEUXl4SFFVUkVMRU5CUTBzN1FVRkRSQ3hwUWtGQmEwSXNhMEpCUkdwQ08wRkJSVVFzTUVKQlFXdENMRU5CUVVNc1RVRkJUU3hoUVVGUUxFVkJRWE5DTEVOQlFYUkNMRU5CUm1wQ08wRkJSMFFzWjBKQlFXdENMR1ZCU0dwQ08wRkJTVVFzYTBKQlFXdENPMEZCU21wQ0xFdEJSRXdzUlVGTlJ5eEhRVTVJTEVOQlRVODdRVUZEU0N4cFFrRkJWU3hyUWtGRVVEdEJRVVZJTEdOQlFWVXNVMEZHVUR0QlFVZElMR2RDUVVGVkxHVkJTRkE3UVVGSlNDeHJRa0ZCVlR0QlFVcFFMRXRCVGxBN08wRkJZVUVzVVVGQlRTeFRRVUZUTEUxQlFVMDdRVUZEYWtJc2FVSkJRV3RDTEdGQlJFUTdRVUZGYWtJc01FSkJRV3RDTEVOQlFVTXNUVUZCVFN4aFFVRlFMRVZCUVhOQ0xFTkJRWFJDTEVOQlJrUTdRVUZIYWtJc1owSkJRV3RDTEdWQlNFUTdRVUZKYWtJc2EwSkJRV3RDTzBGQlNrUXNTMEZCVGl4RFFVRm1PenRCUVU5QkxGRkJRVTBzVTBGQlV5eE5RVUZOTzBGQlEycENMR1ZCUVd0Q0xFZEJSRVE3UVVGRmFrSXNhVUpCUVd0Q0xHRkJSa1E3UVVGSGFrSXNNRUpCUVd0Q0xFTkJRVU1zVFVGQlRTeGhRVUZRTEVWQlFYTkNMRU5CUVhSQ0xFTkJTRVE3UVVGSmFrSXNaMEpCUVd0Q0xHVkJTa1E3UVVGTGFrSXNhMEpCUVd0Q08wRkJURVFzUzBGQlRpeERRVUZtTzBGQlQwZ3NRMEZvUTBRN08wRkJhME5CTEVsQlFVMHNjMEpCUVhOQ0xGTkJRWFJDTEcxQ1FVRnpRaXhIUVVGTk8wRkJRemxDTEUxQlFVVXNiMEpCUVVZc1JVRkJkMElzVVVGQmVFSXNSMEZCYlVNc1NVRkJia01zUTBGQmQwTXNWVUZCUXl4RFFVRkVMRVZCUVVrc1QwRkJTaXhGUVVGblFqdEJRVU53UkN4blFrRkJVU3huUWtGQlVpeERRVUY1UWl4UFFVRjZRaXhGUVVGclF5eFpRVUZOTzBGQlEzQkRMRzFDUVVGUExFbEJRVkFzUTBGQldTeFJRVUZSTEZGQlFWRXNSVUZCYUVJc1JVRkJiMElzUjBGQmFFTXNSVUZCY1VNc1VVRkJja003UVVGRFNDeFRRVVpFTEVWQlJVY3NTMEZHU0R0QlFVZElMRXRCU2tRN1FVRkxTQ3hEUVU1RU96dEJRVkZCTEVsQlFVMHNUMEZCVHl4VFFVRlFMRWxCUVU4c1IwRkJUVHRCUVVObU96dEJRVVZCTEdWQlFWY3NXVUZCV1R0QlFVTnVRaXhsUVVGUExFMUJRVkE3UVVGRFNDeExRVVpFTEVWQlJVY3NSMEZHU0RzN1FVRkpRU3hOUVVGRkxFMUJRVVlzUlVGQlZTeE5RVUZXTEVOQlFXbENMRmxCUVZrN1FVRkRla0lzV1VGQlNTeEZRVUZGTEVsQlFVWXNSVUZCVVN4VFFVRlNMRTFCUVhWQ0xFZEJRVE5DTEVWQlFXZERPMEZCUXpWQ0xHTkJRVVVzVVVGQlJpeEZRVUZaTEVkQlFWb3NRMEZCWjBJN1FVRkRXaXcyUWtGQllUdEJRVVJFTEdGQlFXaENPMEZCUjBnN1FVRkRTaXhMUVU1RU8wRkJUMGdzUTBGa1JEczdRVUZuUWtFc1QwRkJUeXhOUVVGUUxFZEJRV2xDTEZsQlFVMDdRVUZEYmtJN1FVRkRRVHRCUVVOSUxFTkJTRVE3T3pzN08wRkRhRVZCTEVsQlFVMHNTVUZCU1N4UlFVRlJMRkZCUVZJc1EwRkJWanM3UVVGRlFTeEpRVUZKTEUxQlFVMHNRMEZCVmpzN1FVRkZRU3hKUVVGTkxGRkJRVkVzVTBGQlVpeExRVUZSTEVOQlFVTXNUVUZCUkN4RlFVRlRMRWxCUVZRc1JVRkJaU3hGUVVGbUxFVkJRWE5DTzBGQlEyaERMRmRCUVU4c1NVRkJVQ3hEUVVGWkxFdEJRVXNzVFVGQlRDeERRVUZaTEVOQlFWb3NSVUZCWlN4TFFVRm1MRU5CUVZvN1FVRkRRU3hSUVVGSkxFMUJRVTBzUzBGQlN5eE5RVUZNTEVkQlFXTXNRMEZCZUVJc1JVRkJNa0k3UVVGRGRrSXNiVUpCUVZjc1dVRkJUVHRCUVVOaUxHdENRVUZOTEUxQlFVNHNSVUZCWXl4SlFVRmtMRVZCUVc5Q0xFVkJRWEJDTzBGQlEwZ3NVMEZHUkN4RlFVVkhMRXRCUVVzc1NVRkJUQ3hEUVVGVkxFdEJRVXNzVFVGQlRDeExRVUZuUWl4SFFVRXhRaXhKUVVGcFF5eEZRVVp3UXp0QlFVZElMRXRCU2tRc1RVRkpUenRCUVVOSU8wRkJRMGc3UVVGRFNpeERRVlJFT3p0QlFWZEJMRTlCUVU4c1QwRkJVQ3hIUVVGcFFqdEJRVU5pTEZWQlJHRXNiMEpCUTBvN1FVRkRUQ3hqUVVGTkxFVkJRVVVzWTBGQlJpeERRVUZPTEVWQlFYbENMRlZCUVhwQ0xFVkJRWEZETEZsQlFWazdRVUZETjBNc2RVSkJRVmNzV1VGQlRUdEJRVU5pTEd0Q1FVRkZMRmxCUVVZc1JVRkJaMElzVFVGQmFFSTdRVUZEU0N4aFFVWkVMRVZCUlVjc1IwRkdTRHRCUVVkSUxGTkJTa1E3UVVGTFNEdEJRVkJaTEVOQlFXcENJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2lMeXBjYmlBeU1ERTNJRXAxYkdsaGJpQkhZWEp1YVdWeVhHNGdVbVZzWldGelpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCc2FXTmxibk5sWEc0cUwxeHVkbUZ5SUNScWMyTnZiWEE5ZTNOamIzQmxPbnQ5ZlRza2FuTmpiMjF3TG1SbFptbHVaVkJ5YjNCbGNuUjVQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpQMDlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVRwbWRXNWpkR2x2YmlobExISXNjQ2w3YVdZb2NDNW5aWFI4ZkhBdWMyVjBLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRlV6TWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQm5aWFIwWlhKeklHRnVaQ0J6WlhSMFpYSnpMbHdpS1R0bElUMUJjbkpoZVM1d2NtOTBiM1I1Y0dVbUptVWhQVTlpYW1WamRDNXdjbTkwYjNSNWNHVW1KaWhsVzNKZFBYQXVkbUZzZFdVcGZUc2thbk5qYjIxd0xtZGxkRWRzYjJKaGJEMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnZDJsdVpHOTNKaVozYVc1a2IzYzlQVDFsUDJVNlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JR2RzYjJKaGJDWW1iblZzYkNFOVoyeHZZbUZzUDJkc2IySmhiRHBsZlRza2FuTmpiMjF3TG1kc2IySmhiRDBrYW5OamIyMXdMbWRsZEVkc2IySmhiQ2gwYUdsektUc2thbk5qYjIxd0xsTlpUVUpQVEY5UVVrVkdTVmc5WENKcWMyTnZiWEJmYzNsdFltOXNYMXdpTzF4dUpHcHpZMjl0Y0M1cGJtbDBVM2x0WW05c1BXWjFibU4wYVc5dUtDbDdKR3B6WTI5dGNDNXBibWwwVTNsdFltOXNQV1oxYm1OMGFXOXVLQ2w3ZlRza2FuTmpiMjF3TG1kc2IySmhiQzVUZVcxaWIyeDhmQ2drYW5OamIyMXdMbWRzYjJKaGJDNVRlVzFpYjJ3OUpHcHpZMjl0Y0M1VGVXMWliMndwZlRza2FuTmpiMjF3TG5ONWJXSnZiRU52ZFc1MFpYSmZQVEE3SkdwelkyOXRjQzVUZVcxaWIydzlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJQ1JxYzJOdmJYQXVVMWxOUWs5TVgxQlNSVVpKV0Nzb1pYeDhYQ0pjSWlrckpHcHpZMjl0Y0M1emVXMWliMnhEYjNWdWRHVnlYeXNyZlR0Y2JpUnFjMk52YlhBdWFXNXBkRk41YldKdmJFbDBaWEpoZEc5eVBXWjFibU4wYVc5dUtDbDdKR3B6WTI5dGNDNXBibWwwVTNsdFltOXNLQ2s3ZG1GeUlHVTlKR3B6WTI5dGNDNW5iRzlpWVd3dVUzbHRZbTlzTG1sMFpYSmhkRzl5TzJWOGZDaGxQU1JxYzJOdmJYQXVaMnh2WW1Gc0xsTjViV0p2YkM1cGRHVnlZWFJ2Y2owa2FuTmpiMjF3TG1kc2IySmhiQzVUZVcxaWIyd29YQ0pwZEdWeVlYUnZjbHdpS1NrN1hDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdRWEp5WVhrdWNISnZkRzkwZVhCbFcyVmRKaVlrYW5OamIyMXdMbVJsWm1sdVpWQnliM0JsY25SNUtFRnljbUY1TG5CeWIzUnZkSGx3WlN4bExIdGpiMjVtYVdkMWNtRmliR1U2SVRBc2QzSnBkR0ZpYkdVNklUQXNkbUZzZFdVNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z0pHcHpZMjl0Y0M1aGNuSmhlVWwwWlhKaGRHOXlLSFJvYVhNcGZYMHBPeVJxYzJOdmJYQXVhVzVwZEZONWJXSnZiRWwwWlhKaGRHOXlQV1oxYm1OMGFXOXVLQ2w3ZlgwN0pHcHpZMjl0Y0M1aGNuSmhlVWwwWlhKaGRHOXlQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQnlQVEE3Y21WMGRYSnVJQ1JxYzJOdmJYQXVhWFJsY21GMGIzSlFjbTkwYjNSNWNHVW9ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdjanhsTG14bGJtZDBhRDk3Wkc5dVpUb2hNU3gyWVd4MVpUcGxXM0lySzExOU9udGtiMjVsT2lFd2ZYMHBmVHRjYmlScWMyTnZiWEF1YVhSbGNtRjBiM0pRY205MGIzUjVjR1U5Wm5WdVkzUnBiMjRvWlNsN0pHcHpZMjl0Y0M1cGJtbDBVM2x0WW05c1NYUmxjbUYwYjNJb0tUdGxQWHR1WlhoME9tVjlPMlZiSkdwelkyOXRjQzVuYkc5aVlXd3VVM2x0WW05c0xtbDBaWEpoZEc5eVhUMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6ZlR0eVpYUjFjbTRnWlgwN0pHcHpZMjl0Y0M1aGNuSmhlVDBrYW5OamIyMXdMbUZ5Y21GNWZIeDdmVHNrYW5OamIyMXdMbWwwWlhKaGRHOXlSbkp2YlVGeWNtRjVQV1oxYm1OMGFXOXVLR1VzY2lsN0pHcHpZMjl0Y0M1cGJtbDBVM2x0WW05c1NYUmxjbUYwYjNJb0tUdGxJR2x1YzNSaGJtTmxiMllnVTNSeWFXNW5KaVlvWlNzOVhDSmNJaWs3ZG1GeUlIQTlNQ3h0UFh0dVpYaDBPbVoxYm1OMGFXOXVLQ2w3YVdZb2NEeGxMbXhsYm1kMGFDbDdkbUZ5SUhVOWNDc3JPM0psZEhWeWJudDJZV3gxWlRweUtIVXNaVnQxWFNrc1pHOXVaVG9oTVgxOWJTNXVaWGgwUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1ZTJSdmJtVTZJVEFzZG1Gc2RXVTZkbTlwWkNBd2ZYMDdjbVYwZFhKdUlHMHVibVY0ZENncGZYMDdiVnRUZVcxaWIyd3VhWFJsY21GMGIzSmRQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzE5TzNKbGRIVnliaUJ0ZlR0Y2JpUnFjMk52YlhBdWNHOXNlV1pwYkd3OVpuVnVZM1JwYjI0b1pTeHlMSEFzYlNsN2FXWW9jaWw3Y0Qwa2FuTmpiMjF3TG1kc2IySmhiRHRsUFdVdWMzQnNhWFFvWENJdVhDSXBPMlp2Y2lodFBUQTdiVHhsTG14bGJtZDBhQzB4TzIwckt5bDdkbUZ5SUhVOVpWdHRYVHQxSUdsdUlIQjhmQ2h3VzNWZFBYdDlLVHR3UFhCYmRWMTlaVDFsVzJVdWJHVnVaM1JvTFRGZE8yMDljRnRsWFR0eVBYSW9iU2s3Y2lFOWJTWW1iblZzYkNFOWNpWW1KR3B6WTI5dGNDNWtaV1pwYm1WUWNtOXdaWEowZVNod0xHVXNlMk52Ym1acFozVnlZV0pzWlRvaE1DeDNjbWwwWVdKc1pUb2hNQ3gyWVd4MVpUcHlmU2w5ZlRza2FuTmpiMjF3TG5CdmJIbG1hV3hzS0Z3aVFYSnlZWGt1Y0hKdmRHOTBlWEJsTG10bGVYTmNJaXhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlQ5bE9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlDUnFjMk52YlhBdWFYUmxjbUYwYjNKR2NtOXRRWEp5WVhrb2RHaHBjeXhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlgwcGZYMHNYQ0psY3pZdGFXMXdiRndpTEZ3aVpYTXpYQ0lwTzNaaGNpQWthbk5qYjIxd0pIUm9hWE05ZEdocGN6dGNiaWhtZFc1amRHbHZiaWhsTEhJcGUxd2lablZ1WTNScGIyNWNJajA5UFhSNWNHVnZaaUJrWldacGJtVW1KbVJsWm1sdVpTNWhiV1EvWkdWbWFXNWxLRnRkTEhJcE9sd2liMkpxWldOMFhDSTlQVDEwZVhCbGIyWWdiVzlrZFd4bEppWnRiMlIxYkdVdVpYaHdiM0owY3o5dGIyUjFiR1V1Wlhod2IzSjBjejF5S0NrNlpTNWhibWx0WlQxeUtDbDlLU2gwYUdsekxHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdaU2hoS1h0cFppZ2hhQzVqYjJ3b1lTa3BkSEo1ZTNKbGRIVnliaUJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR0VwZldOaGRHTm9LR01wZTMxOVpuVnVZM1JwYjI0Z2NpaGhMR01wZTJadmNpaDJZWElnWkQxaExteGxibWQwYUN4aVBUSThQV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZy9ZWEpuZFcxbGJuUnpXekZkT25admFXUWdNQ3htUFZ0ZExHNDlNRHR1UEdRN2Jpc3JLV2xtS0c0Z2FXNGdZU2w3ZG1GeUlHczlZVnR1WFR0akxtTmhiR3dvWWl4ckxHNHNZU2ttSm1ZdWNIVnphQ2hyS1gxeVpYUjFjbTRnWm4xbWRXNWpkR2x2YmlCd0tHRXBlM0psZEhWeWJpQmhMbkpsWkhWalpTaG1kVzVqZEdsdmJpaGhMR1FwZTNKbGRIVnliaUJoTG1OdmJtTmhkQ2hvTG1GeWNpaGtLVDl3S0dRcE9tUXBmU3hiWFNsOVpuVnVZM1JwYjI0Z2JTaGhLWHRwWmlob0xtRnljaWhoS1NseVpYUjFjbTRnWVR0Y2JtZ3VjM1J5S0dFcEppWW9ZVDFsS0dFcGZIeGhLVHR5WlhSMWNtNGdZU0JwYm5OMFlXNWpaVzltSUU1dlpHVk1hWE4wZkh4aElHbHVjM1JoYm1ObGIyWWdTRlJOVEVOdmJHeGxZM1JwYjI0L1cxMHVjMnhwWTJVdVkyRnNiQ2hoS1RwYllWMTlablZ1WTNScGIyNGdkU2hoTEdNcGUzSmxkSFZ5YmlCaExuTnZiV1VvWm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdFOVBUMWpmU2w5Wm5WdVkzUnBiMjRnUXloaEtYdDJZWElnWXoxN2ZTeGtPMlp2Y2loa0lHbHVJR0VwWTF0a1hUMWhXMlJkTzNKbGRIVnliaUJqZldaMWJtTjBhVzl1SUVRb1lTeGpLWHQyWVhJZ1pEMURLR0VwTEdJN1ptOXlLR0lnYVc0Z1lTbGtXMkpkUFdNdWFHRnpUM2R1VUhKdmNHVnlkSGtvWWlrL1kxdGlYVHBoVzJKZE8zSmxkSFZ5YmlCa2ZXWjFibU4wYVc5dUlIb29ZU3hqS1h0MllYSWdaRDFES0dFcExHSTdabTl5S0dJZ2FXNGdZeWxrVzJKZFBXZ3VkVzVrS0dGYllsMHBQMk5iWWwwNllWdGlYVHR5WlhSMWNtNGdaSDFtZFc1amRHbHZiaUJVS0dFcGUyRTlZUzV5WlhCc1lXTmxLQzllSXo4b1cyRXRabHhjWkYwcEtGdGhMV1pjWEdSZEtTaGJZUzFtWEZ4a1hTa2tMMmtzWm5WdVkzUnBiMjRvWVN4akxHUXNheWw3Y21WMGRYSnVJR01yWXl0a0syUXJheXRyZlNrN2RtRnlJR005TDE0alB5aGJZUzFtWEZ4a1hYc3lmU2tvVzJFdFpseGNaRjE3TW4wcEtGdGhMV1pjWEdSZGV6SjlLU1F2YVM1bGVHVmpLR0VwTzF4dVlUMXdZWEp6WlVsdWRDaGpXekZkTERFMktUdDJZWElnWkQxd1lYSnpaVWx1ZENoald6SmRMREUyS1N4alBYQmhjbk5sU1c1MEtHTmJNMTBzTVRZcE8zSmxkSFZ5Ymx3aWNtZGlZU2hjSWl0aEsxd2lMRndpSzJRclhDSXNYQ0lyWXl0Y0lpd3hLVndpZldaMWJtTjBhVzl1SUZVb1lTbDdablZ1WTNScGIyNGdZeWhoTEdNc1lpbDdNRDVpSmlZb1lpczlNU2s3TVR4aUppWXRMV0k3Y21WMGRYSnVJR0k4TVM4MlAyRXJOaW9vWXkxaEtTcGlPaTQxUG1JL1l6cGlQREl2TXo5aEt5aGpMV0VwS2lneUx6TXRZaWtxTmpwaGZYWmhjaUJrUFM5b2MyeGNYQ2dvWEZ4a0t5a3NYRnh6S2loYlhGeGtMbDByS1NVc1hGeHpLaWhiWEZ4a0xsMHJLU1ZjWENrdlp5NWxlR1ZqS0dFcGZId3ZhSE5zWVZ4Y0tDaGNYR1FyS1N4Y1hITXFLRnRjWEdRdVhTc3BKU3hjWEhNcUtGdGNYR1F1WFNzcEpTeGNYSE1xS0Z0Y1hHUXVYU3NwWEZ3cEwyY3VaWGhsWXloaEtUdGhQWEJoY25ObFNXNTBLR1JiTVYwcEx6TTJNRHQyWVhJZ1lqMXdZWEp6WlVsdWRDaGtXekpkS1M4eE1EQXNaajF3WVhKelpVbHVkQ2hrV3pOZEtTOHhNREFzWkQxa1d6UmRmSHd4TzJsbUtEQTlQV0lwWmoxaVBXRTlaanRsYkhObGUzWmhjaUJ1UFM0MVBtWS9aaW9vTVN0aUtUcG1LMkl0WmlwaUxHczlNaXBtTFc0c1pqMWpLR3NzYml4aEt6RXZNeWtzWWoxaktHc3NiaXhoS1R0aFBXTW9heXh1TEdFdE1TOHpLWDF5WlhSMWNtNWNJbkpuWW1Fb1hDSXJYRzR5TlRVcVppdGNJaXhjSWlzeU5UVXFZaXRjSWl4Y0lpc3lOVFVxWVN0Y0lpeGNJaXRrSzF3aUtWd2lmV1oxYm1OMGFXOXVJSGtvWVNsN2FXWW9ZVDB2S0Z0Y1hDdGNYQzFkUDFzd0xUa2pYRnd1WFNzcEtDVjhjSGg4Y0hSOFpXMThjbVZ0ZkdsdWZHTnRmRzF0ZkdWNGZHTm9mSEJqZkhaM2ZIWm9mSFp0YVc1OGRtMWhlSHhrWldkOGNtRmtmSFIxY200cFB5UXZMbVY0WldNb1lTa3BjbVYwZFhKdUlHRmJNbDE5Wm5WdVkzUnBiMjRnVmloaEtYdHBaaWd0TVR4aExtbHVaR1Y0VDJZb1hDSjBjbUZ1YzJ4aGRHVmNJaWw4ZkZ3aWNHVnljM0JsWTNScGRtVmNJajA5UFdFcGNtVjBkWEp1WENKd2VGd2lPMmxtS0MweFBHRXVhVzVrWlhoUFppaGNJbkp2ZEdGMFpWd2lLWHg4TFRFOFlTNXBibVJsZUU5bUtGd2ljMnRsZDF3aUtTbHlaWFIxY201Y0ltUmxaMXdpZldaMWJtTjBhVzl1SUVrb1lTeGpLWHR5WlhSMWNtNGdhQzVtYm1Nb1lTay9ZU2hqTG5SaGNtZGxkQ3hqTG1sa0xHTXVkRzkwWVd3cE9tRjlablZ1WTNScGIyNGdSU2hoTEdNcGUybG1LR01nYVc0Z1lTNXpkSGxzWlNseVpYUjFjbTRnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2hoS1M1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0dNdWNtVndiR0ZqWlNndktGdGhMWHBkS1NoYlFTMWFYU2t2Wnl4Y0lpUXhMU1F5WENJcExuUnZURzkzWlhKRFlYTmxLQ2twZkh4Y0lqQmNJbjFtZFc1amRHbHZiaUJLS0dFc1l5bDdhV1lvYUM1a2IyMG9ZU2ttSmx4dWRTaFhMR01wS1hKbGRIVnlibHdpZEhKaGJuTm1iM0p0WENJN2FXWW9hQzVrYjIwb1lTa21KaWhoTG1kbGRFRjBkSEpwWW5WMFpTaGpLWHg4YUM1emRtY29ZU2ttSm1GYlkxMHBLWEpsZEhWeWJsd2lZWFIwY21saWRYUmxYQ0k3YVdZb2FDNWtiMjBvWVNrbUpsd2lkSEpoYm5ObWIzSnRYQ0loUFQxakppWkZLR0VzWXlrcGNtVjBkWEp1WENKamMzTmNJanRwWmlodWRXeHNJVDFoVzJOZEtYSmxkSFZ5Ymx3aWIySnFaV04wWENKOVpuVnVZM1JwYjI0Z1dDaGhMR01wZTNaaGNpQmtQVllvWXlrc1pEMHRNVHhqTG1sdVpHVjRUMllvWENKelkyRnNaVndpS1Q4eE9qQXJaRHRoUFdFdWMzUjViR1V1ZEhKaGJuTm1iM0p0TzJsbUtDRmhLWEpsZEhWeWJpQmtPMlp2Y2loMllYSWdZajFiWFN4bVBWdGRMRzQ5VzEwc2F6MHZLRnhjZHlzcFhGd29LQzRyUHlsY1hDa3ZaenRpUFdzdVpYaGxZeWhoS1RzcFppNXdkWE5vS0dKYk1WMHBMRzR1Y0hWemFDaGlXekpkS1R0aFBYSW9iaXhtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCbVcySmRQVDA5WTMwcE8zSmxkSFZ5YmlCaExteGxibWQwYUQ5aFd6QmRPbVI5Wm5WdVkzUnBiMjRnU3loaExHTXBlM04zYVhSamFDaEtLR0VzWXlrcGUyTmhjMlVnWENKMGNtRnVjMlp2Y20xY0lqcHlaWFIxY200Z1dDaGhMR01wTzJOaGMyVWdYQ0pqYzNOY0lqcHlaWFIxY200Z1JTaGhMR01wTzJOaGMyVWdYQ0poZEhSeWFXSjFkR1ZjSWpweVpYUjFjbTRnWVM1blpYUkJkSFJ5YVdKMWRHVW9ZeWw5Y21WMGRYSnVJR0ZiWTExOGZGeHVNSDFtZFc1amRHbHZiaUJNS0dFc1l5bDdkbUZ5SUdROUwxNG9YRndxUFh4Y1hDczlmQzA5S1M4dVpYaGxZeWhoS1R0cFppZ2haQ2x5WlhSMWNtNGdZVHQyWVhJZ1lqMTVLR0VwZkh3d08yTTljR0Z5YzJWR2JHOWhkQ2hqS1R0aFBYQmhjbk5sUm14dllYUW9ZUzV5WlhCc1lXTmxLR1JiTUYwc1hDSmNJaWtwTzNOM2FYUmphQ2hrV3pCZFd6QmRLWHRqWVhObElGd2lLMXdpT25KbGRIVnliaUJqSzJFcllqdGpZWE5sSUZ3aUxWd2lPbkpsZEhWeWJpQmpMV0VyWWp0allYTmxJRndpS2x3aU9uSmxkSFZ5YmlCakttRXJZbjE5Wm5WdVkzUnBiMjRnUmloaExHTXBlM0psZEhWeWJpQk5ZWFJvTG5OeGNuUW9UV0YwYUM1d2IzY29ZeTU0TFdFdWVDd3lLU3ROWVhSb0xuQnZkeWhqTG5rdFlTNTVMRElwS1gxbWRXNWpkR2x2YmlCTktHRXBlMkU5WVM1d2IybHVkSE03Wm05eUtIWmhjaUJqUFRBc1pDeGlQVEE3WWp4aExtNTFiV0psY2s5bVNYUmxiWE03WWlzcktYdDJZWElnWmoxaExtZGxkRWwwWlcwb1lpazdNRHhpSmlZb1l5czlSaWhrTEdZcEtUdGtQV1o5Y21WMGRYSnVJR045Wm5WdVkzUnBiMjRnVGloaEtYdHBaaWhoTG1kbGRGUnZkR0ZzVEdWdVozUm9LWEpsZEhWeWJpQmhMbWRsZEZSdmRHRnNUR1Z1WjNSb0tDazdjM2RwZEdOb0tHRXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwS1h0allYTmxJRndpWTJseVkyeGxYQ0k2Y21WMGRYSnVJRElxWEc1TllYUm9MbEJKS21FdVoyVjBRWFIwY21saWRYUmxLRndpY2x3aUtUdGpZWE5sSUZ3aWNtVmpkRndpT25KbGRIVnliaUF5S21FdVoyVjBRWFIwY21saWRYUmxLRndpZDJsa2RHaGNJaWtyTWlwaExtZGxkRUYwZEhKcFluVjBaU2hjSW1obGFXZG9kRndpS1R0allYTmxJRndpYkdsdVpWd2lPbkpsZEhWeWJpQkdLSHQ0T21FdVoyVjBRWFIwY21saWRYUmxLRndpZURGY0lpa3NlVHBoTG1kbGRFRjBkSEpwWW5WMFpTaGNJbmt4WENJcGZTeDdlRHBoTG1kbGRFRjBkSEpwWW5WMFpTaGNJbmd5WENJcExIazZZUzVuWlhSQmRIUnlhV0oxZEdVb1hDSjVNbHdpS1gwcE8yTmhjMlVnWENKd2IyeDViR2x1WlZ3aU9uSmxkSFZ5YmlCTktHRXBPMk5oYzJVZ1hDSndiMng1WjI5dVhDSTZkbUZ5SUdNOVlTNXdiMmx1ZEhNN2NtVjBkWEp1SUUwb1lTa3JSaWhqTG1kbGRFbDBaVzBvWXk1dWRXMWlaWEpQWmtsMFpXMXpMVEVwTEdNdVoyVjBTWFJsYlNnd0tTbDlmV1oxYm1OMGFXOXVJRmtvWVN4aktYdG1kVzVqZEdsdmJpQmtLR0lwZTJJOWRtOXBaQ0F3UFQwOVlqOHdPbUk3Y21WMGRYSnVJR0V1Wld3dVoyVjBVRzlwYm5SQmRFeGxibWQwYUNneFBEMWpLMkkvWXl0aU9qQXBmWFpoY2lCaVBXUW9LU3htUFdRb0xURXBMRzQ5WkNneEtUdHpkMmwwWTJnb1lTNXdjbTl3WlhKMGVTbDdZMkZ6WlNCY0luaGNJanB5WlhSMWNtNGdZaTU0TzJOaGMyVWdYQ0o1WENJNmNtVjBkWEp1SUdJdWVUdGNibU5oYzJVZ1hDSmhibWRzWlZ3aU9uSmxkSFZ5YmlBeE9EQXFUV0YwYUM1aGRHRnVNaWh1TG5rdFppNTVMRzR1ZUMxbUxuZ3BMMDFoZEdndVVFbDlmV1oxYm1OMGFXOXVJRThvWVN4aktYdDJZWElnWkQwdkxUOWNYR1FxWEZ3dVAxeGNaQ3N2Wnl4aU8ySTlhQzV3ZEdnb1lTay9ZUzUwYjNSaGJFeGxibWQwYURwaE8ybG1LR2d1WTI5c0tHSXBLV2xtS0dndWNtZGlLR0lwS1h0MllYSWdaajB2Y21kaVhGd29LRnhjWkNzc1hGeHpLbHRjWEdSZEt5eGNYSE1xVzF4Y1pGMHJLVnhjS1M5bkxtVjRaV01vWWlrN1lqMW1QMXdpY21kaVlTaGNJaXRtV3pGZEsxd2lMREVwWENJNlluMWxiSE5sSUdJOWFDNW9aWGdvWWlrL1ZDaGlLVHBvTG1oemJDaGlLVDlWS0dJcE9uWnZhV1FnTUR0bGJITmxJR1k5S0dZOWVTaGlLU2svWWk1emRXSnpkSElvTUN4aUxteGxibWQwYUMxbUxteGxibWQwYUNrNllpeGlQV01tSmlFdlhGeHpMMmN1ZEdWemRDaGlLVDltSzJNNlpqdGlLejFjSWx3aU8zSmxkSFZ5Ym50dmNtbG5hVzVoYkRwaUxHNTFiV0psY25NNllpNXRZWFJqYUNoa0tUOWlMbTFoZEdOb0tHUXBMbTFoY0NoT2RXMWlaWElwT2xzd1hTeHpkSEpwYm1kek9tZ3VjM1J5S0dFcGZIeGpQMkl1YzNCc2FYUW9aQ2s2VzExOWZXWjFibU4wYVc5dUlGQW9ZU2w3WVQxaFAzQW9hQzVoY25Jb1lTay9ZUzV0WVhBb2JTazZiU2hoS1NrNlcxMDdjbVYwZFhKdUlISW9ZU3hjYm1aMWJtTjBhVzl1S0dFc1pDeGlLWHR5WlhSMWNtNGdZaTVwYm1SbGVFOW1LR0VwUFQwOVpIMHBmV1oxYm1OMGFXOXVJRm9vWVNsN2RtRnlJR005VUNoaEtUdHlaWFIxY200Z1l5NXRZWEFvWm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY201N2RHRnlaMlYwT21Fc2FXUTZZaXgwYjNSaGJEcGpMbXhsYm1kMGFIMTlLWDFtZFc1amRHbHZiaUJoWVNoaExHTXBlM1poY2lCa1BVTW9ZeWs3YVdZb2FDNWhjbklvWVNrcGUzWmhjaUJpUFdFdWJHVnVaM1JvT3pJaFBUMWlmSHhvTG05aWFpaGhXekJkS1Q5b0xtWnVZeWhqTG1SMWNtRjBhVzl1S1h4OEtHUXVaSFZ5WVhScGIyNDlZeTVrZFhKaGRHbHZiaTlpS1RwaFBYdDJZV3gxWlRwaGZYMXlaWFIxY200Z2JTaGhLUzV0WVhBb1puVnVZM1JwYjI0b1lTeGlLWHRpUFdJL01EcGpMbVJsYkdGNU8yRTlhQzV2WW1vb1lTa21KaUZvTG5CMGFDaGhLVDloT250MllXeDFaVHBoZlR0b0xuVnVaQ2hoTG1SbGJHRjVLU1ltS0dFdVpHVnNZWGs5WWlrN2NtVjBkWEp1SUdGOUtTNXRZWEFvWm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUhvb1lTeGtLWDBwZldaMWJtTjBhVzl1SUdKaEtHRXNZeWw3ZG1GeUlHUTllMzBzWWp0bWIzSW9ZaUJwYmlCaEtYdDJZWElnWmoxSktHRmJZbDBzWXlrN2FDNWhjbklvWmlrbUppaG1QV1l1YldGd0tHWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQkpLR0VzWEc1aktYMHBMREU5UFQxbUxteGxibWQwYUNZbUtHWTlabHN3WFNrcE8yUmJZbDA5Wm4xa0xtUjFjbUYwYVc5dVBYQmhjbk5sUm14dllYUW9aQzVrZFhKaGRHbHZiaWs3WkM1a1pXeGhlVDF3WVhKelpVWnNiMkYwS0dRdVpHVnNZWGtwTzNKbGRIVnliaUJrZldaMWJtTjBhVzl1SUdOaEtHRXBlM0psZEhWeWJpQm9MbUZ5Y2loaEtUOUJMbUZ3Y0d4NUtIUm9hWE1zWVNrNlVWdGhYWDFtZFc1amRHbHZiaUJrWVNoaExHTXBlM1poY2lCa08zSmxkSFZ5YmlCaExuUjNaV1Z1Y3k1dFlYQW9ablZ1WTNScGIyNG9ZaWw3WWoxaVlTaGlMR01wTzNaaGNpQm1QV0l1ZG1Gc2RXVXNaVDFMS0dNdWRHRnlaMlYwTEdFdWJtRnRaU2tzYXoxa1AyUXVkRzh1YjNKcFoybHVZV3c2WlN4clBXZ3VZWEp5S0dZcFAyWmJNRjA2YXl4M1BVd29hQzVoY25Jb1ppay9abHN4WFRwbUxHc3BMR1U5ZVNoM0tYeDhlU2hyS1h4OGVTaGxLVHRpTG1aeWIyMDlUeWhyTEdVcE8ySXVkRzg5VHloM0xHVXBPMkl1YzNSaGNuUTlaRDlrTG1WdVpEcGhMbTltWm5ObGREdGlMbVZ1WkQxaUxuTjBZWEowSzJJdVpHVnNZWGtyWWk1a2RYSmhkR2x2Ymp0aUxtVmhjMmx1WnoxallTaGlMbVZoYzJsdVp5azdZaTVsYkdGemRHbGphWFI1UFNneFJUTXRUV0YwYUM1dGFXNG9UV0YwYUM1dFlYZ29ZaTVsYkdGemRHbGphWFI1TERFcExEazVPU2twTDF4dU1VVXpPMkl1YVhOUVlYUm9QV2d1Y0hSb0tHWXBPMkl1YVhORGIyeHZjajFvTG1OdmJDaGlMbVp5YjIwdWIzSnBaMmx1WVd3cE8ySXVhWE5EYjJ4dmNpWW1LR0l1Y205MWJtUTlNU2s3Y21WMGRYSnVJR1E5WW4wcGZXWjFibU4wYVc5dUlHVmhLR0VzWXlsN2NtVjBkWEp1SUhJb2NDaGhMbTFoY0NobWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1l5NXRZWEFvWm5WdVkzUnBiMjRvWWlsN2RtRnlJR005U2loaExuUmhjbWRsZEN4aUxtNWhiV1VwTzJsbUtHTXBlM1poY2lCa1BXUmhLR0lzWVNrN1lqMTdkSGx3WlRwakxIQnliM0JsY25SNU9tSXVibUZ0WlN4aGJtbHRZWFJoWW14bE9tRXNkSGRsWlc1ek9tUXNaSFZ5WVhScGIyNDZaRnRrTG14bGJtZDBhQzB4WFM1bGJtUXNaR1ZzWVhrNlpGc3dYUzVrWld4aGVYMTlaV3h6WlNCaVBYWnZhV1FnTUR0eVpYUjFjbTRnWW4wcGZTa3BMR1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUZvTG5WdVpDaGhLWDBwZldaMWJtTjBhVzl1SUZJb1lTeGpMR1FzWWlsN2RtRnlJR1k5WENKa1pXeGhlVndpUFQwOVlUdHlaWFIxY200Z1l5NXNaVzVuZEdnL0tHWS9UV0YwYUM1dGFXNDZUV0YwYUM1dFlYZ3BMbUZ3Y0d4NUtFMWhkR2dzWXk1dFlYQW9ablZ1WTNScGIyNG9ZaWw3Y21WMGRYSnVJR0piWVYxOUtTazZaajlpTG1SbGJHRjVPbVF1YjJabWMyVjBLMkl1WkdWc1lYa3JYRzVpTG1SMWNtRjBhVzl1ZldaMWJtTjBhVzl1SUdaaEtHRXBlM1poY2lCalBVUW9aMkVzWVNrc1pEMUVLRk1zWVNrc1lqMWFLR0V1ZEdGeVoyVjBjeWtzWmoxYlhTeGxQWG9vWXl4a0tTeHJPMlp2Y2locklHbHVJR0VwWlM1b1lYTlBkMjVRY205d1pYSjBlU2hyS1h4OFhDSjBZWEpuWlhSelhDSTlQVDFyZkh4bUxuQjFjMmdvZTI1aGJXVTZheXh2Wm1aelpYUTZaUzV2Wm1aelpYUXNkSGRsWlc1ek9tRmhLR0ZiYTEwc1pDbDlLVHRoUFdWaEtHSXNaaWs3Y21WMGRYSnVJSG9vWXl4N1kyaHBiR1J5Wlc0NlcxMHNZVzVwYldGMFlXSnNaWE02WWl4aGJtbHRZWFJwYjI1ek9tRXNaSFZ5WVhScGIyNDZVaWhjSW1SMWNtRjBhVzl1WENJc1lTeGpMR1FwTEdSbGJHRjVPbElvWENKa1pXeGhlVndpTEdFc1l5eGtLWDBwZldaMWJtTjBhVzl1SUhFb1lTbDdablZ1WTNScGIyNGdZeWdwZTNKbGRIVnliaUIzYVc1a2IzY3VVSEp2YldselpTWW1ibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUhBOVlYMHBmV1oxYm1OMGFXOXVJR1FvWVNsN2NtVjBkWEp1SUdjdWNtVjJaWEp6WldRL1p5NWtkWEpoZEdsdmJpMWhPbUY5Wm5WdVkzUnBiMjRnWWloaEtYdG1iM0lvZG1GeUlHSTlNQ3hqUFh0OUxHUTlaeTVoYm1sdFlYUnBiMjV6TEdZOVpDNXNaVzVuZEdnN1lqeG1PeWw3ZG1GeUlHVTlaRnRpWFN4Y2JtczlaUzVoYm1sdFlYUmhZbXhsTEdnOVpTNTBkMlZsYm5Nc2JqMW9MbXhsYm1kMGFDMHhMR3c5YUZ0dVhUdHVKaVlvYkQxeUtHZ3NablZ1WTNScGIyNG9ZaWw3Y21WMGRYSnVJR0U4WWk1bGJtUjlLVnN3WFh4OGJDazdabTl5S0haaGNpQm9QVTFoZEdndWJXbHVLRTFoZEdndWJXRjRLR0V0YkM1emRHRnlkQzFzTG1SbGJHRjVMREFwTEd3dVpIVnlZWFJwYjI0cEwyd3VaSFZ5WVhScGIyNHNkejFwYzA1aFRpaG9LVDh4T213dVpXRnphVzVuS0dnc2JDNWxiR0Z6ZEdsamFYUjVLU3hvUFd3dWRHOHVjM1J5YVc1bmN5eHdQV3d1Y205MWJtUXNiajFiWFN4dFBYWnZhV1FnTUN4dFBXd3VkRzh1Ym5WdFltVnljeTVzWlc1bmRHZ3NkRDB3TzNROGJUdDBLeXNwZTNaaGNpQjRQWFp2YVdRZ01DeDRQV3d1ZEc4dWJuVnRZbVZ5YzF0MFhTeHhQV3d1Wm5KdmJTNXVkVzFpWlhKelczUmRMSGc5YkM1cGMxQmhkR2cvV1Noc0xuWmhiSFZsTEhjcWVDazZjU3QzS2loNExYRXBPM0FtSmloc0xtbHpRMjlzYjNJbUpqSThkSHg4S0hnOVRXRjBhQzV5YjNWdVpDaDRLbkFwTDNBcEtUdHVMbkIxYzJnb2VDbDlhV1lvYkQxb0xteGxibWQwYUNsbWIzSW9iVDFvV3pCZExIYzlNRHQzUEd3N2R5c3JLWEE5YUZ0M0t6RmRMSFE5Ymx0M1hTeHBjMDVoVGloMEtYeDhLRzA5Y0Q5dEt5aDBLM0FwT20wcktIUXJYQ0lnWENJcEtUdGNibVZzYzJVZ2JUMXVXekJkTzJoaFcyVXVkSGx3WlYwb2F5NTBZWEpuWlhRc1pTNXdjbTl3WlhKMGVTeHRMR01zYXk1cFpDazdaUzVqZFhKeVpXNTBWbUZzZFdVOWJUdGlLeXQ5YVdZb1lqMVBZbXBsWTNRdWEyVjVjeWhqS1M1c1pXNW5kR2dwWm05eUtHUTlNRHRrUEdJN1pDc3JLVWg4ZkNoSVBVVW9aRzlqZFcxbGJuUXVZbTlrZVN4Y0luUnlZVzV6Wm05eWJWd2lLVDljSW5SeVlXNXpabTl5YlZ3aU9sd2lMWGRsWW10cGRDMTBjbUZ1YzJadmNtMWNJaWtzWnk1aGJtbHRZWFJoWW14bGMxdGtYUzUwWVhKblpYUXVjM1I1YkdWYlNGMDlZMXRrWFM1cWIybHVLRndpSUZ3aUtUdG5MbU4xY25KbGJuUlVhVzFsUFdFN1p5NXdjbTluY21WemN6MWhMMmN1WkhWeVlYUnBiMjRxTVRBd2ZXWjFibU4wYVc5dUlHWW9ZU2w3YVdZb1oxdGhYU2xuVzJGZEtHY3BmV1oxYm1OMGFXOXVJR1VvS1h0bkxuSmxiV0ZwYm1sdVp5WW1JVEFoUFQxbkxuSmxiV0ZwYm1sdVp5WW1aeTV5WlcxaGFXNXBibWN0TFgxbWRXNWpkR2x2YmlCcktHRXBlM1poY2lCclBXY3VaSFZ5WVhScGIyNHNiajFuTG05bVpuTmxkQ3gzUFc0clp5NWtaV3hoZVN4eVBXY3VZM1Z5Y21WdWRGUnBiV1VzZUQxbkxuSmxkbVZ5YzJWa0xIRTlaQ2hoS1R0cFppaG5MbU5vYVd4a2NtVnVMbXhsYm1kMGFDbDdkbUZ5SUhVOVp5NWphR2xzWkhKbGJpeDJQWFV1YkdWdVozUm9PMXh1YVdZb2NUNDlaeTVqZFhKeVpXNTBWR2x0WlNsbWIzSW9kbUZ5SUVjOU1EdEhQSFk3UnlzcktYVmJSMTB1YzJWbGF5aHhLVHRsYkhObElHWnZjaWc3ZGkwdE95bDFXM1pkTG5ObFpXc29jU2w5YVdZb2NUNDlkM3g4SVdzcFp5NWlaV2RoYm54OEtHY3VZbVZuWVc0OUlUQXNaaWhjSW1KbFoybHVYQ0lwS1N4bUtGd2ljblZ1WENJcE8ybG1LSEUrYmlZbWNUeHJLV0lvY1NrN1pXeHpaU0JwWmloeFBEMXVKaVl3SVQwOWNpWW1LR0lvTUNrc2VDWW1aU2dwS1N4eFBqMXJKaVp5SVQwOWEzeDhJV3NwWWlocktTeDRmSHhsS0NrN1ppaGNJblZ3WkdGMFpWd2lLVHRoUGoxckppWW9aeTV5WlcxaGFXNXBibWMvS0hROWFDeGNJbUZzZEdWeWJtRjBaVndpUFQwOVp5NWthWEpsWTNScGIyNG1KaWhuTG5KbGRtVnljMlZrUFNGbkxuSmxkbVZ5YzJWa0tTazZLR2N1Y0dGMWMyVW9LU3huTG1OdmJYQnNaWFJsWkh4OEtHY3VZMjl0Y0d4bGRHVmtQU0V3TEdZb1hDSmpiMjF3YkdWMFpWd2lLU3hjSWxCeWIyMXBjMlZjSW1sdUlIZHBibVJ2ZHlZbUtIQW9LU3h0UFdNb0tTa3BLU3hzUFRBcGZXRTlkbTlwWkNBd1BUMDlZVDk3ZlRwaE8zWmhjaUJvTEhRc2JEMHdMSEE5Ym5Wc2JDeHRQV01vS1N4blBXWmhLR0VwTzJjdWNtVnpaWFE5Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFuTG1ScGNtVmpkR2x2Yml4alBXY3ViRzl2Y0R0bkxtTjFjbkpsYm5SVWFXMWxQVnh1TUR0bkxuQnliMmR5WlhOelBUQTdaeTV3WVhWelpXUTlJVEE3Wnk1aVpXZGhiajBoTVR0bkxtTnZiWEJzWlhSbFpEMGhNVHRuTG5KbGRtVnljMlZrUFZ3aWNtVjJaWEp6WlZ3aVBUMDlZVHRuTG5KbGJXRnBibWx1WnoxY0ltRnNkR1Z5Ym1GMFpWd2lQVDA5WVNZbU1UMDlQV00vTWpwak8ySW9NQ2s3Wm05eUtHRTlaeTVqYUdsc1pISmxiaTVzWlc1bmRHZzdZUzB0T3lsbkxtTm9hV3hrY21WdVcyRmRMbkpsYzJWMEtDbDlPMmN1ZEdsamF6MW1kVzVqZEdsdmJpaGhLWHRvUFdFN2RIeDhLSFE5YUNrN2F5Z29iQ3RvTFhRcEtuRXVjM0JsWldRcGZUdG5Mbk5sWldzOVpuVnVZM1JwYjI0b1lTbDdheWhrS0dFcEtYMDdaeTV3WVhWelpUMW1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYWXVhVzVrWlhoUFppaG5LVHN0TVR4aEppWjJMbk53YkdsalpTaGhMREVwTzJjdWNHRjFjMlZrUFNFd2ZUdG5MbkJzWVhrOVpuVnVZM1JwYjI0b0tYdG5MbkJoZFhObFpDWW1LR2N1Y0dGMWMyVmtQU0V4TEhROU1DeHNQV1FvWnk1amRYSnlaVzUwVkdsdFpTa3NkaTV3ZFhOb0tHY3BMRUo4ZkdsaEtDa3BmVHRuTG5KbGRtVnljMlU5Wm5WdVkzUnBiMjRvS1h0bkxuSmxkbVZ5YzJWa1BTRm5MbkpsZG1WeWMyVmtPM1E5TUR0c1BXUW9aeTVqZFhKeVpXNTBWR2x0WlNsOU8yY3VjbVZ6ZEdGeWREMW1kVzVqZEdsdmJpZ3BlMmN1Y0dGMWMyVW9LVHRjYm1jdWNtVnpaWFFvS1R0bkxuQnNZWGtvS1gwN1p5NW1hVzVwYzJobFpEMXRPMmN1Y21WelpYUW9LVHRuTG1GMWRHOXdiR0Y1SmlabkxuQnNZWGtvS1R0eVpYUjFjbTRnWjMxMllYSWdaMkU5ZTNWd1pHRjBaVHAyYjJsa0lEQXNZbVZuYVc0NmRtOXBaQ0F3TEhKMWJqcDJiMmxrSURBc1kyOXRjR3hsZEdVNmRtOXBaQ0F3TEd4dmIzQTZNU3hrYVhKbFkzUnBiMjQ2WENKdWIzSnRZV3hjSWl4aGRYUnZjR3hoZVRvaE1DeHZabVp6WlhRNk1IMHNVejE3WkhWeVlYUnBiMjQ2TVVVekxHUmxiR0Y1T2pBc1pXRnphVzVuT2x3aVpXRnpaVTkxZEVWc1lYTjBhV05jSWl4bGJHRnpkR2xqYVhSNU9qVXdNQ3h5YjNWdVpEb3dmU3hYUFZ3aWRISmhibk5zWVhSbFdDQjBjbUZ1YzJ4aGRHVlpJSFJ5WVc1emJHRjBaVm9nY205MFlYUmxJSEp2ZEdGMFpWZ2djbTkwWVhSbFdTQnliM1JoZEdWYUlITmpZV3hsSUhOallXeGxXQ0J6WTJGc1pWa2djMk5oYkdWYUlITnJaWGRZSUhOclpYZFpJSEJsY25Od1pXTjBhWFpsWENJdWMzQnNhWFFvWENJZ1hDSXBMRWdzYUQxN1lYSnlPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHRXBmU3h2WW1vNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUxURThUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0dFcExtbHVaR1Y0VDJZb1hDSlBZbXBsWTNSY0lpbDlMRnh1Y0hSb09tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQm9MbTlpYWloaEtTWW1ZUzVvWVhOUGQyNVFjbTl3WlhKMGVTaGNJblJ2ZEdGc1RHVnVaM1JvWENJcGZTeHpkbWM2Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdFZ2FXNXpkR0Z1WTJWdlppQlRWa2RGYkdWdFpXNTBmU3hrYjIwNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHRXVibTlrWlZSNWNHVjhmR2d1YzNabktHRXBmU3h6ZEhJNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdVhDSnpkSEpwYm1kY0lqMDlQWFI1Y0dWdlppQmhmU3htYm1NNlpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lQVDA5ZEhsd1pXOW1JR0Y5TEhWdVpEcG1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNWNJblZ1WkdWbWFXNWxaRndpUFQwOWRIbHdaVzltSUdGOUxHaGxlRHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTR2S0Y0ald6QXRPVUV0UmwxN05uMGtLWHdvWGlOYk1DMDVRUzFHWFhzemZTUXBMMmt1ZEdWemRDaGhLWDBzY21kaU9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpOWVjbWRpTHk1MFpYTjBLR0VwZlN4b2MydzZablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVMMTVvYzJ3dkxuUmxjM1FvWVNsOUxHTnZiRHBtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnYUM1b1pYZ29ZU2w4ZkdndWNtZGlLR0VwZkh4b0xtaHpiQ2hoS1gxOUxFRTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJoS0dFc1hHNWtMR0lwZTNKbGRIVnliaWdvS0RFdE15cGlLek1xWkNrcVlTc29NeXBpTFRZcVpDa3BLbUVyTXlwa0tTcGhmWEpsZEhWeWJpQm1kVzVqZEdsdmJpaGpMR1FzWWl4bUtYdHBaaWd3UEQxakppWXhQajFqSmlZd1BEMWlKaVl4UGoxaUtYdDJZWElnWlQxdVpYY2dSbXh2WVhRek1rRnljbUY1S0RFeEtUdHBaaWhqSVQwOVpIeDhZaUU5UFdZcFptOXlLSFpoY2lCclBUQTdNVEUrYXpzcksyc3BaVnRyWFQxaEtDNHhLbXNzWXl4aUtUdHlaWFIxY200Z1puVnVZM1JwYjI0b2F5bDdhV1lvWXowOVBXUW1KbUk5UFQxbUtYSmxkSFZ5YmlCck8ybG1LREE5UFQxcktYSmxkSFZ5YmlBd08ybG1LREU5UFQxcktYSmxkSFZ5YmlBeE8yWnZjaWgyWVhJZ2FEMHdMR3c5TVRzeE1DRTlQV3dtSm1WYmJGMDhQV3M3S3l0c0tXZ3JQUzR4T3kwdGJEdDJZWElnYkQxb0t5aHJMV1ZiYkYwcEx5aGxXMndyTVYwdFpWdHNYU2txTGpFc2JqMHpLaWd4TFRNcVlpc3pLbU1wS213cWJDc3lLaWd6S21JdE5pcGpLU3BzS3pNcVl6dHBaaWd1TURBeFBEMXVLWHRtYjNJb2FEMHdPelErYURzcksyZ3BlMjQ5TXlvb01TMHpLbUlyTXlwaktTcHNLbXdyTWlvb015cGlMVFlxWXlrcWJDc3pLbU03YVdZb01EMDlQVzRwWW5KbFlXczdkbUZ5SUcwOVlTaHNMR01zWWlrdGF5eHNQV3d0YlM5dWZXczliSDFsYkhObElHbG1LREE5UFQxY2JtNHBhejFzTzJWc2MyVjdkbUZ5SUd3OWFDeG9QV2dyTGpFc1p6MHdPMlJ2SUcwOWJDc29hQzFzS1M4eUxHNDlZU2h0TEdNc1lpa3RheXd3UEc0L2FEMXRPbXc5YlR0M2FHbHNaU2d4WlMwM1BFMWhkR2d1WVdKektHNHBKaVl4TUQ0cksyY3BPMnM5YlgxeVpYUjFjbTRnWVNockxHUXNaaWw5ZlgxOUtDa3NVVDFtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUdFb1lTeGlLWHR5WlhSMWNtNGdNRDA5UFdGOGZERTlQVDFoUDJFNkxVMWhkR2d1Y0c5M0tESXNNVEFxS0dFdE1Ta3BLazFoZEdndWMybHVLRElxS0dFdE1TMWlMeWd5S2sxaGRHZ3VVRWtwS2sxaGRHZ3VZWE5wYmlneEtTa3FUV0YwYUM1UVNTOWlLWDEyWVhJZ1l6MWNJbEYxWVdRZ1EzVmlhV01nVVhWaGNuUWdVWFZwYm5RZ1UybHVaU0JGZUhCdklFTnBjbU1nUW1GamF5QkZiR0Z6ZEdsalhDSXVjM0JzYVhRb1hDSWdYQ0lwTEdROWUwbHVPbHRiTGpVMUxDNHdPRFVzTGpZNExDNDFNMTBzV3k0MU5Td3VNRFUxTEM0Mk56VXNMakU1WFN4YkxqZzVOU3d1TURNc0xqWTROU3d1TWpKZExGc3VOelUxTEM0d05Td3VPRFUxTEM0d05sMHNXeTQwTnl3d0xDNDNORFVzTGpjeE5WMHNXeTQ1TlN3dU1EVXNMamM1TlN3dU1ETTFYU3hiTGpZc0xqQTBMQzQ1T0N3dU16TTFYU3hiTGpZc0xTNHlPQ3d1TnpNMUxDNHdORFZkTEdGZExFOTFkRHBiV3k0eU5TeGNiaTQwTml3dU5EVXNMamswWFN4YkxqSXhOU3d1TmpFc0xqTTFOU3d4WFN4YkxqRTJOU3d1T0RRc0xqUTBMREZkTEZzdU1qTXNNU3d1TXpJc01WMHNXeTR6T1N3dU5UYzFMQzQxTmpVc01WMHNXeTR4T1N3eExDNHlNaXd4WFN4YkxqQTNOU3d1T0RJc0xqRTJOU3d4WFN4YkxqRTNOU3d1T0RnMUxDNHpNaXd4TGpJM05WMHNablZ1WTNScGIyNG9ZaXhqS1h0eVpYUjFjbTRnTVMxaEtERXRZaXhqS1gxZExFbHVUM1YwT2x0YkxqUTFOU3d1TURNc0xqVXhOU3d1T1RVMVhTeGJMalkwTlN3dU1EUTFMQzR6TlRVc01WMHNXeTQzTnl3d0xDNHhOelVzTVYwc1d5NDROaXd3TEM0d055d3hYU3hiTGpRME5Td3VNRFVzTGpVMUxDNDVOVjBzV3pFc01Dd3dMREZkTEZzdU56ZzFMQzR4TXpVc0xqRTFMQzQ0Tmwwc1d5NDJPQ3d0TGpVMUxDNHlOalVzTVM0MU5WMHNablZ1WTNScGIyNG9ZaXhqS1h0eVpYUjFjbTR1TlQ1aVAyRW9NaXBpTEdNcEx6STZNUzFoS0MweUttSXJNaXhqS1M4eWZWMTlMR0k5ZTJ4cGJtVmhjanBCS0M0eU5Td3VNalVzTGpjMUxDNDNOU2w5TEdZOWUzMHNaVHRtYjNJb1pTQnBiaUJrS1dZdWRIbHdaVDFsTEdSYlppNTBlWEJsWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCbWRXNWpkR2x2Ymloa0xHWXBlMkpiWENKbFlYTmxYQ0lyWVM1MGVYQmxLMk5iWmwxZFBXZ3VabTVqS0dRcFAxeHVaRHBCTG1Gd2NHeDVLQ1JxYzJOdmJYQWtkR2hwY3l4a0tYMTlLR1lwS1N4bVBYdDBlWEJsT21ZdWRIbHdaWDA3Y21WMGRYSnVJR0o5S0Nrc2FHRTllMk56Y3pwbWRXNWpkR2x2YmloaExHTXNaQ2w3Y21WMGRYSnVJR0V1YzNSNWJHVmJZMTA5Wkgwc1lYUjBjbWxpZFhSbE9tWjFibU4wYVc5dUtHRXNZeXhrS1h0eVpYUjFjbTRnWVM1elpYUkJkSFJ5YVdKMWRHVW9ZeXhrS1gwc2IySnFaV04wT21aMWJtTjBhVzl1S0dFc1l5eGtLWHR5WlhSMWNtNGdZVnRqWFQxa2ZTeDBjbUZ1YzJadmNtMDZablZ1WTNScGIyNG9ZU3hqTEdRc1lpeG1LWHRpVzJaZGZId29ZbHRtWFQxYlhTazdZbHRtWFM1d2RYTm9LR01yWENJb1hDSXJaQ3RjSWlsY0lpbDlmU3gyUFZ0ZExFSTlNQ3hwWVQxbWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHRW9LWHRDUFhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTaGpLWDFtZFc1amRHbHZiaUJqS0dNcGUzWmhjaUJpUFhZdWJHVnVaM1JvTzJsbUtHSXBlMlp2Y2loMllYSWdaRDB3TzJROFlqc3BkbHRrWFNZbWRsdGtYUzUwYVdOcktHTXBMR1FyS3p0aEtDbDlaV3h6WlNCallXNWpaV3hCYm1sdFlYUnBiMjVHY21GdFpTaENLU3hDUFRCOWNtVjBkWEp1SUdGOUtDazdjUzUyWlhKemFXOXVQVndpTWk0eUxqQmNJanR4TG5Od1pXVmtQVEU3Y1M1eWRXNXVhVzVuUFhZN2NTNXlaVzF2ZG1VOVhHNW1kVzVqZEdsdmJpaGhLWHRoUFZBb1lTazdabTl5S0haaGNpQmpQWFl1YkdWdVozUm9PMk10TFRzcFptOXlLSFpoY2lCa1BYWmJZMTBzWWoxa0xtRnVhVzFoZEdsdmJuTXNaajFpTG14bGJtZDBhRHRtTFMwN0tYVW9ZU3hpVzJaZExtRnVhVzFoZEdGaWJHVXVkR0Z5WjJWMEtTWW1LR0l1YzNCc2FXTmxLR1lzTVNrc1lpNXNaVzVuZEdoOGZHUXVjR0YxYzJVb0tTbDlPM0V1WjJWMFZtRnNkV1U5U3p0eExuQmhkR2c5Wm5WdVkzUnBiMjRvWVN4aktYdDJZWElnWkQxb0xuTjBjaWhoS1Q5bEtHRXBXekJkT21Fc1lqMWpmSHd4TURBN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5Ym50bGJEcGtMSEJ5YjNCbGNuUjVPbUVzZEc5MFlXeE1aVzVuZEdnNlRpaGtLU29vWWk4eE1EQXBmWDE5TzNFdWMyVjBSR0Z6YUc5bVpuTmxkRDFtZFc1amRHbHZiaWhoS1h0MllYSWdZejFPS0dFcE8yRXVjMlYwUVhSMGNtbGlkWFJsS0Z3aWMzUnliMnRsTFdSaGMyaGhjbkpoZVZ3aUxHTXBPM0psZEhWeWJpQmpmVHR4TG1KbGVtbGxjajFCTzNFdVpXRnphVzVuY3oxUk8zRXVkR2x0Wld4cGJtVTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHTTljU2hoS1R0akxuQmhkWE5sS0NrN1l5NWtkWEpoZEdsdmJqMHdPMk11WVdSa1BXWjFibU4wYVc5dUtHUXBlMk11WTJocGJHUnlaVzR1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhoS1h0aExtSmxaMkZ1UFZ4dUlUQTdZUzVqYjIxd2JHVjBaV1E5SVRCOUtUdHRLR1FwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWWlsN2RtRnlJR1E5ZWloaUxFUW9VeXhoZkh4N2ZTa3BPMlF1ZEdGeVoyVjBjejFrTG5SaGNtZGxkSE44ZkdFdWRHRnlaMlYwY3p0aVBXTXVaSFZ5WVhScGIyNDdkbUZ5SUdVOVpDNXZabVp6WlhRN1pDNWhkWFJ2Y0d4aGVUMGhNVHRrTG1ScGNtVmpkR2x2YmoxakxtUnBjbVZqZEdsdmJqdGtMbTltWm5ObGREMW9MblZ1WkNobEtUOWlPa3dvWlN4aUtUdGpMbUpsWjJGdVBTRXdPMk11WTI5dGNHeGxkR1ZrUFNFd08yTXVjMlZsYXloa0xtOW1abk5sZENrN1pEMXhLR1FwTzJRdVltVm5ZVzQ5SVRBN1pDNWpiMjF3YkdWMFpXUTlJVEE3WkM1a2RYSmhkR2x2Ymo1aUppWW9ZeTVrZFhKaGRHbHZiajFrTG1SMWNtRjBhVzl1S1R0akxtTm9hV3hrY21WdUxuQjFjMmdvWkNsOUtUdGpMbk5sWldzb01DazdZeTV5WlhObGRDZ3BPMk11WVhWMGIzQnNZWGttSm1NdWNtVnpkR0Z5ZENncE8zSmxkSFZ5YmlCamZUdHlaWFIxY200Z1kzMDdjUzV5WVc1a2IyMDlablZ1WTNScGIyNG9ZU3hqS1h0eVpYUjFjbTRnVFdGMGFDNW1iRzl2Y2loTllYUm9MbkpoYm1SdmJTZ3BLaWhqTFdFck1Ta3BLMkY5TzNKbGRIVnliaUJ4ZlNrN0lpd2lMeW9oWEc0Z0tpQnFVWFZsY25rZ1NtRjJZVk5qY21sd2RDQk1hV0p5WVhKNUlIWXpMak11TVZ4dUlDb2dhSFIwY0hNNkx5OXFjWFZsY25rdVkyOXRMMXh1SUNwY2JpQXFJRWx1WTJ4MVpHVnpJRk5wZW5wc1pTNXFjMXh1SUNvZ2FIUjBjSE02THk5emFYcDZiR1ZxY3k1amIyMHZYRzRnS2x4dUlDb2dRMjl3ZVhKcFoyaDBJRXBUSUVadmRXNWtZWFJwYjI0Z1lXNWtJRzkwYUdWeUlHTnZiblJ5YVdKMWRHOXljMXh1SUNvZ1VtVnNaV0Z6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JzYVdObGJuTmxYRzRnS2lCb2RIUndjem92TDJweGRXVnllUzV2Y21jdmJHbGpaVzV6WlZ4dUlDcGNiaUFxSUVSaGRHVTZJREl3TVRndE1ERXRNakJVTVRjNk1qUmFYRzRnS2k5Y2JpZ2dablZ1WTNScGIyNG9JR2RzYjJKaGJDd2dabUZqZEc5eWVTQXBJSHRjYmx4dVhIUmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVYSFJwWmlBb0lIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JRzF2WkhWc1pTNWxlSEJ2Y25SeklEMDlQU0JjSW05aWFtVmpkRndpSUNrZ2UxeHVYRzVjZEZ4MEx5OGdSbTl5SUVOdmJXMXZia3BUSUdGdVpDQkRiMjF0YjI1S1V5MXNhV3RsSUdWdWRtbHliMjV0Wlc1MGN5QjNhR1Z5WlNCaElIQnliM0JsY2lCZ2QybHVaRzkzWUZ4dVhIUmNkQzh2SUdseklIQnlaWE5sYm5Rc0lHVjRaV04xZEdVZ2RHaGxJR1poWTNSdmNua2dZVzVrSUdkbGRDQnFVWFZsY25rdVhHNWNkRngwTHk4Z1JtOXlJR1Z1ZG1seWIyNXRaVzUwY3lCMGFHRjBJR1J2SUc1dmRDQm9ZWFpsSUdFZ1lIZHBibVJ2ZDJBZ2QybDBhQ0JoSUdCa2IyTjFiV1Z1ZEdCY2JseDBYSFF2THlBb2MzVmphQ0JoY3lCT2IyUmxMbXB6S1N3Z1pYaHdiM05sSUdFZ1ptRmpkRzl5ZVNCaGN5QnRiMlIxYkdVdVpYaHdiM0owY3k1Y2JseDBYSFF2THlCVWFHbHpJR0ZqWTJWdWRIVmhkR1Z6SUhSb1pTQnVaV1ZrSUdadmNpQjBhR1VnWTNKbFlYUnBiMjRnYjJZZ1lTQnlaV0ZzSUdCM2FXNWtiM2RnTGx4dVhIUmNkQzh2SUdVdVp5NGdkbUZ5SUdwUmRXVnllU0E5SUhKbGNYVnBjbVVvWENKcWNYVmxjbmxjSWlrb2QybHVaRzkzS1R0Y2JseDBYSFF2THlCVFpXVWdkR2xqYTJWMElDTXhORFUwT1NCbWIzSWdiVzl5WlNCcGJtWnZMbHh1WEhSY2RHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1oyeHZZbUZzTG1SdlkzVnRaVzUwSUQ5Y2JseDBYSFJjZEdaaFkzUnZjbmtvSUdkc2IySmhiQ3dnZEhKMVpTQXBJRHBjYmx4MFhIUmNkR1oxYm1OMGFXOXVLQ0IzSUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUNGM0xtUnZZM1Z0Wlc1MElDa2dlMXh1WEhSY2RGeDBYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWdnWENKcVVYVmxjbmtnY21WeGRXbHlaWE1nWVNCM2FXNWtiM2NnZDJsMGFDQmhJR1J2WTNWdFpXNTBYQ0lnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1ptRmpkRzl5ZVNnZ2R5QXBPMXh1WEhSY2RGeDBmVHRjYmx4MGZTQmxiSE5sSUh0Y2JseDBYSFJtWVdOMGIzSjVLQ0JuYkc5aVlXd2dLVHRjYmx4MGZWeHVYRzR2THlCUVlYTnpJSFJvYVhNZ2FXWWdkMmx1Wkc5M0lHbHpJRzV2ZENCa1pXWnBibVZrSUhsbGRGeHVmU0FwS0NCMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnZDJsdVpHOTNJRG9nZEdocGN5d2dablZ1WTNScGIyNG9JSGRwYm1SdmR5d2dibTlIYkc5aVlXd2dLU0I3WEc1Y2JpOHZJRVZrWjJVZ1BEMGdNVElnTFNBeE15c3NJRVpwY21WbWIzZ2dQRDB4T0NBdElEUTFLeXdnU1VVZ01UQWdMU0F4TVN3Z1UyRm1ZWEpwSURVdU1TQXRJRGtyTENCcFQxTWdOaUF0SURrdU1WeHVMeThnZEdoeWIzY2daWGhqWlhCMGFXOXVjeUIzYUdWdUlHNXZiaTF6ZEhKcFkzUWdZMjlrWlNBb1pTNW5MaXdnUVZOUUxrNUZWQ0EwTGpVcElHRmpZMlZ6YzJWeklITjBjbWxqZENCdGIyUmxYRzR2THlCaGNtZDFiV1Z1ZEhNdVkyRnNiR1ZsTG1OaGJHeGxjaUFvZEhKaFl5MHhNek16TlNrdUlFSjFkQ0JoY3lCdlppQnFVWFZsY25rZ015NHdJQ2d5TURFMktTd2djM1J5YVdOMElHMXZaR1VnYzJodmRXeGtJR0psSUdOdmJXMXZibHh1THk4Z1pXNXZkV2RvSUhSb1lYUWdZV3hzSUhOMVkyZ2dZWFIwWlcxd2RITWdZWEpsSUdkMVlYSmtaV1FnYVc0Z1lTQjBjbmtnWW14dlkyc3VYRzVjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlHRnljaUE5SUZ0ZE8xeHVYRzUyWVhJZ1pHOWpkVzFsYm5RZ1BTQjNhVzVrYjNjdVpHOWpkVzFsYm5RN1hHNWNiblpoY2lCblpYUlFjbTkwYnlBOUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaanRjYmx4dWRtRnlJSE5zYVdObElEMGdZWEp5TG5Oc2FXTmxPMXh1WEc1MllYSWdZMjl1WTJGMElEMGdZWEp5TG1OdmJtTmhkRHRjYmx4dWRtRnlJSEIxYzJnZ1BTQmhjbkl1Y0hWemFEdGNibHh1ZG1GeUlHbHVaR1Y0VDJZZ1BTQmhjbkl1YVc1a1pYaFBaanRjYmx4dWRtRnlJR05zWVhOek1uUjVjR1VnUFNCN2ZUdGNibHh1ZG1GeUlIUnZVM1J5YVc1bklEMGdZMnhoYzNNeWRIbHdaUzUwYjFOMGNtbHVaenRjYmx4dWRtRnlJR2hoYzA5M2JpQTlJR05zWVhOek1uUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzVjYm5aaGNpQm1ibFJ2VTNSeWFXNW5JRDBnYUdGelQzZHVMblJ2VTNSeWFXNW5PMXh1WEc1MllYSWdUMkpxWldOMFJuVnVZM1JwYjI1VGRISnBibWNnUFNCbWJsUnZVM1J5YVc1bkxtTmhiR3dvSUU5aWFtVmpkQ0FwTzF4dVhHNTJZWElnYzNWd2NHOXlkQ0E5SUh0OU8xeHVYRzUyWVhJZ2FYTkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVJR2x6Um5WdVkzUnBiMjRvSUc5aWFpQXBJSHRjYmx4dUlDQWdJQ0FnTHk4Z1UzVndjRzl5ZERvZ1EyaHliMjFsSUR3OU5UY3NJRVpwY21WbWIzZ2dQRDAxTWx4dUlDQWdJQ0FnTHk4Z1NXNGdjMjl0WlNCaWNtOTNjMlZ5Y3l3Z2RIbHdaVzltSUhKbGRIVnlibk1nWENKbWRXNWpkR2x2Ymx3aUlHWnZjaUJJVkUxTUlEeHZZbXBsWTNRK0lHVnNaVzFsYm5SelhHNGdJQ0FnSUNBdkx5QW9hUzVsTGl3Z1lIUjVjR1Z2WmlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ0JjSW05aWFtVmpkRndpSUNrZ1BUMDlJRndpWm5WdVkzUnBiMjVjSW1BcExseHVJQ0FnSUNBZ0x5OGdWMlVnWkc5dUozUWdkMkZ1ZENCMGJ5QmpiR0Z6YzJsbWVTQXFZVzU1S2lCRVQwMGdibTlrWlNCaGN5QmhJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUIwZVhCbGIyWWdiMkpxTG01dlpHVlVlWEJsSUNFOVBTQmNJbTUxYldKbGNsd2lPMXh1SUNCOU8xeHVYRzVjYm5aaGNpQnBjMWRwYm1SdmR5QTlJR1oxYm1OMGFXOXVJR2x6VjJsdVpHOTNLQ0J2WW1vZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUc5aWFpQWhQU0J1ZFd4c0lDWW1JRzlpYWlBOVBUMGdiMkpxTG5kcGJtUnZkenRjYmx4MGZUdGNibHh1WEc1Y2JseHVYSFIyWVhJZ2NISmxjMlZ5ZG1Wa1UyTnlhWEIwUVhSMGNtbGlkWFJsY3lBOUlIdGNibHgwWEhSMGVYQmxPaUIwY25WbExGeHVYSFJjZEhOeVl6b2dkSEoxWlN4Y2JseDBYSFJ1YjAxdlpIVnNaVG9nZEhKMVpWeHVYSFI5TzF4dVhHNWNkR1oxYm1OMGFXOXVJRVJQVFVWMllXd29JR052WkdVc0lHUnZZeXdnYm05a1pTQXBJSHRjYmx4MFhIUmtiMk1nUFNCa2IyTWdmSHdnWkc5amRXMWxiblE3WEc1Y2JseDBYSFIyWVhJZ2FTeGNibHgwWEhSY2RITmpjbWx3ZENBOUlHUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtDQmNJbk5qY21sd2RGd2lJQ2s3WEc1Y2JseDBYSFJ6WTNKcGNIUXVkR1Y0ZENBOUlHTnZaR1U3WEc1Y2RGeDBhV1lnS0NCdWIyUmxJQ2tnZTF4dVhIUmNkRngwWm05eUlDZ2dhU0JwYmlCd2NtVnpaWEoyWldSVFkzSnBjSFJCZEhSeWFXSjFkR1Z6SUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUc1dlpHVmJJR2tnWFNBcElIdGNibHgwWEhSY2RGeDBYSFJ6WTNKcGNIUmJJR2tnWFNBOUlHNXZaR1ZiSUdrZ1hUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwWEhSa2IyTXVhR1ZoWkM1aGNIQmxibVJEYUdsc1pDZ2djMk55YVhCMElDa3VjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNnZ2MyTnlhWEIwSUNrN1hHNWNkSDFjYmx4dVhHNW1kVzVqZEdsdmJpQjBiMVI1Y0dVb0lHOWlhaUFwSUh0Y2JseDBhV1lnS0NCdlltb2dQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUnlaWFIxY200Z2IySnFJQ3NnWENKY0lqdGNibHgwZlZ4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnUEQweUxqTWdiMjVzZVNBb1puVnVZM1JwYjI1cGMyZ2dVbVZuUlhod0tWeHVYSFJ5WlhSMWNtNGdkSGx3Wlc5bUlHOWlhaUE5UFQwZ1hDSnZZbXBsWTNSY0lpQjhmQ0IwZVhCbGIyWWdiMkpxSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUDF4dVhIUmNkR05zWVhOek1uUjVjR1ZiSUhSdlUzUnlhVzVuTG1OaGJHd29JRzlpYWlBcElGMGdmSHdnWENKdlltcGxZM1JjSWlBNlhHNWNkRngwZEhsd1pXOW1JRzlpYWp0Y2JuMWNiaThxSUdkc2IySmhiQ0JUZVcxaWIyd2dLaTljYmk4dklFUmxabWx1YVc1bklIUm9hWE1nWjJ4dlltRnNJR2x1SUM1bGMyeHBiblJ5WXk1cWMyOXVJSGR2ZFd4a0lHTnlaV0YwWlNCaElHUmhibWRsY2lCdlppQjFjMmx1WnlCMGFHVWdaMnh2WW1Gc1hHNHZMeUIxYm1kMVlYSmtaV1FnYVc0Z1lXNXZkR2hsY2lCd2JHRmpaU3dnYVhRZ2MyVmxiWE1nYzJGbVpYSWdkRzhnWkdWbWFXNWxJR2RzYjJKaGJDQnZibXg1SUdadmNpQjBhR2x6SUcxdlpIVnNaVnh1WEc1Y2JseHVkbUZ5WEc1Y2RIWmxjbk5wYjI0Z1BTQmNJak11TXk0eFhDSXNYRzVjYmx4MEx5OGdSR1ZtYVc1bElHRWdiRzlqWVd3Z1kyOXdlU0J2WmlCcVVYVmxjbmxjYmx4MGFsRjFaWEo1SUQwZ1puVnVZM1JwYjI0b0lITmxiR1ZqZEc5eUxDQmpiMjUwWlhoMElDa2dlMXh1WEc1Y2RGeDBMeThnVkdobElHcFJkV1Z5ZVNCdlltcGxZM1FnYVhNZ1lXTjBkV0ZzYkhrZ2FuVnpkQ0IwYUdVZ2FXNXBkQ0JqYjI1emRISjFZM1J2Y2lBblpXNW9ZVzVqWldRblhHNWNkRngwTHk4Z1RtVmxaQ0JwYm1sMElHbG1JR3BSZFdWeWVTQnBjeUJqWVd4c1pXUWdLR3AxYzNRZ1lXeHNiM2NnWlhKeWIzSWdkRzhnWW1VZ2RHaHliM2R1SUdsbUlHNXZkQ0JwYm1Oc2RXUmxaQ2xjYmx4MFhIUnlaWFIxY200Z2JtVjNJR3BSZFdWeWVTNW1iaTVwYm1sMEtDQnpaV3hsWTNSdmNpd2dZMjl1ZEdWNGRDQXBPMXh1WEhSOUxGeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFRnVaSEp2YVdRZ1BEMDBMakFnYjI1c2VWeHVYSFF2THlCTllXdGxJSE4xY21VZ2QyVWdkSEpwYlNCQ1QwMGdZVzVrSUU1Q1UxQmNibHgwY25SeWFXMGdQU0F2WGx0Y1hITmNYSFZHUlVaR1hGeDRRVEJkSzN4YlhGeHpYRngxUmtWR1JseGNlRUV3WFNza0wyYzdYRzVjYm1wUmRXVnllUzVtYmlBOUlHcFJkV1Z5ZVM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzVjYmx4MEx5OGdWR2hsSUdOMWNuSmxiblFnZG1WeWMybHZiaUJ2WmlCcVVYVmxjbmtnWW1WcGJtY2dkWE5sWkZ4dVhIUnFjWFZsY25rNklIWmxjbk5wYjI0c1hHNWNibHgwWTI5dWMzUnlkV04wYjNJNklHcFJkV1Z5ZVN4Y2JseHVYSFF2THlCVWFHVWdaR1ZtWVhWc2RDQnNaVzVuZEdnZ2IyWWdZU0JxVVhWbGNua2diMkpxWldOMElHbHpJREJjYmx4MGJHVnVaM1JvT2lBd0xGeHVYRzVjZEhSdlFYSnlZWGs2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6YkdsalpTNWpZV3hzS0NCMGFHbHpJQ2s3WEc1Y2RIMHNYRzVjYmx4MEx5OGdSMlYwSUhSb1pTQk9kR2dnWld4bGJXVnVkQ0JwYmlCMGFHVWdiV0YwWTJobFpDQmxiR1Z0Wlc1MElITmxkQ0JQVWx4dVhIUXZMeUJIWlhRZ2RHaGxJSGRvYjJ4bElHMWhkR05vWldRZ1pXeGxiV1Z1ZENCelpYUWdZWE1nWVNCamJHVmhiaUJoY25KaGVWeHVYSFJuWlhRNklHWjFibU4wYVc5dUtDQnVkVzBnS1NCN1hHNWNibHgwWEhRdkx5QlNaWFIxY200Z1lXeHNJSFJvWlNCbGJHVnRaVzUwY3lCcGJpQmhJR05zWldGdUlHRnljbUY1WEc1Y2RGeDBhV1lnS0NCdWRXMGdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnpiR2xqWlM1allXeHNLQ0IwYUdseklDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVbVYwZFhKdUlHcDFjM1FnZEdobElHOXVaU0JsYkdWdFpXNTBJR1p5YjIwZ2RHaGxJSE5sZEZ4dVhIUmNkSEpsZEhWeWJpQnVkVzBnUENBd0lEOGdkR2hwYzFzZ2JuVnRJQ3NnZEdocGN5NXNaVzVuZEdnZ1hTQTZJSFJvYVhOYklHNTFiU0JkTzF4dVhIUjlMRnh1WEc1Y2RDOHZJRlJoYTJVZ1lXNGdZWEp5WVhrZ2IyWWdaV3hsYldWdWRITWdZVzVrSUhCMWMyZ2dhWFFnYjI1MGJ5QjBhR1VnYzNSaFkydGNibHgwTHk4Z0tISmxkSFZ5Ym1sdVp5QjBhR1VnYm1WM0lHMWhkR05vWldRZ1pXeGxiV1Z1ZENCelpYUXBYRzVjZEhCMWMyaFRkR0ZqYXpvZ1puVnVZM1JwYjI0b0lHVnNaVzF6SUNrZ2UxeHVYRzVjZEZ4MEx5OGdRblZwYkdRZ1lTQnVaWGNnYWxGMVpYSjVJRzFoZEdOb1pXUWdaV3hsYldWdWRDQnpaWFJjYmx4MFhIUjJZWElnY21WMElEMGdhbEYxWlhKNUxtMWxjbWRsS0NCMGFHbHpMbU52Ym5OMGNuVmpkRzl5S0Nrc0lHVnNaVzF6SUNrN1hHNWNibHgwWEhRdkx5QkJaR1FnZEdobElHOXNaQ0J2WW1wbFkzUWdiMjUwYnlCMGFHVWdjM1JoWTJzZ0tHRnpJR0VnY21WbVpYSmxibU5sS1Z4dVhIUmNkSEpsZEM1d2NtVjJUMkpxWldOMElEMGdkR2hwY3p0Y2JseHVYSFJjZEM4dklGSmxkSFZ5YmlCMGFHVWdibVYzYkhrdFptOXliV1ZrSUdWc1pXMWxiblFnYzJWMFhHNWNkRngwY21WMGRYSnVJSEpsZER0Y2JseDBmU3hjYmx4dVhIUXZMeUJGZUdWamRYUmxJR0VnWTJGc2JHSmhZMnNnWm05eUlHVjJaWEo1SUdWc1pXMWxiblFnYVc0Z2RHaGxJRzFoZEdOb1pXUWdjMlYwTGx4dVhIUmxZV05vT2lCbWRXNWpkR2x2YmlnZ1kyRnNiR0poWTJzZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdwUmRXVnllUzVsWVdOb0tDQjBhR2x6TENCallXeHNZbUZqYXlBcE8xeHVYSFI5TEZ4dVhHNWNkRzFoY0RvZ1puVnVZM1JwYjI0b0lHTmhiR3hpWVdOcklDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbkIxYzJoVGRHRmpheWdnYWxGMVpYSjVMbTFoY0NnZ2RHaHBjeXdnWm5WdVkzUnBiMjRvSUdWc1pXMHNJR2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWTJGc2JHSmhZMnN1WTJGc2JDZ2daV3hsYlN3Z2FTd2daV3hsYlNBcE8xeHVYSFJjZEgwZ0tTQXBPMXh1WEhSOUxGeHVYRzVjZEhOc2FXTmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lITnNhV05sTG1Gd2NHeDVLQ0IwYUdsekxDQmhjbWQxYldWdWRITWdLU0FwTzF4dVhIUjlMRnh1WEc1Y2RHWnBjbk4wT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxjU2dnTUNBcE8xeHVYSFI5TEZ4dVhHNWNkR3hoYzNRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZ4S0NBdE1TQXBPMXh1WEhSOUxGeHVYRzVjZEdWeE9pQm1kVzVqZEdsdmJpZ2dhU0FwSUh0Y2JseDBYSFIyWVhJZ2JHVnVJRDBnZEdocGN5NXNaVzVuZEdnc1hHNWNkRngwWEhScUlEMGdLMmtnS3lBb0lHa2dQQ0F3SUQ4Z2JHVnVJRG9nTUNBcE8xeHVYSFJjZEhKbGRIVnliaUIwYUdsekxuQjFjMmhUZEdGamF5Z2dhaUErUFNBd0lDWW1JR29nUENCc1pXNGdQeUJiSUhSb2FYTmJJR29nWFNCZElEb2dXMTBnS1R0Y2JseDBmU3hjYmx4dVhIUmxibVE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxuQnlaWFpQWW1wbFkzUWdmSHdnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWdwTzF4dVhIUjlMRnh1WEc1Y2RDOHZJRVp2Y2lCcGJuUmxjbTVoYkNCMWMyVWdiMjVzZVM1Y2JseDBMeThnUW1Wb1lYWmxjeUJzYVd0bElHRnVJRUZ5Y21GNUozTWdiV1YwYUc5a0xDQnViM1FnYkdsclpTQmhJR3BSZFdWeWVTQnRaWFJvYjJRdVhHNWNkSEIxYzJnNklIQjFjMmdzWEc1Y2RITnZjblE2SUdGeWNpNXpiM0owTEZ4dVhIUnpjR3hwWTJVNklHRnljaTV6Y0d4cFkyVmNibjA3WEc1Y2JtcFJkV1Z5ZVM1bGVIUmxibVFnUFNCcVVYVmxjbmt1Wm00dVpYaDBaVzVrSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEhaaGNpQnZjSFJwYjI1ekxDQnVZVzFsTENCemNtTXNJR052Y0hrc0lHTnZjSGxKYzBGeWNtRjVMQ0JqYkc5dVpTeGNibHgwWEhSMFlYSm5aWFFnUFNCaGNtZDFiV1Z1ZEhOYklEQWdYU0I4ZkNCN2ZTeGNibHgwWEhScElEMGdNU3hjYmx4MFhIUnNaVzVuZEdnZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0xGeHVYSFJjZEdSbFpYQWdQU0JtWVd4elpUdGNibHh1WEhRdkx5QklZVzVrYkdVZ1lTQmtaV1Z3SUdOdmNIa2djMmwwZFdGMGFXOXVYRzVjZEdsbUlDZ2dkSGx3Wlc5bUlIUmhjbWRsZENBOVBUMGdYQ0ppYjI5c1pXRnVYQ0lnS1NCN1hHNWNkRngwWkdWbGNDQTlJSFJoY21kbGREdGNibHh1WEhSY2RDOHZJRk5yYVhBZ2RHaGxJR0p2YjJ4bFlXNGdZVzVrSUhSb1pTQjBZWEpuWlhSY2JseDBYSFIwWVhKblpYUWdQU0JoY21kMWJXVnVkSE5iSUdrZ1hTQjhmQ0I3ZlR0Y2JseDBYSFJwS3lzN1hHNWNkSDFjYmx4dVhIUXZMeUJJWVc1a2JHVWdZMkZ6WlNCM2FHVnVJSFJoY21kbGRDQnBjeUJoSUhOMGNtbHVaeUJ2Y2lCemIyMWxkR2hwYm1jZ0tIQnZjM05wWW14bElHbHVJR1JsWlhBZ1kyOXdlU2xjYmx4MGFXWWdLQ0IwZVhCbGIyWWdkR0Z5WjJWMElDRTlQU0JjSW05aWFtVmpkRndpSUNZbUlDRnBjMFoxYm1OMGFXOXVLQ0IwWVhKblpYUWdLU0FwSUh0Y2JseDBYSFIwWVhKblpYUWdQU0I3ZlR0Y2JseDBmVnh1WEc1Y2RDOHZJRVY0ZEdWdVpDQnFVWFZsY25rZ2FYUnpaV3htSUdsbUlHOXViSGtnYjI1bElHRnlaM1Z0Wlc1MElHbHpJSEJoYzNObFpGeHVYSFJwWmlBb0lHa2dQVDA5SUd4bGJtZDBhQ0FwSUh0Y2JseDBYSFIwWVhKblpYUWdQU0IwYUdsek8xeHVYSFJjZEdrdExUdGNibHgwZlZ4dVhHNWNkR1p2Y2lBb0lEc2dhU0E4SUd4bGJtZDBhRHNnYVNzcklDa2dlMXh1WEc1Y2RGeDBMeThnVDI1c2VTQmtaV0ZzSUhkcGRHZ2dibTl1TFc1MWJHd3ZkVzVrWldacGJtVmtJSFpoYkhWbGMxeHVYSFJjZEdsbUlDZ2dLQ0J2Y0hScGIyNXpJRDBnWVhKbmRXMWxiblJ6V3lCcElGMGdLU0FoUFNCdWRXeHNJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkZlSFJsYm1RZ2RHaGxJR0poYzJVZ2IySnFaV04wWEc1Y2RGeDBYSFJtYjNJZ0tDQnVZVzFsSUdsdUlHOXdkR2x2Ym5NZ0tTQjdYRzVjZEZ4MFhIUmNkSE55WXlBOUlIUmhjbWRsZEZzZ2JtRnRaU0JkTzF4dVhIUmNkRngwWEhSamIzQjVJRDBnYjNCMGFXOXVjMXNnYm1GdFpTQmRPMXh1WEc1Y2RGeDBYSFJjZEM4dklGQnlaWFpsYm5RZ2JtVjJaWEl0Wlc1a2FXNW5JR3h2YjNCY2JseDBYSFJjZEZ4MGFXWWdLQ0IwWVhKblpYUWdQVDA5SUdOdmNIa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFkyOXVkR2x1ZFdVN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCU1pXTjFjbk5sSUdsbUlIZGxKM0psSUcxbGNtZHBibWNnY0d4aGFXNGdiMkpxWldOMGN5QnZjaUJoY25KaGVYTmNibHgwWEhSY2RGeDBhV1lnS0NCa1pXVndJQ1ltSUdOdmNIa2dKaVlnS0NCcVVYVmxjbmt1YVhOUWJHRnBiazlpYW1WamRDZ2dZMjl3ZVNBcElIeDhYRzVjZEZ4MFhIUmNkRngwS0NCamIzQjVTWE5CY25KaGVTQTlJRUZ5Y21GNUxtbHpRWEp5WVhrb0lHTnZjSGtnS1NBcElDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUdOdmNIbEpjMEZ5Y21GNUlDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFkyOXdlVWx6UVhKeVlYa2dQU0JtWVd4elpUdGNibHgwWEhSY2RGeDBYSFJjZEdOc2IyNWxJRDBnYzNKaklDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb0lITnlZeUFwSUQ4Z2MzSmpJRG9nVzEwN1hHNWNibHgwWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEZ4MFkyeHZibVVnUFNCemNtTWdKaVlnYWxGMVpYSjVMbWx6VUd4aGFXNVBZbXBsWTNRb0lITnlZeUFwSUQ4Z2MzSmpJRG9nZTMwN1hHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdUbVYyWlhJZ2JXOTJaU0J2Y21sbmFXNWhiQ0J2WW1wbFkzUnpMQ0JqYkc5dVpTQjBhR1Z0WEc1Y2RGeDBYSFJjZEZ4MGRHRnlaMlYwV3lCdVlXMWxJRjBnUFNCcVVYVmxjbmt1WlhoMFpXNWtLQ0JrWldWd0xDQmpiRzl1WlN3Z1kyOXdlU0FwTzF4dVhHNWNkRngwWEhSY2RDOHZJRVJ2YmlkMElHSnlhVzVuSUdsdUlIVnVaR1ZtYVc1bFpDQjJZV3gxWlhOY2JseDBYSFJjZEZ4MGZTQmxiSE5sSUdsbUlDZ2dZMjl3ZVNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhIUmNkRngwWEhSY2RIUmhjbWRsZEZzZ2JtRnRaU0JkSUQwZ1kyOXdlVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4dklGSmxkSFZ5YmlCMGFHVWdiVzlrYVdacFpXUWdiMkpxWldOMFhHNWNkSEpsZEhWeWJpQjBZWEpuWlhRN1hHNTlPMXh1WEc1cVVYVmxjbmt1WlhoMFpXNWtLQ0I3WEc1Y2JseDBMeThnVlc1cGNYVmxJR1p2Y2lCbFlXTm9JR052Y0hrZ2IyWWdhbEYxWlhKNUlHOXVJSFJvWlNCd1lXZGxYRzVjZEdWNGNHRnVaRzg2SUZ3aWFsRjFaWEo1WENJZ0t5QW9JSFpsY25OcGIyNGdLeUJOWVhSb0xuSmhibVJ2YlNncElDa3VjbVZ3YkdGalpTZ2dMMXhjUkM5bkxDQmNJbHdpSUNrc1hHNWNibHgwTHk4Z1FYTnpkVzFsSUdwUmRXVnllU0JwY3lCeVpXRmtlU0IzYVhSb2IzVjBJSFJvWlNCeVpXRmtlU0J0YjJSMWJHVmNibHgwYVhOU1pXRmtlVG9nZEhKMVpTeGNibHh1WEhSbGNuSnZjam9nWm5WdVkzUnBiMjRvSUcxelp5QXBJSHRjYmx4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lHMXpaeUFwTzF4dVhIUjlMRnh1WEc1Y2RHNXZiM0E2SUdaMWJtTjBhVzl1S0NrZ2UzMHNYRzVjYmx4MGFYTlFiR0ZwYms5aWFtVmpkRG9nWm5WdVkzUnBiMjRvSUc5aWFpQXBJSHRjYmx4MFhIUjJZWElnY0hKdmRHOHNJRU4wYjNJN1hHNWNibHgwWEhRdkx5QkVaWFJsWTNRZ2IySjJhVzkxY3lCdVpXZGhkR2wyWlhOY2JseDBYSFF2THlCVmMyVWdkRzlUZEhKcGJtY2dhVzV6ZEdWaFpDQnZaaUJxVVhWbGNua3VkSGx3WlNCMGJ5QmpZWFJqYUNCb2IzTjBJRzlpYW1WamRITmNibHgwWEhScFppQW9JQ0Z2WW1vZ2ZId2dkRzlUZEhKcGJtY3VZMkZzYkNnZ2IySnFJQ2tnSVQwOUlGd2lXMjlpYW1WamRDQlBZbXBsWTNSZFhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwZlZ4dVhHNWNkRngwY0hKdmRHOGdQU0JuWlhSUWNtOTBieWdnYjJKcUlDazdYRzVjYmx4MFhIUXZMeUJQWW1wbFkzUnpJSGRwZEdnZ2JtOGdjSEp2ZEc5MGVYQmxJQ2hsTG1jdUxDQmdUMkpxWldOMExtTnlaV0YwWlNnZ2JuVnNiQ0FwWUNrZ1lYSmxJSEJzWVdsdVhHNWNkRngwYVdZZ0tDQWhjSEp2ZEc4Z0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJQWW1wbFkzUnpJSGRwZEdnZ2NISnZkRzkwZVhCbElHRnlaU0J3YkdGcGJpQnBabVlnZEdobGVTQjNaWEpsSUdOdmJuTjBjblZqZEdWa0lHSjVJR0VnWjJ4dlltRnNJRTlpYW1WamRDQm1kVzVqZEdsdmJseHVYSFJjZEVOMGIzSWdQU0JvWVhOUGQyNHVZMkZzYkNnZ2NISnZkRzhzSUZ3aVkyOXVjM1J5ZFdOMGIzSmNJaUFwSUNZbUlIQnliM1J2TG1OdmJuTjBjblZqZEc5eU8xeHVYSFJjZEhKbGRIVnliaUIwZVhCbGIyWWdRM1J2Y2lBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHWnVWRzlUZEhKcGJtY3VZMkZzYkNnZ1EzUnZjaUFwSUQwOVBTQlBZbXBsWTNSR2RXNWpkR2x2YmxOMGNtbHVaenRjYmx4MGZTeGNibHh1WEhScGMwVnRjSFI1VDJKcVpXTjBPaUJtZFc1amRHbHZiaWdnYjJKcUlDa2dlMXh1WEc1Y2RGeDBMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0ZFc1MWMyVmtMWFpoY25NZ0tpOWNibHgwWEhRdkx5QlRaV1VnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJWemJHbHVkQzlsYzJ4cGJuUXZhWE56ZFdWekx6WXhNalZjYmx4MFhIUjJZWElnYm1GdFpUdGNibHh1WEhSY2RHWnZjaUFvSUc1aGJXVWdhVzRnYjJKcUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MGZTeGNibHh1WEhRdkx5QkZkbUZzZFdGMFpYTWdZU0J6WTNKcGNIUWdhVzRnWVNCbmJHOWlZV3dnWTI5dWRHVjRkRnh1WEhSbmJHOWlZV3hGZG1Gc09pQm1kVzVqZEdsdmJpZ2dZMjlrWlNBcElIdGNibHgwWEhSRVQwMUZkbUZzS0NCamIyUmxJQ2s3WEc1Y2RIMHNYRzVjYmx4MFpXRmphRG9nWm5WdVkzUnBiMjRvSUc5aWFpd2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBkbUZ5SUd4bGJtZDBhQ3dnYVNBOUlEQTdYRzVjYmx4MFhIUnBaaUFvSUdselFYSnlZWGxNYVd0bEtDQnZZbW9nS1NBcElIdGNibHgwWEhSY2RHeGxibWQwYUNBOUlHOWlhaTVzWlc1bmRHZzdYRzVjZEZ4MFhIUm1iM0lnS0NBN0lHa2dQQ0JzWlc1bmRHZzdJR2tyS3lBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NCallXeHNZbUZqYXk1allXeHNLQ0J2WW1wYklHa2dYU3dnYVN3Z2IySnFXeUJwSUYwZ0tTQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBabTl5SUNnZ2FTQnBiaUJ2WW1vZ0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ1kyRnNiR0poWTJzdVkyRnNiQ2dnYjJKcVd5QnBJRjBzSUdrc0lHOWlhbHNnYVNCZElDa2dQVDA5SUdaaGJITmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJRzlpYWp0Y2JseDBmU3hjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJCYm1SeWIybGtJRHc5TkM0d0lHOXViSGxjYmx4MGRISnBiVG9nWm5WdVkzUnBiMjRvSUhSbGVIUWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUmxlSFFnUFQwZ2JuVnNiQ0EvWEc1Y2RGeDBYSFJjSWx3aUlEcGNibHgwWEhSY2RDZ2dkR1Y0ZENBcklGd2lYQ0lnS1M1eVpYQnNZV05sS0NCeWRISnBiU3dnWENKY0lpQXBPMXh1WEhSOUxGeHVYRzVjZEM4dklISmxjM1ZzZEhNZ2FYTWdabTl5SUdsdWRHVnlibUZzSUhWellXZGxJRzl1YkhsY2JseDBiV0ZyWlVGeWNtRjVPaUJtZFc1amRHbHZiaWdnWVhKeUxDQnlaWE4xYkhSeklDa2dlMXh1WEhSY2RIWmhjaUJ5WlhRZ1BTQnlaWE4xYkhSeklIeDhJRnRkTzF4dVhHNWNkRngwYVdZZ0tDQmhjbklnSVQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dhWE5CY25KaGVVeHBhMlVvSUU5aWFtVmpkQ2dnWVhKeUlDa2dLU0FwSUh0Y2JseDBYSFJjZEZ4MGFsRjFaWEo1TG0xbGNtZGxLQ0J5WlhRc1hHNWNkRngwWEhSY2RGeDBkSGx3Wlc5bUlHRnljaUE5UFQwZ1hDSnpkSEpwYm1kY0lpQS9YRzVjZEZ4MFhIUmNkRngwV3lCaGNuSWdYU0E2SUdGeWNseHVYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBjSFZ6YUM1allXeHNLQ0J5WlhRc0lHRnljaUFwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RIMHNYRzVjYmx4MGFXNUJjbkpoZVRvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdGeWNpd2dhU0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdZWEp5SUQwOUlHNTFiR3dnUHlBdE1TQTZJR2x1WkdWNFQyWXVZMkZzYkNnZ1lYSnlMQ0JsYkdWdExDQnBJQ2s3WEc1Y2RIMHNYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2dRVzVrY205cFpDQThQVFF1TUNCdmJteDVMQ0JRYUdGdWRHOXRTbE1nTVNCdmJteDVYRzVjZEM4dklIQjFjMmd1WVhCd2JIa29YeXdnWVhKeVlYbHNhV3RsS1NCMGFISnZkM01nYjI0Z1lXNWphV1Z1ZENCWFpXSkxhWFJjYmx4MGJXVnlaMlU2SUdaMWJtTjBhVzl1S0NCbWFYSnpkQ3dnYzJWamIyNWtJQ2tnZTF4dVhIUmNkSFpoY2lCc1pXNGdQU0FyYzJWamIyNWtMbXhsYm1kMGFDeGNibHgwWEhSY2RHb2dQU0F3TEZ4dVhIUmNkRngwYVNBOUlHWnBjbk4wTG14bGJtZDBhRHRjYmx4dVhIUmNkR1p2Y2lBb0lEc2dhaUE4SUd4bGJqc2dhaXNySUNrZ2UxeHVYSFJjZEZ4MFptbHljM1JiSUdrckt5QmRJRDBnYzJWamIyNWtXeUJxSUYwN1hHNWNkRngwZlZ4dVhHNWNkRngwWm1seWMzUXViR1Z1WjNSb0lEMGdhVHRjYmx4dVhIUmNkSEpsZEhWeWJpQm1hWEp6ZER0Y2JseDBmU3hjYmx4dVhIUm5jbVZ3T2lCbWRXNWpkR2x2YmlnZ1pXeGxiWE1zSUdOaGJHeGlZV05yTENCcGJuWmxjblFnS1NCN1hHNWNkRngwZG1GeUlHTmhiR3hpWVdOclNXNTJaWEp6WlN4Y2JseDBYSFJjZEcxaGRHTm9aWE1nUFNCYlhTeGNibHgwWEhSY2RHa2dQU0F3TEZ4dVhIUmNkRngwYkdWdVozUm9JRDBnWld4bGJYTXViR1Z1WjNSb0xGeHVYSFJjZEZ4MFkyRnNiR0poWTJ0RmVIQmxZM1FnUFNBaGFXNTJaWEowTzF4dVhHNWNkRngwTHk4Z1IyOGdkR2h5YjNWbmFDQjBhR1VnWVhKeVlYa3NJRzl1YkhrZ2MyRjJhVzVuSUhSb1pTQnBkR1Z0YzF4dVhIUmNkQzh2SUhSb1lYUWdjR0Z6Y3lCMGFHVWdkbUZzYVdSaGRHOXlJR1oxYm1OMGFXOXVYRzVjZEZ4MFptOXlJQ2dnT3lCcElEd2diR1Z1WjNSb095QnBLeXNnS1NCN1hHNWNkRngwWEhSallXeHNZbUZqYTBsdWRtVnljMlVnUFNBaFkyRnNiR0poWTJzb0lHVnNaVzF6V3lCcElGMHNJR2tnS1R0Y2JseDBYSFJjZEdsbUlDZ2dZMkZzYkdKaFkydEpiblpsY25ObElDRTlQU0JqWVd4c1ltRmphMFY0Y0dWamRDQXBJSHRjYmx4MFhIUmNkRngwYldGMFkyaGxjeTV3ZFhOb0tDQmxiR1Z0YzFzZ2FTQmRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHMWhkR05vWlhNN1hHNWNkSDBzWEc1Y2JseDBMeThnWVhKbklHbHpJR1p2Y2lCcGJuUmxjbTVoYkNCMWMyRm5aU0J2Ym14NVhHNWNkRzFoY0RvZ1puVnVZM1JwYjI0b0lHVnNaVzF6TENCallXeHNZbUZqYXl3Z1lYSm5JQ2tnZTF4dVhIUmNkSFpoY2lCc1pXNW5kR2dzSUhaaGJIVmxMRnh1WEhSY2RGeDBhU0E5SURBc1hHNWNkRngwWEhSeVpYUWdQU0JiWFR0Y2JseHVYSFJjZEM4dklFZHZJSFJvY205MVoyZ2dkR2hsSUdGeWNtRjVMQ0IwY21GdWMyeGhkR2x1WnlCbFlXTm9JRzltSUhSb1pTQnBkR1Z0Y3lCMGJ5QjBhR1ZwY2lCdVpYY2dkbUZzZFdWelhHNWNkRngwYVdZZ0tDQnBjMEZ5Y21GNVRHbHJaU2dnWld4bGJYTWdLU0FwSUh0Y2JseDBYSFJjZEd4bGJtZDBhQ0E5SUdWc1pXMXpMbXhsYm1kMGFEdGNibHgwWEhSY2RHWnZjaUFvSURzZ2FTQThJR3hsYm1kMGFEc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MFhIUjJZV3gxWlNBOUlHTmhiR3hpWVdOcktDQmxiR1Z0YzFzZ2FTQmRMQ0JwTENCaGNtY2dLVHRjYmx4dVhIUmNkRngwWEhScFppQW9JSFpoYkhWbElDRTlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMExuQjFjMmdvSUhaaGJIVmxJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseHVYSFJjZEM4dklFZHZJSFJvY205MVoyZ2daWFpsY25rZ2EyVjVJRzl1SUhSb1pTQnZZbXBsWTNRc1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkR1p2Y2lBb0lHa2dhVzRnWld4bGJYTWdLU0I3WEc1Y2RGeDBYSFJjZEhaaGJIVmxJRDBnWTJGc2JHSmhZMnNvSUdWc1pXMXpXeUJwSUYwc0lHa3NJR0Z5WnlBcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNnZ2RtRnNkV1VnSVQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFF1Y0hWemFDZ2dkbUZzZFdVZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRVpzWVhSMFpXNGdZVzU1SUc1bGMzUmxaQ0JoY25KaGVYTmNibHgwWEhSeVpYUjFjbTRnWTI5dVkyRjBMbUZ3Y0d4NUtDQmJYU3dnY21WMElDazdYRzVjZEgwc1hHNWNibHgwTHk4Z1FTQm5iRzlpWVd3Z1IxVkpSQ0JqYjNWdWRHVnlJR1p2Y2lCdlltcGxZM1J6WEc1Y2RHZDFhV1E2SURFc1hHNWNibHgwTHk4Z2FsRjFaWEo1TG5OMWNIQnZjblFnYVhNZ2JtOTBJSFZ6WldRZ2FXNGdRMjl5WlNCaWRYUWdiM1JvWlhJZ2NISnZhbVZqZEhNZ1lYUjBZV05vSUhSb1pXbHlYRzVjZEM4dklIQnliM0JsY25ScFpYTWdkRzhnYVhRZ2MyOGdhWFFnYm1WbFpITWdkRzhnWlhocGMzUXVYRzVjZEhOMWNIQnZjblE2SUhOMWNIQnZjblJjYm4wZ0tUdGNibHh1YVdZZ0tDQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnS1NCN1hHNWNkR3BSZFdWeWVTNW1ibHNnVTNsdFltOXNMbWwwWlhKaGRHOXlJRjBnUFNCaGNuSmJJRk41YldKdmJDNXBkR1Z5WVhSdmNpQmRPMXh1ZlZ4dVhHNHZMeUJRYjNCMWJHRjBaU0IwYUdVZ1kyeGhjM015ZEhsd1pTQnRZWEJjYm1wUmRXVnllUzVsWVdOb0tDQmNJa0p2YjJ4bFlXNGdUblZ0WW1WeUlGTjBjbWx1WnlCR2RXNWpkR2x2YmlCQmNuSmhlU0JFWVhSbElGSmxaMFY0Y0NCUFltcGxZM1FnUlhKeWIzSWdVM2x0WW05c1hDSXVjM0JzYVhRb0lGd2lJRndpSUNrc1hHNW1kVzVqZEdsdmJpZ2dhU3dnYm1GdFpTQXBJSHRjYmx4MFkyeGhjM015ZEhsd1pWc2dYQ0piYjJKcVpXTjBJRndpSUNzZ2JtRnRaU0FySUZ3aVhWd2lJRjBnUFNCdVlXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNTlJQ2s3WEc1Y2JtWjFibU4wYVc5dUlHbHpRWEp5WVhsTWFXdGxLQ0J2WW1vZ0tTQjdYRzVjYmx4MEx5OGdVM1Z3Y0c5eWREb2djbVZoYkNCcFQxTWdPQzR5SUc5dWJIa2dLRzV2ZENCeVpYQnliMlIxWTJsaWJHVWdhVzRnYzJsdGRXeGhkRzl5S1Z4dVhIUXZMeUJnYVc1Z0lHTm9aV05ySUhWelpXUWdkRzhnY0hKbGRtVnVkQ0JLU1ZRZ1pYSnliM0lnS0dkb0xUSXhORFVwWEc1Y2RDOHZJR2hoYzA5M2JpQnBjMjRuZENCMWMyVmtJR2hsY21VZ1pIVmxJSFJ2SUdaaGJITmxJRzVsWjJGMGFYWmxjMXh1WEhRdkx5QnlaV2RoY21ScGJtY2dUbTlrWld4cGMzUWdiR1Z1WjNSb0lHbHVJRWxGWEc1Y2RIWmhjaUJzWlc1bmRHZ2dQU0FoSVc5aWFpQW1KaUJjSW14bGJtZDBhRndpSUdsdUlHOWlhaUFtSmlCdlltb3ViR1Z1WjNSb0xGeHVYSFJjZEhSNWNHVWdQU0IwYjFSNWNHVW9JRzlpYWlBcE8xeHVYRzVjZEdsbUlDZ2dhWE5HZFc1amRHbHZiaWdnYjJKcUlDa2dmSHdnYVhOWGFXNWtiM2NvSUc5aWFpQXBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCMGVYQmxJRDA5UFNCY0ltRnljbUY1WENJZ2ZId2diR1Z1WjNSb0lEMDlQU0F3SUh4OFhHNWNkRngwZEhsd1pXOW1JR3hsYm1kMGFDQTlQVDBnWENKdWRXMWlaWEpjSWlBbUppQnNaVzVuZEdnZ1BpQXdJQ1ltSUNnZ2JHVnVaM1JvSUMwZ01TQXBJR2x1SUc5aWFqdGNibjFjYm5aaGNpQlRhWHA2YkdVZ1BWeHVMeW9oWEc0Z0tpQlRhWHA2YkdVZ1ExTlRJRk5sYkdWamRHOXlJRVZ1WjJsdVpTQjJNaTR6TGpOY2JpQXFJR2gwZEhCek9pOHZjMmw2ZW14bGFuTXVZMjl0TDF4dUlDcGNiaUFxSUVOdmNIbHlhV2RvZENCcVVYVmxjbmtnUm05MWJtUmhkR2x2YmlCaGJtUWdiM1JvWlhJZ1kyOXVkSEpwWW5WMGIzSnpYRzRnS2lCU1pXeGxZWE5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVmNiaUFxSUdoMGRIQTZMeTlxY1hWbGNua3ViM0puTDJ4cFkyVnVjMlZjYmlBcVhHNGdLaUJFWVhSbE9pQXlNREUyTFRBNExUQTRYRzRnS2k5Y2JpaG1kVzVqZEdsdmJpZ2dkMmx1Wkc5M0lDa2dlMXh1WEc1MllYSWdhU3hjYmx4MGMzVndjRzl5ZEN4Y2JseDBSWGh3Y2l4Y2JseDBaMlYwVkdWNGRDeGNibHgwYVhOWVRVd3NYRzVjZEhSdmEyVnVhWHBsTEZ4dVhIUmpiMjF3YVd4bExGeHVYSFJ6Wld4bFkzUXNYRzVjZEc5MWRHVnliVzl6ZEVOdmJuUmxlSFFzWEc1Y2RITnZjblJKYm5CMWRDeGNibHgwYUdGelJIVndiR2xqWVhSbExGeHVYRzVjZEM4dklFeHZZMkZzSUdSdlkzVnRaVzUwSUhaaGNuTmNibHgwYzJWMFJHOWpkVzFsYm5Rc1hHNWNkR1J2WTNWdFpXNTBMRnh1WEhSa2IyTkZiR1Z0TEZ4dVhIUmtiMk4xYldWdWRFbHpTRlJOVEN4Y2JseDBjbUoxWjJkNVVWTkJMRnh1WEhSeVluVm5aM2xOWVhSamFHVnpMRnh1WEhSdFlYUmphR1Z6TEZ4dVhIUmpiMjUwWVdsdWN5eGNibHh1WEhRdkx5Qkpibk4wWVc1alpTMXpjR1ZqYVdacFl5QmtZWFJoWEc1Y2RHVjRjR0Z1Wkc4Z1BTQmNJbk5wZW5wc1pWd2lJQ3NnTVNBcUlHNWxkeUJFWVhSbEtDa3NYRzVjZEhCeVpXWmxjbkpsWkVSdll5QTlJSGRwYm1SdmR5NWtiMk4xYldWdWRDeGNibHgwWkdseWNuVnVjeUE5SURBc1hHNWNkR1J2Ym1VZ1BTQXdMRnh1WEhSamJHRnpjME5oWTJobElEMGdZM0psWVhSbFEyRmphR1VvS1N4Y2JseDBkRzlyWlc1RFlXTm9aU0E5SUdOeVpXRjBaVU5oWTJobEtDa3NYRzVjZEdOdmJYQnBiR1Z5UTJGamFHVWdQU0JqY21WaGRHVkRZV05vWlNncExGeHVYSFJ6YjNKMFQzSmtaWElnUFNCbWRXNWpkR2x2YmlnZ1lTd2dZaUFwSUh0Y2JseDBYSFJwWmlBb0lHRWdQVDA5SUdJZ0tTQjdYRzVjZEZ4MFhIUm9ZWE5FZFhCc2FXTmhkR1VnUFNCMGNuVmxPMXh1WEhSY2RIMWNibHgwWEhSeVpYUjFjbTRnTUR0Y2JseDBmU3hjYmx4dVhIUXZMeUJKYm5OMFlXNWpaU0J0WlhSb2IyUnpYRzVjZEdoaGMwOTNiaUE5SUNoN2ZTa3VhR0Z6VDNkdVVISnZjR1Z5ZEhrc1hHNWNkR0Z5Y2lBOUlGdGRMRnh1WEhSd2IzQWdQU0JoY25JdWNHOXdMRnh1WEhSd2RYTm9YMjVoZEdsMlpTQTlJR0Z5Y2k1d2RYTm9MRnh1WEhSd2RYTm9JRDBnWVhKeUxuQjFjMmdzWEc1Y2RITnNhV05sSUQwZ1lYSnlMbk5zYVdObExGeHVYSFF2THlCVmMyVWdZU0J6ZEhKcGNIQmxaQzFrYjNkdUlHbHVaR1Y0VDJZZ1lYTWdhWFFuY3lCbVlYTjBaWElnZEdoaGJpQnVZWFJwZG1WY2JseDBMeThnYUhSMGNITTZMeTlxYzNCbGNtWXVZMjl0TDNSb2IzSXRhVzVrWlhodlppMTJjeTFtYjNJdk5WeHVYSFJwYm1SbGVFOW1JRDBnWm5WdVkzUnBiMjRvSUd4cGMzUXNJR1ZzWlcwZ0tTQjdYRzVjZEZ4MGRtRnlJR2tnUFNBd0xGeHVYSFJjZEZ4MGJHVnVJRDBnYkdsemRDNXNaVzVuZEdnN1hHNWNkRngwWm05eUlDZ2dPeUJwSUR3Z2JHVnVPeUJwS3lzZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUd4cGMzUmJhVjBnUFQwOUlHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBYSFJ5WlhSMWNtNGdMVEU3WEc1Y2RIMHNYRzVjYmx4MFltOXZiR1ZoYm5NZ1BTQmNJbU5vWldOclpXUjhjMlZzWldOMFpXUjhZWE41Ym1OOFlYVjBiMlp2WTNWemZHRjFkRzl3YkdGNWZHTnZiblJ5YjJ4emZHUmxabVZ5ZkdScGMyRmliR1ZrZkdocFpHUmxibnhwYzIxaGNIeHNiMjl3ZkcxMWJIUnBjR3hsZkc5d1pXNThjbVZoWkc5dWJIbDhjbVZ4ZFdseVpXUjhjMk52Y0dWa1hDSXNYRzVjYmx4MEx5OGdVbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVjMXh1WEc1Y2RDOHZJR2gwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDJOemN6TXRjMlZzWldOMGIzSnpMeU4zYUdsMFpYTndZV05sWEc1Y2RIZG9hWFJsYzNCaFkyVWdQU0JjSWx0Y1hGeGNlREl3WEZ4Y1hIUmNYRnhjY2x4Y1hGeHVYRnhjWEdaZFhDSXNYRzVjYmx4MEx5OGdhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2UTFOVE1qRXZjM2x1WkdGMFlTNW9kRzFzSTNaaGJIVmxMV1JsWmkxcFpHVnVkR2xtYVdWeVhHNWNkR2xrWlc1MGFXWnBaWElnUFNCY0lpZy9PbHhjWEZ4Y1hGeGNMbnhiWEZ4Y1hIY3RYWHhiWGx4Y01DMWNYRnhjZUdFd1hTa3JYQ0lzWEc1Y2JseDBMeThnUVhSMGNtbGlkWFJsSUhObGJHVmpkRzl5Y3pvZ2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZjMlZzWldOMGIzSnpMeU5oZEhSeWFXSjFkR1V0YzJWc1pXTjBiM0p6WEc1Y2RHRjBkSEpwWW5WMFpYTWdQU0JjSWx4Y1hGeGJYQ0lnS3lCM2FHbDBaWE53WVdObElDc2dYQ0lxS0Z3aUlDc2dhV1JsYm5ScFptbGxjaUFySUZ3aUtTZy9PbHdpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJYRzVjZEZ4MEx5OGdUM0JsY21GMGIzSWdLR05oY0hSMWNtVWdNaWxjYmx4MFhIUmNJaW9vV3lwZUpId2hmbDAvUFNsY0lpQXJJSGRvYVhSbGMzQmhZMlVnSzF4dVhIUmNkQzh2SUZ3aVFYUjBjbWxpZFhSbElIWmhiSFZsY3lCdGRYTjBJR0psSUVOVFV5QnBaR1Z1ZEdsbWFXVnljeUJiWTJGd2RIVnlaU0ExWFNCdmNpQnpkSEpwYm1keklGdGpZWEIwZFhKbElETWdiM0lnWTJGd2RIVnlaU0EwWFZ3aVhHNWNkRngwWENJcUtEODZKeWdvUHpwY1hGeGNYRnhjWEM1OFcxNWNYRnhjWEZ4Y1hDZGRLU29wSjN4Y1hGd2lLQ2cvT2x4Y1hGeGNYRnhjTG54YlhseGNYRnhjWEZ4Y1hGeGNJbDBwS2lsY1hGd2lmQ2hjSWlBcklHbGtaVzUwYVdacFpYSWdLeUJjSWlrcGZDbGNJaUFySUhkb2FYUmxjM0JoWTJVZ0sxeHVYSFJjZEZ3aUtseGNYRnhkWENJc1hHNWNibHgwY0hObGRXUnZjeUE5SUZ3aU9paGNJaUFySUdsa1pXNTBhV1pwWlhJZ0t5QmNJaWtvUHpwY1hGeGNLQ2hjSWlBclhHNWNkRngwTHk4Z1ZHOGdjbVZrZFdObElIUm9aU0J1ZFcxaVpYSWdiMllnYzJWc1pXTjBiM0p6SUc1bFpXUnBibWNnZEc5clpXNXBlbVVnYVc0Z2RHaGxJSEJ5WlVacGJIUmxjaXdnY0hKbFptVnlJR0Z5WjNWdFpXNTBjenBjYmx4MFhIUXZMeUF4TGlCeGRXOTBaV1FnS0dOaGNIUjFjbVVnTXpzZ1kyRndkSFZ5WlNBMElHOXlJR05oY0hSMWNtVWdOU2xjYmx4MFhIUmNJaWduS0NnL09seGNYRnhjWEZ4Y0xueGJYbHhjWEZ4Y1hGeGNKMTBwS2lrbmZGeGNYQ0lvS0Q4NlhGeGNYRnhjWEZ3dWZGdGVYRnhjWEZ4Y1hGeGNYRndpWFNrcUtWeGNYQ0lwZkZ3aUlDdGNibHgwWEhRdkx5QXlMaUJ6YVcxd2JHVWdLR05oY0hSMWNtVWdOaWxjYmx4MFhIUmNJaWdvUHpwY1hGeGNYRnhjWEM1OFcxNWNYRnhjWEZ4Y1hDZ3BXMXhjWEZ4ZFhYeGNJaUFySUdGMGRISnBZblYwWlhNZ0t5QmNJaWtxS1h4Y0lpQXJYRzVjZEZ4MEx5OGdNeTRnWVc1NWRHaHBibWNnWld4elpTQW9ZMkZ3ZEhWeVpTQXlLVnh1WEhSY2RGd2lMaXBjSWlBclhHNWNkRngwWENJcFhGeGNYQ2w4S1Z3aUxGeHVYRzVjZEM4dklFeGxZV1JwYm1jZ1lXNWtJRzV2YmkxbGMyTmhjR1ZrSUhSeVlXbHNhVzVuSUhkb2FYUmxjM0JoWTJVc0lHTmhjSFIxY21sdVp5QnpiMjFsSUc1dmJpMTNhR2wwWlhOd1lXTmxJR05vWVhKaFkzUmxjbk1nY0hKbFkyVmthVzVuSUhSb1pTQnNZWFIwWlhKY2JseDBjbmRvYVhSbGMzQmhZMlVnUFNCdVpYY2dVbVZuUlhod0tDQjNhR2wwWlhOd1lXTmxJQ3NnWENJclhDSXNJRndpWjF3aUlDa3NYRzVjZEhKMGNtbHRJRDBnYm1WM0lGSmxaMFY0Y0NnZ1hDSmVYQ0lnS3lCM2FHbDBaWE53WVdObElDc2dYQ0lyZkNnb1B6cGVmRnRlWEZ4Y1hGeGNYRnhkS1NnL09seGNYRnhjWEZ4Y0xpa3FLVndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS3lSY0lpd2dYQ0puWENJZ0tTeGNibHh1WEhSeVkyOXRiV0VnUFNCdVpYY2dVbVZuUlhod0tDQmNJbDVjSWlBcklIZG9hWFJsYzNCaFkyVWdLeUJjSWlvc1hDSWdLeUIzYUdsMFpYTndZV05sSUNzZ1hDSXFYQ0lnS1N4Y2JseDBjbU52YldKcGJtRjBiM0p6SUQwZ2JtVjNJRkpsWjBWNGNDZ2dYQ0plWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3NnWENJcUtGcytLMzVkZkZ3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUtWd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lLbHdpSUNrc1hHNWNibHgwY21GMGRISnBZblYwWlZGMWIzUmxjeUE5SUc1bGR5QlNaV2RGZUhBb0lGd2lQVndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS2loYlhseGNYRnhkSjF4Y1hDSmRLajhwWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3NnWENJcVhGeGNYRjFjSWl3Z1hDSm5YQ0lnS1N4Y2JseHVYSFJ5Y0hObGRXUnZJRDBnYm1WM0lGSmxaMFY0Y0NnZ2NITmxkV1J2Y3lBcExGeHVYSFJ5YVdSbGJuUnBabWxsY2lBOUlHNWxkeUJTWldkRmVIQW9JRndpWGx3aUlDc2dhV1JsYm5ScFptbGxjaUFySUZ3aUpGd2lJQ2tzWEc1Y2JseDBiV0YwWTJoRmVIQnlJRDBnZTF4dVhIUmNkRndpU1VSY0lqb2dibVYzSUZKbFowVjRjQ2dnWENKZUl5aGNJaUFySUdsa1pXNTBhV1pwWlhJZ0t5QmNJaWxjSWlBcExGeHVYSFJjZEZ3aVEweEJVMU5jSWpvZ2JtVjNJRkpsWjBWNGNDZ2dYQ0plWEZ4Y1hDNG9YQ0lnS3lCcFpHVnVkR2xtYVdWeUlDc2dYQ0lwWENJZ0tTeGNibHgwWEhSY0lsUkJSMXdpT2lCdVpYY2dVbVZuUlhod0tDQmNJbDRvWENJZ0t5QnBaR1Z1ZEdsbWFXVnlJQ3NnWENKOFd5cGRLVndpSUNrc1hHNWNkRngwWENKQlZGUlNYQ0k2SUc1bGR5QlNaV2RGZUhBb0lGd2lYbHdpSUNzZ1lYUjBjbWxpZFhSbGN5QXBMRnh1WEhSY2RGd2lVRk5GVlVSUFhDSTZJRzVsZHlCU1pXZEZlSEFvSUZ3aVhsd2lJQ3NnY0hObGRXUnZjeUFwTEZ4dVhIUmNkRndpUTBoSlRFUmNJam9nYm1WM0lGSmxaMFY0Y0NnZ1hDSmVPaWh2Ym14NWZHWnBjbk4wZkd4aGMzUjhiblJvZkc1MGFDMXNZWE4wS1Mwb1kyaHBiR1I4YjJZdGRIbHdaU2tvUHpwY1hGeGNLRndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJYRzVjZEZ4MFhIUmNJaW9vWlhabGJueHZaR1I4S0NoYkt5MWRmQ2tvWEZ4Y1hHUXFLVzU4S1Z3aUlDc2dkMmhwZEdWemNHRmpaU0FySUZ3aUtpZy9PaWhiS3kxZGZDbGNJaUFySUhkb2FYUmxjM0JoWTJVZ0sxeHVYSFJjZEZ4MFhDSXFLRnhjWEZ4a0t5bDhLU2xjSWlBcklIZG9hWFJsYzNCaFkyVWdLeUJjSWlwY1hGeGNLWHdwWENJc0lGd2lhVndpSUNrc1hHNWNkRngwWENKaWIyOXNYQ0k2SUc1bGR5QlNaV2RGZUhBb0lGd2lYaWcvT2x3aUlDc2dZbTl2YkdWaGJuTWdLeUJjSWlra1hDSXNJRndpYVZ3aUlDa3NYRzVjZEZ4MEx5OGdSbTl5SUhWelpTQnBiaUJzYVdKeVlYSnBaWE1nYVcxd2JHVnRaVzUwYVc1bklDNXBjeWdwWEc1Y2RGeDBMeThnVjJVZ2RYTmxJSFJvYVhNZ1ptOXlJRkJQVXlCdFlYUmphR2x1WnlCcGJpQmdjMlZzWldOMFlGeHVYSFJjZEZ3aWJtVmxaSE5EYjI1MFpYaDBYQ0k2SUc1bGR5QlNaV2RGZUhBb0lGd2lYbHdpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS2xzK0szNWRmRG9vWlhabGJueHZaR1I4WlhGOFozUjhiSFI4Ym5Sb2ZHWnBjbk4wZkd4aGMzUXBLRDg2WEZ4Y1hDaGNJaUFyWEc1Y2RGeDBYSFIzYUdsMFpYTndZV05sSUNzZ1hDSXFLQ2cvT2kxY1hGeGNaQ2svWEZ4Y1hHUXFLVndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS2x4Y1hGd3BmQ2tvUHoxYlhpMWRmQ1FwWENJc0lGd2lhVndpSUNsY2JseDBmU3hjYmx4dVhIUnlhVzV3ZFhSeklEMGdMMTRvUHpwcGJuQjFkSHh6Wld4bFkzUjhkR1Y0ZEdGeVpXRjhZblYwZEc5dUtTUXZhU3hjYmx4MGNtaGxZV1JsY2lBOUlDOWVhRnhjWkNRdmFTeGNibHh1WEhSeWJtRjBhWFpsSUQwZ0wxNWJYbnRkSzF4Y2UxeGNjeXBjWEZ0dVlYUnBkbVVnWEZ4M0x5eGNibHh1WEhRdkx5QkZZWE5wYkhrdGNHRnljMlZoWW14bEwzSmxkSEpwWlhaaFlteGxJRWxFSUc5eUlGUkJSeUJ2Y2lCRFRFRlRVeUJ6Wld4bFkzUnZjbk5jYmx4MGNuRjFhV05yUlhod2NpQTlJQzllS0Q4Nkl5aGJYRngzTFYwcktYd29YRngzS3lsOFhGd3VLRnRjWEhjdFhTc3BLU1F2TEZ4dVhHNWNkSEp6YVdKc2FXNW5JRDBnTDFzcmZsMHZMRnh1WEc1Y2RDOHZJRU5UVXlCbGMyTmhjR1Z6WEc1Y2RDOHZJR2gwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDBOVFV6SXhMM041Ym1SaGRHRXVhSFJ0YkNObGMyTmhjR1ZrTFdOb1lYSmhZM1JsY25OY2JseDBjblZ1WlhOallYQmxJRDBnYm1WM0lGSmxaMFY0Y0NnZ1hDSmNYRnhjWEZ4Y1hDaGJYRnhjWEdSaExXWmRlekVzTm4xY0lpQXJJSGRvYVhSbGMzQmhZMlVnS3lCY0lqOThLRndpSUNzZ2QyaHBkR1Z6Y0dGalpTQXJJRndpS1h3dUtWd2lMQ0JjSW1sblhDSWdLU3hjYmx4MFpuVnVaWE5qWVhCbElEMGdablZ1WTNScGIyNG9JRjhzSUdWelkyRndaV1FzSUdWelkyRndaV1JYYUdsMFpYTndZV05sSUNrZ2UxeHVYSFJjZEhaaGNpQm9hV2RvSUQwZ1hDSXdlRndpSUNzZ1pYTmpZWEJsWkNBdElEQjRNVEF3TURBN1hHNWNkRngwTHk4Z1RtRk9JRzFsWVc1eklHNXZiaTFqYjJSbGNHOXBiblJjYmx4MFhIUXZMeUJUZFhCd2IzSjBPaUJHYVhKbFptOTRQREkwWEc1Y2RGeDBMeThnVjI5eWEyRnliM1Z1WkNCbGNuSnZibVZ2ZFhNZ2JuVnRaWEpwWXlCcGJuUmxjbkJ5WlhSaGRHbHZiaUJ2WmlBclhDSXdlRndpWEc1Y2RGeDBjbVYwZFhKdUlHaHBaMmdnSVQwOUlHaHBaMmdnZkh3Z1pYTmpZWEJsWkZkb2FYUmxjM0JoWTJVZ1AxeHVYSFJjZEZ4MFpYTmpZWEJsWkNBNlhHNWNkRngwWEhSb2FXZG9JRHdnTUNBL1hHNWNkRngwWEhSY2RDOHZJRUpOVUNCamIyUmxjRzlwYm5SY2JseDBYSFJjZEZ4MFUzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTZ2dhR2xuYUNBcklEQjRNVEF3TURBZ0tTQTZYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnNaVzFsYm5SaGJDQlFiR0Z1WlNCamIyUmxjRzlwYm5RZ0tITjFjbkp2WjJGMFpTQndZV2x5S1Z4dVhIUmNkRngwWEhSVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDQm9hV2RvSUQ0K0lERXdJSHdnTUhoRU9EQXdMQ0JvYVdkb0lDWWdNSGd6UmtZZ2ZDQXdlRVJETURBZ0tUdGNibHgwZlN4Y2JseHVYSFF2THlCRFUxTWdjM1J5YVc1bkwybGtaVzUwYVdacFpYSWdjMlZ5YVdGc2FYcGhkR2x2Ymx4dVhIUXZMeUJvZEhSd2N6b3ZMMlJ5WVdaMGN5NWpjM04zWnk1dmNtY3ZZM056YjIwdkkyTnZiVzF2YmkxelpYSnBZV3hwZW1sdVp5MXBaR2x2YlhOY2JseDBjbU56YzJWelkyRndaU0E5SUM4b1cxeGNNQzFjWEhneFpseGNlRGRtWFh4ZUxUOWNYR1FwZkY0dEpIeGJYbHhjTUMxY1hIZ3habHhjZURkbUxWeGNkVVpHUmtaY1hIY3RYUzluTEZ4dVhIUm1ZM056WlhOallYQmxJRDBnWm5WdVkzUnBiMjRvSUdOb0xDQmhjME52WkdWUWIybHVkQ0FwSUh0Y2JseDBYSFJwWmlBb0lHRnpRMjlrWlZCdmFXNTBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlZLekF3TURBZ1RsVk1UQ0JpWldOdmJXVnpJRlVyUmtaR1JDQlNSVkJNUVVORlRVVk9WQ0JEU0VGU1FVTlVSVkpjYmx4MFhIUmNkR2xtSUNnZ1kyZ2dQVDA5SUZ3aVhGd3dYQ0lnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCY0lseGNkVVpHUmtSY0lqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnUTI5dWRISnZiQ0JqYUdGeVlXTjBaWEp6SUdGdVpDQW9aR1Z3Wlc1a1pXNTBJSFZ3YjI0Z2NHOXphWFJwYjI0cElHNTFiV0psY25NZ1oyVjBJR1Z6WTJGd1pXUWdZWE1nWTI5a1pTQndiMmx1ZEhOY2JseDBYSFJjZEhKbGRIVnliaUJqYUM1emJHbGpaU2dnTUN3Z0xURWdLU0FySUZ3aVhGeGNYRndpSUNzZ1kyZ3VZMmhoY2tOdlpHVkJkQ2dnWTJndWJHVnVaM1JvSUMwZ01TQXBMblJ2VTNSeWFXNW5LQ0F4TmlBcElDc2dYQ0lnWENJN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1QzUm9aWElnY0c5MFpXNTBhV0ZzYkhrdGMzQmxZMmxoYkNCQlUwTkpTU0JqYUdGeVlXTjBaWEp6SUdkbGRDQmlZV05yYzJ4aGMyZ3RaWE5qWVhCbFpGeHVYSFJjZEhKbGRIVnliaUJjSWx4Y1hGeGNJaUFySUdOb08xeHVYSFI5TEZ4dVhHNWNkQzh2SUZWelpXUWdabTl5SUdsbWNtRnRaWE5jYmx4MEx5OGdVMlZsSUhObGRFUnZZM1Z0Wlc1MEtDbGNibHgwTHk4Z1VtVnRiM1pwYm1jZ2RHaGxJR1oxYm1OMGFXOXVJSGR5WVhCd1pYSWdZMkYxYzJWeklHRWdYQ0pRWlhKdGFYTnphVzl1SUVSbGJtbGxaRndpWEc1Y2RDOHZJR1Z5Y205eUlHbHVJRWxGWEc1Y2RIVnViRzloWkVoaGJtUnNaWElnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSelpYUkViMk4xYldWdWRDZ3BPMXh1WEhSOUxGeHVYRzVjZEdScGMyRmliR1ZrUVc1alpYTjBiM0lnUFNCaFpHUkRiMjFpYVc1aGRHOXlLRnh1WEhSY2RHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMHVaR2x6WVdKc1pXUWdQVDA5SUhSeWRXVWdKaVlnS0Z3aVptOXliVndpSUdsdUlHVnNaVzBnZkh3Z1hDSnNZV0psYkZ3aUlHbHVJR1ZzWlcwcE8xeHVYSFJjZEgwc1hHNWNkRngwZXlCa2FYSTZJRndpY0dGeVpXNTBUbTlrWlZ3aUxDQnVaWGgwT2lCY0lteGxaMlZ1WkZ3aUlIMWNibHgwS1R0Y2JseHVMeThnVDNCMGFXMXBlbVVnWm05eUlIQjFjMmd1WVhCd2JIa29JRjhzSUU1dlpHVk1hWE4wSUNsY2JuUnllU0I3WEc1Y2RIQjFjMmd1WVhCd2JIa29YRzVjZEZ4MEtHRnljaUE5SUhOc2FXTmxMbU5oYkd3b0lIQnlaV1psY25KbFpFUnZZeTVqYUdsc1pFNXZaR1Z6SUNrcExGeHVYSFJjZEhCeVpXWmxjbkpsWkVSdll5NWphR2xzWkU1dlpHVnpYRzVjZENrN1hHNWNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1E4TkM0d1hHNWNkQzh2SUVSbGRHVmpkQ0J6YVd4bGJuUnNlU0JtWVdsc2FXNW5JSEIxYzJndVlYQndiSGxjYmx4MFlYSnlXeUJ3Y21WbVpYSnlaV1JFYjJNdVkyaHBiR1JPYjJSbGN5NXNaVzVuZEdnZ1hTNXViMlJsVkhsd1pUdGNibjBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYSFJ3ZFhOb0lEMGdleUJoY0hCc2VUb2dZWEp5TG14bGJtZDBhQ0EvWEc1Y2JseDBYSFF2THlCTVpYWmxjbUZuWlNCemJHbGpaU0JwWmlCd2IzTnphV0pzWlZ4dVhIUmNkR1oxYm1OMGFXOXVLQ0IwWVhKblpYUXNJR1ZzY3lBcElIdGNibHgwWEhSY2RIQjFjMmhmYm1GMGFYWmxMbUZ3Y0d4NUtDQjBZWEpuWlhRc0lITnNhV05sTG1OaGJHd29aV3h6S1NBcE8xeHVYSFJjZEgwZ09seHVYRzVjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVU4T1Z4dVhIUmNkQzh2SUU5MGFHVnlkMmx6WlNCaGNIQmxibVFnWkdseVpXTjBiSGxjYmx4MFhIUm1kVzVqZEdsdmJpZ2dkR0Z5WjJWMExDQmxiSE1nS1NCN1hHNWNkRngwWEhSMllYSWdhaUE5SUhSaGNtZGxkQzVzWlc1bmRHZ3NYRzVjZEZ4MFhIUmNkR2tnUFNBd08xeHVYSFJjZEZ4MEx5OGdRMkZ1SjNRZ2RISjFjM1FnVG05a1pVeHBjM1F1YkdWdVozUm9YRzVjZEZ4MFhIUjNhR2xzWlNBb0lDaDBZWEpuWlhSYmFpc3JYU0E5SUdWc2MxdHBLeXRkS1NBcElIdDlYRzVjZEZ4MFhIUjBZWEpuWlhRdWJHVnVaM1JvSUQwZ2FpQXRJREU3WEc1Y2RGeDBmVnh1WEhSOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCVGFYcDZiR1VvSUhObGJHVmpkRzl5TENCamIyNTBaWGgwTENCeVpYTjFiSFJ6TENCelpXVmtJQ2tnZTF4dVhIUjJZWElnYlN3Z2FTd2daV3hsYlN3Z2JtbGtMQ0J0WVhSamFDd2daM0p2ZFhCekxDQnVaWGRUWld4bFkzUnZjaXhjYmx4MFhIUnVaWGREYjI1MFpYaDBJRDBnWTI5dWRHVjRkQ0FtSmlCamIyNTBaWGgwTG05M2JtVnlSRzlqZFcxbGJuUXNYRzVjYmx4MFhIUXZMeUJ1YjJSbFZIbHdaU0JrWldaaGRXeDBjeUIwYnlBNUxDQnphVzVqWlNCamIyNTBaWGgwSUdSbFptRjFiSFJ6SUhSdklHUnZZM1Z0Wlc1MFhHNWNkRngwYm05a1pWUjVjR1VnUFNCamIyNTBaWGgwSUQ4Z1kyOXVkR1Y0ZEM1dWIyUmxWSGx3WlNBNklEazdYRzVjYmx4MGNtVnpkV3gwY3lBOUlISmxjM1ZzZEhNZ2ZId2dXMTA3WEc1Y2JseDBMeThnVW1WMGRYSnVJR1ZoY214NUlHWnliMjBnWTJGc2JITWdkMmwwYUNCcGJuWmhiR2xrSUhObGJHVmpkRzl5SUc5eUlHTnZiblJsZUhSY2JseDBhV1lnS0NCMGVYQmxiMllnYzJWc1pXTjBiM0lnSVQwOUlGd2ljM1J5YVc1blhDSWdmSHdnSVhObGJHVmpkRzl5SUh4OFhHNWNkRngwYm05a1pWUjVjR1VnSVQwOUlERWdKaVlnYm05a1pWUjVjR1VnSVQwOUlEa2dKaVlnYm05a1pWUjVjR1VnSVQwOUlERXhJQ2tnZTF4dVhHNWNkRngwY21WMGRYSnVJSEpsYzNWc2RITTdYRzVjZEgxY2JseHVYSFF2THlCVWNua2dkRzhnYzJodmNuUmpkWFFnWm1sdVpDQnZjR1Z5WVhScGIyNXpJQ2hoY3lCdmNIQnZjMlZrSUhSdklHWnBiSFJsY25NcElHbHVJRWhVVFV3Z1pHOWpkVzFsYm5SelhHNWNkR2xtSUNnZ0lYTmxaV1FnS1NCN1hHNWNibHgwWEhScFppQW9JQ2dnWTI5dWRHVjRkQ0EvSUdOdmJuUmxlSFF1YjNkdVpYSkViMk4xYldWdWRDQjhmQ0JqYjI1MFpYaDBJRG9nY0hKbFptVnljbVZrUkc5aklDa2dJVDA5SUdSdlkzVnRaVzUwSUNrZ2UxeHVYSFJjZEZ4MGMyVjBSRzlqZFcxbGJuUW9JR052Ym5SbGVIUWdLVHRjYmx4MFhIUjlYRzVjZEZ4MFkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRZ2ZId2daRzlqZFcxbGJuUTdYRzVjYmx4MFhIUnBaaUFvSUdSdlkzVnRaVzUwU1hOSVZFMU1JQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkpaaUIwYUdVZ2MyVnNaV04wYjNJZ2FYTWdjM1ZtWm1samFXVnVkR3g1SUhOcGJYQnNaU3dnZEhKNUlIVnphVzVuSUdFZ1hDSm5aWFFxUW5rcVhDSWdSRTlOSUcxbGRHaHZaRnh1WEhSY2RGeDBMeThnS0dWNFkyVndkR2x1WnlCRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwSUdOdmJuUmxlSFFzSUhkb1pYSmxJSFJvWlNCdFpYUm9iMlJ6SUdSdmJpZDBJR1Y0YVhOMEtWeHVYSFJjZEZ4MGFXWWdLQ0J1YjJSbFZIbHdaU0FoUFQwZ01URWdKaVlnS0cxaGRHTm9JRDBnY25GMWFXTnJSWGh3Y2k1bGVHVmpLQ0J6Wld4bFkzUnZjaUFwS1NBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCSlJDQnpaV3hsWTNSdmNseHVYSFJjZEZ4MFhIUnBaaUFvSUNodElEMGdiV0YwWTJoYk1WMHBJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBMeThnUkc5amRXMWxiblFnWTI5dWRHVjRkRnh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dibTlrWlZSNWNHVWdQVDA5SURrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9JQ2hsYkdWdElEMGdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnZ2JTQXBLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU3dnVDNCbGNtRXNJRmRsWW10cGRGeHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlVUMFJQT2lCcFpHVnVkR2xtZVNCMlpYSnphVzl1YzF4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCblpYUkZiR1Z0Wlc1MFFubEpaQ0JqWVc0Z2JXRjBZMmdnWld4bGJXVnVkSE1nWW5rZ2JtRnRaU0JwYm5OMFpXRmtJRzltSUVsRVhHNWNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2daV3hsYlM1cFpDQTlQVDBnYlNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhSekxuQjFjMmdvSUdWc1pXMGdLVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNibHgwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJGYkdWdFpXNTBJR052Ym5SbGVIUmNibHgwWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlN3Z1QzQmxjbUVzSUZkbFltdHBkRnh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdWRTlFVHpvZ2FXUmxiblJwWm5rZ2RtVnljMmx2Ym5OY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUdkbGRFVnNaVzFsYm5SQ2VVbGtJR05oYmlCdFlYUmphQ0JsYkdWdFpXNTBjeUJpZVNCdVlXMWxJR2x1YzNSbFlXUWdiMllnU1VSY2JseDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JtVjNRMjl1ZEdWNGRDQW1KaUFvWld4bGJTQTlJRzVsZDBOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9JRzBnS1NrZ0ppWmNibHgwWEhSY2RGeDBYSFJjZEZ4MFkyOXVkR0ZwYm5Nb0lHTnZiblJsZUhRc0lHVnNaVzBnS1NBbUpseHVYSFJjZEZ4MFhIUmNkRngwWEhSbGJHVnRMbWxrSUQwOVBTQnRJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMzVnNkSE11Y0hWemFDZ2daV3hsYlNBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBjenRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdWSGx3WlNCelpXeGxZM1J2Y2x4dVhIUmNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQnRZWFJqYUZzeVhTQXBJSHRjYmx4MFhIUmNkRngwWEhSd2RYTm9MbUZ3Y0d4NUtDQnlaWE4xYkhSekxDQmpiMjUwWlhoMExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ0J6Wld4bFkzUnZjaUFwSUNrN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNWNibHgwWEhSY2RGeDBMeThnUTJ4aGMzTWdjMlZzWldOMGIzSmNibHgwWEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnS0cwZ1BTQnRZWFJqYUZzelhTa2dKaVlnYzNWd2NHOXlkQzVuWlhSRmJHVnRaVzUwYzBKNVEyeGhjM05PWVcxbElDWW1YRzVjZEZ4MFhIUmNkRngwWTI5dWRHVjRkQzVuWlhSRmJHVnRaVzUwYzBKNVEyeGhjM05PWVcxbElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MGNIVnphQzVoY0hCc2VTZ2djbVZ6ZFd4MGN5d2dZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBjMEo1UTJ4aGMzTk9ZVzFsS0NCdElDa2dLVHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBjenRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlVZV3RsSUdGa2RtRnVkR0ZuWlNCdlppQnhkV1Z5ZVZObGJHVmpkRzl5UVd4c1hHNWNkRngwWEhScFppQW9JSE4xY0hCdmNuUXVjWE5oSUNZbVhHNWNkRngwWEhSY2RDRmpiMjF3YVd4bGNrTmhZMmhsV3lCelpXeGxZM1J2Y2lBcklGd2lJRndpSUYwZ0ppWmNibHgwWEhSY2RGeDBLQ0Z5WW5WblozbFJVMEVnZkh3Z0lYSmlkV2RuZVZGVFFTNTBaWE4wS0NCelpXeGxZM1J2Y2lBcEtTQXBJSHRjYmx4dVhIUmNkRngwWEhScFppQW9JRzV2WkdWVWVYQmxJQ0U5UFNBeElDa2dlMXh1WEhSY2RGeDBYSFJjZEc1bGQwTnZiblJsZUhRZ1BTQmpiMjUwWlhoME8xeHVYSFJjZEZ4MFhIUmNkRzVsZDFObGJHVmpkRzl5SUQwZ2MyVnNaV04wYjNJN1hHNWNibHgwWEhSY2RGeDBMeThnY1ZOQklHeHZiMnR6SUc5MWRITnBaR1VnUld4bGJXVnVkQ0JqYjI1MFpYaDBMQ0IzYUdsamFDQnBjeUJ1YjNRZ2QyaGhkQ0IzWlNCM1lXNTBYRzVjZEZ4MFhIUmNkQzh2SUZSb1lXNXJjeUIwYnlCQmJtUnlaWGNnUkhWd2IyNTBJR1p2Y2lCMGFHbHpJSGR2Y210aGNtOTFibVFnZEdWamFHNXBjWFZsWEc1Y2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T0Z4dVhIUmNkRngwWEhRdkx5QkZlR05zZFdSbElHOWlhbVZqZENCbGJHVnRaVzUwYzF4dVhIUmNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQmpiMjUwWlhoMExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnSVQwOUlGd2liMkpxWldOMFhDSWdLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJEWVhCMGRYSmxJSFJvWlNCamIyNTBaWGgwSUVsRUxDQnpaWFIwYVc1bklHbDBJR1pwY25OMElHbG1JRzVsWTJWemMyRnllVnh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dLRzVwWkNBOUlHTnZiblJsZUhRdVoyVjBRWFIwY21saWRYUmxLQ0JjSW1sa1hDSWdLU2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ1YVdRZ1BTQnVhV1F1Y21Wd2JHRmpaU2dnY21OemMyVnpZMkZ3WlN3Z1ptTnpjMlZ6WTJGd1pTQXBPMXh1WEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmpiMjUwWlhoMExuTmxkRUYwZEhKcFluVjBaU2dnWENKcFpGd2lMQ0FvYm1sa0lEMGdaWGh3WVc1a2J5a2dLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFF2THlCUWNtVm1hWGdnWlhabGNua2djMlZzWldOMGIzSWdhVzRnZEdobElHeHBjM1JjYmx4MFhIUmNkRngwWEhSbmNtOTFjSE1nUFNCMGIydGxibWw2WlNnZ2MyVnNaV04wYjNJZ0tUdGNibHgwWEhSY2RGeDBYSFJwSUQwZ1ozSnZkWEJ6TG14bGJtZDBhRHRjYmx4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUdrdExTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHZHliM1Z3YzF0cFhTQTlJRndpSTF3aUlDc2dibWxrSUNzZ1hDSWdYQ0lnS3lCMGIxTmxiR1ZqZEc5eUtDQm5jbTkxY0hOYmFWMGdLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBibVYzVTJWc1pXTjBiM0lnUFNCbmNtOTFjSE11YW05cGJpZ2dYQ0lzWENJZ0tUdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFVjRjR0Z1WkNCamIyNTBaWGgwSUdadmNpQnphV0pzYVc1bklITmxiR1ZqZEc5eWMxeHVYSFJjZEZ4MFhIUmNkRzVsZDBOdmJuUmxlSFFnUFNCeWMybGliR2x1Wnk1MFpYTjBLQ0J6Wld4bFkzUnZjaUFwSUNZbUlIUmxjM1JEYjI1MFpYaDBLQ0JqYjI1MFpYaDBMbkJoY21WdWRFNXZaR1VnS1NCOGZGeHVYSFJjZEZ4MFhIUmNkRngwWTI5dWRHVjRkRHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RHbG1JQ2dnYm1WM1UyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MFhIUmNkRngwZEhKNUlIdGNibHgwWEhSY2RGeDBYSFJjZEhCMWMyZ3VZWEJ3Ykhrb0lISmxjM1ZzZEhNc1hHNWNkRngwWEhSY2RGeDBYSFJjZEc1bGQwTnZiblJsZUhRdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnZ2JtVjNVMlZzWldOMGIzSWdLVnh1WEhSY2RGeDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ5WlhOMWJIUnpPMXh1WEhSY2RGeDBYSFJjZEgwZ1kyRjBZMmdnS0NCeGMyRkZjbkp2Y2lBcElIdGNibHgwWEhSY2RGeDBYSFI5SUdacGJtRnNiSGtnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NCdWFXUWdQVDA5SUdWNGNHRnVaRzhnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdOdmJuUmxlSFF1Y21WdGIzWmxRWFIwY21saWRYUmxLQ0JjSW1sa1hDSWdLVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhRdkx5QkJiR3dnYjNSb1pYSnpYRzVjZEhKbGRIVnliaUJ6Wld4bFkzUW9JSE5sYkdWamRHOXlMbkpsY0d4aFkyVW9JSEowY21sdExDQmNJaVF4WENJZ0tTd2dZMjl1ZEdWNGRDd2djbVZ6ZFd4MGN5d2djMlZsWkNBcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JyWlhrdGRtRnNkV1VnWTJGamFHVnpJRzltSUd4cGJXbDBaV1FnYzJsNlpWeHVJQ29nUUhKbGRIVnlibk1nZTJaMWJtTjBhVzl1S0hOMGNtbHVaeXdnYjJKcVpXTjBLWDBnVW1WMGRYSnVjeUIwYUdVZ1QySnFaV04wSUdSaGRHRWdZV1owWlhJZ2MzUnZjbWx1WnlCcGRDQnZiaUJwZEhObGJHWWdkMmwwYUZ4dUlDcGNkSEJ5YjNCbGNuUjVJRzVoYldVZ2RHaGxJQ2h6Y0dGalpTMXpkV1ptYVhobFpDa2djM1J5YVc1bklHRnVaQ0FvYVdZZ2RHaGxJR05oWTJobElHbHpJR3hoY21kbGNpQjBhR0Z1SUVWNGNISXVZMkZqYUdWTVpXNW5kR2dwWEc0Z0tseDBaR1ZzWlhScGJtY2dkR2hsSUc5c1pHVnpkQ0JsYm5SeWVWeHVJQ292WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZEWVdOb1pTZ3BJSHRjYmx4MGRtRnlJR3RsZVhNZ1BTQmJYVHRjYmx4dVhIUm1kVzVqZEdsdmJpQmpZV05vWlNnZ2EyVjVMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUXZMeUJWYzJVZ0tHdGxlU0FySUZ3aUlGd2lLU0IwYnlCaGRtOXBaQ0JqYjJ4c2FYTnBiMjRnZDJsMGFDQnVZWFJwZG1VZ2NISnZkRzkwZVhCbElIQnliM0JsY25ScFpYTWdLSE5sWlNCSmMzTjFaU0FqTVRVM0tWeHVYSFJjZEdsbUlDZ2dhMlY1Y3k1d2RYTm9LQ0JyWlhrZ0t5QmNJaUJjSWlBcElENGdSWGh3Y2k1allXTm9aVXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkQzh2SUU5dWJIa2dhMlZsY0NCMGFHVWdiVzl6ZENCeVpXTmxiblFnWlc1MGNtbGxjMXh1WEhSY2RGeDBaR1ZzWlhSbElHTmhZMmhsV3lCclpYbHpMbk5vYVdaMEtDa2dYVHRjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUNoallXTm9aVnNnYTJWNUlDc2dYQ0lnWENJZ1hTQTlJSFpoYkhWbEtUdGNibHgwZlZ4dVhIUnlaWFIxY200Z1kyRmphR1U3WEc1OVhHNWNiaThxS2x4dUlDb2dUV0Z5YXlCaElHWjFibU4wYVc5dUlHWnZjaUJ6Y0dWamFXRnNJSFZ6WlNCaWVTQlRhWHA2YkdWY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1SUZSb1pTQm1kVzVqZEdsdmJpQjBieUJ0WVhKclhHNGdLaTljYm1aMWJtTjBhVzl1SUcxaGNtdEdkVzVqZEdsdmJpZ2dabTRnS1NCN1hHNWNkR1p1V3lCbGVIQmhibVJ2SUYwZ1BTQjBjblZsTzF4dVhIUnlaWFIxY200Z1ptNDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1UzVndjRzl5ZENCMFpYTjBhVzVuSUhWemFXNW5JR0Z1SUdWc1pXMWxiblJjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVJRkJoYzNObFpDQjBhR1VnWTNKbFlYUmxaQ0JsYkdWdFpXNTBJR0Z1WkNCeVpYUjFjbTV6SUdFZ1ltOXZiR1ZoYmlCeVpYTjFiSFJjYmlBcUwxeHVablZ1WTNScGIyNGdZWE56WlhKMEtDQm1iaUFwSUh0Y2JseDBkbUZ5SUdWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltWnBaV3hrYzJWMFhDSXBPMXh1WEc1Y2RIUnllU0I3WEc1Y2RGeDBjbVYwZFhKdUlDRWhabTRvSUdWc0lDazdYRzVjZEgwZ1kyRjBZMmdnS0dVcElIdGNibHgwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEgwZ1ptbHVZV3hzZVNCN1hHNWNkRngwTHk4Z1VtVnRiM1psSUdaeWIyMGdhWFJ6SUhCaGNtVnVkQ0JpZVNCa1pXWmhkV3gwWEc1Y2RGeDBhV1lnS0NCbGJDNXdZWEpsYm5ST2IyUmxJQ2tnZTF4dVhIUmNkRngwWld3dWNHRnlaVzUwVG05a1pTNXlaVzF2ZG1WRGFHbHNaQ2dnWld3Z0tUdGNibHgwWEhSOVhHNWNkRngwTHk4Z2NtVnNaV0Z6WlNCdFpXMXZjbmtnYVc0Z1NVVmNibHgwWEhSbGJDQTlJRzUxYkd3N1hHNWNkSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1J6SUhSb1pTQnpZVzFsSUdoaGJtUnNaWElnWm05eUlHRnNiQ0J2WmlCMGFHVWdjM0JsWTJsbWFXVmtJR0YwZEhKelhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZWFIwY25NZ1VHbHdaUzF6WlhCaGNtRjBaV1FnYkdsemRDQnZaaUJoZEhSeWFXSjFkR1Z6WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm9ZVzVrYkdWeUlGUm9aU0J0WlhSb2IyUWdkR2hoZENCM2FXeHNJR0psSUdGd2NHeHBaV1JjYmlBcUwxeHVablZ1WTNScGIyNGdZV1JrU0dGdVpHeGxLQ0JoZEhSeWN5d2dhR0Z1Wkd4bGNpQXBJSHRjYmx4MGRtRnlJR0Z5Y2lBOUlHRjBkSEp6TG5Od2JHbDBLRndpZkZ3aUtTeGNibHgwWEhScElEMGdZWEp5TG14bGJtZDBhRHRjYmx4dVhIUjNhR2xzWlNBb0lHa3RMU0FwSUh0Y2JseDBYSFJGZUhCeUxtRjBkSEpJWVc1a2JHVmJJR0Z5Y2x0cFhTQmRJRDBnYUdGdVpHeGxjanRjYmx4MGZWeHVmVnh1WEc0dktpcGNiaUFxSUVOb1pXTnJjeUJrYjJOMWJXVnVkQ0J2Y21SbGNpQnZaaUIwZDI4Z2MybGliR2x1WjNOY2JpQXFJRUJ3WVhKaGJTQjdSV3hsYldWdWRIMGdZVnh1SUNvZ1FIQmhjbUZ0SUh0RmJHVnRaVzUwZlNCaVhHNGdLaUJBY21WMGRYSnVjeUI3VG5WdFltVnlmU0JTWlhSMWNtNXpJR3hsYzNNZ2RHaGhiaUF3SUdsbUlHRWdjSEpsWTJWa1pYTWdZaXdnWjNKbFlYUmxjaUIwYUdGdUlEQWdhV1lnWVNCbWIyeHNiM2R6SUdKY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYzJsaWJHbHVaME5vWldOcktDQmhMQ0JpSUNrZ2UxeHVYSFIyWVhJZ1kzVnlJRDBnWWlBbUppQmhMRnh1WEhSY2RHUnBabVlnUFNCamRYSWdKaVlnWVM1dWIyUmxWSGx3WlNBOVBUMGdNU0FtSmlCaUxtNXZaR1ZVZVhCbElEMDlQU0F4SUNZbVhHNWNkRngwWEhSaExuTnZkWEpqWlVsdVpHVjRJQzBnWWk1emIzVnlZMlZKYm1SbGVEdGNibHh1WEhRdkx5QlZjMlVnU1VVZ2MyOTFjbU5sU1c1a1pYZ2dhV1lnWVhaaGFXeGhZbXhsSUc5dUlHSnZkR2dnYm05a1pYTmNibHgwYVdZZ0tDQmthV1ptSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYVdabU8xeHVYSFI5WEc1Y2JseDBMeThnUTJobFkyc2dhV1lnWWlCbWIyeHNiM2R6SUdGY2JseDBhV1lnS0NCamRYSWdLU0I3WEc1Y2RGeDBkMmhwYkdVZ0tDQW9ZM1Z5SUQwZ1kzVnlMbTVsZUhSVGFXSnNhVzVuS1NBcElIdGNibHgwWEhSY2RHbG1JQ2dnWTNWeUlEMDlQU0JpSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z0xURTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHRWdQeUF4SURvZ0xURTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCaElHWjFibU4wYVc5dUlIUnZJSFZ6WlNCcGJpQndjMlYxWkc5eklHWnZjaUJwYm5CMWRDQjBlWEJsYzF4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIUjVjR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFNXNXdkWFJRYzJWMVpHOG9JSFI1Y0dVZ0tTQjdYRzVjZEhKbGRIVnliaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUjJZWElnYm1GdFpTQTlJR1ZzWlcwdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4MFhIUnlaWFIxY200Z2JtRnRaU0E5UFQwZ1hDSnBibkIxZEZ3aUlDWW1JR1ZzWlcwdWRIbHdaU0E5UFQwZ2RIbHdaVHRjYmx4MGZUdGNibjFjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTV6SUdFZ1puVnVZM1JwYjI0Z2RHOGdkWE5sSUdsdUlIQnpaWFZrYjNNZ1ptOXlJR0oxZEhSdmJuTmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IwZVhCbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVUoxZEhSdmJsQnpaWFZrYnlnZ2RIbHdaU0FwSUh0Y2JseDBjbVYwZFhKdUlHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhaaGNpQnVZVzFsSUQwZ1pXeGxiUzV1YjJSbFRtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVYSFJjZEhKbGRIVnliaUFvYm1GdFpTQTlQVDBnWENKcGJuQjFkRndpSUh4OElHNWhiV1VnUFQwOUlGd2lZblYwZEc5dVhDSXBJQ1ltSUdWc1pXMHVkSGx3WlNBOVBUMGdkSGx3WlR0Y2JseDBmVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlNaWFIxY201eklHRWdablZ1WTNScGIyNGdkRzhnZFhObElHbHVJSEJ6WlhWa2IzTWdabTl5SURwbGJtRmliR1ZrTHpwa2FYTmhZbXhsWkZ4dUlDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmthWE5oWW14bFpDQjBjblZsSUdadmNpQTZaR2x6WVdKc1pXUTdJR1poYkhObElHWnZjaUE2Wlc1aFlteGxaRnh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRWFYTmhZbXhsWkZCelpYVmtieWdnWkdsellXSnNaV1FnS1NCN1hHNWNibHgwTHk4Z1MyNXZkMjRnT21ScGMyRmliR1ZrSUdaaGJITmxJSEJ2YzJsMGFYWmxjem9nWm1sbGJHUnpaWFJiWkdsellXSnNaV1JkSUQ0Z2JHVm5aVzVrT201MGFDMXZaaTEwZVhCbEtHNHJNaWtnT21OaGJpMWthWE5oWW14bFhHNWNkSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHh1WEhSY2RDOHZJRTl1YkhrZ1kyVnlkR0ZwYmlCbGJHVnRaVzUwY3lCallXNGdiV0YwWTJnZ09tVnVZV0pzWldRZ2IzSWdPbVJwYzJGaWJHVmtYRzVjZEZ4MEx5OGdhSFIwY0hNNkx5OW9kRzFzTG5Od1pXTXVkMmhoZEhkbkxtOXlaeTl0ZFd4MGFYQmhaMlV2YzJOeWFYQjBhVzVuTG1oMGJXd2pjMlZzWldOMGIzSXRaVzVoWW14bFpGeHVYSFJjZEM4dklHaDBkSEJ6T2k4dmFIUnRiQzV6Y0dWakxuZG9ZWFIzWnk1dmNtY3ZiWFZzZEdsd1lXZGxMM05qY21sd2RHbHVaeTVvZEcxc0kzTmxiR1ZqZEc5eUxXUnBjMkZpYkdWa1hHNWNkRngwYVdZZ0tDQmNJbVp2Y20xY0lpQnBiaUJsYkdWdElDa2dlMXh1WEc1Y2RGeDBYSFF2THlCRGFHVmpheUJtYjNJZ2FXNW9aWEpwZEdWa0lHUnBjMkZpYkdWa2JtVnpjeUJ2YmlCeVpXeGxkbUZ1ZENCdWIyNHRaR2x6WVdKc1pXUWdaV3hsYldWdWRITTZYRzVjZEZ4MFhIUXZMeUFxSUd4cGMzUmxaQ0JtYjNKdExXRnpjMjlqYVdGMFpXUWdaV3hsYldWdWRITWdhVzRnWVNCa2FYTmhZbXhsWkNCbWFXVnNaSE5sZEZ4dVhIUmNkRngwTHk4Z0lDQm9kSFJ3Y3pvdkwyaDBiV3d1YzNCbFl5NTNhR0YwZDJjdWIzSm5MMjExYkhScGNHRm5aUzltYjNKdGN5NW9kRzFzSTJOaGRHVm5iM0o1TFd4cGMzUmxaRnh1WEhSY2RGeDBMeThnSUNCb2RIUndjem92TDJoMGJXd3VjM0JsWXk1M2FHRjBkMmN1YjNKbkwyMTFiSFJwY0dGblpTOW1iM0p0Y3k1b2RHMXNJMk52Ym1ObGNIUXRabVV0WkdsellXSnNaV1JjYmx4MFhIUmNkQzh2SUNvZ2IzQjBhVzl1SUdWc1pXMWxiblJ6SUdsdUlHRWdaR2x6WVdKc1pXUWdiM0IwWjNKdmRYQmNibHgwWEhSY2RDOHZJQ0FnYUhSMGNITTZMeTlvZEcxc0xuTndaV011ZDJoaGRIZG5MbTl5Wnk5dGRXeDBhWEJoWjJVdlptOXliWE11YUhSdGJDTmpiMjVqWlhCMExXOXdkR2x2Ymkxa2FYTmhZbXhsWkZ4dVhIUmNkRngwTHk4Z1FXeHNJSE4xWTJnZ1pXeGxiV1Z1ZEhNZ2FHRjJaU0JoSUZ3aVptOXliVndpSUhCeWIzQmxjblI1TGx4dVhIUmNkRngwYVdZZ0tDQmxiR1Z0TG5CaGNtVnVkRTV2WkdVZ0ppWWdaV3hsYlM1a2FYTmhZbXhsWkNBOVBUMGdabUZzYzJVZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1QzQjBhVzl1SUdWc1pXMWxiblJ6SUdSbFptVnlJSFJ2SUdFZ2NHRnlaVzUwSUc5d2RHZHliM1Z3SUdsbUlIQnlaWE5sYm5SY2JseDBYSFJjZEZ4MGFXWWdLQ0JjSW14aFltVnNYQ0lnYVc0Z1pXeGxiU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUZ3aWJHRmlaV3hjSWlCcGJpQmxiR1Z0TG5CaGNtVnVkRTV2WkdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnWld4bGJTNXdZWEpsYm5ST2IyUmxMbVJwYzJGaWJHVmtJRDA5UFNCa2FYTmhZbXhsWkR0Y2JseDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1ZzWlcwdVpHbHpZV0pzWldRZ1BUMDlJR1JwYzJGaWJHVmtPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklEWWdMU0F4TVZ4dVhIUmNkRngwWEhRdkx5QlZjMlVnZEdobElHbHpSR2x6WVdKc1pXUWdjMmh2Y25SamRYUWdjSEp2Y0dWeWRIa2dkRzhnWTJobFkyc2dabTl5SUdScGMyRmliR1ZrSUdacFpXeGtjMlYwSUdGdVkyVnpkRzl5YzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnWld4bGJTNXBjMFJwYzJGaWJHVmtJRDA5UFNCa2FYTmhZbXhsWkNCOGZGeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1YyaGxjbVVnZEdobGNtVWdhWE1nYm04Z2FYTkVhWE5oWW14bFpDd2dZMmhsWTJzZ2JXRnVkV0ZzYkhsY2JseDBYSFJjZEZ4MFhIUXZLaUJxYzJocGJuUWdMVmN3TVRnZ0tpOWNibHgwWEhSY2RGeDBYSFJsYkdWdExtbHpSR2x6WVdKc1pXUWdJVDA5SUNGa2FYTmhZbXhsWkNBbUpseHVYSFJjZEZ4MFhIUmNkRngwWkdsellXSnNaV1JCYm1ObGMzUnZjaWdnWld4bGJTQXBJRDA5UFNCa2FYTmhZbXhsWkR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMHVaR2x6WVdKc1pXUWdQVDA5SUdScGMyRmliR1ZrTzF4dVhHNWNkRngwTHk4Z1ZISjVJSFJ2SUhkcGJtNXZkeUJ2ZFhRZ1pXeGxiV1Z1ZEhNZ2RHaGhkQ0JqWVc0bmRDQmlaU0JrYVhOaFlteGxaQ0JpWldadmNtVWdkSEoxYzNScGJtY2dkR2hsSUdScGMyRmliR1ZrSUhCeWIzQmxjblI1TGx4dVhIUmNkQzh2SUZOdmJXVWdkbWxqZEdsdGN5Qm5aWFFnWTJGMVoyaDBJR2x1SUc5MWNpQnVaWFFnS0d4aFltVnNMQ0JzWldkbGJtUXNJRzFsYm5Vc0lIUnlZV05yS1N3Z1luVjBJR2wwSUhOb2IzVnNaRzRuZEZ4dVhIUmNkQzh2SUdWMlpXNGdaWGhwYzNRZ2IyNGdkR2hsYlN3Z2JHVjBJR0ZzYjI1bElHaGhkbVVnWVNCaWIyOXNaV0Z1SUhaaGJIVmxMbHh1WEhSY2RIMGdaV3h6WlNCcFppQW9JRndpYkdGaVpXeGNJaUJwYmlCbGJHVnRJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1ZzWlcwdVpHbHpZV0pzWldRZ1BUMDlJR1JwYzJGaWJHVmtPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRkpsYldGcGJtbHVaeUJsYkdWdFpXNTBjeUJoY21VZ2JtVnBkR2hsY2lBNlpXNWhZbXhsWkNCdWIzSWdPbVJwYzJGaWJHVmtYRzVjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSOU8xeHVmVnh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nWVNCbWRXNWpkR2x2YmlCMGJ5QjFjMlVnYVc0Z2NITmxkV1J2Y3lCbWIzSWdjRzl6YVhScGIyNWhiSE5jYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlZCdmMybDBhVzl1WVd4UWMyVjFaRzhvSUdadUlDa2dlMXh1WEhSeVpYUjFjbTRnYldGeWEwWjFibU4wYVc5dUtHWjFibU4wYVc5dUtDQmhjbWQxYldWdWRDQXBJSHRjYmx4MFhIUmhjbWQxYldWdWRDQTlJQ3RoY21kMWJXVnVkRHRjYmx4MFhIUnlaWFIxY200Z2JXRnlhMFoxYm1OMGFXOXVLR1oxYm1OMGFXOXVLQ0J6WldWa0xDQnRZWFJqYUdWeklDa2dlMXh1WEhSY2RGeDBkbUZ5SUdvc1hHNWNkRngwWEhSY2RHMWhkR05vU1c1a1pYaGxjeUE5SUdadUtDQmJYU3dnYzJWbFpDNXNaVzVuZEdnc0lHRnlaM1Z0Wlc1MElDa3NYRzVjZEZ4MFhIUmNkR2tnUFNCdFlYUmphRWx1WkdWNFpYTXViR1Z1WjNSb08xeHVYRzVjZEZ4MFhIUXZMeUJOWVhSamFDQmxiR1Z0Wlc1MGN5Qm1iM1Z1WkNCaGRDQjBhR1VnYzNCbFkybG1hV1ZrSUdsdVpHVjRaWE5jYmx4MFhIUmNkSGRvYVd4bElDZ2dhUzB0SUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUhObFpXUmJJQ2hxSUQwZ2JXRjBZMmhKYm1SbGVHVnpXMmxkS1NCZElDa2dlMXh1WEhSY2RGeDBYSFJjZEhObFpXUmJhbDBnUFNBaEtHMWhkR05vWlhOYmFsMGdQU0J6WldWa1cycGRLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhIUjlLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ1lTQnViMlJsSUdadmNpQjJZV3hwWkdsMGVTQmhjeUJoSUZOcGVucHNaU0JqYjI1MFpYaDBYRzRnS2lCQWNHRnlZVzBnZTBWc1pXMWxiblI4VDJKcVpXTjBQWDBnWTI5dWRHVjRkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwVnNaVzFsYm5SOFQySnFaV04wZkVKdmIyeGxZVzU5SUZSb1pTQnBibkIxZENCdWIyUmxJR2xtSUdGalkyVndkR0ZpYkdVc0lHOTBhR1Z5ZDJselpTQmhJR1poYkhONUlIWmhiSFZsWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJsYzNSRGIyNTBaWGgwS0NCamIyNTBaWGgwSUNrZ2UxeHVYSFJ5WlhSMWNtNGdZMjl1ZEdWNGRDQW1KaUIwZVhCbGIyWWdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCamIyNTBaWGgwTzF4dWZWeHVYRzR2THlCRmVIQnZjMlVnYzNWd2NHOXlkQ0IyWVhKeklHWnZjaUJqYjI1MlpXNXBaVzVqWlZ4dWMzVndjRzl5ZENBOUlGTnBlbnBzWlM1emRYQndiM0owSUQwZ2UzMDdYRzVjYmk4cUtseHVJQ29nUkdWMFpXTjBjeUJZVFV3Z2JtOWtaWE5jYmlBcUlFQndZWEpoYlNCN1JXeGxiV1Z1ZEh4UFltcGxZM1I5SUdWc1pXMGdRVzRnWld4bGJXVnVkQ0J2Y2lCaElHUnZZM1Z0Wlc1MFhHNGdLaUJBY21WMGRYSnVjeUI3UW05dmJHVmhibjBnVkhKMVpTQnBabVlnWld4bGJTQnBjeUJoSUc1dmJpMUlWRTFNSUZoTlRDQnViMlJsWEc0Z0tpOWNibWx6V0UxTUlEMGdVMmw2ZW14bExtbHpXRTFNSUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkQzh2SUdSdlkzVnRaVzUwUld4bGJXVnVkQ0JwY3lCMlpYSnBabWxsWkNCbWIzSWdZMkZ6WlhNZ2QyaGxjbVVnYVhRZ1pHOWxjMjRuZENCNVpYUWdaWGhwYzNSY2JseDBMeThnS0hOMVkyZ2dZWE1nYkc5aFpHbHVaeUJwWm5KaGJXVnpJR2x1SUVsRklDMGdJelE0TXpNcFhHNWNkSFpoY2lCa2IyTjFiV1Z1ZEVWc1pXMWxiblFnUFNCbGJHVnRJQ1ltSUNobGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daV3hsYlNrdVpHOWpkVzFsYm5SRmJHVnRaVzUwTzF4dVhIUnlaWFIxY200Z1pHOWpkVzFsYm5SRmJHVnRaVzUwSUQ4Z1pHOWpkVzFsYm5SRmJHVnRaVzUwTG01dlpHVk9ZVzFsSUNFOVBTQmNJa2hVVFV4Y0lpQTZJR1poYkhObE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCVFpYUnpJR1J2WTNWdFpXNTBMWEpsYkdGMFpXUWdkbUZ5YVdGaWJHVnpJRzl1WTJVZ1ltRnpaV1FnYjI0Z2RHaGxJR04xY25KbGJuUWdaRzlqZFcxbGJuUmNiaUFxSUVCd1lYSmhiU0I3Uld4bGJXVnVkSHhQWW1wbFkzUjlJRnRrYjJOZElFRnVJR1ZzWlcxbGJuUWdiM0lnWkc5amRXMWxiblFnYjJKcVpXTjBJSFJ2SUhWelpTQjBieUJ6WlhRZ2RHaGxJR1J2WTNWdFpXNTBYRzRnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlNCU1pYUjFjbTV6SUhSb1pTQmpkWEp5Wlc1MElHUnZZM1Z0Wlc1MFhHNGdLaTljYm5ObGRFUnZZM1Z0Wlc1MElEMGdVMmw2ZW14bExuTmxkRVJ2WTNWdFpXNTBJRDBnWm5WdVkzUnBiMjRvSUc1dlpHVWdLU0I3WEc1Y2RIWmhjaUJvWVhORGIyMXdZWEpsTENCemRXSlhhVzVrYjNjc1hHNWNkRngwWkc5aklEMGdibTlrWlNBL0lHNXZaR1V1YjNkdVpYSkViMk4xYldWdWRDQjhmQ0J1YjJSbElEb2djSEpsWm1WeWNtVmtSRzlqTzF4dVhHNWNkQzh2SUZKbGRIVnliaUJsWVhKc2VTQnBaaUJrYjJNZ2FYTWdhVzUyWVd4cFpDQnZjaUJoYkhKbFlXUjVJSE5sYkdWamRHVmtYRzVjZEdsbUlDZ2daRzlqSUQwOVBTQmtiMk4xYldWdWRDQjhmQ0JrYjJNdWJtOWtaVlI1Y0dVZ0lUMDlJRGtnZkh3Z0lXUnZZeTVrYjJOMWJXVnVkRVZzWlcxbGJuUWdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHUnZZM1Z0Wlc1ME8xeHVYSFI5WEc1Y2JseDBMeThnVlhCa1lYUmxJR2RzYjJKaGJDQjJZWEpwWVdKc1pYTmNibHgwWkc5amRXMWxiblFnUFNCa2IyTTdYRzVjZEdSdlkwVnNaVzBnUFNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblE3WEc1Y2RHUnZZM1Z0Wlc1MFNYTklWRTFNSUQwZ0lXbHpXRTFNS0NCa2IyTjFiV1Z1ZENBcE8xeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFbEZJRGt0TVRFc0lFVmtaMlZjYmx4MEx5OGdRV05qWlhOemFXNW5JR2xtY21GdFpTQmtiMk4xYldWdWRITWdZV1owWlhJZ2RXNXNiMkZrSUhSb2NtOTNjeUJjSW5CbGNtMXBjM05wYjI0Z1pHVnVhV1ZrWENJZ1pYSnliM0p6SUNocVVYVmxjbmtnSXpFek9UTTJLVnh1WEhScFppQW9JSEJ5WldabGNuSmxaRVJ2WXlBaFBUMGdaRzlqZFcxbGJuUWdKaVpjYmx4MFhIUW9jM1ZpVjJsdVpHOTNJRDBnWkc5amRXMWxiblF1WkdWbVlYVnNkRlpwWlhjcElDWW1JSE4xWWxkcGJtUnZkeTUwYjNBZ0lUMDlJSE4xWWxkcGJtUnZkeUFwSUh0Y2JseHVYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJREV4TENCRlpHZGxYRzVjZEZ4MGFXWWdLQ0J6ZFdKWGFXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaUFwSUh0Y2JseDBYSFJjZEhOMVlsZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NCY0luVnViRzloWkZ3aUxDQjFibXh2WVdSSVlXNWtiR1Z5TENCbVlXeHpaU0FwTzF4dVhHNWNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdPU0F0SURFd0lHOXViSGxjYmx4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0J6ZFdKWGFXNWtiM2N1WVhSMFlXTm9SWFpsYm5RZ0tTQjdYRzVjZEZ4MFhIUnpkV0pYYVc1a2IzY3VZWFIwWVdOb1JYWmxiblFvSUZ3aWIyNTFibXh2WVdSY0lpd2dkVzVzYjJGa1NHRnVaR3hsY2lBcE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RDOHFJRUYwZEhKcFluVjBaWE5jYmx4MExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNBcUwxeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFbEZQRGhjYmx4MEx5OGdWbVZ5YVdaNUlIUm9ZWFFnWjJWMFFYUjBjbWxpZFhSbElISmxZV3hzZVNCeVpYUjFjbTV6SUdGMGRISnBZblYwWlhNZ1lXNWtJRzV2ZENCd2NtOXdaWEowYVdWelhHNWNkQzh2SUNobGVHTmxjSFJwYm1jZ1NVVTRJR0p2YjJ4bFlXNXpLVnh1WEhSemRYQndiM0owTG1GMGRISnBZblYwWlhNZ1BTQmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmNkR1ZzTG1Oc1lYTnpUbUZ0WlNBOUlGd2lhVndpTzF4dVhIUmNkSEpsZEhWeWJpQWhaV3d1WjJWMFFYUjBjbWxpZFhSbEtGd2lZMnhoYzNOT1lXMWxYQ0lwTzF4dVhIUjlLVHRjYmx4dVhIUXZLaUJuWlhSRmJHVnRaVzUwS0hNcFFua3FYRzVjZEMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBnS2k5Y2JseHVYSFF2THlCRGFHVmpheUJwWmlCblpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTaGNJaXBjSWlrZ2NtVjBkWEp1Y3lCdmJteDVJR1ZzWlcxbGJuUnpYRzVjZEhOMWNIQnZjblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVZ1BTQmhjM05sY25Rb1puVnVZM1JwYjI0b0lHVnNJQ2tnZTF4dVhIUmNkR1ZzTG1Gd2NHVnVaRU5vYVd4a0tDQmtiMk4xYldWdWRDNWpjbVZoZEdWRGIyMXRaVzUwS0Z3aVhDSXBJQ2s3WEc1Y2RGeDBjbVYwZFhKdUlDRmxiQzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNoY0lpcGNJaWt1YkdWdVozUm9PMXh1WEhSOUtUdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkpSVHc1WEc1Y2RITjFjSEJ2Y25RdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU0E5SUhKdVlYUnBkbVV1ZEdWemRDZ2daRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVVOc1lYTnpUbUZ0WlNBcE8xeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFbEZQREV3WEc1Y2RDOHZJRU5vWldOcklHbG1JR2RsZEVWc1pXMWxiblJDZVVsa0lISmxkSFZ5Ym5NZ1pXeGxiV1Z1ZEhNZ1lua2dibUZ0WlZ4dVhIUXZMeUJVYUdVZ1luSnZhMlZ1SUdkbGRFVnNaVzFsYm5SQ2VVbGtJRzFsZEdodlpITWdaRzl1SjNRZ2NHbGpheUIxY0NCd2NtOW5jbUZ0YldGMGFXTmhiR3g1TFhObGRDQnVZVzFsY3l4Y2JseDBMeThnYzI4Z2RYTmxJR0VnY205MWJtUmhZbTkxZENCblpYUkZiR1Z0Wlc1MGMwSjVUbUZ0WlNCMFpYTjBYRzVjZEhOMWNIQnZjblF1WjJWMFFubEpaQ0E5SUdGemMyVnlkQ2htZFc1amRHbHZiaWdnWld3Z0tTQjdYRzVjZEZ4MFpHOWpSV3hsYlM1aGNIQmxibVJEYUdsc1pDZ2daV3dnS1M1cFpDQTlJR1Y0Y0dGdVpHODdYRzVjZEZ4MGNtVjBkWEp1SUNGa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MGMwSjVUbUZ0WlNCOGZDQWhaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVU1aGJXVW9JR1Y0Y0dGdVpHOGdLUzVzWlc1bmRHZzdYRzVjZEgwcE8xeHVYRzVjZEM4dklFbEVJR1pwYkhSbGNpQmhibVFnWm1sdVpGeHVYSFJwWmlBb0lITjFjSEJ2Y25RdVoyVjBRbmxKWkNBcElIdGNibHgwWEhSRmVIQnlMbVpwYkhSbGNsdGNJa2xFWENKZElEMGdablZ1WTNScGIyNG9JR2xrSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR0YwZEhKSlpDQTlJR2xrTG5KbGNHeGhZMlVvSUhKMWJtVnpZMkZ3WlN3Z1puVnVaWE5qWVhCbElDazdYRzVjZEZ4MFhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNoY0ltbGtYQ0lwSUQwOVBTQmhkSFJ5U1dRN1hHNWNkRngwWEhSOU8xeHVYSFJjZEgwN1hHNWNkRngwUlhod2NpNW1hVzVrVzF3aVNVUmNJbDBnUFNCbWRXNWpkR2x2YmlnZ2FXUXNJR052Ym5SbGVIUWdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lIUjVjR1Z2WmlCamIyNTBaWGgwTG1kbGRFVnNaVzFsYm5SQ2VVbGtJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltSUdSdlkzVnRaVzUwU1hOSVZFMU1JQ2tnZTF4dVhIUmNkRngwWEhSMllYSWdaV3hsYlNBOUlHTnZiblJsZUhRdVoyVjBSV3hsYldWdWRFSjVTV1FvSUdsa0lDazdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0SUQ4Z1d5QmxiR1Z0SUYwZ09pQmJYVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEhSOUlHVnNjMlVnZTF4dVhIUmNkRVY0Y0hJdVptbHNkR1Z5VzF3aVNVUmNJbDBnUFNBZ1puVnVZM1JwYjI0b0lHbGtJQ2tnZTF4dVhIUmNkRngwZG1GeUlHRjBkSEpKWkNBOUlHbGtMbkpsY0d4aFkyVW9JSEoxYm1WelkyRndaU3dnWm5WdVpYTmpZWEJsSUNrN1hHNWNkRngwWEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnViMlJsSUQwZ2RIbHdaVzltSUdWc1pXMHVaMlYwUVhSMGNtbGlkWFJsVG05a1pTQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQW1KbHh1WEhSY2RGeDBYSFJjZEdWc1pXMHVaMlYwUVhSMGNtbGlkWFJsVG05a1pTaGNJbWxrWENJcE8xeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JtOWtaU0FtSmlCdWIyUmxMblpoYkhWbElEMDlQU0JoZEhSeVNXUTdYRzVjZEZ4MFhIUjlPMXh1WEhSY2RIMDdYRzVjYmx4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBMklDMGdOeUJ2Ym14NVhHNWNkRngwTHk4Z1oyVjBSV3hsYldWdWRFSjVTV1FnYVhNZ2JtOTBJSEpsYkdsaFlteGxJR0Z6SUdFZ1ptbHVaQ0J6YUc5eWRHTjFkRnh1WEhSY2RFVjRjSEl1Wm1sdVpGdGNJa2xFWENKZElEMGdablZ1WTNScGIyNG9JR2xrTENCamIyNTBaWGgwSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBRbmxKWkNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQmtiMk4xYldWdWRFbHpTRlJOVENBcElIdGNibHgwWEhSY2RGeDBkbUZ5SUc1dlpHVXNJR2tzSUdWc1pXMXpMRnh1WEhSY2RGeDBYSFJjZEdWc1pXMGdQU0JqYjI1MFpYaDBMbWRsZEVWc1pXMWxiblJDZVVsa0tDQnBaQ0FwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnWld4bGJTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRlpsY21sbWVTQjBhR1VnYVdRZ1lYUjBjbWxpZFhSbFhHNWNkRngwWEhSY2RGeDBibTlrWlNBOUlHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbFRtOWtaU2hjSW1sa1hDSXBPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dibTlrWlNBbUppQnViMlJsTG5aaGJIVmxJRDA5UFNCcFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCYklHVnNaVzBnWFR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhRdkx5QkdZV3hzSUdKaFkyc2diMjRnWjJWMFJXeGxiV1Z1ZEhOQ2VVNWhiV1ZjYmx4MFhIUmNkRngwWEhSbGJHVnRjeUE5SUdOdmJuUmxlSFF1WjJWMFJXeGxiV1Z1ZEhOQ2VVNWhiV1VvSUdsa0lDazdYRzVjZEZ4MFhIUmNkRngwYVNBOUlEQTdYRzVjZEZ4MFhIUmNkRngwZDJocGJHVWdLQ0FvWld4bGJTQTlJR1ZzWlcxelcya3JLMTBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYm05a1pTQTlJR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxUbTlrWlNoY0ltbGtYQ0lwTzF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NCdWIyUmxJQ1ltSUc1dlpHVXVkbUZzZFdVZ1BUMDlJR2xrSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnV3lCbGJHVnRJRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlGdGRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMDdYRzVjZEgxY2JseHVYSFF2THlCVVlXZGNibHgwUlhod2NpNW1hVzVrVzF3aVZFRkhYQ0pkSUQwZ2MzVndjRzl5ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTQS9YRzVjZEZ4MFpuVnVZM1JwYjI0b0lIUmhaeXdnWTI5dWRHVjRkQ0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlHTnZiblJsZUhRdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJqYjI1MFpYaDBMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0NCMFlXY2dLVHRjYmx4dVhIUmNkRngwTHk4Z1JHOWpkVzFsYm5SR2NtRm5iV1Z1ZENCdWIyUmxjeUJrYjI0bmRDQm9ZWFpsSUdkRlFsUk9YRzVjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0J6ZFhCd2IzSjBMbkZ6WVNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHTnZiblJsZUhRdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnZ2RHRm5JQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0E2WEc1Y2JseDBYSFJtZFc1amRHbHZiaWdnZEdGbkxDQmpiMjUwWlhoMElDa2dlMXh1WEhSY2RGeDBkbUZ5SUdWc1pXMHNYRzVjZEZ4MFhIUmNkSFJ0Y0NBOUlGdGRMRnh1WEhSY2RGeDBYSFJwSUQwZ01DeGNibHgwWEhSY2RGeDBMeThnUW5rZ2FHRndjSGtnWTI5cGJtTnBaR1Z1WTJVc0lHRWdLR0p5YjJ0bGJpa2daMFZDVkU0Z1lYQndaV0Z5Y3lCdmJpQkViMk4xYldWdWRFWnlZV2R0Wlc1MElHNXZaR1Z6SUhSdmIxeHVYSFJjZEZ4MFhIUnlaWE4xYkhSeklEMGdZMjl1ZEdWNGRDNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2dnZEdGbklDazdYRzVjYmx4MFhIUmNkQzh2SUVacGJIUmxjaUJ2ZFhRZ2NHOXpjMmxpYkdVZ1kyOXRiV1Z1ZEhOY2JseDBYSFJjZEdsbUlDZ2dkR0ZuSUQwOVBTQmNJaXBjSWlBcElIdGNibHgwWEhSY2RGeDBkMmhwYkdVZ0tDQW9aV3hsYlNBOUlISmxjM1ZzZEhOYmFTc3JYU2tnS1NCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHMXdMbkIxYzJnb0lHVnNaVzBnS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEcxd08xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGNtVjBkWEp1SUhKbGMzVnNkSE03WEc1Y2RGeDBmVHRjYmx4dVhIUXZMeUJEYkdGemMxeHVYSFJGZUhCeUxtWnBibVJiWENKRFRFRlRVMXdpWFNBOUlITjFjSEJ2Y25RdVoyVjBSV3hsYldWdWRITkNlVU5zWVhOelRtRnRaU0FtSmlCbWRXNWpkR2x2YmlnZ1kyeGhjM05PWVcxbExDQmpiMjUwWlhoMElDa2dlMXh1WEhSY2RHbG1JQ2dnZEhsd1pXOW1JR052Ym5SbGVIUXVaMlYwUld4bGJXVnVkSE5DZVVOc1lYTnpUbUZ0WlNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQmtiMk4xYldWdWRFbHpTRlJOVENBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCamIyNTBaWGgwTG1kbGRFVnNaVzFsYm5SelFubERiR0Z6YzA1aGJXVW9JR05zWVhOelRtRnRaU0FwTzF4dVhIUmNkSDFjYmx4MGZUdGNibHh1WEhRdktpQlJVMEV2YldGMFkyaGxjMU5sYkdWamRHOXlYRzVjZEMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBnS2k5Y2JseHVYSFF2THlCUlUwRWdZVzVrSUcxaGRHTm9aWE5UWld4bFkzUnZjaUJ6ZFhCd2IzSjBYRzVjYmx4MEx5OGdiV0YwWTJobGMxTmxiR1ZqZEc5eUtEcGhZM1JwZG1VcElISmxjRzl5ZEhNZ1ptRnNjMlVnZDJobGJpQjBjblZsSUNoSlJUa3ZUM0JsY21FZ01URXVOU2xjYmx4MGNtSjFaMmQ1VFdGMFkyaGxjeUE5SUZ0ZE8xeHVYRzVjZEM4dklIRlRZU2c2Wm05amRYTXBJSEpsY0c5eWRITWdabUZzYzJVZ2QyaGxiaUIwY25WbElDaERhSEp2YldVZ01qRXBYRzVjZEM4dklGZGxJR0ZzYkc5M0lIUm9hWE1nWW1WallYVnpaU0J2WmlCaElHSjFaeUJwYmlCSlJUZ3ZPU0IwYUdGMElIUm9jbTkzY3lCaGJpQmxjbkp2Y2x4dVhIUXZMeUIzYUdWdVpYWmxjaUJnWkc5amRXMWxiblF1WVdOMGFYWmxSV3hsYldWdWRHQWdhWE1nWVdOalpYTnpaV1FnYjI0Z1lXNGdhV1p5WVcxbFhHNWNkQzh2SUZOdkxDQjNaU0JoYkd4dmR5QTZabTlqZFhNZ2RHOGdjR0Z6Y3lCMGFISnZkV2RvSUZGVFFTQmhiR3dnZEdobElIUnBiV1VnZEc4Z1lYWnZhV1FnZEdobElFbEZJR1Z5Y205eVhHNWNkQzh2SUZObFpTQm9kSFJ3Y3pvdkwySjFaM011YW5GMVpYSjVMbU52YlM5MGFXTnJaWFF2TVRNek56aGNibHgwY21KMVoyZDVVVk5CSUQwZ1cxMDdYRzVjYmx4MGFXWWdLQ0FvYzNWd2NHOXlkQzV4YzJFZ1BTQnlibUYwYVhabExuUmxjM1FvSUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dnS1NrZ0tTQjdYRzVjZEZ4MEx5OGdRblZwYkdRZ1VWTkJJSEpsWjJWNFhHNWNkRngwTHk4Z1VtVm5aWGdnYzNSeVlYUmxaM2tnWVdSdmNIUmxaQ0JtY205dElFUnBaV2R2SUZCbGNtbHVhVnh1WEhSY2RHRnpjMlZ5ZENobWRXNWpkR2x2YmlnZ1pXd2dLU0I3WEc1Y2RGeDBYSFF2THlCVFpXeGxZM1FnYVhNZ2MyVjBJSFJ2SUdWdGNIUjVJSE4wY21sdVp5QnZiaUJ3ZFhKd2IzTmxYRzVjZEZ4MFhIUXZMeUJVYUdseklHbHpJSFJ2SUhSbGMzUWdTVVVuY3lCMGNtVmhkRzFsYm5RZ2IyWWdibTkwSUdWNGNHeHBZMmwwYkhsY2JseDBYSFJjZEM4dklITmxkSFJwYm1jZ1lTQmliMjlzWldGdUlHTnZiblJsYm5RZ1lYUjBjbWxpZFhSbExGeHVYSFJjZEZ4MEx5OGdjMmx1WTJVZ2FYUnpJSEJ5WlhObGJtTmxJSE5vYjNWc1pDQmlaU0JsYm05MVoyaGNibHgwWEhSY2RDOHZJR2gwZEhCek9pOHZZblZuY3k1cWNYVmxjbmt1WTI5dEwzUnBZMnRsZEM4eE1qTTFPVnh1WEhSY2RGeDBaRzlqUld4bGJTNWhjSEJsYm1SRGFHbHNaQ2dnWld3Z0tTNXBibTVsY2toVVRVd2dQU0JjSWp4aElHbGtQU2RjSWlBcklHVjRjR0Z1Wkc4Z0t5QmNJaWMrUEM5aFBsd2lJQ3RjYmx4MFhIUmNkRngwWENJOGMyVnNaV04wSUdsa1BTZGNJaUFySUdWNGNHRnVaRzhnS3lCY0lpMWNYSEpjWEZ4Y0p5QnRjMkZzYkc5M1kyRndkSFZ5WlQwbkp6NWNJaUFyWEc1Y2RGeDBYSFJjZEZ3aVBHOXdkR2x2YmlCelpXeGxZM1JsWkQwbkp6NDhMMjl3ZEdsdmJqNDhMM05sYkdWamRENWNJanRjYmx4dVhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVTRMQ0JQY0dWeVlTQXhNUzB4TWk0eE5seHVYSFJjZEZ4MEx5OGdUbTkwYUdsdVp5QnphRzkxYkdRZ1ltVWdjMlZzWldOMFpXUWdkMmhsYmlCbGJYQjBlU0J6ZEhKcGJtZHpJR1p2Ykd4dmR5QmVQU0J2Y2lBa1BTQnZjaUFxUFZ4dVhIUmNkRngwTHk4Z1ZHaGxJSFJsYzNRZ1lYUjBjbWxpZFhSbElHMTFjM1FnWW1VZ2RXNXJibTkzYmlCcGJpQlBjR1Z5WVNCaWRYUWdYQ0p6WVdabFhDSWdabTl5SUZkcGJsSlVYRzVjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMMjF6Wkc0dWJXbGpjbTl6YjJaMExtTnZiUzlsYmkxMWN5OXNhV0p5WVhKNUwybGxMMmhvTkRZMU16ZzRMbUZ6Y0hnallYUjBjbWxpZFhSbFgzTmxZM1JwYjI1Y2JseDBYSFJjZEdsbUlDZ2daV3d1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hjSWx0dGMyRnNiRzkzWTJGd2RIVnlaVjQ5SnlkZFhDSXBMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkRngwY21KMVoyZDVVVk5CTG5CMWMyZ29JRndpV3lwZUpGMDlYQ0lnS3lCM2FHbDBaWE53WVdObElDc2dYQ0lxS0Q4Nkp5ZDhYRnhjSWx4Y1hDSXBYQ0lnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVU0WEc1Y2RGeDBYSFF2THlCQ2IyOXNaV0Z1SUdGMGRISnBZblYwWlhNZ1lXNWtJRndpZG1Gc2RXVmNJaUJoY21VZ2JtOTBJSFJ5WldGMFpXUWdZMjl5Y21WamRHeDVYRzVjZEZ4MFhIUnBaaUFvSUNGbGJDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tGd2lXM05sYkdWamRHVmtYVndpS1M1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSY2RISmlkV2RuZVZGVFFTNXdkWE5vS0NCY0lseGNYRnhiWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3NnWENJcUtEODZkbUZzZFdWOFhDSWdLeUJpYjI5c1pXRnVjeUFySUZ3aUtWd2lJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFTm9jbTl0WlR3eU9Td2dRVzVrY205cFpEdzBMalFzSUZOaFptRnlhVHczTGpBckxDQnBUMU04Tnk0d0t5d2dVR2hoYm5SdmJVcFRQREV1T1M0NEsxeHVYSFJjZEZ4MGFXWWdLQ0FoWld3dWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnZ1hDSmJhV1IrUFZ3aUlDc2daWGh3WVc1a2J5QXJJRndpTFYxY0lpQXBMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkRngwY21KMVoyZDVVVk5CTG5CMWMyZ29YQ0orUFZ3aUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVjJWaWEybDBMMDl3WlhKaElDMGdPbU5vWldOclpXUWdjMmh2ZFd4a0lISmxkSFZ5YmlCelpXeGxZM1JsWkNCdmNIUnBiMjRnWld4bGJXVnVkSE5jYmx4MFhIUmNkQzh2SUdoMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0x6SXdNVEV2VWtWRExXTnpjek10YzJWc1pXTjBiM0p6TFRJd01URXdPVEk1THlOamFHVmphMlZrWEc1Y2RGeDBYSFF2THlCSlJUZ2dkR2h5YjNkeklHVnljbTl5SUdobGNtVWdZVzVrSUhkcGJHd2dibTkwSUhObFpTQnNZWFJsY2lCMFpYTjBjMXh1WEhSY2RGeDBhV1lnS0NBaFpXd3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGNJanBqYUdWamEyVmtYQ0lwTG14bGJtZDBhQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtSjFaMmQ1VVZOQkxuQjFjMmdvWENJNlkyaGxZMnRsWkZ3aUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nVTJGbVlYSnBJRGdyTENCcFQxTWdPQ3RjYmx4MFhIUmNkQzh2SUdoMGRIQnpPaTh2WW5WbmN5NTNaV0pyYVhRdWIzSm5MM05vYjNkZlluVm5MbU5uYVQ5cFpEMHhNelk0TlRGY2JseDBYSFJjZEM4dklFbHVMWEJoWjJVZ1lITmxiR1ZqZEc5eUkybGtJSE5wWW14cGJtY3RZMjl0WW1sdVlYUnZjaUJ6Wld4bFkzUnZjbUFnWm1GcGJITmNibHgwWEhSY2RHbG1JQ2dnSVdWc0xuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0lGd2lZU05jSWlBcklHVjRjR0Z1Wkc4Z0t5QmNJaXNxWENJZ0tTNXNaVzVuZEdnZ0tTQjdYRzVjZEZ4MFhIUmNkSEppZFdkbmVWRlRRUzV3ZFhOb0tGd2lMaU11SzFzcmZsMWNJaWs3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJoYzNObGNuUW9ablZ1WTNScGIyNG9JR1ZzSUNrZ2UxeHVYSFJjZEZ4MFpXd3VhVzV1WlhKSVZFMU1JRDBnWENJOFlTQm9jbVZtUFNjbklHUnBjMkZpYkdWa1BTZGthWE5oWW14bFpDYytQQzloUGx3aUlDdGNibHgwWEhSY2RGeDBYQ0k4YzJWc1pXTjBJR1JwYzJGaWJHVmtQU2RrYVhOaFlteGxaQ2MrUEc5d2RHbHZiaTgrUEM5elpXeGxZM1ErWENJN1hHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRmRwYm1SdmQzTWdPQ0JPWVhScGRtVWdRWEJ3YzF4dVhIUmNkRngwTHk4Z1ZHaGxJSFI1Y0dVZ1lXNWtJRzVoYldVZ1lYUjBjbWxpZFhSbGN5QmhjbVVnY21WemRISnBZM1JsWkNCa2RYSnBibWNnTG1sdWJtVnlTRlJOVENCaGMzTnBaMjV0Wlc1MFhHNWNkRngwWEhSMllYSWdhVzV3ZFhRZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWFXNXdkWFJjSWlrN1hHNWNkRngwWEhScGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0lGd2lkSGx3WlZ3aUxDQmNJbWhwWkdSbGJsd2lJQ2s3WEc1Y2RGeDBYSFJsYkM1aGNIQmxibVJEYUdsc1pDZ2dhVzV3ZFhRZ0tTNXpaWFJCZEhSeWFXSjFkR1VvSUZ3aWJtRnRaVndpTENCY0lrUmNJaUFwTzF4dVhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSVGhjYmx4MFhIUmNkQzh2SUVWdVptOXlZMlVnWTJGelpTMXpaVzV6YVhScGRtbDBlU0J2WmlCdVlXMWxJR0YwZEhKcFluVjBaVnh1WEhSY2RGeDBhV1lnS0NCbGJDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tGd2lXMjVoYldVOVpGMWNJaWt1YkdWdVozUm9JQ2tnZTF4dVhIUmNkRngwWEhSeVluVm5aM2xSVTBFdWNIVnphQ2dnWENKdVlXMWxYQ0lnS3lCM2FHbDBaWE53WVdObElDc2dYQ0lxV3lwZUpId2hmbDAvUFZ3aUlDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVaR0lETXVOU0F0SURwbGJtRmliR1ZrTHpwa2FYTmhZbXhsWkNCaGJtUWdhR2xrWkdWdUlHVnNaVzFsYm5SeklDaG9hV1JrWlc0Z1pXeGxiV1Z1ZEhNZ1lYSmxJSE4wYVd4c0lHVnVZV0pzWldRcFhHNWNkRngwWEhRdkx5QkpSVGdnZEdoeWIzZHpJR1Z5Y205eUlHaGxjbVVnWVc1a0lIZHBiR3dnYm05MElITmxaU0JzWVhSbGNpQjBaWE4wYzF4dVhIUmNkRngwYVdZZ0tDQmxiQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLRndpT21WdVlXSnNaV1JjSWlrdWJHVnVaM1JvSUNFOVBTQXlJQ2tnZTF4dVhIUmNkRngwWEhSeVluVm5aM2xSVTBFdWNIVnphQ2dnWENJNlpXNWhZbXhsWkZ3aUxDQmNJanBrYVhOaFlteGxaRndpSUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRWxGT1MweE1TdGNibHgwWEhSY2RDOHZJRWxGSjNNZ09tUnBjMkZpYkdWa0lITmxiR1ZqZEc5eUlHUnZaWE1nYm05MElIQnBZMnNnZFhBZ2RHaGxJR05vYVd4a2NtVnVJRzltSUdScGMyRmliR1ZrSUdacFpXeGtjMlYwYzF4dVhIUmNkRngwWkc5alJXeGxiUzVoY0hCbGJtUkRhR2xzWkNnZ1pXd2dLUzVrYVhOaFlteGxaQ0E5SUhSeWRXVTdYRzVjZEZ4MFhIUnBaaUFvSUdWc0xuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSTZaR2x6WVdKc1pXUmNJaWt1YkdWdVozUm9JQ0U5UFNBeUlDa2dlMXh1WEhSY2RGeDBYSFJ5WW5WblozbFJVMEV1Y0hWemFDZ2dYQ0k2Wlc1aFlteGxaRndpTENCY0lqcGthWE5oWW14bFpGd2lJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFOXdaWEpoSURFd0xURXhJR1J2WlhNZ2JtOTBJSFJvY205M0lHOXVJSEJ2YzNRdFkyOXRiV0VnYVc1MllXeHBaQ0J3YzJWMVpHOXpYRzVjZEZ4MFhIUmxiQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLRndpS2l3NmVGd2lLVHRjYmx4MFhIUmNkSEppZFdkbmVWRlRRUzV3ZFhOb0tGd2lMQzRxT2x3aUtUdGNibHgwWEhSOUtUdGNibHgwZlZ4dVhHNWNkR2xtSUNnZ0tITjFjSEJ2Y25RdWJXRjBZMmhsYzFObGJHVmpkRzl5SUQwZ2NtNWhkR2wyWlM1MFpYTjBLQ0FvYldGMFkyaGxjeUE5SUdSdlkwVnNaVzB1YldGMFkyaGxjeUI4ZkZ4dVhIUmNkR1J2WTBWc1pXMHVkMlZpYTJsMFRXRjBZMmhsYzFObGJHVmpkRzl5SUh4OFhHNWNkRngwWkc5alJXeGxiUzV0YjNwTllYUmphR1Z6VTJWc1pXTjBiM0lnZkh4Y2JseDBYSFJrYjJORmJHVnRMbTlOWVhSamFHVnpVMlZzWldOMGIzSWdmSHhjYmx4MFhIUmtiMk5GYkdWdExtMXpUV0YwWTJobGMxTmxiR1ZqZEc5eUtTQXBLU0FwSUh0Y2JseHVYSFJjZEdGemMyVnlkQ2htZFc1amRHbHZiaWdnWld3Z0tTQjdYRzVjZEZ4MFhIUXZMeUJEYUdWamF5QjBieUJ6WldVZ2FXWWdhWFFuY3lCd2IzTnphV0pzWlNCMGJ5QmtieUJ0WVhSamFHVnpVMlZzWldOMGIzSmNibHgwWEhSY2RDOHZJRzl1SUdFZ1pHbHpZMjl1Ym1WamRHVmtJRzV2WkdVZ0tFbEZJRGtwWEc1Y2RGeDBYSFJ6ZFhCd2IzSjBMbVJwYzJOdmJtNWxZM1JsWkUxaGRHTm9JRDBnYldGMFkyaGxjeTVqWVd4c0tDQmxiQ3dnWENJcVhDSWdLVHRjYmx4dVhIUmNkRngwTHk4Z1ZHaHBjeUJ6YUc5MWJHUWdabUZwYkNCM2FYUm9JR0Z1SUdWNFkyVndkR2x2Ymx4dVhIUmNkRngwTHk4Z1IyVmphMjhnWkc5bGN5QnViM1FnWlhKeWIzSXNJSEpsZEhWeWJuTWdabUZzYzJVZ2FXNXpkR1ZoWkZ4dVhIUmNkRngwYldGMFkyaGxjeTVqWVd4c0tDQmxiQ3dnWENKYmN5RTlKeWRkT25oY0lpQXBPMXh1WEhSY2RGeDBjbUoxWjJkNVRXRjBZMmhsY3k1d2RYTm9LQ0JjSWlFOVhDSXNJSEJ6WlhWa2IzTWdLVHRjYmx4MFhIUjlLVHRjYmx4MGZWeHVYRzVjZEhKaWRXZG5lVkZUUVNBOUlISmlkV2RuZVZGVFFTNXNaVzVuZEdnZ0ppWWdibVYzSUZKbFowVjRjQ2dnY21KMVoyZDVVVk5CTG1wdmFXNG9YQ0o4WENJcElDazdYRzVjZEhKaWRXZG5lVTFoZEdOb1pYTWdQU0J5WW5WblozbE5ZWFJqYUdWekxteGxibWQwYUNBbUppQnVaWGNnVW1WblJYaHdLQ0J5WW5WblozbE5ZWFJqYUdWekxtcHZhVzRvWENKOFhDSXBJQ2s3WEc1Y2JseDBMeW9nUTI5dWRHRnBibk5jYmx4MExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNBcUwxeHVYSFJvWVhORGIyMXdZWEpsSUQwZ2NtNWhkR2wyWlM1MFpYTjBLQ0JrYjJORmJHVnRMbU52YlhCaGNtVkViMk4xYldWdWRGQnZjMmwwYVc5dUlDazdYRzVjYmx4MEx5OGdSV3hsYldWdWRDQmpiMjUwWVdsdWN5QmhibTkwYUdWeVhHNWNkQzh2SUZCMWNuQnZjMlZtZFd4c2VTQnpaV3htTFdWNFkyeDFjMmwyWlZ4dVhIUXZMeUJCY3lCcGJpd2dZVzRnWld4bGJXVnVkQ0JrYjJWeklHNXZkQ0JqYjI1MFlXbHVJR2wwYzJWc1pseHVYSFJqYjI1MFlXbHVjeUE5SUdoaGMwTnZiWEJoY21VZ2ZId2djbTVoZEdsMlpTNTBaWE4wS0NCa2IyTkZiR1Z0TG1OdmJuUmhhVzV6SUNrZ1AxeHVYSFJjZEdaMWJtTjBhVzl1S0NCaExDQmlJQ2tnZTF4dVhIUmNkRngwZG1GeUlHRmtiM2R1SUQwZ1lTNXViMlJsVkhsd1pTQTlQVDBnT1NBL0lHRXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MElEb2dZU3hjYmx4MFhIUmNkRngwWW5Wd0lEMGdZaUFtSmlCaUxuQmhjbVZ1ZEU1dlpHVTdYRzVjZEZ4MFhIUnlaWFIxY200Z1lTQTlQVDBnWW5Wd0lIeDhJQ0VoS0NCaWRYQWdKaVlnWW5Wd0xtNXZaR1ZVZVhCbElEMDlQU0F4SUNZbUlDaGNibHgwWEhSY2RGeDBZV1J2ZDI0dVkyOXVkR0ZwYm5NZ1AxeHVYSFJjZEZ4MFhIUmNkR0ZrYjNkdUxtTnZiblJoYVc1ektDQmlkWEFnS1NBNlhHNWNkRngwWEhSY2RGeDBZUzVqYjIxd1lYSmxSRzlqZFcxbGJuUlFiM05wZEdsdmJpQW1KaUJoTG1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVLQ0JpZFhBZ0tTQW1JREUyWEc1Y2RGeDBYSFFwS1R0Y2JseDBYSFI5SURwY2JseDBYSFJtZFc1amRHbHZiaWdnWVN3Z1lpQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ1lpQXBJSHRjYmx4MFhIUmNkRngwZDJocGJHVWdLQ0FvWWlBOUlHSXVjR0Z5Wlc1MFRtOWtaU2tnS1NCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCaUlEMDlQU0JoSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwZlR0Y2JseHVYSFF2S2lCVGIzSjBhVzVuWEc1Y2RDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwZ0tpOWNibHh1WEhRdkx5QkViMk4xYldWdWRDQnZjbVJsY2lCemIzSjBhVzVuWEc1Y2RITnZjblJQY21SbGNpQTlJR2hoYzBOdmJYQmhjbVVnUDF4dVhIUm1kVzVqZEdsdmJpZ2dZU3dnWWlBcElIdGNibHh1WEhSY2RDOHZJRVpzWVdjZ1ptOXlJR1IxY0d4cFkyRjBaU0J5WlcxdmRtRnNYRzVjZEZ4MGFXWWdLQ0JoSUQwOVBTQmlJQ2tnZTF4dVhIUmNkRngwYUdGelJIVndiR2xqWVhSbElEMGdkSEoxWlR0Y2JseDBYSFJjZEhKbGRIVnliaUF3TzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZOdmNuUWdiMjRnYldWMGFHOWtJR1Y0YVhOMFpXNWpaU0JwWmlCdmJteDVJRzl1WlNCcGJuQjFkQ0JvWVhNZ1kyOXRjR0Z5WlVSdlkzVnRaVzUwVUc5emFYUnBiMjVjYmx4MFhIUjJZWElnWTI5dGNHRnlaU0E5SUNGaExtTnZiWEJoY21WRWIyTjFiV1Z1ZEZCdmMybDBhVzl1SUMwZ0lXSXVZMjl0Y0dGeVpVUnZZM1Z0Wlc1MFVHOXphWFJwYjI0N1hHNWNkRngwYVdZZ0tDQmpiMjF3WVhKbElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHTnZiWEJoY21VN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1EyRnNZM1ZzWVhSbElIQnZjMmwwYVc5dUlHbG1JR0p2ZEdnZ2FXNXdkWFJ6SUdKbGJHOXVaeUIwYnlCMGFHVWdjMkZ0WlNCa2IyTjFiV1Z1ZEZ4dVhIUmNkR052YlhCaGNtVWdQU0FvSUdFdWIzZHVaWEpFYjJOMWJXVnVkQ0I4ZkNCaElDa2dQVDA5SUNnZ1lpNXZkMjVsY2tSdlkzVnRaVzUwSUh4OElHSWdLU0EvWEc1Y2RGeDBYSFJoTG1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVLQ0JpSUNrZ09seHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnZDJVZ2EyNXZkeUIwYUdWNUlHRnlaU0JrYVhOamIyNXVaV04wWldSY2JseDBYSFJjZERFN1hHNWNibHgwWEhRdkx5QkVhWE5qYjI1dVpXTjBaV1FnYm05a1pYTmNibHgwWEhScFppQW9JR052YlhCaGNtVWdKaUF4SUh4OFhHNWNkRngwWEhRb0lYTjFjSEJ2Y25RdWMyOXlkRVJsZEdGamFHVmtJQ1ltSUdJdVkyOXRjR0Z5WlVSdlkzVnRaVzUwVUc5emFYUnBiMjRvSUdFZ0tTQTlQVDBnWTI5dGNHRnlaU2tnS1NCN1hHNWNibHgwWEhSY2RDOHZJRU5vYjI5elpTQjBhR1VnWm1seWMzUWdaV3hsYldWdWRDQjBhR0YwSUdseklISmxiR0YwWldRZ2RHOGdiM1Z5SUhCeVpXWmxjbkpsWkNCa2IyTjFiV1Z1ZEZ4dVhIUmNkRngwYVdZZ0tDQmhJRDA5UFNCa2IyTjFiV1Z1ZENCOGZDQmhMbTkzYm1WeVJHOWpkVzFsYm5RZ1BUMDlJSEJ5WldabGNuSmxaRVJ2WXlBbUppQmpiMjUwWVdsdWN5aHdjbVZtWlhKeVpXUkViMk1zSUdFcElDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdMVEU3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJwWmlBb0lHSWdQVDA5SUdSdlkzVnRaVzUwSUh4OElHSXViM2R1WlhKRWIyTjFiV1Z1ZENBOVBUMGdjSEpsWm1WeWNtVmtSRzlqSUNZbUlHTnZiblJoYVc1ektIQnlaV1psY25KbFpFUnZZeXdnWWlrZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQXhPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCTllXbHVkR0ZwYmlCdmNtbG5hVzVoYkNCdmNtUmxjbHh1WEhSY2RGeDBjbVYwZFhKdUlITnZjblJKYm5CMWRDQS9YRzVjZEZ4MFhIUmNkQ2dnYVc1a1pYaFBaaWdnYzI5eWRFbHVjSFYwTENCaElDa2dMU0JwYm1SbGVFOW1LQ0J6YjNKMFNXNXdkWFFzSUdJZ0tTQXBJRHBjYmx4MFhIUmNkRngwTUR0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdZMjl0Y0dGeVpTQW1JRFFnUHlBdE1TQTZJREU3WEc1Y2RIMGdPbHh1WEhSbWRXNWpkR2x2YmlnZ1lTd2dZaUFwSUh0Y2JseDBYSFF2THlCRmVHbDBJR1ZoY214NUlHbG1JSFJvWlNCdWIyUmxjeUJoY21VZ2FXUmxiblJwWTJGc1hHNWNkRngwYVdZZ0tDQmhJRDA5UFNCaUlDa2dlMXh1WEhSY2RGeDBhR0Z6UkhWd2JHbGpZWFJsSUQwZ2RISjFaVHRjYmx4MFhIUmNkSEpsZEhWeWJpQXdPMXh1WEhSY2RIMWNibHh1WEhSY2RIWmhjaUJqZFhJc1hHNWNkRngwWEhScElEMGdNQ3hjYmx4MFhIUmNkR0YxY0NBOUlHRXVjR0Z5Wlc1MFRtOWtaU3hjYmx4MFhIUmNkR0oxY0NBOUlHSXVjR0Z5Wlc1MFRtOWtaU3hjYmx4MFhIUmNkR0Z3SUQwZ1d5QmhJRjBzWEc1Y2RGeDBYSFJpY0NBOUlGc2dZaUJkTzF4dVhHNWNkRngwTHk4Z1VHRnlaVzUwYkdWemN5QnViMlJsY3lCaGNtVWdaV2wwYUdWeUlHUnZZM1Z0Wlc1MGN5QnZjaUJrYVhOamIyNXVaV04wWldSY2JseDBYSFJwWmlBb0lDRmhkWEFnZkh3Z0lXSjFjQ0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJoSUQwOVBTQmtiMk4xYldWdWRDQS9JQzB4SURwY2JseDBYSFJjZEZ4MFlpQTlQVDBnWkc5amRXMWxiblFnUHlBeElEcGNibHgwWEhSY2RGeDBZWFZ3SUQ4Z0xURWdPbHh1WEhSY2RGeDBYSFJpZFhBZ1B5QXhJRHBjYmx4MFhIUmNkRngwYzI5eWRFbHVjSFYwSUQ5Y2JseDBYSFJjZEZ4MEtDQnBibVJsZUU5bUtDQnpiM0owU1c1d2RYUXNJR0VnS1NBdElHbHVaR1Y0VDJZb0lITnZjblJKYm5CMWRDd2dZaUFwSUNrZ09seHVYSFJjZEZ4MFhIUXdPMXh1WEc1Y2RGeDBMeThnU1dZZ2RHaGxJRzV2WkdWeklHRnlaU0J6YVdKc2FXNW5jeXdnZDJVZ1kyRnVJR1J2SUdFZ2NYVnBZMnNnWTJobFkydGNibHgwWEhSOUlHVnNjMlVnYVdZZ0tDQmhkWEFnUFQwOUlHSjFjQ0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJ6YVdKc2FXNW5RMmhsWTJzb0lHRXNJR0lnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCUGRHaGxjbmRwYzJVZ2QyVWdibVZsWkNCbWRXeHNJR3hwYzNSeklHOW1JSFJvWldseUlHRnVZMlZ6ZEc5eWN5Qm1iM0lnWTI5dGNHRnlhWE52Ymx4dVhIUmNkR04xY2lBOUlHRTdYRzVjZEZ4MGQyaHBiR1VnS0NBb1kzVnlJRDBnWTNWeUxuQmhjbVZ1ZEU1dlpHVXBJQ2tnZTF4dVhIUmNkRngwWVhBdWRXNXphR2xtZENnZ1kzVnlJQ2s3WEc1Y2RGeDBmVnh1WEhSY2RHTjFjaUE5SUdJN1hHNWNkRngwZDJocGJHVWdLQ0FvWTNWeUlEMGdZM1Z5TG5CaGNtVnVkRTV2WkdVcElDa2dlMXh1WEhSY2RGeDBZbkF1ZFc1emFHbG1kQ2dnWTNWeUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdWMkZzYXlCa2IzZHVJSFJvWlNCMGNtVmxJR3h2YjJ0cGJtY2dabTl5SUdFZ1pHbHpZM0psY0dGdVkzbGNibHgwWEhSM2FHbHNaU0FvSUdGd1cybGRJRDA5UFNCaWNGdHBYU0FwSUh0Y2JseDBYSFJjZEdrckt6dGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnYVNBL1hHNWNkRngwWEhRdkx5QkVieUJoSUhOcFlteHBibWNnWTJobFkyc2dhV1lnZEdobElHNXZaR1Z6SUdoaGRtVWdZU0JqYjIxdGIyNGdZVzVqWlhOMGIzSmNibHgwWEhSY2RITnBZbXhwYm1kRGFHVmpheWdnWVhCYmFWMHNJR0p3VzJsZElDa2dPbHh1WEc1Y2RGeDBYSFF2THlCUGRHaGxjbmRwYzJVZ2JtOWtaWE1nYVc0Z2IzVnlJR1J2WTNWdFpXNTBJSE52Y25RZ1ptbHljM1JjYmx4MFhIUmNkR0Z3VzJsZElEMDlQU0J3Y21WbVpYSnlaV1JFYjJNZ1B5QXRNU0E2WEc1Y2RGeDBYSFJpY0Z0cFhTQTlQVDBnY0hKbFptVnljbVZrUkc5aklEOGdNU0E2WEc1Y2RGeDBYSFF3TzF4dVhIUjlPMXh1WEc1Y2RISmxkSFZ5YmlCa2IyTjFiV1Z1ZER0Y2JuMDdYRzVjYmxOcGVucHNaUzV0WVhSamFHVnpJRDBnWm5WdVkzUnBiMjRvSUdWNGNISXNJR1ZzWlcxbGJuUnpJQ2tnZTF4dVhIUnlaWFIxY200Z1UybDZlbXhsS0NCbGVIQnlMQ0J1ZFd4c0xDQnVkV3hzTENCbGJHVnRaVzUwY3lBcE8xeHVmVHRjYmx4dVUybDZlbXhsTG0xaGRHTm9aWE5UWld4bFkzUnZjaUE5SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0JsZUhCeUlDa2dlMXh1WEhRdkx5QlRaWFFnWkc5amRXMWxiblFnZG1GeWN5QnBaaUJ1WldWa1pXUmNibHgwYVdZZ0tDQW9JR1ZzWlcwdWIzZHVaWEpFYjJOMWJXVnVkQ0I4ZkNCbGJHVnRJQ2tnSVQwOUlHUnZZM1Z0Wlc1MElDa2dlMXh1WEhSY2RITmxkRVJ2WTNWdFpXNTBLQ0JsYkdWdElDazdYRzVjZEgxY2JseHVYSFF2THlCTllXdGxJSE4xY21VZ2RHaGhkQ0JoZEhSeWFXSjFkR1VnYzJWc1pXTjBiM0p6SUdGeVpTQnhkVzkwWldSY2JseDBaWGh3Y2lBOUlHVjRjSEl1Y21Wd2JHRmpaU2dnY21GMGRISnBZblYwWlZGMWIzUmxjeXdnWENJOUp5UXhKMTFjSWlBcE8xeHVYRzVjZEdsbUlDZ2djM1Z3Y0c5eWRDNXRZWFJqYUdWelUyVnNaV04wYjNJZ0ppWWdaRzlqZFcxbGJuUkpjMGhVVFV3Z0ppWmNibHgwWEhRaFkyOXRjR2xzWlhKRFlXTm9aVnNnWlhod2NpQXJJRndpSUZ3aUlGMGdKaVpjYmx4MFhIUW9JQ0Z5WW5WblozbE5ZWFJqYUdWeklIeDhJQ0Z5WW5WblozbE5ZWFJqYUdWekxuUmxjM1FvSUdWNGNISWdLU0FwSUNZbVhHNWNkRngwS0NBaGNtSjFaMmQ1VVZOQklDQWdJQ0I4ZkNBaGNtSjFaMmQ1VVZOQkxuUmxjM1FvSUdWNGNISWdLU0FwSUNrZ2UxeHVYRzVjZEZ4MGRISjVJSHRjYmx4MFhIUmNkSFpoY2lCeVpYUWdQU0J0WVhSamFHVnpMbU5oYkd3b0lHVnNaVzBzSUdWNGNISWdLVHRjYmx4dVhIUmNkRngwTHk4Z1NVVWdPU2R6SUcxaGRHTm9aWE5UWld4bFkzUnZjaUJ5WlhSMWNtNXpJR1poYkhObElHOXVJR1JwYzJOdmJtNWxZM1JsWkNCdWIyUmxjMXh1WEhSY2RGeDBhV1lnS0NCeVpYUWdmSHdnYzNWd2NHOXlkQzVrYVhOamIyNXVaV04wWldSTllYUmphQ0I4ZkZ4dVhIUmNkRngwWEhSY2RDOHZJRUZ6SUhkbGJHd3NJR1JwYzJOdmJtNWxZM1JsWkNCdWIyUmxjeUJoY21VZ2MyRnBaQ0IwYnlCaVpTQnBiaUJoSUdSdlkzVnRaVzUwWEc1Y2RGeDBYSFJjZEZ4MEx5OGdabkpoWjIxbGJuUWdhVzRnU1VVZ09WeHVYSFJjZEZ4MFhIUmNkR1ZzWlcwdVpHOWpkVzFsYm5RZ0ppWWdaV3hsYlM1a2IyTjFiV1Z1ZEM1dWIyUmxWSGx3WlNBaFBUMGdNVEVnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQmpZWFJqYUNBb1pTa2dlMzFjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJUYVhwNmJHVW9JR1Y0Y0hJc0lHUnZZM1Z0Wlc1MExDQnVkV3hzTENCYklHVnNaVzBnWFNBcExteGxibWQwYUNBK0lEQTdYRzU5TzF4dVhHNVRhWHA2YkdVdVkyOXVkR0ZwYm5NZ1BTQm1kVzVqZEdsdmJpZ2dZMjl1ZEdWNGRDd2daV3hsYlNBcElIdGNibHgwTHk4Z1UyVjBJR1J2WTNWdFpXNTBJSFpoY25NZ2FXWWdibVZsWkdWa1hHNWNkR2xtSUNnZ0tDQmpiMjUwWlhoMExtOTNibVZ5Ukc5amRXMWxiblFnZkh3Z1kyOXVkR1Y0ZENBcElDRTlQU0JrYjJOMWJXVnVkQ0FwSUh0Y2JseDBYSFJ6WlhSRWIyTjFiV1Z1ZENnZ1kyOXVkR1Y0ZENBcE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCamIyNTBZV2x1Y3lnZ1kyOXVkR1Y0ZEN3Z1pXeGxiU0FwTzF4dWZUdGNibHh1VTJsNmVteGxMbUYwZEhJZ1BTQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z2JtRnRaU0FwSUh0Y2JseDBMeThnVTJWMElHUnZZM1Z0Wlc1MElIWmhjbk1nYVdZZ2JtVmxaR1ZrWEc1Y2RHbG1JQ2dnS0NCbGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5RZ2ZId2daV3hsYlNBcElDRTlQU0JrYjJOMWJXVnVkQ0FwSUh0Y2JseDBYSFJ6WlhSRWIyTjFiV1Z1ZENnZ1pXeGxiU0FwTzF4dVhIUjlYRzVjYmx4MGRtRnlJR1p1SUQwZ1JYaHdjaTVoZEhSeVNHRnVaR3hsV3lCdVlXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ1hTeGNibHgwWEhRdkx5QkViMjRuZENCblpYUWdabTl2YkdWa0lHSjVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVWdjSEp2Y0dWeWRHbGxjeUFvYWxGMVpYSjVJQ014TXpnd055bGNibHgwWEhSMllXd2dQU0JtYmlBbUppQm9ZWE5QZDI0dVkyRnNiQ2dnUlhod2NpNWhkSFJ5U0dGdVpHeGxMQ0J1WVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnS1NBL1hHNWNkRngwWEhSbWJpZ2daV3hsYlN3Z2JtRnRaU3dnSVdSdlkzVnRaVzUwU1hOSVZFMU1JQ2tnT2x4dVhIUmNkRngwZFc1a1pXWnBibVZrTzF4dVhHNWNkSEpsZEhWeWJpQjJZV3dnSVQwOUlIVnVaR1ZtYVc1bFpDQS9YRzVjZEZ4MGRtRnNJRHBjYmx4MFhIUnpkWEJ3YjNKMExtRjBkSEpwWW5WMFpYTWdmSHdnSVdSdlkzVnRaVzUwU1hOSVZFMU1JRDljYmx4MFhIUmNkR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxLQ0J1WVcxbElDa2dPbHh1WEhSY2RGeDBLSFpoYkNBOUlHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbFRtOWtaU2h1WVcxbEtTa2dKaVlnZG1Gc0xuTndaV05wWm1sbFpDQS9YRzVjZEZ4MFhIUmNkSFpoYkM1MllXeDFaU0E2WEc1Y2RGeDBYSFJjZEc1MWJHdzdYRzU5TzF4dVhHNVRhWHA2YkdVdVpYTmpZWEJsSUQwZ1puVnVZM1JwYjI0b0lITmxiQ0FwSUh0Y2JseDBjbVYwZFhKdUlDaHpaV3dnS3lCY0lsd2lLUzV5WlhCc1lXTmxLQ0J5WTNOelpYTmpZWEJsTENCbVkzTnpaWE5qWVhCbElDazdYRzU5TzF4dVhHNVRhWHA2YkdVdVpYSnliM0lnUFNCbWRXNWpkR2x2YmlnZ2JYTm5JQ2tnZTF4dVhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0lGd2lVM2x1ZEdGNElHVnljbTl5TENCMWJuSmxZMjluYm1sNlpXUWdaWGh3Y21WemMybHZiam9nWENJZ0t5QnRjMmNnS1R0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUkc5amRXMWxiblFnYzI5eWRHbHVaeUJoYm1RZ2NtVnRiM1pwYm1jZ1pIVndiR2xqWVhSbGMxeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVVeHBhMlY5SUhKbGMzVnNkSE5jYmlBcUwxeHVVMmw2ZW14bExuVnVhWEYxWlZOdmNuUWdQU0JtZFc1amRHbHZiaWdnY21WemRXeDBjeUFwSUh0Y2JseDBkbUZ5SUdWc1pXMHNYRzVjZEZ4MFpIVndiR2xqWVhSbGN5QTlJRnRkTEZ4dVhIUmNkR29nUFNBd0xGeHVYSFJjZEdrZ1BTQXdPMXh1WEc1Y2RDOHZJRlZ1YkdWemN5QjNaU0FxYTI1dmR5b2dkMlVnWTJGdUlHUmxkR1ZqZENCa2RYQnNhV05oZEdWekxDQmhjM04xYldVZ2RHaGxhWElnY0hKbGMyVnVZMlZjYmx4MGFHRnpSSFZ3YkdsallYUmxJRDBnSVhOMWNIQnZjblF1WkdWMFpXTjBSSFZ3YkdsallYUmxjenRjYmx4MGMyOXlkRWx1Y0hWMElEMGdJWE4xY0hCdmNuUXVjMjl5ZEZOMFlXSnNaU0FtSmlCeVpYTjFiSFJ6TG5Oc2FXTmxLQ0F3SUNrN1hHNWNkSEpsYzNWc2RITXVjMjl5ZENnZ2MyOXlkRTl5WkdWeUlDazdYRzVjYmx4MGFXWWdLQ0JvWVhORWRYQnNhV05oZEdVZ0tTQjdYRzVjZEZ4MGQyaHBiR1VnS0NBb1pXeGxiU0E5SUhKbGMzVnNkSE5iYVNzclhTa2dLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHVnNaVzBnUFQwOUlISmxjM1ZzZEhOYklHa2dYU0FwSUh0Y2JseDBYSFJjZEZ4MGFpQTlJR1IxY0d4cFkyRjBaWE11Y0hWemFDZ2dhU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MFhIUjNhR2xzWlNBb0lHb3RMU0FwSUh0Y2JseDBYSFJjZEhKbGMzVnNkSE11YzNCc2FXTmxLQ0JrZFhCc2FXTmhkR1Z6V3lCcUlGMHNJREVnS1R0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhRdkx5QkRiR1ZoY2lCcGJuQjFkQ0JoWm5SbGNpQnpiM0owYVc1bklIUnZJSEpsYkdWaGMyVWdiMkpxWldOMGMxeHVYSFF2THlCVFpXVWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMnB4ZFdWeWVTOXphWHA2YkdVdmNIVnNiQzh5TWpWY2JseDBjMjl5ZEVsdWNIVjBJRDBnYm5Wc2JEdGNibHh1WEhSeVpYUjFjbTRnY21WemRXeDBjenRjYm4wN1hHNWNiaThxS2x4dUlDb2dWWFJwYkdsMGVTQm1kVzVqZEdsdmJpQm1iM0lnY21WMGNtbGxkbWx1WnlCMGFHVWdkR1Y0ZENCMllXeDFaU0J2WmlCaGJpQmhjbkpoZVNCdlppQkVUMDBnYm05a1pYTmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDhSV3hsYldWdWRIMGdaV3hsYlZ4dUlDb3ZYRzVuWlhSVVpYaDBJRDBnVTJsNmVteGxMbWRsZEZSbGVIUWdQU0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MGRtRnlJRzV2WkdVc1hHNWNkRngwY21WMElEMGdYQ0pjSWl4Y2JseDBYSFJwSUQwZ01DeGNibHgwWEhSdWIyUmxWSGx3WlNBOUlHVnNaVzB1Ym05a1pWUjVjR1U3WEc1Y2JseDBhV1lnS0NBaGJtOWtaVlI1Y0dVZ0tTQjdYRzVjZEZ4MEx5OGdTV1lnYm04Z2JtOWtaVlI1Y0dVc0lIUm9hWE1nYVhNZ1pYaHdaV04wWldRZ2RHOGdZbVVnWVc0Z1lYSnlZWGxjYmx4MFhIUjNhR2xzWlNBb0lDaHViMlJsSUQwZ1pXeGxiVnRwS3l0ZEtTQXBJSHRjYmx4MFhIUmNkQzh2SUVSdklHNXZkQ0IwY21GMlpYSnpaU0JqYjIxdFpXNTBJRzV2WkdWelhHNWNkRngwWEhSeVpYUWdLejBnWjJWMFZHVjRkQ2dnYm05a1pTQXBPMXh1WEhSY2RIMWNibHgwZlNCbGJITmxJR2xtSUNnZ2JtOWtaVlI1Y0dVZ1BUMDlJREVnZkh3Z2JtOWtaVlI1Y0dVZ1BUMDlJRGtnZkh3Z2JtOWtaVlI1Y0dVZ1BUMDlJREV4SUNrZ2UxeHVYSFJjZEM4dklGVnpaU0IwWlhoMFEyOXVkR1Z1ZENCbWIzSWdaV3hsYldWdWRITmNibHgwWEhRdkx5QnBibTVsY2xSbGVIUWdkWE5oWjJVZ2NtVnRiM1psWkNCbWIzSWdZMjl1YzJsemRHVnVZM2tnYjJZZ2JtVjNJR3hwYm1WeklDaHFVWFZsY25rZ0l6RXhNVFV6S1Z4dVhIUmNkR2xtSUNnZ2RIbHdaVzltSUdWc1pXMHVkR1Y0ZEVOdmJuUmxiblFnUFQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlM1MFpYaDBRMjl1ZEdWdWREdGNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwTHk4Z1ZISmhkbVZ5YzJVZ2FYUnpJR05vYVd4a2NtVnVYRzVjZEZ4MFhIUm1iM0lnS0NCbGJHVnRJRDBnWld4bGJTNW1hWEp6ZEVOb2FXeGtPeUJsYkdWdE95QmxiR1Z0SUQwZ1pXeGxiUzV1WlhoMFUybGliR2x1WnlBcElIdGNibHgwWEhSY2RGeDBjbVYwSUNzOUlHZGxkRlJsZUhRb0lHVnNaVzBnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMGdaV3h6WlNCcFppQW9JRzV2WkdWVWVYQmxJRDA5UFNBeklIeDhJRzV2WkdWVWVYQmxJRDA5UFNBMElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCbGJHVnRMbTV2WkdWV1lXeDFaVHRjYmx4MGZWeHVYSFF2THlCRWJ5QnViM1FnYVc1amJIVmtaU0JqYjIxdFpXNTBJRzl5SUhCeWIyTmxjM05wYm1jZ2FXNXpkSEoxWTNScGIyNGdibTlrWlhOY2JseHVYSFJ5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1Ulhod2NpQTlJRk5wZW5wc1pTNXpaV3hsWTNSdmNuTWdQU0I3WEc1Y2JseDBMeThnUTJGdUlHSmxJR0ZrYW5WemRHVmtJR0o1SUhSb1pTQjFjMlZ5WEc1Y2RHTmhZMmhsVEdWdVozUm9PaUExTUN4Y2JseHVYSFJqY21WaGRHVlFjMlYxWkc4NklHMWhjbXRHZFc1amRHbHZiaXhjYmx4dVhIUnRZWFJqYURvZ2JXRjBZMmhGZUhCeUxGeHVYRzVjZEdGMGRISklZVzVrYkdVNklIdDlMRnh1WEc1Y2RHWnBibVE2SUh0OUxGeHVYRzVjZEhKbGJHRjBhWFpsT2lCN1hHNWNkRngwWENJK1hDSTZJSHNnWkdseU9pQmNJbkJoY21WdWRFNXZaR1ZjSWl3Z1ptbHljM1E2SUhSeWRXVWdmU3hjYmx4MFhIUmNJaUJjSWpvZ2V5QmthWEk2SUZ3aWNHRnlaVzUwVG05a1pWd2lJSDBzWEc1Y2RGeDBYQ0lyWENJNklIc2daR2x5T2lCY0luQnlaWFpwYjNWelUybGliR2x1WjF3aUxDQm1hWEp6ZERvZ2RISjFaU0I5TEZ4dVhIUmNkRndpZmx3aU9pQjdJR1JwY2pvZ1hDSndjbVYyYVc5MWMxTnBZbXhwYm1kY0lpQjlYRzVjZEgwc1hHNWNibHgwY0hKbFJtbHNkR1Z5T2lCN1hHNWNkRngwWENKQlZGUlNYQ0k2SUdaMWJtTjBhVzl1S0NCdFlYUmphQ0FwSUh0Y2JseDBYSFJjZEcxaGRHTm9XekZkSUQwZ2JXRjBZMmhiTVYwdWNtVndiR0ZqWlNnZ2NuVnVaWE5qWVhCbExDQm1kVzVsYzJOaGNHVWdLVHRjYmx4dVhIUmNkRngwTHk4Z1RXOTJaU0IwYUdVZ1oybDJaVzRnZG1Gc2RXVWdkRzhnYldGMFkyaGJNMTBnZDJobGRHaGxjaUJ4ZFc5MFpXUWdiM0lnZFc1eGRXOTBaV1JjYmx4MFhIUmNkRzFoZEdOb1d6TmRJRDBnS0NCdFlYUmphRnN6WFNCOGZDQnRZWFJqYUZzMFhTQjhmQ0J0WVhSamFGczFYU0I4ZkNCY0lsd2lJQ2t1Y21Wd2JHRmpaU2dnY25WdVpYTmpZWEJsTENCbWRXNWxjMk5oY0dVZ0tUdGNibHh1WEhSY2RGeDBhV1lnS0NCdFlYUmphRnN5WFNBOVBUMGdYQ0orUFZ3aUlDa2dlMXh1WEhSY2RGeDBYSFJ0WVhSamFGc3pYU0E5SUZ3aUlGd2lJQ3NnYldGMFkyaGJNMTBnS3lCY0lpQmNJanRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJRzFoZEdOb0xuTnNhV05sS0NBd0xDQTBJQ2s3WEc1Y2RGeDBmU3hjYmx4dVhIUmNkRndpUTBoSlRFUmNJam9nWm5WdVkzUnBiMjRvSUcxaGRHTm9JQ2tnZTF4dVhIUmNkRngwTHlvZ2JXRjBZMmhsY3lCbWNtOXRJRzFoZEdOb1JYaHdjbHRjSWtOSVNVeEVYQ0pkWEc1Y2RGeDBYSFJjZERFZ2RIbHdaU0FvYjI1c2VYeHVkR2g4TGk0dUtWeHVYSFJjZEZ4MFhIUXlJSGRvWVhRZ0tHTm9hV3hrZkc5bUxYUjVjR1VwWEc1Y2RGeDBYSFJjZERNZ1lYSm5kVzFsYm5RZ0tHVjJaVzU4YjJSa2ZGeGNaQ3A4WEZ4a0ttNG9XeXN0WFZ4Y1pDc3BQM3d1TGk0cFhHNWNkRngwWEhSY2REUWdlRzR0WTI5dGNHOXVaVzUwSUc5bUlIaHVLM2tnWVhKbmRXMWxiblFnS0ZzckxWMC9YRnhrS201OEtWeHVYSFJjZEZ4MFhIUTFJSE5wWjI0Z2IyWWdlRzR0WTI5dGNHOXVaVzUwWEc1Y2RGeDBYSFJjZERZZ2VDQnZaaUI0YmkxamIyMXdiMjVsYm5SY2JseDBYSFJjZEZ4ME55QnphV2R1SUc5bUlIa3RZMjl0Y0c5dVpXNTBYRzVjZEZ4MFhIUmNkRGdnZVNCdlppQjVMV052YlhCdmJtVnVkRnh1WEhSY2RGeDBLaTljYmx4MFhIUmNkRzFoZEdOb1d6RmRJRDBnYldGMFkyaGJNVjB1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1WEhSY2RGeDBhV1lnS0NCdFlYUmphRnN4WFM1emJHbGpaU2dnTUN3Z015QXBJRDA5UFNCY0ltNTBhRndpSUNrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJ1ZEdndEtpQnlaWEYxYVhKbGN5QmhjbWQxYldWdWRGeHVYSFJjZEZ4MFhIUnBaaUFvSUNGdFlYUmphRnN6WFNBcElIdGNibHgwWEhSY2RGeDBYSFJUYVhwNmJHVXVaWEp5YjNJb0lHMWhkR05vV3pCZElDazdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhRdkx5QnVkVzFsY21saklIZ2dZVzVrSUhrZ2NHRnlZVzFsZEdWeWN5Qm1iM0lnUlhod2NpNW1hV3gwWlhJdVEwaEpURVJjYmx4MFhIUmNkRngwTHk4Z2NtVnRaVzFpWlhJZ2RHaGhkQ0JtWVd4elpTOTBjblZsSUdOaGMzUWdjbVZ6Y0dWamRHbDJaV3g1SUhSdklEQXZNVnh1WEhSY2RGeDBYSFJ0WVhSamFGczBYU0E5SUNzb0lHMWhkR05vV3pSZElEOGdiV0YwWTJoYk5WMGdLeUFvYldGMFkyaGJObDBnZkh3Z01Ta2dPaUF5SUNvZ0tDQnRZWFJqYUZzelhTQTlQVDBnWENKbGRtVnVYQ0lnZkh3Z2JXRjBZMmhiTTEwZ1BUMDlJRndpYjJSa1hDSWdLU0FwTzF4dVhIUmNkRngwWEhSdFlYUmphRnMxWFNBOUlDc29JQ2dnYldGMFkyaGJOMTBnS3lCdFlYUmphRnM0WFNBcElIeDhJRzFoZEdOb1d6TmRJRDA5UFNCY0ltOWtaRndpSUNrN1hHNWNibHgwWEhSY2RDOHZJRzkwYUdWeUlIUjVjR1Z6SUhCeWIyaHBZbWwwSUdGeVozVnRaVzUwYzF4dVhIUmNkRngwZlNCbGJITmxJR2xtSUNnZ2JXRjBZMmhiTTEwZ0tTQjdYRzVjZEZ4MFhIUmNkRk5wZW5wc1pTNWxjbkp2Y2lnZ2JXRjBZMmhiTUYwZ0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlHMWhkR05vTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJjSWxCVFJWVkVUMXdpT2lCbWRXNWpkR2x2YmlnZ2JXRjBZMmdnS1NCN1hHNWNkRngwWEhSMllYSWdaWGhqWlhOekxGeHVYSFJjZEZ4MFhIUjFibkYxYjNSbFpDQTlJQ0Z0WVhSamFGczJYU0FtSmlCdFlYUmphRnN5WFR0Y2JseHVYSFJjZEZ4MGFXWWdLQ0J0WVhSamFFVjRjSEpiWENKRFNFbE1SRndpWFM1MFpYTjBLQ0J0WVhSamFGc3dYU0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1FXTmpaWEIwSUhGMWIzUmxaQ0JoY21kMWJXVnVkSE1nWVhNdGFYTmNibHgwWEhSY2RHbG1JQ2dnYldGMFkyaGJNMTBnS1NCN1hHNWNkRngwWEhSY2RHMWhkR05vV3pKZElEMGdiV0YwWTJoYk5GMGdmSHdnYldGMFkyaGJOVjBnZkh3Z1hDSmNJanRjYmx4dVhIUmNkRngwTHk4Z1UzUnlhWEFnWlhoalpYTnpJR05vWVhKaFkzUmxjbk1nWm5KdmJTQjFibkYxYjNSbFpDQmhjbWQxYldWdWRITmNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9JSFZ1Y1hWdmRHVmtJQ1ltSUhKd2MyVjFaRzh1ZEdWemRDZ2dkVzV4ZFc5MFpXUWdLU0FtSmx4dVhIUmNkRngwWEhRdkx5QkhaWFFnWlhoalpYTnpJR1p5YjIwZ2RHOXJaVzVwZW1VZ0tISmxZM1Z5YzJsMlpXeDVLVnh1WEhSY2RGeDBYSFFvWlhoalpYTnpJRDBnZEc5clpXNXBlbVVvSUhWdWNYVnZkR1ZrTENCMGNuVmxJQ2twSUNZbVhHNWNkRngwWEhSY2RDOHZJR0ZrZG1GdVkyVWdkRzhnZEdobElHNWxlSFFnWTJ4dmMybHVaeUJ3WVhKbGJuUm9aWE5wYzF4dVhIUmNkRngwWEhRb1pYaGpaWE56SUQwZ2RXNXhkVzkwWldRdWFXNWtaWGhQWmlnZ1hDSXBYQ0lzSUhWdWNYVnZkR1ZrTG14bGJtZDBhQ0F0SUdWNFkyVnpjeUFwSUMwZ2RXNXhkVzkwWldRdWJHVnVaM1JvS1NBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCbGVHTmxjM01nYVhNZ1lTQnVaV2RoZEdsMlpTQnBibVJsZUZ4dVhIUmNkRngwWEhSdFlYUmphRnN3WFNBOUlHMWhkR05vV3pCZExuTnNhV05sS0NBd0xDQmxlR05sYzNNZ0tUdGNibHgwWEhSY2RGeDBiV0YwWTJoYk1sMGdQU0IxYm5GMWIzUmxaQzV6YkdsalpTZ2dNQ3dnWlhoalpYTnpJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGSmxkSFZ5YmlCdmJteDVJR05oY0hSMWNtVnpJRzVsWldSbFpDQmllU0IwYUdVZ2NITmxkV1J2SUdacGJIUmxjaUJ0WlhSb2IyUWdLSFI1Y0dVZ1lXNWtJR0Z5WjNWdFpXNTBLVnh1WEhSY2RGeDBjbVYwZFhKdUlHMWhkR05vTG5Oc2FXTmxLQ0F3TENBeklDazdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkR1pwYkhSbGNqb2dlMXh1WEc1Y2RGeDBYQ0pVUVVkY0lqb2dablZ1WTNScGIyNG9JRzV2WkdWT1lXMWxVMlZzWldOMGIzSWdLU0I3WEc1Y2RGeDBYSFIyWVhJZ2JtOWtaVTVoYldVZ1BTQnViMlJsVG1GdFpWTmxiR1ZqZEc5eUxuSmxjR3hoWTJVb0lISjFibVZ6WTJGd1pTd2dablZ1WlhOallYQmxJQ2t1ZEc5TWIzZGxja05oYzJVb0tUdGNibHgwWEhSY2RISmxkSFZ5YmlCdWIyUmxUbUZ0WlZObGJHVmpkRzl5SUQwOVBTQmNJaXBjSWlBL1hHNWNkRngwWEhSY2RHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdkSEoxWlRzZ2ZTQTZYRzVjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJsYkdWdExtNXZaR1ZPWVcxbElDWW1JR1ZzWlcwdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0E5UFQwZ2JtOWtaVTVoYldVN1hHNWNkRngwWEhSY2RIMDdYRzVjZEZ4MGZTeGNibHh1WEhSY2RGd2lRMHhCVTFOY0lqb2dablZ1WTNScGIyNG9JR05zWVhOelRtRnRaU0FwSUh0Y2JseDBYSFJjZEhaaGNpQndZWFIwWlhKdUlEMGdZMnhoYzNORFlXTm9aVnNnWTJ4aGMzTk9ZVzFsSUNzZ1hDSWdYQ0lnWFR0Y2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhCaGRIUmxjbTRnZkh4Y2JseDBYSFJjZEZ4MEtIQmhkSFJsY200Z1BTQnVaWGNnVW1WblJYaHdLQ0JjSWloZWZGd2lJQ3NnZDJocGRHVnpjR0ZqWlNBcklGd2lLVndpSUNzZ1kyeGhjM05PWVcxbElDc2dYQ0lvWENJZ0t5QjNhR2wwWlhOd1lXTmxJQ3NnWENKOEpDbGNJaUFwS1NBbUpseHVYSFJjZEZ4MFhIUmpiR0Z6YzBOaFkyaGxLQ0JqYkdGemMwNWhiV1VzSUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCd1lYUjBaWEp1TG5SbGMzUW9JSFI1Y0dWdlppQmxiR1Z0TG1Oc1lYTnpUbUZ0WlNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFtSmlCbGJHVnRMbU5zWVhOelRtRnRaU0I4ZkNCMGVYQmxiMllnWld4bGJTNW5aWFJCZEhSeWFXSjFkR1VnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnSmlZZ1pXeGxiUzVuWlhSQmRIUnlhV0oxZEdVb1hDSmpiR0Z6YzF3aUtTQjhmQ0JjSWx3aUlDazdYRzVjZEZ4MFhIUmNkSDBwTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJjSWtGVVZGSmNJam9nWm5WdVkzUnBiMjRvSUc1aGJXVXNJRzl3WlhKaGRHOXlMQ0JqYUdWamF5QXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RGeDBkbUZ5SUhKbGMzVnNkQ0E5SUZOcGVucHNaUzVoZEhSeUtDQmxiR1Z0TENCdVlXMWxJQ2s3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0J5WlhOMWJIUWdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnYjNCbGNtRjBiM0lnUFQwOUlGd2lJVDFjSWp0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnBaaUFvSUNGdmNHVnlZWFJ2Y2lBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSEpsYzNWc2RDQXJQU0JjSWx3aU8xeHVYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnZjR1Z5WVhSdmNpQTlQVDBnWENJOVhDSWdQeUJ5WlhOMWJIUWdQVDA5SUdOb1pXTnJJRHBjYmx4MFhIUmNkRngwWEhSdmNHVnlZWFJ2Y2lBOVBUMGdYQ0loUFZ3aUlEOGdjbVZ6ZFd4MElDRTlQU0JqYUdWamF5QTZYRzVjZEZ4MFhIUmNkRngwYjNCbGNtRjBiM0lnUFQwOUlGd2lYajFjSWlBL0lHTm9aV05ySUNZbUlISmxjM1ZzZEM1cGJtUmxlRTltS0NCamFHVmpheUFwSUQwOVBTQXdJRHBjYmx4MFhIUmNkRngwWEhSdmNHVnlZWFJ2Y2lBOVBUMGdYQ0lxUFZ3aUlEOGdZMmhsWTJzZ0ppWWdjbVZ6ZFd4MExtbHVaR1Y0VDJZb0lHTm9aV05ySUNrZ1BpQXRNU0E2WEc1Y2RGeDBYSFJjZEZ4MGIzQmxjbUYwYjNJZ1BUMDlJRndpSkQxY0lpQS9JR05vWldOcklDWW1JSEpsYzNWc2RDNXpiR2xqWlNnZ0xXTm9aV05yTG14bGJtZDBhQ0FwSUQwOVBTQmphR1ZqYXlBNlhHNWNkRngwWEhSY2RGeDBiM0JsY21GMGIzSWdQVDA5SUZ3aWZqMWNJaUEvSUNnZ1hDSWdYQ0lnS3lCeVpYTjFiSFF1Y21Wd2JHRmpaU2dnY25kb2FYUmxjM0JoWTJVc0lGd2lJRndpSUNrZ0t5QmNJaUJjSWlBcExtbHVaR1Y0VDJZb0lHTm9aV05ySUNrZ1BpQXRNU0E2WEc1Y2RGeDBYSFJjZEZ4MGIzQmxjbUYwYjNJZ1BUMDlJRndpZkQxY0lpQS9JSEpsYzNWc2RDQTlQVDBnWTJobFkyc2dmSHdnY21WemRXeDBMbk5zYVdObEtDQXdMQ0JqYUdWamF5NXNaVzVuZEdnZ0t5QXhJQ2tnUFQwOUlHTm9aV05ySUNzZ1hDSXRYQ0lnT2x4dVhIUmNkRngwWEhSY2RHWmhiSE5sTzF4dVhIUmNkRngwZlR0Y2JseDBYSFI5TEZ4dVhHNWNkRngwWENKRFNFbE1SRndpT2lCbWRXNWpkR2x2YmlnZ2RIbHdaU3dnZDJoaGRDd2dZWEpuZFcxbGJuUXNJR1pwY25OMExDQnNZWE4wSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJSE5wYlhCc1pTQTlJSFI1Y0dVdWMyeHBZMlVvSURBc0lETWdLU0FoUFQwZ1hDSnVkR2hjSWl4Y2JseDBYSFJjZEZ4MFptOXlkMkZ5WkNBOUlIUjVjR1V1YzJ4cFkyVW9JQzAwSUNrZ0lUMDlJRndpYkdGemRGd2lMRnh1WEhSY2RGeDBYSFJ2WmxSNWNHVWdQU0IzYUdGMElEMDlQU0JjSW05bUxYUjVjR1ZjSWp0Y2JseHVYSFJjZEZ4MGNtVjBkWEp1SUdacGNuTjBJRDA5UFNBeElDWW1JR3hoYzNRZ1BUMDlJREFnUDF4dVhHNWNkRngwWEhSY2RDOHZJRk5vYjNKMFkzVjBJR1p2Y2lBNmJuUm9MU29vYmlsY2JseDBYSFJjZEZ4MFpuVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlDRWhaV3hsYlM1d1lYSmxiblJPYjJSbE8xeHVYSFJjZEZ4MFhIUjlJRHBjYmx4dVhIUmNkRngwWEhSbWRXNWpkR2x2YmlnZ1pXeGxiU3dnWTI5dWRHVjRkQ3dnZUcxc0lDa2dlMXh1WEhSY2RGeDBYSFJjZEhaaGNpQmpZV05vWlN3Z2RXNXBjWFZsUTJGamFHVXNJRzkxZEdWeVEyRmphR1VzSUc1dlpHVXNJRzV2WkdWSmJtUmxlQ3dnYzNSaGNuUXNYRzVjZEZ4MFhIUmNkRngwWEhSa2FYSWdQU0J6YVcxd2JHVWdJVDA5SUdadmNuZGhjbVFnUHlCY0ltNWxlSFJUYVdKc2FXNW5YQ0lnT2lCY0luQnlaWFpwYjNWelUybGliR2x1WjF3aUxGeHVYSFJjZEZ4MFhIUmNkRngwY0dGeVpXNTBJRDBnWld4bGJTNXdZWEpsYm5ST2IyUmxMRnh1WEhSY2RGeDBYSFJjZEZ4MGJtRnRaU0E5SUc5bVZIbHdaU0FtSmlCbGJHVnRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0Nrc1hHNWNkRngwWEhSY2RGeDBYSFIxYzJWRFlXTm9aU0E5SUNGNGJXd2dKaVlnSVc5bVZIbHdaU3hjYmx4MFhIUmNkRngwWEhSY2RHUnBabVlnUFNCbVlXeHpaVHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2dnY0dGeVpXNTBJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFF2THlBNktHWnBjbk4wZkd4aGMzUjhiMjVzZVNrdEtHTm9hV3hrZkc5bUxYUjVjR1VwWEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhOcGJYQnNaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZDJocGJHVWdLQ0JrYVhJZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBibTlrWlNBOUlHVnNaVzA3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZDJocGJHVWdLQ0FvYm05a1pTQTlJRzV2WkdWYklHUnBjaUJkS1NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2IyWlVlWEJsSUQ5Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBibTlrWlM1dWIyUmxUbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNCdVlXMWxJRHBjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGJtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRkpsZG1WeWMyVWdaR2x5WldOMGFXOXVJR1p2Y2lBNmIyNXNlUzBxSUNocFppQjNaU0JvWVhabGJpZDBJSGxsZENCa2IyNWxJSE52S1Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhOMFlYSjBJRDBnWkdseUlEMGdkSGx3WlNBOVBUMGdYQ0p2Ym14NVhDSWdKaVlnSVhOMFlYSjBJQ1ltSUZ3aWJtVjRkRk5wWW14cGJtZGNJanRjYmx4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEZ4MGMzUmhjblFnUFNCYklHWnZjbmRoY21RZ1B5QndZWEpsYm5RdVptbHljM1JEYUdsc1pDQTZJSEJoY21WdWRDNXNZWE4wUTJocGJHUWdYVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnYm05dUxYaHRiQ0E2Ym5Sb0xXTm9hV3hrS0M0dUxpa2djM1J2Y21WeklHTmhZMmhsSUdSaGRHRWdiMjRnWUhCaGNtVnVkR0JjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWm05eWQyRnlaQ0FtSmlCMWMyVkRZV05vWlNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUWldWcklHQmxiR1Z0WUNCbWNtOXRJR0VnY0hKbGRtbHZkWE5zZVMxallXTm9aV1FnYVc1a1pYaGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUF1TGk1cGJpQmhJR2Q2YVhBdFpuSnBaVzVrYkhrZ2QyRjVYRzVjZEZ4MFhIUmNkRngwWEhSY2RHNXZaR1VnUFNCd1lYSmxiblE3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRzkxZEdWeVEyRmphR1VnUFNCdWIyUmxXeUJsZUhCaGJtUnZJRjBnZkh3Z0tHNXZaR1ZiSUdWNGNHRnVaRzhnWFNBOUlIdDlLVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThPU0J2Ym14NVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklFUmxabVZ1WkNCaFoyRnBibk4wSUdOc2IyNWxaQ0JoZEhSeWIzQmxjblJwWlhNZ0tHcFJkV1Z5ZVNCbmFDMHhOekE1S1Z4dVhIUmNkRngwWEhSY2RGeDBYSFIxYm1seGRXVkRZV05vWlNBOUlHOTFkR1Z5UTJGamFHVmJJRzV2WkdVdWRXNXBjWFZsU1VRZ1hTQjhmRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkQ2h2ZFhSbGNrTmhZMmhsV3lCdWIyUmxMblZ1YVhGMVpVbEVJRjBnUFNCN2ZTazdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBZMkZqYUdVZ1BTQjFibWx4ZFdWRFlXTm9aVnNnZEhsd1pTQmRJSHg4SUZ0ZE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSdWIyUmxTVzVrWlhnZ1BTQmpZV05vWlZzZ01DQmRJRDA5UFNCa2FYSnlkVzV6SUNZbUlHTmhZMmhsV3lBeElGMDdYRzVjZEZ4MFhIUmNkRngwWEhSY2RHUnBabVlnUFNCdWIyUmxTVzVrWlhnZ0ppWWdZMkZqYUdWYklESWdYVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBibTlrWlNBOUlHNXZaR1ZKYm1SbGVDQW1KaUJ3WVhKbGJuUXVZMmhwYkdST2IyUmxjMXNnYm05a1pVbHVaR1Y0SUYwN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MGQyaHBiR1VnS0NBb2JtOWtaU0E5SUNzcmJtOWtaVWx1WkdWNElDWW1JRzV2WkdVZ0ppWWdibTlrWlZzZ1pHbHlJRjBnZkh4Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRVpoYkd4aVlXTnJJSFJ2SUhObFpXdHBibWNnWUdWc1pXMWdJR1p5YjIwZ2RHaGxJSE4wWVhKMFhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MEtHUnBabVlnUFNCdWIyUmxTVzVrWlhnZ1BTQXdLU0I4ZkNCemRHRnlkQzV3YjNBb0tTa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlhhR1Z1SUdadmRXNWtMQ0JqWVdOb1pTQnBibVJsZUdWeklHOXVJR0J3WVhKbGJuUmdJR0Z1WkNCaWNtVmhhMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KaUFySzJScFptWWdKaVlnYm05a1pTQTlQVDBnWld4bGJTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhWdWFYRjFaVU5oWTJobFd5QjBlWEJsSUYwZ1BTQmJJR1JwY25KMWJuTXNJRzV2WkdWSmJtUmxlQ3dnWkdsbVppQmRPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklGVnpaU0J3Y21WMmFXOTFjMng1TFdOaFkyaGxaQ0JsYkdWdFpXNTBJR2x1WkdWNElHbG1JR0YyWVdsc1lXSnNaVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhWelpVTmhZMmhsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJQzR1TG1sdUlHRWdaM3BwY0MxbWNtbGxibVJzZVNCM1lYbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnViMlJsSUQwZ1pXeGxiVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ2ZFhSbGNrTmhZMmhsSUQwZ2JtOWtaVnNnWlhod1lXNWtieUJkSUh4OElDaHViMlJsV3lCbGVIQmhibVJ2SUYwZ1BTQjdmU2s3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4T1NCdmJteDVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnUkdWbVpXNWtJR0ZuWVdsdWMzUWdZMnh2Ym1Wa0lHRjBkSEp2Y0dWeWRHbGxjeUFvYWxGMVpYSjVJR2RvTFRFM01Ea3BYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBkVzVwY1hWbFEyRmphR1VnUFNCdmRYUmxja05oWTJobFd5QnViMlJsTG5WdWFYRjFaVWxFSUYwZ2ZIeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQ2h2ZFhSbGNrTmhZMmhsV3lCdWIyUmxMblZ1YVhGMVpVbEVJRjBnUFNCN2ZTazdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJqWVdOb1pTQTlJSFZ1YVhGMVpVTmhZMmhsV3lCMGVYQmxJRjBnZkh3Z1cxMDdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBibTlrWlVsdVpHVjRJRDBnWTJGamFHVmJJREFnWFNBOVBUMGdaR2x5Y25WdWN5QW1KaUJqWVdOb1pWc2dNU0JkTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdScFptWWdQU0J1YjJSbFNXNWtaWGc3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCNGJXd2dPbTUwYUMxamFHbHNaQ2d1TGk0cFhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklHOXlJRHB1ZEdndGJHRnpkQzFqYUdsc1pDZ3VMaTRwSUc5eUlEcHVkR2dvTFd4aGMzUXBQeTF2WmkxMGVYQmxLQzR1TGlsY2JseDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQmthV1ptSUQwOVBTQm1ZV3h6WlNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJWYzJVZ2RHaGxJSE5oYldVZ2JHOXZjQ0JoY3lCaFltOTJaU0IwYnlCelpXVnJJR0JsYkdWdFlDQm1jbTl0SUhSb1pTQnpkR0Z5ZEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhkb2FXeGxJQ2dnS0c1dlpHVWdQU0FySzI1dlpHVkpibVJsZUNBbUppQnViMlJsSUNZbUlHNXZaR1ZiSUdScGNpQmRJSHg4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRb1pHbG1aaUE5SUc1dlpHVkpibVJsZUNBOUlEQXBJSHg4SUhOMFlYSjBMbkJ2Y0NncEtTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0FvSUc5bVZIbHdaU0EvWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHNXZaR1V1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQTlQVDBnYm1GdFpTQTZYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEc1dlpHVXVibTlrWlZSNWNHVWdQVDA5SURFZ0tTQW1KbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRcksyUnBabVlnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1EyRmphR1VnZEdobElHbHVaR1Y0SUc5bUlHVmhZMmdnWlc1amIzVnVkR1Z5WldRZ1pXeGxiV1Z1ZEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhWelpVTmhZMmhsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEc5MWRHVnlRMkZqYUdVZ1BTQnViMlJsV3lCbGVIQmhibVJ2SUYwZ2ZId2dLRzV2WkdWYklHVjRjR0Z1Wkc4Z1hTQTlJSHQ5S1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc1SUc5dWJIbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QkVaV1psYm1RZ1lXZGhhVzV6ZENCamJHOXVaV1FnWVhSMGNtOXdaWEowYVdWeklDaHFVWFZsY25rZ1oyZ3RNVGN3T1NsY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFIxYm1seGRXVkRZV05vWlNBOUlHOTFkR1Z5UTJGamFHVmJJRzV2WkdVdWRXNXBjWFZsU1VRZ1hTQjhmRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBLRzkxZEdWeVEyRmphR1ZiSUc1dlpHVXVkVzVwY1hWbFNVUWdYU0E5SUh0OUtUdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIVnVhWEYxWlVOaFkyaGxXeUIwZVhCbElGMGdQU0JiSUdScGNuSjFibk1zSUdScFptWWdYVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2dibTlrWlNBOVBUMGdaV3hsYlNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkpibU52Y25CdmNtRjBaU0IwYUdVZ2IyWm1jMlYwTENCMGFHVnVJR05vWldOcklHRm5ZV2x1YzNRZ1kzbGpiR1VnYzJsNlpWeHVYSFJjZEZ4MFhIUmNkRngwWkdsbVppQXRQU0JzWVhOME8xeHVYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1JwWm1ZZ1BUMDlJR1pwY25OMElIeDhJQ2dnWkdsbVppQWxJR1pwY25OMElEMDlQU0F3SUNZbUlHUnBabVlnTHlCbWFYSnpkQ0ErUFNBd0lDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOU8xeHVYSFJjZEgwc1hHNWNibHgwWEhSY0lsQlRSVlZFVDF3aU9pQm1kVzVqZEdsdmJpZ2djSE5sZFdSdkxDQmhjbWQxYldWdWRDQXBJSHRjYmx4MFhIUmNkQzh2SUhCelpYVmtieTFqYkdGemN5QnVZVzFsY3lCaGNtVWdZMkZ6WlMxcGJuTmxibk5wZEdsMlpWeHVYSFJjZEZ4MEx5OGdhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2YzJWc1pXTjBiM0p6THlOd2MyVjFaRzh0WTJ4aGMzTmxjMXh1WEhSY2RGeDBMeThnVUhKcGIzSnBkR2w2WlNCaWVTQmpZWE5sSUhObGJuTnBkR2wyYVhSNUlHbHVJR05oYzJVZ1kzVnpkRzl0SUhCelpYVmtiM01nWVhKbElHRmtaR1ZrSUhkcGRHZ2dkWEJ3WlhKallYTmxJR3hsZEhSbGNuTmNibHgwWEhSY2RDOHZJRkpsYldWdFltVnlJSFJvWVhRZ2MyVjBSbWxzZEdWeWN5QnBibWhsY21sMGN5Qm1jbTl0SUhCelpYVmtiM05jYmx4MFhIUmNkSFpoY2lCaGNtZHpMRnh1WEhSY2RGeDBYSFJtYmlBOUlFVjRjSEl1Y0hObGRXUnZjMXNnY0hObGRXUnZJRjBnZkh3Z1JYaHdjaTV6WlhSR2FXeDBaWEp6V3lCd2MyVjFaRzh1ZEc5TWIzZGxja05oYzJVb0tTQmRJSHg4WEc1Y2RGeDBYSFJjZEZ4MFUybDZlbXhsTG1WeWNtOXlLQ0JjSW5WdWMzVndjRzl5ZEdWa0lIQnpaWFZrYnpvZ1hDSWdLeUJ3YzJWMVpHOGdLVHRjYmx4dVhIUmNkRngwTHk4Z1ZHaGxJSFZ6WlhJZ2JXRjVJSFZ6WlNCamNtVmhkR1ZRYzJWMVpHOGdkRzhnYVc1a2FXTmhkR1VnZEdoaGRGeHVYSFJjZEZ4MEx5OGdZWEpuZFcxbGJuUnpJR0Z5WlNCdVpXVmtaV1FnZEc4Z1kzSmxZWFJsSUhSb1pTQm1hV3gwWlhJZ1puVnVZM1JwYjI1Y2JseDBYSFJjZEM4dklHcDFjM1FnWVhNZ1UybDZlbXhsSUdSdlpYTmNibHgwWEhSY2RHbG1JQ2dnWm01YklHVjRjR0Z1Wkc4Z1hTQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJR1p1S0NCaGNtZDFiV1Z1ZENBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJDZFhRZ2JXRnBiblJoYVc0Z2MzVndjRzl5ZENCbWIzSWdiMnhrSUhOcFoyNWhkSFZ5WlhOY2JseDBYSFJjZEdsbUlDZ2dabTR1YkdWdVozUm9JRDRnTVNBcElIdGNibHgwWEhSY2RGeDBZWEpuY3lBOUlGc2djSE5sZFdSdkxDQndjMlYxWkc4c0lGd2lYQ0lzSUdGeVozVnRaVzUwSUYwN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCRmVIQnlMbk5sZEVacGJIUmxjbk11YUdGelQzZHVVSEp2Y0dWeWRIa29JSEJ6WlhWa2J5NTBiMHh2ZDJWeVEyRnpaU2dwSUNrZ1AxeHVYSFJjZEZ4MFhIUmNkRzFoY210R2RXNWpkR2x2YmlobWRXNWpkR2x2YmlnZ2MyVmxaQ3dnYldGMFkyaGxjeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCcFpIZ3NYRzVjZEZ4MFhIUmNkRngwWEhSY2RHMWhkR05vWldRZ1BTQm1iaWdnYzJWbFpDd2dZWEpuZFcxbGJuUWdLU3hjYmx4MFhIUmNkRngwWEhSY2RGeDBhU0E5SUcxaGRHTm9aV1F1YkdWdVozUm9PMXh1WEhSY2RGeDBYSFJjZEZ4MGQyaHBiR1VnS0NCcExTMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR2xrZUNBOUlHbHVaR1Y0VDJZb0lITmxaV1FzSUcxaGRHTm9aV1JiYVYwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGMyVmxaRnNnYVdSNElGMGdQU0FoS0NCdFlYUmphR1Z6V3lCcFpIZ2dYU0E5SUcxaGRHTm9aV1JiYVYwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlLU0E2WEc1Y2RGeDBYSFJjZEZ4MFpuVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdabTRvSUdWc1pXMHNJREFzSUdGeVozTWdLVHRjYmx4MFhIUmNkRngwWEhSOU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1ptNDdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkSEJ6WlhWa2IzTTZJSHRjYmx4MFhIUXZMeUJRYjNSbGJuUnBZV3hzZVNCamIyMXdiR1Y0SUhCelpYVmtiM05jYmx4MFhIUmNJbTV2ZEZ3aU9pQnRZWEpyUm5WdVkzUnBiMjRvWm5WdVkzUnBiMjRvSUhObGJHVmpkRzl5SUNrZ2UxeHVYSFJjZEZ4MEx5OGdWSEpwYlNCMGFHVWdjMlZzWldOMGIzSWdjR0Z6YzJWa0lIUnZJR052YlhCcGJHVmNibHgwWEhSY2RDOHZJSFJ2SUdGMmIybGtJSFJ5WldGMGFXNW5JR3hsWVdScGJtY2dZVzVrSUhSeVlXbHNhVzVuWEc1Y2RGeDBYSFF2THlCemNHRmpaWE1nWVhNZ1kyOXRZbWx1WVhSdmNuTmNibHgwWEhSY2RIWmhjaUJwYm5CMWRDQTlJRnRkTEZ4dVhIUmNkRngwWEhSeVpYTjFiSFJ6SUQwZ1cxMHNYRzVjZEZ4MFhIUmNkRzFoZEdOb1pYSWdQU0JqYjIxd2FXeGxLQ0J6Wld4bFkzUnZjaTV5WlhCc1lXTmxLQ0J5ZEhKcGJTd2dYQ0lrTVZ3aUlDa2dLVHRjYmx4dVhIUmNkRngwY21WMGRYSnVJRzFoZEdOb1pYSmJJR1Y0Y0dGdVpHOGdYU0EvWEc1Y2RGeDBYSFJjZEcxaGNtdEdkVzVqZEdsdmJpaG1kVzVqZEdsdmJpZ2djMlZsWkN3Z2JXRjBZMmhsY3l3Z1kyOXVkR1Y0ZEN3Z2VHMXNJQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJsYkdWdExGeHVYSFJjZEZ4MFhIUmNkRngwZFc1dFlYUmphR1ZrSUQwZ2JXRjBZMmhsY2lnZ2MyVmxaQ3dnYm5Wc2JDd2dlRzFzTENCYlhTQXBMRnh1WEhSY2RGeDBYSFJjZEZ4MGFTQTlJSE5sWldRdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSY2RGeDBMeThnVFdGMFkyZ2daV3hsYldWdWRITWdkVzV0WVhSamFHVmtJR0o1SUdCdFlYUmphR1Z5WUZ4dVhIUmNkRngwWEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0NBb1pXeGxiU0E5SUhWdWJXRjBZMmhsWkZ0cFhTa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSE5sWldSYmFWMGdQU0FoS0cxaGRHTm9aWE5iYVYwZ1BTQmxiR1Z0S1R0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMHBJRHBjYmx4MFhIUmNkRngwWm5WdVkzUnBiMjRvSUdWc1pXMHNJR052Ym5SbGVIUXNJSGh0YkNBcElIdGNibHgwWEhSY2RGeDBYSFJwYm5CMWRGc3dYU0E5SUdWc1pXMDdYRzVjZEZ4MFhIUmNkRngwYldGMFkyaGxjaWdnYVc1d2RYUXNJRzUxYkd3c0lIaHRiQ3dnY21WemRXeDBjeUFwTzF4dVhIUmNkRngwWEhSY2RDOHZJRVJ2YmlkMElHdGxaWEFnZEdobElHVnNaVzFsYm5RZ0tHbHpjM1ZsSUNNeU9Ua3BYRzVjZEZ4MFhIUmNkRngwYVc1d2RYUmJNRjBnUFNCdWRXeHNPMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUFoY21WemRXeDBjeTV3YjNBb0tUdGNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUjlLU3hjYmx4dVhIUmNkRndpYUdGelhDSTZJRzFoY210R2RXNWpkR2x2YmlobWRXNWpkR2x2YmlnZ2MyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCVGFYcDZiR1VvSUhObGJHVmpkRzl5TENCbGJHVnRJQ2t1YkdWdVozUm9JRDRnTUR0Y2JseDBYSFJjZEgwN1hHNWNkRngwZlNrc1hHNWNibHgwWEhSY0ltTnZiblJoYVc1elhDSTZJRzFoY210R2RXNWpkR2x2YmlobWRXNWpkR2x2YmlnZ2RHVjRkQ0FwSUh0Y2JseDBYSFJjZEhSbGVIUWdQU0IwWlhoMExuSmxjR3hoWTJVb0lISjFibVZ6WTJGd1pTd2dablZ1WlhOallYQmxJQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQW9JR1ZzWlcwdWRHVjRkRU52Ym5SbGJuUWdmSHdnWld4bGJTNXBibTVsY2xSbGVIUWdmSHdnWjJWMFZHVjRkQ2dnWld4bGJTQXBJQ2t1YVc1a1pYaFBaaWdnZEdWNGRDQXBJRDRnTFRFN1hHNWNkRngwWEhSOU8xeHVYSFJjZEgwcExGeHVYRzVjZEZ4MEx5OGdYQ0pYYUdWMGFHVnlJR0Z1SUdWc1pXMWxiblFnYVhNZ2NtVndjbVZ6Wlc1MFpXUWdZbmtnWVNBNmJHRnVaeWdwSUhObGJHVmpkRzl5WEc1Y2RGeDBMeThnYVhNZ1ltRnpaV1FnYzI5c1pXeDVJRzl1SUhSb1pTQmxiR1Z0Wlc1MEozTWdiR0Z1WjNWaFoyVWdkbUZzZFdWY2JseDBYSFF2THlCaVpXbHVaeUJsY1hWaGJDQjBieUIwYUdVZ2FXUmxiblJwWm1sbGNpQkRMRnh1WEhSY2RDOHZJRzl5SUdKbFoybHVibWx1WnlCM2FYUm9JSFJvWlNCcFpHVnVkR2xtYVdWeUlFTWdhVzF0WldScFlYUmxiSGtnWm05c2JHOTNaV1FnWW5rZ1hDSXRYQ0l1WEc1Y2RGeDBMeThnVkdobElHMWhkR05vYVc1bklHOW1JRU1nWVdkaGFXNXpkQ0IwYUdVZ1pXeGxiV1Z1ZENkeklHeGhibWQxWVdkbElIWmhiSFZsSUdseklIQmxjbVp2Y20xbFpDQmpZWE5sTFdsdWMyVnVjMmwwYVhabGJIa3VYRzVjZEZ4MEx5OGdWR2hsSUdsa1pXNTBhV1pwWlhJZ1F5QmtiMlZ6SUc1dmRDQm9ZWFpsSUhSdklHSmxJR0VnZG1Gc2FXUWdiR0Z1WjNWaFoyVWdibUZ0WlM1Y0lseHVYSFJjZEM4dklHaDBkSEE2THk5M2QzY3Vkek11YjNKbkwxUlNMM05sYkdWamRHOXljeThqYkdGdVp5MXdjMlYxWkc5Y2JseDBYSFJjSW14aGJtZGNJam9nYldGeWEwWjFibU4wYVc5dUtDQm1kVzVqZEdsdmJpZ2diR0Z1WnlBcElIdGNibHgwWEhSY2RDOHZJR3hoYm1jZ2RtRnNkV1VnYlhWemRDQmlaU0JoSUhaaGJHbGtJR2xrWlc1MGFXWnBaWEpjYmx4MFhIUmNkR2xtSUNnZ0lYSnBaR1Z1ZEdsbWFXVnlMblJsYzNRb2JHRnVaeUI4ZkNCY0lsd2lLU0FwSUh0Y2JseDBYSFJjZEZ4MFUybDZlbXhsTG1WeWNtOXlLQ0JjSW5WdWMzVndjRzl5ZEdWa0lHeGhibWM2SUZ3aUlDc2diR0Z1WnlBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGJHRnVaeUE5SUd4aGJtY3VjbVZ3YkdGalpTZ2djblZ1WlhOallYQmxMQ0JtZFc1bGMyTmhjR1VnS1M1MGIweHZkMlZ5UTJGelpTZ3BPMXh1WEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnWld4bGJVeGhibWM3WEc1Y2RGeDBYSFJjZEdSdklIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lDaGxiR1Z0VEdGdVp5QTlJR1J2WTNWdFpXNTBTWE5JVkUxTUlEOWNibHgwWEhSY2RGeDBYSFJjZEdWc1pXMHViR0Z1WnlBNlhHNWNkRngwWEhSY2RGeDBYSFJsYkdWdExtZGxkRUYwZEhKcFluVjBaU2hjSW5odGJEcHNZVzVuWENJcElIeDhJR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxLRndpYkdGdVoxd2lLU2tnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEdWc1pXMU1ZVzVuSUQwZ1pXeGxiVXhoYm1jdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbGJHVnRUR0Z1WnlBOVBUMGdiR0Z1WnlCOGZDQmxiR1Z0VEdGdVp5NXBibVJsZUU5bUtDQnNZVzVuSUNzZ1hDSXRYQ0lnS1NBOVBUMGdNRHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMGdkMmhwYkdVZ0tDQW9aV3hsYlNBOUlHVnNaVzB1Y0dGeVpXNTBUbTlrWlNrZ0ppWWdaV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0FwTzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlPMXh1WEhSY2RIMHBMRnh1WEc1Y2RGeDBMeThnVFdselkyVnNiR0Z1Wlc5MWMxeHVYSFJjZEZ3aWRHRnlaMlYwWENJNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR2hoYzJnZ1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0Z0ppWWdkMmx1Wkc5M0xteHZZMkYwYVc5dUxtaGhjMmc3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdhR0Z6YUNBbUppQm9ZWE5vTG5Oc2FXTmxLQ0F4SUNrZ1BUMDlJR1ZzWlcwdWFXUTdYRzVjZEZ4MGZTeGNibHh1WEhSY2RGd2ljbTl2ZEZ3aU9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRJRDA5UFNCa2IyTkZiR1Z0TzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJjSW1adlkzVnpYQ0k2SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1ZzWlcwZ1BUMDlJR1J2WTNWdFpXNTBMbUZqZEdsMlpVVnNaVzFsYm5RZ0ppWWdLQ0ZrYjJOMWJXVnVkQzVvWVhOR2IyTjFjeUI4ZkNCa2IyTjFiV1Z1ZEM1b1lYTkdiMk4xY3lncEtTQW1KaUFoSVNobGJHVnRMblI1Y0dVZ2ZId2daV3hsYlM1b2NtVm1JSHg4SUg1bGJHVnRMblJoWWtsdVpHVjRLVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnUW05dmJHVmhiaUJ3Y205d1pYSjBhV1Z6WEc1Y2RGeDBYQ0psYm1GaWJHVmtYQ0k2SUdOeVpXRjBaVVJwYzJGaWJHVmtVSE5sZFdSdktDQm1ZV3h6WlNBcExGeHVYSFJjZEZ3aVpHbHpZV0pzWldSY0lqb2dZM0psWVhSbFJHbHpZV0pzWldSUWMyVjFaRzhvSUhSeWRXVWdLU3hjYmx4dVhIUmNkRndpWTJobFkydGxaRndpT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJjZEM4dklFbHVJRU5UVXpNc0lEcGphR1ZqYTJWa0lITm9iM1ZzWkNCeVpYUjFjbTRnWW05MGFDQmphR1ZqYTJWa0lHRnVaQ0J6Wld4bFkzUmxaQ0JsYkdWdFpXNTBjMXh1WEhSY2RGeDBMeThnYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdk1qQXhNUzlTUlVNdFkzTnpNeTF6Wld4bFkzUnZjbk10TWpBeE1UQTVNamt2STJOb1pXTnJaV1JjYmx4MFhIUmNkSFpoY2lCdWIyUmxUbUZ0WlNBOUlHVnNaVzB1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNibHgwWEhSY2RISmxkSFZ5YmlBb2JtOWtaVTVoYldVZ1BUMDlJRndpYVc1d2RYUmNJaUFtSmlBaElXVnNaVzB1WTJobFkydGxaQ2tnZkh3Z0tHNXZaR1ZPWVcxbElEMDlQU0JjSW05d2RHbHZibHdpSUNZbUlDRWhaV3hsYlM1elpXeGxZM1JsWkNrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEZ3aWMyVnNaV04wWldSY0lqb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUXZMeUJCWTJObGMzTnBibWNnZEdocGN5QndjbTl3WlhKMGVTQnRZV3RsY3lCelpXeGxZM1JsWkMxaWVTMWtaV1poZFd4MFhHNWNkRngwWEhRdkx5QnZjSFJwYjI1eklHbHVJRk5oWm1GeWFTQjNiM0pySUhCeWIzQmxjbXg1WEc1Y2RGeDBYSFJwWmlBb0lHVnNaVzB1Y0dGeVpXNTBUbTlrWlNBcElIdGNibHgwWEhSY2RGeDBaV3hsYlM1d1lYSmxiblJPYjJSbExuTmxiR1ZqZEdWa1NXNWtaWGc3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJsYkdWdExuTmxiR1ZqZEdWa0lEMDlQU0IwY25WbE8xeHVYSFJjZEgwc1hHNWNibHgwWEhRdkx5QkRiMjUwWlc1MGMxeHVYSFJjZEZ3aVpXMXdkSGxjSWpvZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhRdkx5Qm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OVVVaTl6Wld4bFkzUnZjbk12STJWdGNIUjVMWEJ6WlhWa2IxeHVYSFJjZEZ4MEx5OGdPbVZ0Y0hSNUlHbHpJRzVsWjJGMFpXUWdZbmtnWld4bGJXVnVkQ0FvTVNrZ2IzSWdZMjl1ZEdWdWRDQnViMlJsY3lBb2RHVjRkRG9nTXpzZ1kyUmhkR0U2SURRN0lHVnVkR2wwZVNCeVpXWTZJRFVwTEZ4dVhIUmNkRngwTHk4Z0lDQmlkWFFnYm05MElHSjVJRzkwYUdWeWN5QW9ZMjl0YldWdWREb2dPRHNnY0hKdlkyVnpjMmx1WnlCcGJuTjBjblZqZEdsdmJqb2dOenNnWlhSakxpbGNibHgwWEhSY2RDOHZJRzV2WkdWVWVYQmxJRHdnTmlCM2IzSnJjeUJpWldOaGRYTmxJR0YwZEhKcFluVjBaWE1nS0RJcElHUnZJRzV2ZENCaGNIQmxZWElnWVhNZ1kyaHBiR1J5Wlc1Y2JseDBYSFJjZEdadmNpQW9JR1ZzWlcwZ1BTQmxiR1Z0TG1acGNuTjBRMmhwYkdRN0lHVnNaVzA3SUdWc1pXMGdQU0JsYkdWdExtNWxlSFJUYVdKc2FXNW5JQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BDQTJJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwZlN4Y2JseHVYSFJjZEZ3aWNHRnlaVzUwWENJNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUNGRmVIQnlMbkJ6WlhWa2IzTmJYQ0psYlhCMGVWd2lYU2dnWld4bGJTQXBPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUXZMeUJGYkdWdFpXNTBMMmx1Y0hWMElIUjVjR1Z6WEc1Y2RGeDBYQ0pvWldGa1pYSmNJam9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbWhsWVdSbGNpNTBaWE4wS0NCbGJHVnRMbTV2WkdWT1lXMWxJQ2s3WEc1Y2RGeDBmU3hjYmx4dVhIUmNkRndpYVc1d2RYUmNJam9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbWx1Y0hWMGN5NTBaWE4wS0NCbGJHVnRMbTV2WkdWT1lXMWxJQ2s3WEc1Y2RGeDBmU3hjYmx4dVhIUmNkRndpWW5WMGRHOXVYQ0k2SUdaMWJtTjBhVzl1S0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwZG1GeUlHNWhiV1VnUFNCbGJHVnRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNkRngwWEhSeVpYUjFjbTRnYm1GdFpTQTlQVDBnWENKcGJuQjFkRndpSUNZbUlHVnNaVzB1ZEhsd1pTQTlQVDBnWENKaWRYUjBiMjVjSWlCOGZDQnVZVzFsSUQwOVBTQmNJbUoxZEhSdmJsd2lPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUmNJblJsZUhSY0lqb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUjJZWElnWVhSMGNqdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJHVnRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMDlJRndpYVc1d2RYUmNJaUFtSmx4dVhIUmNkRngwWEhSbGJHVnRMblI1Y0dVZ1BUMDlJRndpZEdWNGRGd2lJQ1ltWEc1Y2JseDBYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVU4T0Z4dVhIUmNkRngwWEhRdkx5Qk9aWGNnU0ZSTlREVWdZWFIwY21saWRYUmxJSFpoYkhWbGN5QW9aUzVuTGl3Z1hDSnpaV0Z5WTJoY0lpa2dZWEJ3WldGeUlIZHBkR2dnWld4bGJTNTBlWEJsSUQwOVBTQmNJblJsZUhSY0lseHVYSFJjZEZ4MFhIUW9JQ2hoZEhSeUlEMGdaV3hsYlM1blpYUkJkSFJ5YVdKMWRHVW9YQ0owZVhCbFhDSXBLU0E5UFNCdWRXeHNJSHg4SUdGMGRISXVkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdYQ0owWlhoMFhDSWdLVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnVUc5emFYUnBiMjR0YVc0dFkyOXNiR1ZqZEdsdmJseHVYSFJjZEZ3aVptbHljM1JjSWpvZ1kzSmxZWFJsVUc5emFYUnBiMjVoYkZCelpYVmtieWhtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJiSURBZ1hUdGNibHgwWEhSOUtTeGNibHh1WEhSY2RGd2liR0Z6ZEZ3aU9pQmpjbVZoZEdWUWIzTnBkR2x2Ym1Gc1VITmxkV1J2S0daMWJtTjBhVzl1S0NCdFlYUmphRWx1WkdWNFpYTXNJR3hsYm1kMGFDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmJJR3hsYm1kMGFDQXRJREVnWFR0Y2JseDBYSFI5S1N4Y2JseHVYSFJjZEZ3aVpYRmNJam9nWTNKbFlYUmxVRzl6YVhScGIyNWhiRkJ6WlhWa2J5aG1kVzVqZEdsdmJpZ2diV0YwWTJoSmJtUmxlR1Z6TENCc1pXNW5kR2dzSUdGeVozVnRaVzUwSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUZzZ1lYSm5kVzFsYm5RZ1BDQXdJRDhnWVhKbmRXMWxiblFnS3lCc1pXNW5kR2dnT2lCaGNtZDFiV1Z1ZENCZE8xeHVYSFJjZEgwcExGeHVYRzVjZEZ4MFhDSmxkbVZ1WENJNklHTnlaV0YwWlZCdmMybDBhVzl1WVd4UWMyVjFaRzhvWm5WdVkzUnBiMjRvSUcxaGRHTm9TVzVrWlhobGN5d2diR1Z1WjNSb0lDa2dlMXh1WEhSY2RGeDBkbUZ5SUdrZ1BTQXdPMXh1WEhSY2RGeDBabTl5SUNnZ095QnBJRHdnYkdWdVozUm9PeUJwSUNzOUlESWdLU0I3WEc1Y2RGeDBYSFJjZEcxaGRHTm9TVzVrWlhobGN5NXdkWE5vS0NCcElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z2JXRjBZMmhKYm1SbGVHVnpPMXh1WEhSY2RIMHBMRnh1WEc1Y2RGeDBYQ0p2WkdSY0lqb2dZM0psWVhSbFVHOXphWFJwYjI1aGJGQnpaWFZrYnlobWRXNWpkR2x2YmlnZ2JXRjBZMmhKYm1SbGVHVnpMQ0JzWlc1bmRHZ2dLU0I3WEc1Y2RGeDBYSFIyWVhJZ2FTQTlJREU3WEc1Y2RGeDBYSFJtYjNJZ0tDQTdJR2tnUENCc1pXNW5kR2c3SUdrZ0t6MGdNaUFwSUh0Y2JseDBYSFJjZEZ4MGJXRjBZMmhKYm1SbGVHVnpMbkIxYzJnb0lHa2dLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkSEpsZEhWeWJpQnRZWFJqYUVsdVpHVjRaWE03WEc1Y2RGeDBmU2tzWEc1Y2JseDBYSFJjSW14MFhDSTZJR055WldGMFpWQnZjMmwwYVc5dVlXeFFjMlYxWkc4b1puVnVZM1JwYjI0b0lHMWhkR05vU1c1a1pYaGxjeXdnYkdWdVozUm9MQ0JoY21kMWJXVnVkQ0FwSUh0Y2JseDBYSFJjZEhaaGNpQnBJRDBnWVhKbmRXMWxiblFnUENBd0lEOGdZWEpuZFcxbGJuUWdLeUJzWlc1bmRHZ2dPaUJoY21kMWJXVnVkRHRjYmx4MFhIUmNkR1p2Y2lBb0lEc2dMUzFwSUQ0OUlEQTdJQ2tnZTF4dVhIUmNkRngwWEhSdFlYUmphRWx1WkdWNFpYTXVjSFZ6YUNnZ2FTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBjbVYwZFhKdUlHMWhkR05vU1c1a1pYaGxjenRjYmx4MFhIUjlLU3hjYmx4dVhIUmNkRndpWjNSY0lqb2dZM0psWVhSbFVHOXphWFJwYjI1aGJGQnpaWFZrYnlobWRXNWpkR2x2YmlnZ2JXRjBZMmhKYm1SbGVHVnpMQ0JzWlc1bmRHZ3NJR0Z5WjNWdFpXNTBJQ2tnZTF4dVhIUmNkRngwZG1GeUlHa2dQU0JoY21kMWJXVnVkQ0E4SURBZ1B5QmhjbWQxYldWdWRDQXJJR3hsYm1kMGFDQTZJR0Z5WjNWdFpXNTBPMXh1WEhSY2RGeDBabTl5SUNnZ095QXJLMmtnUENCc1pXNW5kR2c3SUNrZ2UxeHVYSFJjZEZ4MFhIUnRZWFJqYUVsdVpHVjRaWE11Y0hWemFDZ2dhU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJRzFoZEdOb1NXNWtaWGhsY3p0Y2JseDBYSFI5S1Z4dVhIUjlYRzU5TzF4dVhHNUZlSEJ5TG5CelpYVmtiM05iWENKdWRHaGNJbDBnUFNCRmVIQnlMbkJ6WlhWa2IzTmJYQ0psY1Z3aVhUdGNibHh1THk4Z1FXUmtJR0oxZEhSdmJpOXBibkIxZENCMGVYQmxJSEJ6WlhWa2IzTmNibVp2Y2lBb0lHa2dhVzRnZXlCeVlXUnBiem9nZEhKMVpTd2dZMmhsWTJ0aWIzZzZJSFJ5ZFdVc0lHWnBiR1U2SUhSeWRXVXNJSEJoYzNOM2IzSmtPaUIwY25WbExDQnBiV0ZuWlRvZ2RISjFaU0I5SUNrZ2UxeHVYSFJGZUhCeUxuQnpaWFZrYjNOYklHa2dYU0E5SUdOeVpXRjBaVWx1Y0hWMFVITmxkV1J2S0NCcElDazdYRzU5WEc1bWIzSWdLQ0JwSUdsdUlIc2djM1ZpYldsME9pQjBjblZsTENCeVpYTmxkRG9nZEhKMVpTQjlJQ2tnZTF4dVhIUkZlSEJ5TG5CelpYVmtiM05iSUdrZ1hTQTlJR055WldGMFpVSjFkSFJ2YmxCelpYVmtieWdnYVNBcE8xeHVmVnh1WEc0dkx5QkZZWE41SUVGUVNTQm1iM0lnWTNKbFlYUnBibWNnYm1WM0lITmxkRVpwYkhSbGNuTmNibVoxYm1OMGFXOXVJSE5sZEVacGJIUmxjbk1vS1NCN2ZWeHVjMlYwUm1sc2RHVnljeTV3Y205MGIzUjVjR1VnUFNCRmVIQnlMbVpwYkhSbGNuTWdQU0JGZUhCeUxuQnpaWFZrYjNNN1hHNUZlSEJ5TG5ObGRFWnBiSFJsY25NZ1BTQnVaWGNnYzJWMFJtbHNkR1Z5Y3lncE8xeHVYRzUwYjJ0bGJtbDZaU0E5SUZOcGVucHNaUzUwYjJ0bGJtbDZaU0E5SUdaMWJtTjBhVzl1S0NCelpXeGxZM1J2Y2l3Z2NHRnljMlZQYm14NUlDa2dlMXh1WEhSMllYSWdiV0YwWTJobFpDd2diV0YwWTJnc0lIUnZhMlZ1Y3l3Z2RIbHdaU3hjYmx4MFhIUnpiMFpoY2l3Z1ozSnZkWEJ6TENCd2NtVkdhV3gwWlhKekxGeHVYSFJjZEdOaFkyaGxaQ0E5SUhSdmEyVnVRMkZqYUdWYklITmxiR1ZqZEc5eUlDc2dYQ0lnWENJZ1hUdGNibHh1WEhScFppQW9JR05oWTJobFpDQXBJSHRjYmx4MFhIUnlaWFIxY200Z2NHRnljMlZQYm14NUlEOGdNQ0E2SUdOaFkyaGxaQzV6YkdsalpTZ2dNQ0FwTzF4dVhIUjlYRzVjYmx4MGMyOUdZWElnUFNCelpXeGxZM1J2Y2p0Y2JseDBaM0p2ZFhCeklEMGdXMTA3WEc1Y2RIQnlaVVpwYkhSbGNuTWdQU0JGZUhCeUxuQnlaVVpwYkhSbGNqdGNibHh1WEhSM2FHbHNaU0FvSUhOdlJtRnlJQ2tnZTF4dVhHNWNkRngwTHk4Z1EyOXRiV0VnWVc1a0lHWnBjbk4wSUhKMWJseHVYSFJjZEdsbUlDZ2dJVzFoZEdOb1pXUWdmSHdnS0cxaGRHTm9JRDBnY21OdmJXMWhMbVY0WldNb0lITnZSbUZ5SUNrcElDa2dlMXh1WEhSY2RGeDBhV1lnS0NCdFlYUmphQ0FwSUh0Y2JseDBYSFJjZEZ4MEx5OGdSRzl1SjNRZ1kyOXVjM1Z0WlNCMGNtRnBiR2x1WnlCamIyMXRZWE1nWVhNZ2RtRnNhV1JjYmx4MFhIUmNkRngwYzI5R1lYSWdQU0J6YjBaaGNpNXpiR2xqWlNnZ2JXRjBZMmhiTUYwdWJHVnVaM1JvSUNrZ2ZId2djMjlHWVhJN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSbmNtOTFjSE11Y0hWemFDZ2dLSFJ2YTJWdWN5QTlJRnRkS1NBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEcxaGRHTm9aV1FnUFNCbVlXeHpaVHRjYmx4dVhIUmNkQzh2SUVOdmJXSnBibUYwYjNKelhHNWNkRngwYVdZZ0tDQW9iV0YwWTJnZ1BTQnlZMjl0WW1sdVlYUnZjbk11WlhobFl5Z2djMjlHWVhJZ0tTa2dLU0I3WEc1Y2RGeDBYSFJ0WVhSamFHVmtJRDBnYldGMFkyZ3VjMmhwWm5Rb0tUdGNibHgwWEhSY2RIUnZhMlZ1Y3k1d2RYTm9LSHRjYmx4MFhIUmNkRngwZG1Gc2RXVTZJRzFoZEdOb1pXUXNYRzVjZEZ4MFhIUmNkQzh2SUVOaGMzUWdaR1Z6WTJWdVpHRnVkQ0JqYjIxaWFXNWhkRzl5Y3lCMGJ5QnpjR0ZqWlZ4dVhIUmNkRngwWEhSMGVYQmxPaUJ0WVhSamFGc3dYUzV5WlhCc1lXTmxLQ0J5ZEhKcGJTd2dYQ0lnWENJZ0tWeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MFhIUnpiMFpoY2lBOUlITnZSbUZ5TG5Oc2FXTmxLQ0J0WVhSamFHVmtMbXhsYm1kMGFDQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRVpwYkhSbGNuTmNibHgwWEhSbWIzSWdLQ0IwZVhCbElHbHVJRVY0Y0hJdVptbHNkR1Z5SUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0FvYldGMFkyZ2dQU0J0WVhSamFFVjRjSEpiSUhSNWNHVWdYUzVsZUdWaktDQnpiMFpoY2lBcEtTQW1KaUFvSVhCeVpVWnBiSFJsY25OYklIUjVjR1VnWFNCOGZGeHVYSFJjZEZ4MFhIUW9iV0YwWTJnZ1BTQndjbVZHYVd4MFpYSnpXeUIwZVhCbElGMG9JRzFoZEdOb0lDa3BLU0FwSUh0Y2JseDBYSFJjZEZ4MGJXRjBZMmhsWkNBOUlHMWhkR05vTG5Ob2FXWjBLQ2s3WEc1Y2RGeDBYSFJjZEhSdmEyVnVjeTV3ZFhOb0tIdGNibHgwWEhSY2RGeDBYSFIyWVd4MVpUb2diV0YwWTJobFpDeGNibHgwWEhSY2RGeDBYSFIwZVhCbE9pQjBlWEJsTEZ4dVhIUmNkRngwWEhSY2RHMWhkR05vWlhNNklHMWhkR05vWEc1Y2RGeDBYSFJjZEgwcE8xeHVYSFJjZEZ4MFhIUnpiMFpoY2lBOUlITnZSbUZ5TG5Oc2FXTmxLQ0J0WVhSamFHVmtMbXhsYm1kMGFDQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnSVcxaGRHTm9aV1FnS1NCN1hHNWNkRngwWEhSaWNtVmhhenRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2THlCU1pYUjFjbTRnZEdobElHeGxibWQwYUNCdlppQjBhR1VnYVc1MllXeHBaQ0JsZUdObGMzTmNibHgwTHk4Z2FXWWdkMlVuY21VZ2FuVnpkQ0J3WVhKemFXNW5YRzVjZEM4dklFOTBhR1Z5ZDJselpTd2dkR2h5YjNjZ1lXNGdaWEp5YjNJZ2IzSWdjbVYwZFhKdUlIUnZhMlZ1YzF4dVhIUnlaWFIxY200Z2NHRnljMlZQYm14NUlEOWNibHgwWEhSemIwWmhjaTVzWlc1bmRHZ2dPbHh1WEhSY2RITnZSbUZ5SUQ5Y2JseDBYSFJjZEZOcGVucHNaUzVsY25KdmNpZ2djMlZzWldOMGIzSWdLU0E2WEc1Y2RGeDBYSFF2THlCRFlXTm9aU0IwYUdVZ2RHOXJaVzV6WEc1Y2RGeDBYSFIwYjJ0bGJrTmhZMmhsS0NCelpXeGxZM1J2Y2l3Z1ozSnZkWEJ6SUNrdWMyeHBZMlVvSURBZ0tUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlIUnZVMlZzWldOMGIzSW9JSFJ2YTJWdWN5QXBJSHRjYmx4MGRtRnlJR2tnUFNBd0xGeHVYSFJjZEd4bGJpQTlJSFJ2YTJWdWN5NXNaVzVuZEdnc1hHNWNkRngwYzJWc1pXTjBiM0lnUFNCY0lsd2lPMXh1WEhSbWIzSWdLQ0E3SUdrZ1BDQnNaVzQ3SUdrckt5QXBJSHRjYmx4MFhIUnpaV3hsWTNSdmNpQXJQU0IwYjJ0bGJuTmJhVjB1ZG1Gc2RXVTdYRzVjZEgxY2JseDBjbVYwZFhKdUlITmxiR1ZqZEc5eU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFpHUkRiMjFpYVc1aGRHOXlLQ0J0WVhSamFHVnlMQ0JqYjIxaWFXNWhkRzl5TENCaVlYTmxJQ2tnZTF4dVhIUjJZWElnWkdseUlEMGdZMjl0WW1sdVlYUnZjaTVrYVhJc1hHNWNkRngwYzJ0cGNDQTlJR052YldKcGJtRjBiM0l1Ym1WNGRDeGNibHgwWEhSclpYa2dQU0J6YTJsd0lIeDhJR1JwY2l4Y2JseDBYSFJqYUdWamEwNXZia1ZzWlcxbGJuUnpJRDBnWW1GelpTQW1KaUJyWlhrZ1BUMDlJRndpY0dGeVpXNTBUbTlrWlZ3aUxGeHVYSFJjZEdSdmJtVk9ZVzFsSUQwZ1pHOXVaU3NyTzF4dVhHNWNkSEpsZEhWeWJpQmpiMjFpYVc1aGRHOXlMbVpwY25OMElEOWNibHgwWEhRdkx5QkRhR1ZqYXlCaFoyRnBibk4wSUdOc2IzTmxjM1FnWVc1alpYTjBiM0l2Y0hKbFkyVmthVzVuSUdWc1pXMWxiblJjYmx4MFhIUm1kVzVqZEdsdmJpZ2daV3hsYlN3Z1kyOXVkR1Y0ZEN3Z2VHMXNJQ2tnZTF4dVhIUmNkRngwZDJocGJHVWdLQ0FvWld4bGJTQTlJR1ZzWlcxYklHUnBjaUJkS1NBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElIeDhJR05vWldOclRtOXVSV3hsYldWdWRITWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUcxaGRHTm9aWElvSUdWc1pXMHNJR052Ym5SbGVIUXNJSGh0YkNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBmU0E2WEc1Y2JseDBYSFF2THlCRGFHVmpheUJoWjJGcGJuTjBJR0ZzYkNCaGJtTmxjM1J2Y2k5d2NtVmpaV1JwYm1jZ1pXeGxiV1Z1ZEhOY2JseDBYSFJtZFc1amRHbHZiaWdnWld4bGJTd2dZMjl1ZEdWNGRDd2dlRzFzSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJRzlzWkVOaFkyaGxMQ0IxYm1seGRXVkRZV05vWlN3Z2IzVjBaWEpEWVdOb1pTeGNibHgwWEhSY2RGeDBibVYzUTJGamFHVWdQU0JiSUdScGNuSjFibk1zSUdSdmJtVk9ZVzFsSUYwN1hHNWNibHgwWEhSY2RDOHZJRmRsSUdOaGJpZDBJSE5sZENCaGNtSnBkSEpoY25rZ1pHRjBZU0J2YmlCWVRVd2dibTlrWlhNc0lITnZJSFJvWlhrZ1pHOXVKM1FnWW1WdVpXWnBkQ0JtY205dElHTnZiV0pwYm1GMGIzSWdZMkZqYUdsdVoxeHVYSFJjZEZ4MGFXWWdLQ0I0Yld3Z0tTQjdYRzVjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLR1ZzWlcwZ1BTQmxiR1Z0V3lCa2FYSWdYU2tnS1NCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElIeDhJR05vWldOclRtOXVSV3hsYldWdWRITWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUcxaGRHTm9aWElvSUdWc1pXMHNJR052Ym5SbGVIUXNJSGh0YkNBcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEhkb2FXeGxJQ2dnS0dWc1pXMGdQU0JsYkdWdFd5QmthWElnWFNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmxiR1Z0TG01dlpHVlVlWEJsSUQwOVBTQXhJSHg4SUdOb1pXTnJUbTl1Uld4bGJXVnVkSE1nS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ2ZFhSbGNrTmhZMmhsSUQwZ1pXeGxiVnNnWlhod1lXNWtieUJkSUh4OElDaGxiR1Z0V3lCbGVIQmhibVJ2SUYwZ1BTQjdmU2s3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzVJRzl1YkhsY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUVSbFptVnVaQ0JoWjJGcGJuTjBJR05zYjI1bFpDQmhkSFJ5YjNCbGNuUnBaWE1nS0dwUmRXVnllU0JuYUMweE56QTVLVnh1WEhSY2RGeDBYSFJjZEZ4MGRXNXBjWFZsUTJGamFHVWdQU0J2ZFhSbGNrTmhZMmhsV3lCbGJHVnRMblZ1YVhGMVpVbEVJRjBnZkh3Z0tHOTFkR1Z5UTJGamFHVmJJR1ZzWlcwdWRXNXBjWFZsU1VRZ1hTQTlJSHQ5S1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQnphMmx3SUNZbUlITnJhWEFnUFQwOUlHVnNaVzB1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBaV3hsYlNBOUlHVnNaVzFiSUdScGNpQmRJSHg4SUdWc1pXMDdYRzVjZEZ4MFhIUmNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQW9iMnhrUTJGamFHVWdQU0IxYm1seGRXVkRZV05vWlZzZ2EyVjVJRjBwSUNZbVhHNWNkRngwWEhSY2RGeDBYSFJjZEc5c1pFTmhZMmhsV3lBd0lGMGdQVDA5SUdScGNuSjFibk1nSmlZZ2IyeGtRMkZqYUdWYklERWdYU0E5UFQwZ1pHOXVaVTVoYldVZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnUVhOemFXZHVJSFJ2SUc1bGQwTmhZMmhsSUhOdklISmxjM1ZzZEhNZ1ltRmpheTF3Y205d1lXZGhkR1VnZEc4Z2NISmxkbWx2ZFhNZ1pXeGxiV1Z1ZEhOY2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJQ2h1WlhkRFlXTm9aVnNnTWlCZElEMGdiMnhrUTJGamFHVmJJRElnWFNrN1hHNWNkRngwWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJTWlhWelpTQnVaWGRqWVdOb1pTQnpieUJ5WlhOMWJIUnpJR0poWTJzdGNISnZjR0ZuWVhSbElIUnZJSEJ5WlhacGIzVnpJR1ZzWlcxbGJuUnpYRzVjZEZ4MFhIUmNkRngwWEhSY2RIVnVhWEYxWlVOaFkyaGxXeUJyWlhrZ1hTQTlJRzVsZDBOaFkyaGxPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVFZ2JXRjBZMmdnYldWaGJuTWdkMlVuY21VZ1pHOXVaVHNnWVNCbVlXbHNJRzFsWVc1eklIZGxJR2hoZG1VZ2RHOGdhMlZsY0NCamFHVmphMmx1WjF4dVhIUmNkRngwWEhSY2RGeDBYSFJwWmlBb0lDaHVaWGREWVdOb1pWc2dNaUJkSUQwZ2JXRjBZMmhsY2lnZ1pXeGxiU3dnWTI5dWRHVjRkQ3dnZUcxc0lDa3BJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBmVHRjYm4xY2JseHVablZ1WTNScGIyNGdaV3hsYldWdWRFMWhkR05vWlhJb0lHMWhkR05vWlhKeklDa2dlMXh1WEhSeVpYUjFjbTRnYldGMFkyaGxjbk11YkdWdVozUm9JRDRnTVNBL1hHNWNkRngwWm5WdVkzUnBiMjRvSUdWc1pXMHNJR052Ym5SbGVIUXNJSGh0YkNBcElIdGNibHgwWEhSY2RIWmhjaUJwSUQwZ2JXRjBZMmhsY25NdWJHVnVaM1JvTzF4dVhIUmNkRngwZDJocGJHVWdLQ0JwTFMwZ0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXMWhkR05vWlhKelcybGRLQ0JsYkdWdExDQmpiMjUwWlhoMExDQjRiV3dnS1NBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RIMGdPbHh1WEhSY2RHMWhkR05vWlhKeld6QmRPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRkV3gwYVhCc1pVTnZiblJsZUhSektDQnpaV3hsWTNSdmNpd2dZMjl1ZEdWNGRITXNJSEpsYzNWc2RITWdLU0I3WEc1Y2RIWmhjaUJwSUQwZ01DeGNibHgwWEhSc1pXNGdQU0JqYjI1MFpYaDBjeTVzWlc1bmRHZzdYRzVjZEdadmNpQW9JRHNnYVNBOElHeGxianNnYVNzcklDa2dlMXh1WEhSY2RGTnBlbnBzWlNnZ2MyVnNaV04wYjNJc0lHTnZiblJsZUhSelcybGRMQ0J5WlhOMWJIUnpJQ2s3WEc1Y2RIMWNibHgwY21WMGRYSnVJSEpsYzNWc2RITTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnZibVJsYm5ObEtDQjFibTFoZEdOb1pXUXNJRzFoY0N3Z1ptbHNkR1Z5TENCamIyNTBaWGgwTENCNGJXd2dLU0I3WEc1Y2RIWmhjaUJsYkdWdExGeHVYSFJjZEc1bGQxVnViV0YwWTJobFpDQTlJRnRkTEZ4dVhIUmNkR2tnUFNBd0xGeHVYSFJjZEd4bGJpQTlJSFZ1YldGMFkyaGxaQzVzWlc1bmRHZ3NYRzVjZEZ4MGJXRndjR1ZrSUQwZ2JXRndJQ0U5SUc1MWJHdzdYRzVjYmx4MFptOXlJQ2dnT3lCcElEd2diR1Z1T3lCcEt5c2dLU0I3WEc1Y2RGeDBhV1lnS0NBb1pXeGxiU0E5SUhWdWJXRjBZMmhsWkZ0cFhTa2dLU0I3WEc1Y2RGeDBYSFJwWmlBb0lDRm1hV3gwWlhJZ2ZId2dabWxzZEdWeUtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLU0FwSUh0Y2JseDBYSFJjZEZ4MGJtVjNWVzV0WVhSamFHVmtMbkIxYzJnb0lHVnNaVzBnS1R0Y2JseDBYSFJjZEZ4MGFXWWdLQ0J0WVhCd1pXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGJXRndMbkIxYzJnb0lHa2dLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJ1WlhkVmJtMWhkR05vWldRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGRFMWhkR05vWlhJb0lIQnlaVVpwYkhSbGNpd2djMlZzWldOMGIzSXNJRzFoZEdOb1pYSXNJSEJ2YzNSR2FXeDBaWElzSUhCdmMzUkdhVzVrWlhJc0lIQnZjM1JUWld4bFkzUnZjaUFwSUh0Y2JseDBhV1lnS0NCd2IzTjBSbWxzZEdWeUlDWW1JQ0Z3YjNOMFJtbHNkR1Z5V3lCbGVIQmhibVJ2SUYwZ0tTQjdYRzVjZEZ4MGNHOXpkRVpwYkhSbGNpQTlJSE5sZEUxaGRHTm9aWElvSUhCdmMzUkdhV3gwWlhJZ0tUdGNibHgwZlZ4dVhIUnBaaUFvSUhCdmMzUkdhVzVrWlhJZ0ppWWdJWEJ2YzNSR2FXNWtaWEpiSUdWNGNHRnVaRzhnWFNBcElIdGNibHgwWEhSd2IzTjBSbWx1WkdWeUlEMGdjMlYwVFdGMFkyaGxjaWdnY0c5emRFWnBibVJsY2l3Z2NHOXpkRk5sYkdWamRHOXlJQ2s3WEc1Y2RIMWNibHgwY21WMGRYSnVJRzFoY210R2RXNWpkR2x2YmlobWRXNWpkR2x2YmlnZ2MyVmxaQ3dnY21WemRXeDBjeXdnWTI5dWRHVjRkQ3dnZUcxc0lDa2dlMXh1WEhSY2RIWmhjaUIwWlcxd0xDQnBMQ0JsYkdWdExGeHVYSFJjZEZ4MGNISmxUV0Z3SUQwZ1cxMHNYRzVjZEZ4MFhIUndiM04wVFdGd0lEMGdXMTBzWEc1Y2RGeDBYSFJ3Y21WbGVHbHpkR2x1WnlBOUlISmxjM1ZzZEhNdWJHVnVaM1JvTEZ4dVhHNWNkRngwWEhRdkx5QkhaWFFnYVc1cGRHbGhiQ0JsYkdWdFpXNTBjeUJtY205dElITmxaV1FnYjNJZ1kyOXVkR1Y0ZEZ4dVhIUmNkRngwWld4bGJYTWdQU0J6WldWa0lIeDhJRzExYkhScGNHeGxRMjl1ZEdWNGRITW9JSE5sYkdWamRHOXlJSHg4SUZ3aUtsd2lMQ0JqYjI1MFpYaDBMbTV2WkdWVWVYQmxJRDhnV3lCamIyNTBaWGgwSUYwZ09pQmpiMjUwWlhoMExDQmJYU0FwTEZ4dVhHNWNkRngwWEhRdkx5QlFjbVZtYVd4MFpYSWdkRzhnWjJWMElHMWhkR05vWlhJZ2FXNXdkWFFzSUhCeVpYTmxjblpwYm1jZ1lTQnRZWEFnWm05eUlITmxaV1F0Y21WemRXeDBjeUJ6ZVc1amFISnZibWw2WVhScGIyNWNibHgwWEhSY2RHMWhkR05vWlhKSmJpQTlJSEJ5WlVacGJIUmxjaUFtSmlBb0lITmxaV1FnZkh3Z0lYTmxiR1ZqZEc5eUlDa2dQMXh1WEhSY2RGeDBYSFJqYjI1a1pXNXpaU2dnWld4bGJYTXNJSEJ5WlUxaGNDd2djSEpsUm1sc2RHVnlMQ0JqYjI1MFpYaDBMQ0I0Yld3Z0tTQTZYRzVjZEZ4MFhIUmNkR1ZzWlcxekxGeHVYRzVjZEZ4MFhIUnRZWFJqYUdWeVQzVjBJRDBnYldGMFkyaGxjaUEvWEc1Y2RGeDBYSFJjZEM4dklFbG1JSGRsSUdoaGRtVWdZU0J3YjNOMFJtbHVaR1Z5TENCdmNpQm1hV3gwWlhKbFpDQnpaV1ZrTENCdmNpQnViMjR0YzJWbFpDQndiM04wUm1sc2RHVnlJRzl5SUhCeVpXVjRhWE4wYVc1bklISmxjM1ZzZEhNc1hHNWNkRngwWEhSY2RIQnZjM1JHYVc1a1pYSWdmSHdnS0NCelpXVmtJRDhnY0hKbFJtbHNkR1Z5SURvZ2NISmxaWGhwYzNScGJtY2dmSHdnY0c5emRFWnBiSFJsY2lBcElEOWNibHh1WEhSY2RGeDBYSFJjZEM4dklDNHVMbWx1ZEdWeWJXVmthV0YwWlNCd2NtOWpaWE56YVc1bklHbHpJRzVsWTJWemMyRnllVnh1WEhSY2RGeDBYSFJjZEZ0ZElEcGNibHh1WEhSY2RGeDBYSFJjZEM4dklDNHVMbTkwYUdWeWQybHpaU0IxYzJVZ2NtVnpkV3gwY3lCa2FYSmxZM1JzZVZ4dVhIUmNkRngwWEhSY2RISmxjM1ZzZEhNZ09seHVYSFJjZEZ4MFhIUnRZWFJqYUdWeVNXNDdYRzVjYmx4MFhIUXZMeUJHYVc1a0lIQnlhVzFoY25rZ2JXRjBZMmhsYzF4dVhIUmNkR2xtSUNnZ2JXRjBZMmhsY2lBcElIdGNibHgwWEhSY2RHMWhkR05vWlhJb0lHMWhkR05vWlhKSmJpd2diV0YwWTJobGNrOTFkQ3dnWTI5dWRHVjRkQ3dnZUcxc0lDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRWEJ3YkhrZ2NHOXpkRVpwYkhSbGNseHVYSFJjZEdsbUlDZ2djRzl6ZEVacGJIUmxjaUFwSUh0Y2JseDBYSFJjZEhSbGJYQWdQU0JqYjI1a1pXNXpaU2dnYldGMFkyaGxjazkxZEN3Z2NHOXpkRTFoY0NBcE8xeHVYSFJjZEZ4MGNHOXpkRVpwYkhSbGNpZ2dkR1Z0Y0N3Z1cxMHNJR052Ym5SbGVIUXNJSGh0YkNBcE8xeHVYRzVjZEZ4MFhIUXZMeUJWYmkxdFlYUmphQ0JtWVdsc2FXNW5JR1ZzWlcxbGJuUnpJR0o1SUcxdmRtbHVaeUIwYUdWdElHSmhZMnNnZEc4Z2JXRjBZMmhsY2tsdVhHNWNkRngwWEhScElEMGdkR1Z0Y0M1c1pXNW5kR2c3WEc1Y2RGeDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RGeDBhV1lnS0NBb1pXeGxiU0E5SUhSbGJYQmJhVjBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRzFoZEdOb1pYSlBkWFJiSUhCdmMzUk5ZWEJiYVYwZ1hTQTlJQ0VvYldGMFkyaGxja2x1V3lCd2IzTjBUV0Z3VzJsZElGMGdQU0JsYkdWdEtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2dnYzJWbFpDQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2NHOXpkRVpwYm1SbGNpQjhmQ0J3Y21WR2FXeDBaWElnS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2dnY0c5emRFWnBibVJsY2lBcElIdGNibHgwWEhSY2RGeDBYSFF2THlCSFpYUWdkR2hsSUdacGJtRnNJRzFoZEdOb1pYSlBkWFFnWW5rZ1kyOXVaR1Z1YzJsdVp5QjBhR2x6SUdsdWRHVnliV1ZrYVdGMFpTQnBiblJ2SUhCdmMzUkdhVzVrWlhJZ1kyOXVkR1Y0ZEhOY2JseDBYSFJjZEZ4MFhIUjBaVzF3SUQwZ1cxMDdYRzVjZEZ4MFhIUmNkRngwYVNBOUlHMWhkR05vWlhKUGRYUXViR1Z1WjNSb08xeHVYSFJjZEZ4MFhIUmNkSGRvYVd4bElDZ2dhUzB0SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQW9aV3hsYlNBOUlHMWhkR05vWlhKUGRYUmJhVjBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlNaWE4wYjNKbElHMWhkR05vWlhKSmJpQnphVzVqWlNCbGJHVnRJR2x6SUc1dmRDQjVaWFFnWVNCbWFXNWhiQ0J0WVhSamFGeHVYSFJjZEZ4MFhIUmNkRngwWEhSMFpXMXdMbkIxYzJnb0lDaHRZWFJqYUdWeVNXNWJhVjBnUFNCbGJHVnRLU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUndiM04wUm1sdVpHVnlLQ0J1ZFd4c0xDQW9iV0YwWTJobGNrOTFkQ0E5SUZ0ZEtTd2dkR1Z0Y0N3Z2VHMXNJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUXZMeUJOYjNabElHMWhkR05vWldRZ1pXeGxiV1Z1ZEhNZ1puSnZiU0J6WldWa0lIUnZJSEpsYzNWc2RITWdkRzhnYTJWbGNDQjBhR1Z0SUhONWJtTm9jbTl1YVhwbFpGeHVYSFJjZEZ4MFhIUnBJRDBnYldGMFkyaGxjazkxZEM1c1pXNW5kR2c3WEc1Y2RGeDBYSFJjZEhkb2FXeGxJQ2dnYVMwdElDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dLR1ZzWlcwZ1BTQnRZWFJqYUdWeVQzVjBXMmxkS1NBbUpseHVYSFJjZEZ4MFhIUmNkRngwS0hSbGJYQWdQU0J3YjNOMFJtbHVaR1Z5SUQ4Z2FXNWtaWGhQWmlnZ2MyVmxaQ3dnWld4bGJTQXBJRG9nY0hKbFRXRndXMmxkS1NBK0lDMHhJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJ6WldWa1czUmxiWEJkSUQwZ0lTaHlaWE4xYkhSelczUmxiWEJkSUQwZ1pXeGxiU2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUXZMeUJCWkdRZ1pXeGxiV1Z1ZEhNZ2RHOGdjbVZ6ZFd4MGN5d2dkR2h5YjNWbmFDQndiM04wUm1sdVpHVnlJR2xtSUdSbFptbHVaV1JjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MGJXRjBZMmhsY2s5MWRDQTlJR052Ym1SbGJuTmxLRnh1WEhSY2RGeDBYSFJ0WVhSamFHVnlUM1YwSUQwOVBTQnlaWE4xYkhSeklEOWNibHgwWEhSY2RGeDBYSFJ0WVhSamFHVnlUM1YwTG5Od2JHbGpaU2dnY0hKbFpYaHBjM1JwYm1jc0lHMWhkR05vWlhKUGRYUXViR1Z1WjNSb0lDa2dPbHh1WEhSY2RGeDBYSFJjZEcxaGRHTm9aWEpQZFhSY2JseDBYSFJjZENrN1hHNWNkRngwWEhScFppQW9JSEJ2YzNSR2FXNWtaWElnS1NCN1hHNWNkRngwWEhSY2RIQnZjM1JHYVc1a1pYSW9JRzUxYkd3c0lISmxjM1ZzZEhNc0lHMWhkR05vWlhKUGRYUXNJSGh0YkNBcE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGNIVnphQzVoY0hCc2VTZ2djbVZ6ZFd4MGN5d2diV0YwWTJobGNrOTFkQ0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhkR05vWlhKR2NtOXRWRzlyWlc1ektDQjBiMnRsYm5NZ0tTQjdYRzVjZEhaaGNpQmphR1ZqYTBOdmJuUmxlSFFzSUcxaGRHTm9aWElzSUdvc1hHNWNkRngwYkdWdUlEMGdkRzlyWlc1ekxteGxibWQwYUN4Y2JseDBYSFJzWldGa2FXNW5VbVZzWVhScGRtVWdQU0JGZUhCeUxuSmxiR0YwYVhabFd5QjBiMnRsYm5OYk1GMHVkSGx3WlNCZExGeHVYSFJjZEdsdGNHeHBZMmwwVW1Wc1lYUnBkbVVnUFNCc1pXRmthVzVuVW1Wc1lYUnBkbVVnZkh3Z1JYaHdjaTV5Wld4aGRHbDJaVnRjSWlCY0lsMHNYRzVjZEZ4MGFTQTlJR3hsWVdScGJtZFNaV3hoZEdsMlpTQS9JREVnT2lBd0xGeHVYRzVjZEZ4MEx5OGdWR2hsSUdadmRXNWtZWFJwYjI1aGJDQnRZWFJqYUdWeUlHVnVjM1Z5WlhNZ2RHaGhkQ0JsYkdWdFpXNTBjeUJoY21VZ2NtVmhZMmhoWW14bElHWnliMjBnZEc5d0xXeGxkbVZzSUdOdmJuUmxlSFFvY3lsY2JseDBYSFJ0WVhSamFFTnZiblJsZUhRZ1BTQmhaR1JEYjIxaWFXNWhkRzl5S0NCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJsYkdWdElEMDlQU0JqYUdWamEwTnZiblJsZUhRN1hHNWNkRngwZlN3Z2FXMXdiR2xqYVhSU1pXeGhkR2wyWlN3Z2RISjFaU0FwTEZ4dVhIUmNkRzFoZEdOb1FXNTVRMjl1ZEdWNGRDQTlJR0ZrWkVOdmJXSnBibUYwYjNJb0lHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdsdVpHVjRUMllvSUdOb1pXTnJRMjl1ZEdWNGRDd2daV3hsYlNBcElENGdMVEU3WEc1Y2RGeDBmU3dnYVcxd2JHbGphWFJTWld4aGRHbDJaU3dnZEhKMVpTQXBMRnh1WEhSY2RHMWhkR05vWlhKeklEMGdXeUJtZFc1amRHbHZiaWdnWld4bGJTd2dZMjl1ZEdWNGRDd2dlRzFzSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJSEpsZENBOUlDZ2dJV3hsWVdScGJtZFNaV3hoZEdsMlpTQW1KaUFvSUhodGJDQjhmQ0JqYjI1MFpYaDBJQ0U5UFNCdmRYUmxjbTF2YzNSRGIyNTBaWGgwSUNrZ0tTQjhmQ0FvWEc1Y2RGeDBYSFJjZENoamFHVmphME52Ym5SbGVIUWdQU0JqYjI1MFpYaDBLUzV1YjJSbFZIbHdaU0EvWEc1Y2RGeDBYSFJjZEZ4MGJXRjBZMmhEYjI1MFpYaDBLQ0JsYkdWdExDQmpiMjUwWlhoMExDQjRiV3dnS1NBNlhHNWNkRngwWEhSY2RGeDBiV0YwWTJoQmJubERiMjUwWlhoMEtDQmxiR1Z0TENCamIyNTBaWGgwTENCNGJXd2dLU0FwTzF4dVhIUmNkRngwTHk4Z1FYWnZhV1FnYUdGdVoybHVaeUJ2Ym5SdklHVnNaVzFsYm5RZ0tHbHpjM1ZsSUNNeU9Ua3BYRzVjZEZ4MFhIUmphR1ZqYTBOdmJuUmxlSFFnUFNCdWRXeHNPMXh1WEhSY2RGeDBjbVYwZFhKdUlISmxkRHRjYmx4MFhIUjlJRjA3WEc1Y2JseDBabTl5SUNnZ095QnBJRHdnYkdWdU95QnBLeXNnS1NCN1hHNWNkRngwYVdZZ0tDQW9iV0YwWTJobGNpQTlJRVY0Y0hJdWNtVnNZWFJwZG1WYklIUnZhMlZ1YzF0cFhTNTBlWEJsSUYwcElDa2dlMXh1WEhSY2RGeDBiV0YwWTJobGNuTWdQU0JiSUdGa1pFTnZiV0pwYm1GMGIzSW9aV3hsYldWdWRFMWhkR05vWlhJb0lHMWhkR05vWlhKeklDa3NJRzFoZEdOb1pYSXBJRjA3WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RHMWhkR05vWlhJZ1BTQkZlSEJ5TG1acGJIUmxjbHNnZEc5clpXNXpXMmxkTG5SNWNHVWdYUzVoY0hCc2VTZ2diblZzYkN3Z2RHOXJaVzV6VzJsZExtMWhkR05vWlhNZ0tUdGNibHh1WEhSY2RGeDBMeThnVW1WMGRYSnVJSE53WldOcFlXd2dkWEJ2YmlCelpXVnBibWNnWVNCd2IzTnBkR2x2Ym1Gc0lHMWhkR05vWlhKY2JseDBYSFJjZEdsbUlDZ2diV0YwWTJobGNsc2daWGh3WVc1a2J5QmRJQ2tnZTF4dVhIUmNkRngwWEhRdkx5QkdhVzVrSUhSb1pTQnVaWGgwSUhKbGJHRjBhWFpsSUc5d1pYSmhkRzl5SUNocFppQmhibmtwSUdadmNpQndjbTl3WlhJZ2FHRnVaR3hwYm1kY2JseDBYSFJjZEZ4MGFpQTlJQ3NyYVR0Y2JseDBYSFJjZEZ4MFptOXlJQ2dnT3lCcUlEd2diR1Z1T3lCcUt5c2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JGZUhCeUxuSmxiR0YwYVhabFd5QjBiMnRsYm5OYmFsMHVkSGx3WlNCZElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnpaWFJOWVhSamFHVnlLRnh1WEhSY2RGeDBYSFJjZEdrZ1BpQXhJQ1ltSUdWc1pXMWxiblJOWVhSamFHVnlLQ0J0WVhSamFHVnljeUFwTEZ4dVhIUmNkRngwWEhSY2RHa2dQaUF4SUNZbUlIUnZVMlZzWldOMGIzSW9YRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkpaaUIwYUdVZ2NISmxZMlZrYVc1bklIUnZhMlZ1SUhkaGN5QmhJR1JsYzJObGJtUmhiblFnWTI5dFltbHVZWFJ2Y2l3Z2FXNXpaWEowSUdGdUlHbHRjR3hwWTJsMElHRnVlUzFsYkdWdFpXNTBJR0FxWUZ4dVhIUmNkRngwWEhSY2RGeDBkRzlyWlc1ekxuTnNhV05sS0NBd0xDQnBJQzBnTVNBcExtTnZibU5oZENoN0lIWmhiSFZsT2lCMGIydGxibk5iSUdrZ0xTQXlJRjB1ZEhsd1pTQTlQVDBnWENJZ1hDSWdQeUJjSWlwY0lpQTZJRndpWENJZ2ZTbGNibHgwWEhSY2RGeDBYSFFwTG5KbGNHeGhZMlVvSUhKMGNtbHRMQ0JjSWlReFhDSWdLU3hjYmx4MFhIUmNkRngwWEhSdFlYUmphR1Z5TEZ4dVhIUmNkRngwWEhSY2RHa2dQQ0JxSUNZbUlHMWhkR05vWlhKR2NtOXRWRzlyWlc1ektDQjBiMnRsYm5NdWMyeHBZMlVvSUdrc0lHb2dLU0FwTEZ4dVhIUmNkRngwWEhSY2RHb2dQQ0JzWlc0Z0ppWWdiV0YwWTJobGNrWnliMjFVYjJ0bGJuTW9JQ2gwYjJ0bGJuTWdQU0IwYjJ0bGJuTXVjMnhwWTJVb0lHb2dLU2tnS1N4Y2JseDBYSFJjZEZ4MFhIUnFJRHdnYkdWdUlDWW1JSFJ2VTJWc1pXTjBiM0lvSUhSdmEyVnVjeUFwWEc1Y2RGeDBYSFJjZENrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSdFlYUmphR1Z5Y3k1d2RYTm9LQ0J0WVhSamFHVnlJQ2s3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwY21WMGRYSnVJR1ZzWlcxbGJuUk5ZWFJqYUdWeUtDQnRZWFJqYUdWeWN5QXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRZWFJqYUdWeVJuSnZiVWR5YjNWd1RXRjBZMmhsY25Nb0lHVnNaVzFsYm5STllYUmphR1Z5Y3l3Z2MyVjBUV0YwWTJobGNuTWdLU0I3WEc1Y2RIWmhjaUJpZVZObGRDQTlJSE5sZEUxaGRHTm9aWEp6TG14bGJtZDBhQ0ErSURBc1hHNWNkRngwWW5sRmJHVnRaVzUwSUQwZ1pXeGxiV1Z1ZEUxaGRHTm9aWEp6TG14bGJtZDBhQ0ErSURBc1hHNWNkRngwYzNWd1pYSk5ZWFJqYUdWeUlEMGdablZ1WTNScGIyNG9JSE5sWldRc0lHTnZiblJsZUhRc0lIaHRiQ3dnY21WemRXeDBjeXdnYjNWMFpYSnRiM04wSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR1ZzWlcwc0lHb3NJRzFoZEdOb1pYSXNYRzVjZEZ4MFhIUmNkRzFoZEdOb1pXUkRiM1Z1ZENBOUlEQXNYRzVjZEZ4MFhIUmNkR2tnUFNCY0lqQmNJaXhjYmx4MFhIUmNkRngwZFc1dFlYUmphR1ZrSUQwZ2MyVmxaQ0FtSmlCYlhTeGNibHgwWEhSY2RGeDBjMlYwVFdGMFkyaGxaQ0E5SUZ0ZExGeHVYSFJjZEZ4MFhIUmpiMjUwWlhoMFFtRmphM1Z3SUQwZ2IzVjBaWEp0YjNOMFEyOXVkR1Y0ZEN4Y2JseDBYSFJjZEZ4MEx5OGdWMlVnYlhWemRDQmhiSGRoZVhNZ2FHRjJaU0JsYVhSb1pYSWdjMlZsWkNCbGJHVnRaVzUwY3lCdmNpQnZkWFJsY20xdmMzUWdZMjl1ZEdWNGRGeHVYSFJjZEZ4MFhIUmxiR1Z0Y3lBOUlITmxaV1FnZkh3Z1lubEZiR1Z0Wlc1MElDWW1JRVY0Y0hJdVptbHVaRnRjSWxSQlIxd2lYU2dnWENJcVhDSXNJRzkxZEdWeWJXOXpkQ0FwTEZ4dVhIUmNkRngwWEhRdkx5QlZjMlVnYVc1MFpXZGxjaUJrYVhKeWRXNXpJR2xtWmlCMGFHbHpJR2x6SUhSb1pTQnZkWFJsY20xdmMzUWdiV0YwWTJobGNseHVYSFJjZEZ4MFhIUmthWEp5ZFc1elZXNXBjWFZsSUQwZ0tHUnBjbkoxYm5NZ0t6MGdZMjl1ZEdWNGRFSmhZMnQxY0NBOVBTQnVkV3hzSUQ4Z01TQTZJRTFoZEdndWNtRnVaRzl0S0NrZ2ZId2dNQzR4S1N4Y2JseDBYSFJjZEZ4MGJHVnVJRDBnWld4bGJYTXViR1Z1WjNSb08xeHVYRzVjZEZ4MFhIUnBaaUFvSUc5MWRHVnliVzl6ZENBcElIdGNibHgwWEhSY2RGeDBiM1YwWlhKdGIzTjBRMjl1ZEdWNGRDQTlJR052Ym5SbGVIUWdQVDA5SUdSdlkzVnRaVzUwSUh4OElHTnZiblJsZUhRZ2ZId2diM1YwWlhKdGIzTjBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCQlpHUWdaV3hsYldWdWRITWdjR0Z6YzJsdVp5QmxiR1Z0Wlc1MFRXRjBZMmhsY25NZ1pHbHlaV04wYkhrZ2RHOGdjbVZ6ZFd4MGMxeHVYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVU4T1N3Z1UyRm1ZWEpwWEc1Y2RGeDBYSFF2THlCVWIyeGxjbUYwWlNCT2IyUmxUR2x6ZENCd2NtOXdaWEowYVdWeklDaEpSVG9nWENKc1pXNW5kR2hjSWpzZ1UyRm1ZWEpwT2lBOGJuVnRZbVZ5UGlrZ2JXRjBZMmhwYm1jZ1pXeGxiV1Z1ZEhNZ1lua2dhV1JjYmx4MFhIUmNkR1p2Y2lBb0lEc2dhU0FoUFQwZ2JHVnVJQ1ltSUNobGJHVnRJRDBnWld4bGJYTmJhVjBwSUNFOUlHNTFiR3c3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQmllVVZzWlcxbGJuUWdKaVlnWld4bGJTQXBJSHRjYmx4MFhIUmNkRngwWEhScUlEMGdNRHRjYmx4MFhIUmNkRngwWEhScFppQW9JQ0ZqYjI1MFpYaDBJQ1ltSUdWc1pXMHViM2R1WlhKRWIyTjFiV1Z1ZENBaFBUMGdaRzlqZFcxbGJuUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnpaWFJFYjJOMWJXVnVkQ2dnWld4bGJTQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGVHMXNJRDBnSVdSdlkzVnRaVzUwU1hOSVZFMU1PMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjNhR2xzWlNBb0lDaHRZWFJqYUdWeUlEMGdaV3hsYldWdWRFMWhkR05vWlhKelcyb3JLMTBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDQnRZWFJqYUdWeUtDQmxiR1Z0TENCamIyNTBaWGgwSUh4OElHUnZZM1Z0Wlc1MExDQjRiV3dwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTjFiSFJ6TG5CMWMyZ29JR1ZzWlcwZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYjNWMFpYSnRiM04wSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWkdseWNuVnVjeUE5SUdScGNuSjFibk5WYm1seGRXVTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnVkhKaFkyc2dkVzV0WVhSamFHVmtJR1ZzWlcxbGJuUnpJR1p2Y2lCelpYUWdabWxzZEdWeWMxeHVYSFJjZEZ4MFhIUnBaaUFvSUdKNVUyVjBJQ2tnZTF4dVhIUmNkRngwWEhSY2RDOHZJRlJvWlhrZ2QybHNiQ0JvWVhabElHZHZibVVnZEdoeWIzVm5hQ0JoYkd3Z2NHOXpjMmxpYkdVZ2JXRjBZMmhsY25OY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUNobGJHVnRJRDBnSVcxaGRHTm9aWElnSmlZZ1pXeGxiU2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ0WVhSamFHVmtRMjkxYm5RdExUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJNWlc1bmRHaGxiaUIwYUdVZ1lYSnlZWGtnWm05eUlHVjJaWEo1SUdWc1pXMWxiblFzSUcxaGRHTm9aV1FnYjNJZ2JtOTBYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQnpaV1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZFc1dFlYUmphR1ZrTG5CMWMyZ29JR1ZzWlcwZ0tUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdZR2xnSUdseklHNXZkeUIwYUdVZ1kyOTFiblFnYjJZZ1pXeGxiV1Z1ZEhNZ2RtbHphWFJsWkNCaFltOTJaU3dnWVc1a0lHRmtaR2x1WnlCcGRDQjBieUJnYldGMFkyaGxaRU52ZFc1MFlGeHVYSFJjZEZ4MEx5OGdiV0ZyWlhNZ2RHaGxJR3hoZEhSbGNpQnViMjV1WldkaGRHbDJaUzVjYmx4MFhIUmNkRzFoZEdOb1pXUkRiM1Z1ZENBclBTQnBPMXh1WEc1Y2RGeDBYSFF2THlCQmNIQnNlU0J6WlhRZ1ptbHNkR1Z5Y3lCMGJ5QjFibTFoZEdOb1pXUWdaV3hsYldWdWRITmNibHgwWEhSY2RDOHZJRTVQVkVVNklGUm9hWE1nWTJGdUlHSmxJSE5yYVhCd1pXUWdhV1lnZEdobGNtVWdZWEpsSUc1dklIVnViV0YwWTJobFpDQmxiR1Z0Wlc1MGN5QW9hUzVsTGl3Z1lHMWhkR05vWldSRGIzVnVkR0JjYmx4MFhIUmNkQzh2SUdWeGRXRnNjeUJnYVdBcExDQjFibXhsYzNNZ2QyVWdaR2xrYmlkMElIWnBjMmwwSUY5aGJubGZJR1ZzWlcxbGJuUnpJR2x1SUhSb1pTQmhZbTkyWlNCc2IyOXdJR0psWTJGMWMyVWdkMlVnYUdGMlpWeHVYSFJjZEZ4MEx5OGdibThnWld4bGJXVnVkQ0J0WVhSamFHVnljeUJoYm1RZ2JtOGdjMlZsWkM1Y2JseDBYSFJjZEM4dklFbHVZM0psYldWdWRHbHVaeUJoYmlCcGJtbDBhV0ZzYkhrdGMzUnlhVzVuSUZ3aU1Gd2lJR0JwWUNCaGJHeHZkM01nWUdsZ0lIUnZJSEpsYldGcGJpQmhJSE4wY21sdVp5QnZibXg1SUdsdUlIUm9ZWFJjYmx4MFhIUmNkQzh2SUdOaGMyVXNJSGRvYVdOb0lIZHBiR3dnY21WemRXeDBJR2x1SUdFZ1hDSXdNRndpSUdCdFlYUmphR1ZrUTI5MWJuUmdJSFJvWVhRZ1pHbG1abVZ5Y3lCbWNtOXRJR0JwWUNCaWRYUWdhWE1nWVd4emIxeHVYSFJjZEZ4MEx5OGdiblZ0WlhKcFkyRnNiSGtnZW1WeWJ5NWNibHgwWEhSY2RHbG1JQ2dnWW5sVFpYUWdKaVlnYVNBaFBUMGdiV0YwWTJobFpFTnZkVzUwSUNrZ2UxeHVYSFJjZEZ4MFhIUnFJRDBnTUR0Y2JseDBYSFJjZEZ4MGQyaHBiR1VnS0NBb2JXRjBZMmhsY2lBOUlITmxkRTFoZEdOb1pYSnpXMm9ySzEwcElDa2dlMXh1WEhSY2RGeDBYSFJjZEcxaGRHTm9aWElvSUhWdWJXRjBZMmhsWkN3Z2MyVjBUV0YwWTJobFpDd2dZMjl1ZEdWNGRDd2dlRzFzSUNrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJwWmlBb0lITmxaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBMeThnVW1WcGJuUmxaM0poZEdVZ1pXeGxiV1Z1ZENCdFlYUmphR1Z6SUhSdklHVnNhVzFwYm1GMFpTQjBhR1VnYm1WbFpDQm1iM0lnYzI5eWRHbHVaMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2diV0YwWTJobFpFTnZkVzUwSUQ0Z01DQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJwWmlBb0lDRW9kVzV0WVhSamFHVmtXMmxkSUh4OElITmxkRTFoZEdOb1pXUmJhVjBwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RITmxkRTFoZEdOb1pXUmJhVjBnUFNCd2IzQXVZMkZzYkNnZ2NtVnpkV3gwY3lBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1JHbHpZMkZ5WkNCcGJtUmxlQ0J3YkdGalpXaHZiR1JsY2lCMllXeDFaWE1nZEc4Z1oyVjBJRzl1YkhrZ1lXTjBkV0ZzSUcxaGRHTm9aWE5jYmx4MFhIUmNkRngwWEhSelpYUk5ZWFJqYUdWa0lEMGdZMjl1WkdWdWMyVW9JSE5sZEUxaGRHTm9aV1FnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUVGa1pDQnRZWFJqYUdWeklIUnZJSEpsYzNWc2RITmNibHgwWEhSY2RGeDBjSFZ6YUM1aGNIQnNlU2dnY21WemRXeDBjeXdnYzJWMFRXRjBZMmhsWkNBcE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUZObFpXUnNaWE56SUhObGRDQnRZWFJqYUdWeklITjFZMk5sWldScGJtY2diWFZzZEdsd2JHVWdjM1ZqWTJWemMyWjFiQ0J0WVhSamFHVnljeUJ6ZEdsd2RXeGhkR1VnYzI5eWRHbHVaMXh1WEhSY2RGeDBYSFJwWmlBb0lHOTFkR1Z5Ylc5emRDQW1KaUFoYzJWbFpDQW1KaUJ6WlhSTllYUmphR1ZrTG14bGJtZDBhQ0ErSURBZ0ppWmNibHgwWEhSY2RGeDBYSFFvSUcxaGRHTm9aV1JEYjNWdWRDQXJJSE5sZEUxaGRHTm9aWEp6TG14bGJtZDBhQ0FwSUQ0Z01TQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGTnBlbnBzWlM1MWJtbHhkV1ZUYjNKMEtDQnlaWE4xYkhSeklDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1QzWmxjbkpwWkdVZ2JXRnVhWEIxYkdGMGFXOXVJRzltSUdkc2IySmhiSE1nWW5rZ2JtVnpkR1ZrSUcxaGRHTm9aWEp6WEc1Y2RGeDBYSFJwWmlBb0lHOTFkR1Z5Ylc5emRDQXBJSHRjYmx4MFhIUmNkRngwWkdseWNuVnVjeUE5SUdScGNuSjFibk5WYm1seGRXVTdYRzVjZEZ4MFhIUmNkRzkxZEdWeWJXOXpkRU52Ym5SbGVIUWdQU0JqYjI1MFpYaDBRbUZqYTNWd08xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z2RXNXRZWFJqYUdWa08xeHVYSFJjZEgwN1hHNWNibHgwY21WMGRYSnVJR0o1VTJWMElEOWNibHgwWEhSdFlYSnJSblZ1WTNScGIyNG9JSE4xY0dWeVRXRjBZMmhsY2lBcElEcGNibHgwWEhSemRYQmxjazFoZEdOb1pYSTdYRzU5WEc1Y2JtTnZiWEJwYkdVZ1BTQlRhWHA2YkdVdVkyOXRjR2xzWlNBOUlHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpd2diV0YwWTJnZ0x5b2dTVzUwWlhKdVlXd2dWWE5sSUU5dWJIa2dLaThnS1NCN1hHNWNkSFpoY2lCcExGeHVYSFJjZEhObGRFMWhkR05vWlhKeklEMGdXMTBzWEc1Y2RGeDBaV3hsYldWdWRFMWhkR05vWlhKeklEMGdXMTBzWEc1Y2RGeDBZMkZqYUdWa0lEMGdZMjl0Y0dsc1pYSkRZV05vWlZzZ2MyVnNaV04wYjNJZ0t5QmNJaUJjSWlCZE8xeHVYRzVjZEdsbUlDZ2dJV05oWTJobFpDQXBJSHRjYmx4MFhIUXZMeUJIWlc1bGNtRjBaU0JoSUdaMWJtTjBhVzl1SUc5bUlISmxZM1Z5YzJsMlpTQm1kVzVqZEdsdmJuTWdkR2hoZENCallXNGdZbVVnZFhObFpDQjBieUJqYUdWamF5QmxZV05vSUdWc1pXMWxiblJjYmx4MFhIUnBaaUFvSUNGdFlYUmphQ0FwSUh0Y2JseDBYSFJjZEcxaGRHTm9JRDBnZEc5clpXNXBlbVVvSUhObGJHVmpkRzl5SUNrN1hHNWNkRngwZlZ4dVhIUmNkR2tnUFNCdFlYUmphQzVzWlc1bmRHZzdYRzVjZEZ4MGQyaHBiR1VnS0NCcExTMGdLU0I3WEc1Y2RGeDBYSFJqWVdOb1pXUWdQU0J0WVhSamFHVnlSbkp2YlZSdmEyVnVjeWdnYldGMFkyaGJhVjBnS1R0Y2JseDBYSFJjZEdsbUlDZ2dZMkZqYUdWa1d5QmxlSEJoYm1SdklGMGdLU0I3WEc1Y2RGeDBYSFJjZEhObGRFMWhkR05vWlhKekxuQjFjMmdvSUdOaFkyaGxaQ0FwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWld4bGJXVnVkRTFoZEdOb1pYSnpMbkIxYzJnb0lHTmhZMmhsWkNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFTmhZMmhsSUhSb1pTQmpiMjF3YVd4bFpDQm1kVzVqZEdsdmJseHVYSFJjZEdOaFkyaGxaQ0E5SUdOdmJYQnBiR1Z5UTJGamFHVW9JSE5sYkdWamRHOXlMQ0J0WVhSamFHVnlSbkp2YlVkeWIzVndUV0YwWTJobGNuTW9JR1ZzWlcxbGJuUk5ZWFJqYUdWeWN5d2djMlYwVFdGMFkyaGxjbk1nS1NBcE8xeHVYRzVjZEZ4MEx5OGdVMkYyWlNCelpXeGxZM1J2Y2lCaGJtUWdkRzlyWlc1cGVtRjBhVzl1WEc1Y2RGeDBZMkZqYUdWa0xuTmxiR1ZqZEc5eUlEMGdjMlZzWldOMGIzSTdYRzVjZEgxY2JseDBjbVYwZFhKdUlHTmhZMmhsWkR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUVNCc2IzY3RiR1YyWld3Z2MyVnNaV04wYVc5dUlHWjFibU4wYVc5dUlIUm9ZWFFnZDI5eWEzTWdkMmwwYUNCVGFYcDZiR1VuY3lCamIyMXdhV3hsWkZ4dUlDb2dJSE5sYkdWamRHOXlJR1oxYm1OMGFXOXVjMXh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ4Um5WdVkzUnBiMjU5SUhObGJHVmpkRzl5SUVFZ2MyVnNaV04wYjNJZ2IzSWdZU0J3Y21VdFkyOXRjR2xzWldSY2JpQXFJQ0J6Wld4bFkzUnZjaUJtZFc1amRHbHZiaUJpZFdsc2RDQjNhWFJvSUZOcGVucHNaUzVqYjIxd2FXeGxYRzRnS2lCQWNHRnlZVzBnZTBWc1pXMWxiblI5SUdOdmJuUmxlSFJjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUZ0eVpYTjFiSFJ6WFZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1czTmxaV1JkSUVFZ2MyVjBJRzltSUdWc1pXMWxiblJ6SUhSdklHMWhkR05vSUdGbllXbHVjM1JjYmlBcUwxeHVjMlZzWldOMElEMGdVMmw2ZW14bExuTmxiR1ZqZENBOUlHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpd2dZMjl1ZEdWNGRDd2djbVZ6ZFd4MGN5d2djMlZsWkNBcElIdGNibHgwZG1GeUlHa3NJSFJ2YTJWdWN5d2dkRzlyWlc0c0lIUjVjR1VzSUdacGJtUXNYRzVjZEZ4MFkyOXRjR2xzWldRZ1BTQjBlWEJsYjJZZ2MyVnNaV04wYjNJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQnpaV3hsWTNSdmNpeGNibHgwWEhSdFlYUmphQ0E5SUNGelpXVmtJQ1ltSUhSdmEyVnVhWHBsS0NBb2MyVnNaV04wYjNJZ1BTQmpiMjF3YVd4bFpDNXpaV3hsWTNSdmNpQjhmQ0J6Wld4bFkzUnZjaWtnS1R0Y2JseHVYSFJ5WlhOMWJIUnpJRDBnY21WemRXeDBjeUI4ZkNCYlhUdGNibHh1WEhRdkx5QlVjbmtnZEc4Z2JXbHVhVzFwZW1VZ2IzQmxjbUYwYVc5dWN5QnBaaUIwYUdWeVpTQnBjeUJ2Ym14NUlHOXVaU0J6Wld4bFkzUnZjaUJwYmlCMGFHVWdiR2x6ZENCaGJtUWdibThnYzJWbFpGeHVYSFF2THlBb2RHaGxJR3hoZEhSbGNpQnZaaUIzYUdsamFDQm5kV0Z5WVc1MFpXVnpJSFZ6SUdOdmJuUmxlSFFwWEc1Y2RHbG1JQ2dnYldGMFkyZ3ViR1Z1WjNSb0lEMDlQU0F4SUNrZ2UxeHVYRzVjZEZ4MEx5OGdVbVZrZFdObElHTnZiblJsZUhRZ2FXWWdkR2hsSUd4bFlXUnBibWNnWTI5dGNHOTFibVFnYzJWc1pXTjBiM0lnYVhNZ1lXNGdTVVJjYmx4MFhIUjBiMnRsYm5NZ1BTQnRZWFJqYUZzd1hTQTlJRzFoZEdOb1d6QmRMbk5zYVdObEtDQXdJQ2s3WEc1Y2RGeDBhV1lnS0NCMGIydGxibk11YkdWdVozUm9JRDRnTWlBbUppQW9kRzlyWlc0Z1BTQjBiMnRsYm5OYk1GMHBMblI1Y0dVZ1BUMDlJRndpU1VSY0lpQW1KbHh1WEhSY2RGeDBYSFJqYjI1MFpYaDBMbTV2WkdWVWVYQmxJRDA5UFNBNUlDWW1JR1J2WTNWdFpXNTBTWE5JVkUxTUlDWW1JRVY0Y0hJdWNtVnNZWFJwZG1WYklIUnZhMlZ1YzFzeFhTNTBlWEJsSUYwZ0tTQjdYRzVjYmx4MFhIUmNkR052Ym5SbGVIUWdQU0FvSUVWNGNISXVabWx1WkZ0Y0lrbEVYQ0pkS0NCMGIydGxiaTV0WVhSamFHVnpXekJkTG5KbGNHeGhZMlVvY25WdVpYTmpZWEJsTENCbWRXNWxjMk5oY0dVcExDQmpiMjUwWlhoMElDa2dmSHdnVzEwZ0tWc3dYVHRjYmx4MFhIUmNkR2xtSUNnZ0lXTnZiblJsZUhRZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaWE4xYkhSek8xeHVYRzVjZEZ4MFhIUXZMeUJRY21WamIyMXdhV3hsWkNCdFlYUmphR1Z5Y3lCM2FXeHNJSE4wYVd4c0lIWmxjbWxtZVNCaGJtTmxjM1J5ZVN3Z2MyOGdjM1JsY0NCMWNDQmhJR3hsZG1Wc1hHNWNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQmpiMjF3YVd4bFpDQXBJSHRjYmx4MFhIUmNkRngwWTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFF1Y0dGeVpXNTBUbTlrWlR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGMyVnNaV04wYjNJZ1BTQnpaV3hsWTNSdmNpNXpiR2xqWlNnZ2RHOXJaVzV6TG5Ob2FXWjBLQ2t1ZG1Gc2RXVXViR1Z1WjNSb0lDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdSbVYwWTJnZ1lTQnpaV1ZrSUhObGRDQm1iM0lnY21sbmFIUXRkRzh0YkdWbWRDQnRZWFJqYUdsdVoxeHVYSFJjZEdrZ1BTQnRZWFJqYUVWNGNISmJYQ0p1WldWa2MwTnZiblJsZUhSY0lsMHVkR1Z6ZENnZ2MyVnNaV04wYjNJZ0tTQS9JREFnT2lCMGIydGxibk11YkdWdVozUm9PMXh1WEhSY2RIZG9hV3hsSUNnZ2FTMHRJQ2tnZTF4dVhIUmNkRngwZEc5clpXNGdQU0IwYjJ0bGJuTmJhVjA3WEc1Y2JseDBYSFJjZEM4dklFRmliM0owSUdsbUlIZGxJR2hwZENCaElHTnZiV0pwYm1GMGIzSmNibHgwWEhSY2RHbG1JQ2dnUlhod2NpNXlaV3hoZEdsMlpWc2dLSFI1Y0dVZ1BTQjBiMnRsYmk1MGVYQmxLU0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUmljbVZoYXp0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdsbUlDZ2dLR1pwYm1RZ1BTQkZlSEJ5TG1acGJtUmJJSFI1Y0dVZ1hTa2dLU0I3WEc1Y2RGeDBYSFJjZEM4dklGTmxZWEpqYUN3Z1pYaHdZVzVrYVc1bklHTnZiblJsZUhRZ1ptOXlJR3hsWVdScGJtY2djMmxpYkdsdVp5QmpiMjFpYVc1aGRHOXljMXh1WEhSY2RGeDBYSFJwWmlBb0lDaHpaV1ZrSUQwZ1ptbHVaQ2hjYmx4MFhIUmNkRngwWEhSMGIydGxiaTV0WVhSamFHVnpXekJkTG5KbGNHeGhZMlVvSUhKMWJtVnpZMkZ3WlN3Z1puVnVaWE5qWVhCbElDa3NYRzVjZEZ4MFhIUmNkRngwY25OcFlteHBibWN1ZEdWemRDZ2dkRzlyWlc1eld6QmRMblI1Y0dVZ0tTQW1KaUIwWlhOMFEyOXVkR1Y0ZENnZ1kyOXVkR1Y0ZEM1d1lYSmxiblJPYjJSbElDa2dmSHdnWTI5dWRHVjRkRnh1WEhSY2RGeDBYSFFwS1NBcElIdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFbG1JSE5sWldRZ2FYTWdaVzF3ZEhrZ2IzSWdibThnZEc5clpXNXpJSEpsYldGcGJpd2dkMlVnWTJGdUlISmxkSFZ5YmlCbFlYSnNlVnh1WEhSY2RGeDBYSFJjZEhSdmEyVnVjeTV6Y0d4cFkyVW9JR2tzSURFZ0tUdGNibHgwWEhSY2RGeDBYSFJ6Wld4bFkzUnZjaUE5SUhObFpXUXViR1Z1WjNSb0lDWW1JSFJ2VTJWc1pXTjBiM0lvSUhSdmEyVnVjeUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnSVhObGJHVmpkRzl5SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwY0hWemFDNWhjSEJzZVNnZ2NtVnpkV3gwY3l3Z2MyVmxaQ0FwTzF4dVhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhRdkx5QkRiMjF3YVd4bElHRnVaQ0JsZUdWamRYUmxJR0VnWm1sc2RHVnlhVzVuSUdaMWJtTjBhVzl1SUdsbUlHOXVaU0JwY3lCdWIzUWdjSEp2ZG1sa1pXUmNibHgwTHk4Z1VISnZkbWxrWlNCZ2JXRjBZMmhnSUhSdklHRjJiMmxrSUhKbGRHOXJaVzVwZW1GMGFXOXVJR2xtSUhkbElHMXZaR2xtYVdWa0lIUm9aU0J6Wld4bFkzUnZjaUJoWW05MlpWeHVYSFFvSUdOdmJYQnBiR1ZrSUh4OElHTnZiWEJwYkdVb0lITmxiR1ZqZEc5eUxDQnRZWFJqYUNBcElDa29YRzVjZEZ4MGMyVmxaQ3hjYmx4MFhIUmpiMjUwWlhoMExGeHVYSFJjZENGa2IyTjFiV1Z1ZEVselNGUk5UQ3hjYmx4MFhIUnlaWE4xYkhSekxGeHVYSFJjZENGamIyNTBaWGgwSUh4OElISnphV0pzYVc1bkxuUmxjM1FvSUhObGJHVmpkRzl5SUNrZ0ppWWdkR1Z6ZEVOdmJuUmxlSFFvSUdOdmJuUmxlSFF1Y0dGeVpXNTBUbTlrWlNBcElIeDhJR052Ym5SbGVIUmNibHgwS1R0Y2JseDBjbVYwZFhKdUlISmxjM1ZzZEhNN1hHNTlPMXh1WEc0dkx5QlBibVV0ZEdsdFpTQmhjM05wWjI1dFpXNTBjMXh1WEc0dkx5QlRiM0owSUhOMFlXSnBiR2wwZVZ4dWMzVndjRzl5ZEM1emIzSjBVM1JoWW14bElEMGdaWGh3WVc1a2J5NXpjR3hwZENoY0lsd2lLUzV6YjNKMEtDQnpiM0owVDNKa1pYSWdLUzVxYjJsdUtGd2lYQ0lwSUQwOVBTQmxlSEJoYm1Sdk8xeHVYRzR2THlCVGRYQndiM0owT2lCRGFISnZiV1VnTVRRdE16VXJYRzR2THlCQmJIZGhlWE1nWVhOemRXMWxJR1IxY0d4cFkyRjBaWE1nYVdZZ2RHaGxlU0JoY21WdUozUWdjR0Z6YzJWa0lIUnZJSFJvWlNCamIyMXdZWEpwYzI5dUlHWjFibU4wYVc5dVhHNXpkWEJ3YjNKMExtUmxkR1ZqZEVSMWNHeHBZMkYwWlhNZ1BTQWhJV2hoYzBSMWNHeHBZMkYwWlR0Y2JseHVMeThnU1c1cGRHbGhiR2w2WlNCaFoyRnBibk4wSUhSb1pTQmtaV1poZFd4MElHUnZZM1Z0Wlc1MFhHNXpaWFJFYjJOMWJXVnVkQ2dwTzF4dVhHNHZMeUJUZFhCd2IzSjBPaUJYWldKcmFYUThOVE0zTGpNeUlDMGdVMkZtWVhKcElEWXVNQzR6TDBOb2NtOXRaU0F5TlNBb1ptbDRaV1FnYVc0Z1EyaHliMjFsSURJM0tWeHVMeThnUkdWMFlXTm9aV1FnYm05a1pYTWdZMjl1Wm05MWJtUnBibWRzZVNCbWIyeHNiM2NnS21WaFkyZ2diM1JvWlhJcVhHNXpkWEJ3YjNKMExuTnZjblJFWlhSaFkyaGxaQ0E5SUdGemMyVnlkQ2htZFc1amRHbHZiaWdnWld3Z0tTQjdYRzVjZEM4dklGTm9iM1ZzWkNCeVpYUjFjbTRnTVN3Z1luVjBJSEpsZEhWeWJuTWdOQ0FvWm05c2JHOTNhVzVuS1Z4dVhIUnlaWFIxY200Z1pXd3VZMjl0Y0dGeVpVUnZZM1Z0Wlc1MFVHOXphWFJwYjI0b0lHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKbWFXVnNaSE5sZEZ3aUtTQXBJQ1lnTVR0Y2JuMHBPMXh1WEc0dkx5QlRkWEJ3YjNKME9pQkpSVHc0WEc0dkx5QlFjbVYyWlc1MElHRjBkSEpwWW5WMFpTOXdjbTl3WlhKMGVTQmNJbWx1ZEdWeWNHOXNZWFJwYjI1Y0lseHVMeThnYUhSMGNITTZMeTl0YzJSdUxtMXBZM0p2YzI5bWRDNWpiMjB2Wlc0dGRYTXZiR2xpY21GeWVTOXRjelV6TmpReU9TVXlPRlpUTGpnMUpUSTVMbUZ6Y0hoY2JtbG1JQ2dnSVdGemMyVnlkQ2htZFc1amRHbHZiaWdnWld3Z0tTQjdYRzVjZEdWc0xtbHVibVZ5U0ZSTlRDQTlJRndpUEdFZ2FISmxaajBuSXljK1BDOWhQbHdpTzF4dVhIUnlaWFIxY200Z1pXd3VabWx5YzNSRGFHbHNaQzVuWlhSQmRIUnlhV0oxZEdVb1hDSm9jbVZtWENJcElEMDlQU0JjSWlOY0lpQTdYRzU5S1NBcElIdGNibHgwWVdSa1NHRnVaR3hsS0NCY0luUjVjR1Y4YUhKbFpueG9aV2xuYUhSOGQybGtkR2hjSWl3Z1puVnVZM1JwYjI0b0lHVnNaVzBzSUc1aGJXVXNJR2x6V0UxTUlDa2dlMXh1WEhSY2RHbG1JQ2dnSVdseldFMU1JQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1ZzWlcwdVoyVjBRWFIwY21saWRYUmxLQ0J1WVcxbExDQnVZVzFsTG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUZ3aWRIbHdaVndpSUQ4Z01TQTZJRElnS1R0Y2JseDBYSFI5WEc1Y2RIMHBPMXh1ZlZ4dVhHNHZMeUJUZFhCd2IzSjBPaUJKUlR3NVhHNHZMeUJWYzJVZ1pHVm1ZWFZzZEZaaGJIVmxJR2x1SUhCc1lXTmxJRzltSUdkbGRFRjBkSEpwWW5WMFpTaGNJblpoYkhWbFhDSXBYRzVwWmlBb0lDRnpkWEJ3YjNKMExtRjBkSEpwWW5WMFpYTWdmSHdnSVdGemMyVnlkQ2htZFc1amRHbHZiaWdnWld3Z0tTQjdYRzVjZEdWc0xtbHVibVZ5U0ZSTlRDQTlJRndpUEdsdWNIVjBMejVjSWp0Y2JseDBaV3d1Wm1seWMzUkRhR2xzWkM1elpYUkJkSFJ5YVdKMWRHVW9JRndpZG1Gc2RXVmNJaXdnWENKY0lpQXBPMXh1WEhSeVpYUjFjbTRnWld3dVptbHljM1JEYUdsc1pDNW5aWFJCZEhSeWFXSjFkR1VvSUZ3aWRtRnNkV1ZjSWlBcElEMDlQU0JjSWx3aU8xeHVmU2tnS1NCN1hHNWNkR0ZrWkVoaGJtUnNaU2dnWENKMllXeDFaVndpTENCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTd2dhWE5ZVFV3Z0tTQjdYRzVjZEZ4MGFXWWdLQ0FoYVhOWVRVd2dKaVlnWld4bGJTNXViMlJsVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQmNJbWx1Y0hWMFhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlM1a1pXWmhkV3gwVm1Gc2RXVTdYRzVjZEZ4MGZWeHVYSFI5S1R0Y2JuMWNibHh1THk4Z1UzVndjRzl5ZERvZ1NVVThPVnh1THk4Z1ZYTmxJR2RsZEVGMGRISnBZblYwWlU1dlpHVWdkRzhnWm1WMFkyZ2dZbTl2YkdWaGJuTWdkMmhsYmlCblpYUkJkSFJ5YVdKMWRHVWdiR2xsYzF4dWFXWWdLQ0FoWVhOelpYSjBLR1oxYm1OMGFXOXVLQ0JsYkNBcElIdGNibHgwY21WMGRYSnVJR1ZzTG1kbGRFRjBkSEpwWW5WMFpTaGNJbVJwYzJGaWJHVmtYQ0lwSUQwOUlHNTFiR3c3WEc1OUtTQXBJSHRjYmx4MFlXUmtTR0Z1Wkd4bEtDQmliMjlzWldGdWN5d2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHNWhiV1VzSUdseldFMU1JQ2tnZTF4dVhIUmNkSFpoY2lCMllXdzdYRzVjZEZ4MGFXWWdLQ0FoYVhOWVRVd2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlZzZ2JtRnRaU0JkSUQwOVBTQjBjblZsSUQ4Z2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncElEcGNibHgwWEhSY2RGeDBYSFFvZG1Gc0lEMGdaV3hsYlM1blpYUkJkSFJ5YVdKMWRHVk9iMlJsS0NCdVlXMWxJQ2twSUNZbUlIWmhiQzV6Y0dWamFXWnBaV1FnUDF4dVhIUmNkRngwWEhSY2RIWmhiQzUyWVd4MVpTQTZYRzVjZEZ4MFhIUmNkRzUxYkd3N1hHNWNkRngwZlZ4dVhIUjlLVHRjYm4xY2JseHVjbVYwZFhKdUlGTnBlbnBzWlR0Y2JseHVmU2tvSUhkcGJtUnZkeUFwTzF4dVhHNWNibHh1YWxGMVpYSjVMbVpwYm1RZ1BTQlRhWHA2YkdVN1hHNXFVWFZsY25rdVpYaHdjaUE5SUZOcGVucHNaUzV6Wld4bFkzUnZjbk03WEc1Y2JpOHZJRVJsY0hKbFkyRjBaV1JjYm1wUmRXVnllUzVsZUhCeVd5QmNJanBjSWlCZElEMGdhbEYxWlhKNUxtVjRjSEl1Y0hObGRXUnZjenRjYm1wUmRXVnllUzUxYm1seGRXVlRiM0owSUQwZ2FsRjFaWEo1TG5WdWFYRjFaU0E5SUZOcGVucHNaUzUxYm1seGRXVlRiM0owTzF4dWFsRjFaWEo1TG5SbGVIUWdQU0JUYVhwNmJHVXVaMlYwVkdWNGREdGNibXBSZFdWeWVTNXBjMWhOVEVSdll5QTlJRk5wZW5wc1pTNXBjMWhOVER0Y2JtcFJkV1Z5ZVM1amIyNTBZV2x1Y3lBOUlGTnBlbnBzWlM1amIyNTBZV2x1Y3p0Y2JtcFJkV1Z5ZVM1bGMyTmhjR1ZUWld4bFkzUnZjaUE5SUZOcGVucHNaUzVsYzJOaGNHVTdYRzVjYmx4dVhHNWNiblpoY2lCa2FYSWdQU0JtZFc1amRHbHZiaWdnWld4bGJTd2daR2x5TENCMWJuUnBiQ0FwSUh0Y2JseDBkbUZ5SUcxaGRHTm9aV1FnUFNCYlhTeGNibHgwWEhSMGNuVnVZMkYwWlNBOUlIVnVkR2xzSUNFOVBTQjFibVJsWm1sdVpXUTdYRzVjYmx4MGQyaHBiR1VnS0NBb0lHVnNaVzBnUFNCbGJHVnRXeUJrYVhJZ1hTQXBJQ1ltSUdWc1pXMHVibTlrWlZSNWNHVWdJVDA5SURrZ0tTQjdYRzVjZEZ4MGFXWWdLQ0JsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4SUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0IwY25WdVkyRjBaU0FtSmlCcVVYVmxjbmtvSUdWc1pXMGdLUzVwY3lnZ2RXNTBhV3dnS1NBcElIdGNibHgwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSdFlYUmphR1ZrTG5CMWMyZ29JR1ZzWlcwZ0tUdGNibHgwWEhSOVhHNWNkSDFjYmx4MGNtVjBkWEp1SUcxaGRHTm9aV1E3WEc1OU8xeHVYRzVjYm5aaGNpQnphV0pzYVc1bmN5QTlJR1oxYm1OMGFXOXVLQ0J1TENCbGJHVnRJQ2tnZTF4dVhIUjJZWElnYldGMFkyaGxaQ0E5SUZ0ZE8xeHVYRzVjZEdadmNpQW9JRHNnYmpzZ2JpQTlJRzR1Ym1WNGRGTnBZbXhwYm1jZ0tTQjdYRzVjZEZ4MGFXWWdLQ0J1TG01dlpHVlVlWEJsSUQwOVBTQXhJQ1ltSUc0Z0lUMDlJR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUnRZWFJqYUdWa0xuQjFjMmdvSUc0Z0tUdGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2JXRjBZMmhsWkR0Y2JuMDdYRzVjYmx4dWRtRnlJSEp1WldWa2MwTnZiblJsZUhRZ1BTQnFVWFZsY25rdVpYaHdjaTV0WVhSamFDNXVaV1ZrYzBOdmJuUmxlSFE3WEc1Y2JseHVYRzVtZFc1amRHbHZiaUJ1YjJSbFRtRnRaU2dnWld4bGJTd2dibUZ0WlNBcElIdGNibHh1SUNCeVpYUjFjbTRnWld4bGJTNXViMlJsVG1GdFpTQW1KaUJsYkdWdExtNXZaR1ZPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1ZlR0Y2JuWmhjaUJ5YzJsdVoyeGxWR0ZuSUQwZ0tDQXZYandvVzJFdGVsMWJYbHhjTDF4Y01ENDZYRng0TWpCY1hIUmNYSEpjWEc1Y1hHWmRLaWxiWEZ4NE1qQmNYSFJjWEhKY1hHNWNYR1pkS2x4Y0x6OCtLRDg2UEZ4Y0wxeGNNVDU4S1NRdmFTQXBPMXh1WEc1Y2JseHVMeThnU1cxd2JHVnRaVzUwSUhSb1pTQnBaR1Z1ZEdsallXd2dablZ1WTNScGIyNWhiR2wwZVNCbWIzSWdabWxzZEdWeUlHRnVaQ0J1YjNSY2JtWjFibU4wYVc5dUlIZHBibTV2ZHlnZ1pXeGxiV1Z1ZEhNc0lIRjFZV3hwWm1sbGNpd2dibTkwSUNrZ2UxeHVYSFJwWmlBb0lHbHpSblZ1WTNScGIyNG9JSEYxWVd4cFptbGxjaUFwSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJxVVhWbGNua3VaM0psY0NnZ1pXeGxiV1Z1ZEhNc0lHWjFibU4wYVc5dUtDQmxiR1Z0TENCcElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDRWhjWFZoYkdsbWFXVnlMbU5oYkd3b0lHVnNaVzBzSUdrc0lHVnNaVzBnS1NBaFBUMGdibTkwTzF4dVhIUmNkSDBnS1R0Y2JseDBmVnh1WEc1Y2RDOHZJRk5wYm1kc1pTQmxiR1Z0Wlc1MFhHNWNkR2xtSUNnZ2NYVmhiR2xtYVdWeUxtNXZaR1ZVZVhCbElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCcVVYVmxjbmt1WjNKbGNDZ2daV3hsYldWdWRITXNJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDZ2daV3hsYlNBOVBUMGdjWFZoYkdsbWFXVnlJQ2tnSVQwOUlHNXZkRHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMWNibHh1WEhRdkx5QkJjbkpoZVd4cGEyVWdiMllnWld4bGJXVnVkSE1nS0dwUmRXVnllU3dnWVhKbmRXMWxiblJ6TENCQmNuSmhlU2xjYmx4MGFXWWdLQ0IwZVhCbGIyWWdjWFZoYkdsbWFXVnlJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCcVVYVmxjbmt1WjNKbGNDZ2daV3hsYldWdWRITXNJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDZ2dhVzVrWlhoUFppNWpZV3hzS0NCeGRXRnNhV1pwWlhJc0lHVnNaVzBnS1NBK0lDMHhJQ2tnSVQwOUlHNXZkRHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMWNibHh1WEhRdkx5QkdhV3gwWlhKbFpDQmthWEpsWTNSc2VTQm1iM0lnWW05MGFDQnphVzF3YkdVZ1lXNWtJR052YlhCc1pYZ2djMlZzWldOMGIzSnpYRzVjZEhKbGRIVnliaUJxVVhWbGNua3VabWxzZEdWeUtDQnhkV0ZzYVdacFpYSXNJR1ZzWlcxbGJuUnpMQ0J1YjNRZ0tUdGNibjFjYmx4dWFsRjFaWEo1TG1acGJIUmxjaUE5SUdaMWJtTjBhVzl1S0NCbGVIQnlMQ0JsYkdWdGN5d2dibTkwSUNrZ2UxeHVYSFIyWVhJZ1pXeGxiU0E5SUdWc1pXMXpXeUF3SUYwN1hHNWNibHgwYVdZZ0tDQnViM1FnS1NCN1hHNWNkRngwWlhod2NpQTlJRndpT201dmRDaGNJaUFySUdWNGNISWdLeUJjSWlsY0lqdGNibHgwZlZ4dVhHNWNkR2xtSUNnZ1pXeGxiWE11YkdWdVozUm9JRDA5UFNBeElDWW1JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNW1hVzVrTG0xaGRHTm9aWE5UWld4bFkzUnZjaWdnWld4bGJTd2daWGh3Y2lBcElEOGdXeUJsYkdWdElGMGdPaUJiWFR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCcVVYVmxjbmt1Wm1sdVpDNXRZWFJqYUdWektDQmxlSEJ5TENCcVVYVmxjbmt1WjNKbGNDZ2daV3hsYlhNc0lHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4TzF4dVhIUjlJQ2tnS1R0Y2JuMDdYRzVjYm1wUmRXVnllUzVtYmk1bGVIUmxibVFvSUh0Y2JseDBabWx1WkRvZ1puVnVZM1JwYjI0b0lITmxiR1ZqZEc5eUlDa2dlMXh1WEhSY2RIWmhjaUJwTENCeVpYUXNYRzVjZEZ4MFhIUnNaVzRnUFNCMGFHbHpMbXhsYm1kMGFDeGNibHgwWEhSY2RITmxiR1lnUFNCMGFHbHpPMXh1WEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnYzJWc1pXTjBiM0lnSVQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lHcFJkV1Z5ZVNnZ2MyVnNaV04wYjNJZ0tTNW1hV3gwWlhJb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJtYjNJZ0tDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYWxGMVpYSjVMbU52Ym5SaGFXNXpLQ0J6Wld4bVd5QnBJRjBzSUhSb2FYTWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU0FwSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMElEMGdkR2hwY3k1d2RYTm9VM1JoWTJzb0lGdGRJQ2s3WEc1Y2JseDBYSFJtYjNJZ0tDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVMbVpwYm1Rb0lITmxiR1ZqZEc5eUxDQnpaV3htV3lCcElGMHNJSEpsZENBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJzWlc0Z1BpQXhJRDhnYWxGMVpYSjVMblZ1YVhGMVpWTnZjblFvSUhKbGRDQXBJRG9nY21WME8xeHVYSFI5TEZ4dVhIUm1hV3gwWlhJNklHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTV3ZFhOb1UzUmhZMnNvSUhkcGJtNXZkeWdnZEdocGN5d2djMlZzWldOMGIzSWdmSHdnVzEwc0lHWmhiSE5sSUNrZ0tUdGNibHgwZlN4Y2JseDBibTkwT2lCbWRXNWpkR2x2YmlnZ2MyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVjSFZ6YUZOMFlXTnJLQ0IzYVc1dWIzY29JSFJvYVhNc0lITmxiR1ZqZEc5eUlIeDhJRnRkTENCMGNuVmxJQ2tnS1R0Y2JseDBmU3hjYmx4MGFYTTZJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdJU0YzYVc1dWIzY29YRzVjZEZ4MFhIUjBhR2x6TEZ4dVhHNWNkRngwWEhRdkx5QkpaaUIwYUdseklHbHpJR0VnY0c5emFYUnBiMjVoYkM5eVpXeGhkR2wyWlNCelpXeGxZM1J2Y2l3Z1kyaGxZMnNnYldWdFltVnljMmhwY0NCcGJpQjBhR1VnY21WMGRYSnVaV1FnYzJWMFhHNWNkRngwWEhRdkx5QnpieUFrS0Z3aWNEcG1hWEp6ZEZ3aUtTNXBjeWhjSW5BNmJHRnpkRndpS1NCM2IyNG5kQ0J5WlhSMWNtNGdkSEoxWlNCbWIzSWdZU0JrYjJNZ2QybDBhQ0IwZDI4Z1hDSndYQ0l1WEc1Y2RGeDBYSFIwZVhCbGIyWWdjMlZzWldOMGIzSWdQVDA5SUZ3aWMzUnlhVzVuWENJZ0ppWWdjbTVsWldSelEyOXVkR1Y0ZEM1MFpYTjBLQ0J6Wld4bFkzUnZjaUFwSUQ5Y2JseDBYSFJjZEZ4MGFsRjFaWEo1S0NCelpXeGxZM1J2Y2lBcElEcGNibHgwWEhSY2RGeDBjMlZzWldOMGIzSWdmSHdnVzEwc1hHNWNkRngwWEhSbVlXeHpaVnh1WEhSY2RDa3ViR1Z1WjNSb08xeHVYSFI5WEc1OUlDazdYRzVjYmx4dUx5OGdTVzVwZEdsaGJHbDZaU0JoSUdwUmRXVnllU0J2WW1wbFkzUmNibHh1WEc0dkx5QkJJR05sYm5SeVlXd2djbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQnliMjkwSUdwUmRXVnllU2hrYjJOMWJXVnVkQ2xjYm5aaGNpQnliMjkwYWxGMVpYSjVMRnh1WEc1Y2RDOHZJRUVnYzJsdGNHeGxJSGRoZVNCMGJ5QmphR1ZqYXlCbWIzSWdTRlJOVENCemRISnBibWR6WEc1Y2RDOHZJRkJ5YVc5eWFYUnBlbVVnSTJsa0lHOTJaWElnUEhSaFp6NGdkRzhnWVhadmFXUWdXRk5USUhacFlTQnNiMk5oZEdsdmJpNW9ZWE5vSUNnak9UVXlNU2xjYmx4MEx5OGdVM1J5YVdOMElFaFVUVXdnY21WamIyZHVhWFJwYjI0Z0tDTXhNVEk1TURvZ2JYVnpkQ0J6ZEdGeWRDQjNhWFJvSUR3cFhHNWNkQzh2SUZOb2IzSjBZM1YwSUhOcGJYQnNaU0FqYVdRZ1kyRnpaU0JtYjNJZ2MzQmxaV1JjYmx4MGNuRjFhV05yUlhod2NpQTlJQzllS0Q4NlhGeHpLaWc4VzF4Y2QxeGNWMTByUGlsYlhqNWRLbndqS0Z0Y1hIY3RYU3NwS1NRdkxGeHVYRzVjZEdsdWFYUWdQU0JxVVhWbGNua3VabTR1YVc1cGRDQTlJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaXdnWTI5dWRHVjRkQ3dnY205dmRDQXBJSHRjYmx4MFhIUjJZWElnYldGMFkyZ3NJR1ZzWlcwN1hHNWNibHgwWEhRdkx5QklRVTVFVEVVNklDUW9YQ0pjSWlrc0lDUW9iblZzYkNrc0lDUW9kVzVrWldacGJtVmtLU3dnSkNobVlXeHpaU2xjYmx4MFhIUnBaaUFvSUNGelpXeGxZM1J2Y2lBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRTFsZEdodlpDQnBibWwwS0NrZ1lXTmpaWEIwY3lCaGJpQmhiSFJsY201aGRHVWdjbTl2ZEdwUmRXVnllVnh1WEhSY2RDOHZJSE52SUcxcFozSmhkR1VnWTJGdUlITjFjSEJ2Y25RZ2FsRjFaWEo1TG5OMVlpQW9aMmd0TWpFd01TbGNibHgwWEhSeWIyOTBJRDBnY205dmRDQjhmQ0J5YjI5MGFsRjFaWEo1TzF4dVhHNWNkRngwTHk4Z1NHRnVaR3hsSUVoVVRVd2djM1J5YVc1bmMxeHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0J6Wld4bFkzUnZjbHNnTUNCZElEMDlQU0JjSWp4Y0lpQW1KbHh1WEhSY2RGeDBYSFJ6Wld4bFkzUnZjbHNnYzJWc1pXTjBiM0l1YkdWdVozUm9JQzBnTVNCZElEMDlQU0JjSWo1Y0lpQW1KbHh1WEhSY2RGeDBYSFJ6Wld4bFkzUnZjaTVzWlc1bmRHZ2dQajBnTXlBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCQmMzTjFiV1VnZEdoaGRDQnpkSEpwYm1keklIUm9ZWFFnYzNSaGNuUWdZVzVrSUdWdVpDQjNhWFJvSUR3K0lHRnlaU0JJVkUxTUlHRnVaQ0J6YTJsd0lIUm9aU0J5WldkbGVDQmphR1ZqYTF4dVhIUmNkRngwWEhSdFlYUmphQ0E5SUZzZ2JuVnNiQ3dnYzJWc1pXTjBiM0lzSUc1MWJHd2dYVHRjYmx4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwYldGMFkyZ2dQU0J5Y1hWcFkydEZlSEJ5TG1WNFpXTW9JSE5sYkdWamRHOXlJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFMWhkR05vSUdoMGJXd2diM0lnYldGclpTQnpkWEpsSUc1dklHTnZiblJsZUhRZ2FYTWdjM0JsWTJsbWFXVmtJR1p2Y2lBamFXUmNibHgwWEhSY2RHbG1JQ2dnYldGMFkyZ2dKaVlnS0NCdFlYUmphRnNnTVNCZElIeDhJQ0ZqYjI1MFpYaDBJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnU0VGT1JFeEZPaUFrS0doMGJXd3BJQzArSUNRb1lYSnlZWGtwWEc1Y2RGeDBYSFJjZEdsbUlDZ2diV0YwWTJoYklERWdYU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmpiMjUwWlhoMElEMGdZMjl1ZEdWNGRDQnBibk4wWVc1alpXOW1JR3BSZFdWeWVTQS9JR052Ym5SbGVIUmJJREFnWFNBNklHTnZiblJsZUhRN1hHNWNibHgwWEhSY2RGeDBYSFF2THlCUGNIUnBiMjRnZEc4Z2NuVnVJSE5qY21sd2RITWdhWE1nZEhKMVpTQm1iM0lnWW1GamF5MWpiMjF3WVhSY2JseDBYSFJjZEZ4MFhIUXZMeUJKYm5SbGJuUnBiMjVoYkd4NUlHeGxkQ0IwYUdVZ1pYSnliM0lnWW1VZ2RHaHliM2R1SUdsbUlIQmhjbk5sU0ZSTlRDQnBjeUJ1YjNRZ2NISmxjMlZ1ZEZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1dFpYSm5aU2dnZEdocGN5d2dhbEYxWlhKNUxuQmhjbk5sU0ZSTlRDaGNibHgwWEhSY2RGeDBYSFJjZEcxaGRHTm9XeUF4SUYwc1hHNWNkRngwWEhSY2RGeDBYSFJqYjI1MFpYaDBJQ1ltSUdOdmJuUmxlSFF1Ym05a1pWUjVjR1VnUHlCamIyNTBaWGgwTG05M2JtVnlSRzlqZFcxbGJuUWdmSHdnWTI5dWRHVjRkQ0E2SUdSdlkzVnRaVzUwTEZ4dVhIUmNkRngwWEhSY2RGeDBkSEoxWlZ4dVhIUmNkRngwWEhSY2RDa2dLVHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRWhCVGtSTVJUb2dKQ2hvZEcxc0xDQndjbTl3Y3lsY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUhKemFXNW5iR1ZVWVdjdWRHVnpkQ2dnYldGMFkyaGJJREVnWFNBcElDWW1JR3BSZFdWeWVTNXBjMUJzWVdsdVQySnFaV04wS0NCamIyNTBaWGgwSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbWIzSWdLQ0J0WVhSamFDQnBiaUJqYjI1MFpYaDBJQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklGQnliM0JsY25ScFpYTWdiMllnWTI5dWRHVjRkQ0JoY21VZ1kyRnNiR1ZrSUdGeklHMWxkR2h2WkhNZ2FXWWdjRzl6YzJsaWJHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JwYzBaMWJtTjBhVzl1S0NCMGFHbHpXeUJ0WVhSamFDQmRJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGRHaHBjMXNnYldGMFkyZ2dYU2dnWTI5dWRHVjRkRnNnYldGMFkyZ2dYU0FwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklDNHVMbUZ1WkNCdmRHaGxjbmRwYzJVZ2MyVjBJR0Z6SUdGMGRISnBZblYwWlhOY2JseDBYSFJjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFIwYUdsekxtRjBkSElvSUcxaGRHTm9MQ0JqYjI1MFpYaDBXeUJ0WVhSamFDQmRJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4dVhIUmNkRngwWEhRdkx5QklRVTVFVEVVNklDUW9JMmxrS1Z4dVhIUmNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RHVnNaVzBnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2dnYldGMFkyaGJJRElnWFNBcE8xeHVYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmxiR1Z0SUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkpibXBsWTNRZ2RHaGxJR1ZzWlcxbGJuUWdaR2x5WldOMGJIa2dhVzUwYnlCMGFHVWdhbEYxWlhKNUlHOWlhbVZqZEZ4dVhIUmNkRngwWEhSY2RGeDBkR2hwYzFzZ01DQmRJRDBnWld4bGJUdGNibHgwWEhSY2RGeDBYSFJjZEhSb2FYTXViR1Z1WjNSb0lEMGdNVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdTRUZPUkV4Rk9pQWtLR1Y0Y0hJc0lDUW9MaTR1S1NsY2JseDBYSFJjZEgwZ1pXeHpaU0JwWmlBb0lDRmpiMjUwWlhoMElIeDhJR052Ym5SbGVIUXVhbkYxWlhKNUlDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdLQ0JqYjI1MFpYaDBJSHg4SUhKdmIzUWdLUzVtYVc1a0tDQnpaV3hsWTNSdmNpQXBPMXh1WEc1Y2RGeDBYSFF2THlCSVFVNUVURVU2SUNRb1pYaHdjaXdnWTI5dWRHVjRkQ2xjYmx4MFhIUmNkQzh2SUNoM2FHbGphQ0JwY3lCcWRYTjBJR1Z4ZFdsMllXeGxiblFnZEc4NklDUW9ZMjl1ZEdWNGRDa3VabWx1WkNobGVIQnlLVnh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11WTI5dWMzUnlkV04wYjNJb0lHTnZiblJsZUhRZ0tTNW1hVzVrS0NCelpXeGxZM1J2Y2lBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTRUZPUkV4Rk9pQWtLRVJQVFVWc1pXMWxiblFwWEc1Y2RGeDBmU0JsYkhObElHbG1JQ2dnYzJWc1pXTjBiM0l1Ym05a1pWUjVjR1VnS1NCN1hHNWNkRngwWEhSMGFHbHpXeUF3SUYwZ1BTQnpaV3hsWTNSdmNqdGNibHgwWEhSY2RIUm9hWE11YkdWdVozUm9JRDBnTVR0Y2JseDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYRzVjZEZ4MEx5OGdTRUZPUkV4Rk9pQWtLR1oxYm1OMGFXOXVLVnh1WEhSY2RDOHZJRk5vYjNKMFkzVjBJR1p2Y2lCa2IyTjFiV1Z1ZENCeVpXRmtlVnh1WEhSY2RIMGdaV3h6WlNCcFppQW9JR2x6Um5WdVkzUnBiMjRvSUhObGJHVmpkRzl5SUNrZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2NtOXZkQzV5WldGa2VTQWhQVDBnZFc1a1pXWnBibVZrSUQ5Y2JseDBYSFJjZEZ4MGNtOXZkQzV5WldGa2VTZ2djMlZzWldOMGIzSWdLU0E2WEc1Y2JseDBYSFJjZEZ4MEx5OGdSWGhsWTNWMFpTQnBiVzFsWkdsaGRHVnNlU0JwWmlCeVpXRmtlU0JwY3lCdWIzUWdjSEpsYzJWdWRGeHVYSFJjZEZ4MFhIUnpaV3hsWTNSdmNpZ2dhbEYxWlhKNUlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdwUmRXVnllUzV0WVd0bFFYSnlZWGtvSUhObGJHVmpkRzl5TENCMGFHbHpJQ2s3WEc1Y2RIMDdYRzVjYmk4dklFZHBkbVVnZEdobElHbHVhWFFnWm5WdVkzUnBiMjRnZEdobElHcFJkV1Z5ZVNCd2NtOTBiM1I1Y0dVZ1ptOXlJR3hoZEdWeUlHbHVjM1JoYm5ScFlYUnBiMjVjYm1sdWFYUXVjSEp2ZEc5MGVYQmxJRDBnYWxGMVpYSjVMbVp1TzF4dVhHNHZMeUJKYm1sMGFXRnNhWHBsSUdObGJuUnlZV3dnY21WbVpYSmxibU5sWEc1eWIyOTBhbEYxWlhKNUlEMGdhbEYxWlhKNUtDQmtiMk4xYldWdWRDQXBPMXh1WEc1Y2JuWmhjaUJ5Y0dGeVpXNTBjM0J5WlhZZ1BTQXZYaWcvT25CaGNtVnVkSE44Y0hKbGRpZy9PbFZ1ZEdsc2ZFRnNiQ2twTHl4Y2JseHVYSFF2THlCTlpYUm9iMlJ6SUdkMVlYSmhiblJsWldRZ2RHOGdjSEp2WkhWalpTQmhJSFZ1YVhGMVpTQnpaWFFnZDJobGJpQnpkR0Z5ZEdsdVp5Qm1jbTl0SUdFZ2RXNXBjWFZsSUhObGRGeHVYSFJuZFdGeVlXNTBaV1ZrVlc1cGNYVmxJRDBnZTF4dVhIUmNkR05vYVd4a2NtVnVPaUIwY25WbExGeHVYSFJjZEdOdmJuUmxiblJ6T2lCMGNuVmxMRnh1WEhSY2RHNWxlSFE2SUhSeWRXVXNYRzVjZEZ4MGNISmxkam9nZEhKMVpWeHVYSFI5TzF4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjZEdoaGN6b2dablZ1WTNScGIyNG9JSFJoY21kbGRDQXBJSHRjYmx4MFhIUjJZWElnZEdGeVoyVjBjeUE5SUdwUmRXVnllU2dnZEdGeVoyVjBMQ0IwYUdseklDa3NYRzVjZEZ4MFhIUnNJRDBnZEdGeVoyVjBjeTVzWlc1bmRHZzdYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVtYVd4MFpYSW9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwZG1GeUlHa2dQU0F3TzF4dVhIUmNkRngwWm05eUlDZ2dPeUJwSUR3Z2JEc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVqYjI1MFlXbHVjeWdnZEdocGN5d2dkR0Z5WjJWMGMxc2dhU0JkSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUlDazdYRzVjZEgwc1hHNWNibHgwWTJ4dmMyVnpkRG9nWm5WdVkzUnBiMjRvSUhObGJHVmpkRzl5Y3l3Z1kyOXVkR1Y0ZENBcElIdGNibHgwWEhSMllYSWdZM1Z5TEZ4dVhIUmNkRngwYVNBOUlEQXNYRzVjZEZ4MFhIUnNJRDBnZEdocGN5NXNaVzVuZEdnc1hHNWNkRngwWEhSdFlYUmphR1ZrSUQwZ1cxMHNYRzVjZEZ4MFhIUjBZWEpuWlhSeklEMGdkSGx3Wlc5bUlITmxiR1ZqZEc5eWN5QWhQVDBnWENKemRISnBibWRjSWlBbUppQnFVWFZsY25rb0lITmxiR1ZqZEc5eWN5QXBPMXh1WEc1Y2RGeDBMeThnVUc5emFYUnBiMjVoYkNCelpXeGxZM1J2Y25NZ2JtVjJaWElnYldGMFkyZ3NJSE5wYm1ObElIUm9aWEpsSjNNZ2JtOGdYM05sYkdWamRHbHZibDhnWTI5dWRHVjRkRnh1WEhSY2RHbG1JQ2dnSVhKdVpXVmtjME52Ym5SbGVIUXVkR1Z6ZENnZ2MyVnNaV04wYjNKeklDa2dLU0I3WEc1Y2RGeDBYSFJtYjNJZ0tDQTdJR2tnUENCc095QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RHWnZjaUFvSUdOMWNpQTlJSFJvYVhOYklHa2dYVHNnWTNWeUlDWW1JR04xY2lBaFBUMGdZMjl1ZEdWNGREc2dZM1Z5SUQwZ1kzVnlMbkJoY21WdWRFNXZaR1VnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFF2THlCQmJIZGhlWE1nYzJ0cGNDQmtiMk4xYldWdWRDQm1jbUZuYldWdWRITmNibHgwWEhSY2RGeDBYSFJwWmlBb0lHTjFjaTV1YjJSbFZIbHdaU0E4SURFeElDWW1JQ2dnZEdGeVoyVjBjeUEvWEc1Y2RGeDBYSFJjZEZ4MFhIUjBZWEpuWlhSekxtbHVaR1Y0S0NCamRYSWdLU0ErSUMweElEcGNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdSRzl1SjNRZ2NHRnpjeUJ1YjI0dFpXeGxiV1Z1ZEhNZ2RHOGdVMmw2ZW14bFhHNWNkRngwWEhSY2RGeDBYSFJqZFhJdWJtOWtaVlI1Y0dVZ1BUMDlJREVnSmlaY2JseDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbVpwYm1RdWJXRjBZMmhsYzFObGJHVmpkRzl5S0NCamRYSXNJSE5sYkdWamRHOXljeUFwSUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RHMWhkR05vWldRdWNIVnphQ2dnWTNWeUlDazdYRzVjZEZ4MFhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXdkWE5vVTNSaFkyc29JRzFoZEdOb1pXUXViR1Z1WjNSb0lENGdNU0EvSUdwUmRXVnllUzUxYm1seGRXVlRiM0owS0NCdFlYUmphR1ZrSUNrZ09pQnRZWFJqYUdWa0lDazdYRzVjZEgwc1hHNWNibHgwTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0J3YjNOcGRHbHZiaUJ2WmlCaGJpQmxiR1Z0Wlc1MElIZHBkR2hwYmlCMGFHVWdjMlYwWEc1Y2RHbHVaR1Y0T2lCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseHVYSFJjZEM4dklFNXZJR0Z5WjNWdFpXNTBMQ0J5WlhSMWNtNGdhVzVrWlhnZ2FXNGdjR0Z5Wlc1MFhHNWNkRngwYVdZZ0tDQWhaV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlBb0lIUm9hWE5iSURBZ1hTQW1KaUIwYUdseld5QXdJRjB1Y0dGeVpXNTBUbTlrWlNBcElEOGdkR2hwY3k1bWFYSnpkQ2dwTG5CeVpYWkJiR3dvS1M1c1pXNW5kR2dnT2lBdE1UdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkpibVJsZUNCcGJpQnpaV3hsWTNSdmNseHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlHVnNaVzBnUFQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdhVzVrWlhoUFppNWpZV3hzS0NCcVVYVmxjbmtvSUdWc1pXMGdLU3dnZEdocGMxc2dNQ0JkSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1RHOWpZWFJsSUhSb1pTQndiM05wZEdsdmJpQnZaaUIwYUdVZ1pHVnphWEpsWkNCbGJHVnRaVzUwWEc1Y2RGeDBjbVYwZFhKdUlHbHVaR1Y0VDJZdVkyRnNiQ2dnZEdocGN5eGNibHh1WEhSY2RGeDBMeThnU1dZZ2FYUWdjbVZqWldsMlpYTWdZU0JxVVhWbGNua2diMkpxWldOMExDQjBhR1VnWm1seWMzUWdaV3hsYldWdWRDQnBjeUIxYzJWa1hHNWNkRngwWEhSbGJHVnRMbXB4ZFdWeWVTQS9JR1ZzWlcxYklEQWdYU0E2SUdWc1pXMWNibHgwWEhRcE8xeHVYSFI5TEZ4dVhHNWNkR0ZrWkRvZ1puVnVZM1JwYjI0b0lITmxiR1ZqZEc5eUxDQmpiMjUwWlhoMElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbkIxYzJoVGRHRmpheWhjYmx4MFhIUmNkR3BSZFdWeWVTNTFibWx4ZFdWVGIzSjBLRnh1WEhSY2RGeDBYSFJxVVhWbGNua3ViV1Z5WjJVb0lIUm9hWE11WjJWMEtDa3NJR3BSZFdWeWVTZ2djMlZzWldOMGIzSXNJR052Ym5SbGVIUWdLU0FwWEc1Y2RGeDBYSFFwWEc1Y2RGeDBLVHRjYmx4MGZTeGNibHh1WEhSaFpHUkNZV05yT2lCbWRXNWpkR2x2YmlnZ2MyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVZV1JrS0NCelpXeGxZM1J2Y2lBOVBTQnVkV3hzSUQ5Y2JseDBYSFJjZEhSb2FYTXVjSEpsZGs5aWFtVmpkQ0E2SUhSb2FYTXVjSEpsZGs5aWFtVmpkQzVtYVd4MFpYSW9JSE5sYkdWamRHOXlJQ2xjYmx4MFhIUXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JtWjFibU4wYVc5dUlITnBZbXhwYm1jb0lHTjFjaXdnWkdseUlDa2dlMXh1WEhSM2FHbHNaU0FvSUNnZ1kzVnlJRDBnWTNWeVd5QmthWElnWFNBcElDWW1JR04xY2k1dWIyUmxWSGx3WlNBaFBUMGdNU0FwSUh0OVhHNWNkSEpsZEhWeWJpQmpkWEk3WEc1OVhHNWNibXBSZFdWeWVTNWxZV05vS0NCN1hHNWNkSEJoY21WdWREb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MGRtRnlJSEJoY21WdWRDQTlJR1ZzWlcwdWNHRnlaVzUwVG05a1pUdGNibHgwWEhSeVpYUjFjbTRnY0dGeVpXNTBJQ1ltSUhCaGNtVnVkQzV1YjJSbFZIbHdaU0FoUFQwZ01URWdQeUJ3WVhKbGJuUWdPaUJ1ZFd4c08xeHVYSFI5TEZ4dVhIUndZWEpsYm5Sek9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSeVpYUjFjbTRnWkdseUtDQmxiR1Z0TENCY0luQmhjbVZ1ZEU1dlpHVmNJaUFwTzF4dVhIUjlMRnh1WEhSd1lYSmxiblJ6Vlc1MGFXdzZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnBMQ0IxYm5ScGJDQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pHbHlLQ0JsYkdWdExDQmNJbkJoY21WdWRFNXZaR1ZjSWl3Z2RXNTBhV3dnS1R0Y2JseDBmU3hjYmx4MGJtVjRkRG9nWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBjbVYwZFhKdUlITnBZbXhwYm1jb0lHVnNaVzBzSUZ3aWJtVjRkRk5wWW14cGJtZGNJaUFwTzF4dVhIUjlMRnh1WEhSd2NtVjJPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUnlaWFIxY200Z2MybGliR2x1WnlnZ1pXeGxiU3dnWENKd2NtVjJhVzkxYzFOcFlteHBibWRjSWlBcE8xeHVYSFI5TEZ4dVhIUnVaWGgwUVd4c09pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSeVpYUjFjbTRnWkdseUtDQmxiR1Z0TENCY0ltNWxlSFJUYVdKc2FXNW5YQ0lnS1R0Y2JseDBmU3hjYmx4MGNISmxka0ZzYkRvZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwY21WMGRYSnVJR1JwY2lnZ1pXeGxiU3dnWENKd2NtVjJhVzkxYzFOcFlteHBibWRjSWlBcE8xeHVYSFI5TEZ4dVhIUnVaWGgwVlc1MGFXdzZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnBMQ0IxYm5ScGJDQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pHbHlLQ0JsYkdWdExDQmNJbTVsZUhSVGFXSnNhVzVuWENJc0lIVnVkR2xzSUNrN1hHNWNkSDBzWEc1Y2RIQnlaWFpWYm5ScGJEb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lHa3NJSFZ1ZEdsc0lDa2dlMXh1WEhSY2RISmxkSFZ5YmlCa2FYSW9JR1ZzWlcwc0lGd2ljSEpsZG1sdmRYTlRhV0pzYVc1blhDSXNJSFZ1ZEdsc0lDazdYRzVjZEgwc1hHNWNkSE5wWW14cGJtZHpPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUnlaWFIxY200Z2MybGliR2x1WjNNb0lDZ2daV3hsYlM1d1lYSmxiblJPYjJSbElIeDhJSHQ5SUNrdVptbHljM1JEYUdsc1pDd2daV3hsYlNBcE8xeHVYSFI5TEZ4dVhIUmphR2xzWkhKbGJqb2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhOcFlteHBibWR6S0NCbGJHVnRMbVpwY25OMFEyaHBiR1FnS1R0Y2JseDBmU3hjYmx4MFkyOXVkR1Z1ZEhNNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSUc1dlpHVk9ZVzFsS0NCbGJHVnRMQ0JjSW1sbWNtRnRaVndpSUNrZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWld4bGJTNWpiMjUwWlc1MFJHOWpkVzFsYm5RN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCVGRYQndiM0owT2lCSlJTQTVJQzBnTVRFZ2IyNXNlU3dnYVU5VElEY2diMjVzZVN3Z1FXNWtjbTlwWkNCQ2NtOTNjMlZ5SUR3OU5DNHpJRzl1YkhsY2JpQWdJQ0FnSUNBZ0x5OGdWSEpsWVhRZ2RHaGxJSFJsYlhCc1lYUmxJR1ZzWlcxbGJuUWdZWE1nWVNCeVpXZDFiR0Z5SUc5dVpTQnBiaUJpY205M2MyVnljeUIwYUdGMFhHNGdJQ0FnSUNBZ0lDOHZJR1J2YmlkMElITjFjSEJ2Y25RZ2FYUXVYRzRnSUNBZ0lDQWdJR2xtSUNnZ2JtOWtaVTVoYldVb0lHVnNaVzBzSUZ3aWRHVnRjR3hoZEdWY0lpQXBJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3hsYlNBOUlHVnNaVzB1WTI5dWRHVnVkQ0I4ZkNCbGJHVnRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdwUmRXVnllUzV0WlhKblpTZ2dXMTBzSUdWc1pXMHVZMmhwYkdST2IyUmxjeUFwTzF4dVhIUjlYRzU5TENCbWRXNWpkR2x2YmlnZ2JtRnRaU3dnWm00Z0tTQjdYRzVjZEdwUmRXVnllUzVtYmxzZ2JtRnRaU0JkSUQwZ1puVnVZM1JwYjI0b0lIVnVkR2xzTENCelpXeGxZM1J2Y2lBcElIdGNibHgwWEhSMllYSWdiV0YwWTJobFpDQTlJR3BSZFdWeWVTNXRZWEFvSUhSb2FYTXNJR1p1TENCMWJuUnBiQ0FwTzF4dVhHNWNkRngwYVdZZ0tDQnVZVzFsTG5Oc2FXTmxLQ0F0TlNBcElDRTlQU0JjSWxWdWRHbHNYQ0lnS1NCN1hHNWNkRngwWEhSelpXeGxZM1J2Y2lBOUlIVnVkR2xzTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ2MyVnNaV04wYjNJZ0ppWWdkSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MGJXRjBZMmhsWkNBOUlHcFJkV1Z5ZVM1bWFXeDBaWElvSUhObGJHVmpkRzl5TENCdFlYUmphR1ZrSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDQjBhR2x6TG14bGJtZDBhQ0ErSURFZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUZKbGJXOTJaU0JrZFhCc2FXTmhkR1Z6WEc1Y2RGeDBYSFJwWmlBb0lDRm5kV0Z5WVc1MFpXVmtWVzVwY1hWbFd5QnVZVzFsSUYwZ0tTQjdYRzVjZEZ4MFhIUmNkR3BSZFdWeWVTNTFibWx4ZFdWVGIzSjBLQ0J0WVhSamFHVmtJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGSmxkbVZ5YzJVZ2IzSmtaWElnWm05eUlIQmhjbVZ1ZEhNcUlHRnVaQ0J3Y21WMkxXUmxjbWwyWVhScGRtVnpYRzVjZEZ4MFhIUnBaaUFvSUhKd1lYSmxiblJ6Y0hKbGRpNTBaWE4wS0NCdVlXMWxJQ2tnS1NCN1hHNWNkRngwWEhSY2RHMWhkR05vWldRdWNtVjJaWEp6WlNncE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxuQjFjMmhUZEdGamF5Z2diV0YwWTJobFpDQXBPMXh1WEhSOU8xeHVmU0FwTzF4dWRtRnlJSEp1YjNSb2RHMXNkMmhwZEdVZ1BTQW9JQzliWGx4Y2VESXdYRngwWEZ4eVhGeHVYRnhtWFNzdlp5QXBPMXh1WEc1Y2JseHVMeThnUTI5dWRtVnlkQ0JUZEhKcGJtY3RabTl5YldGMGRHVmtJRzl3ZEdsdmJuTWdhVzUwYnlCUFltcGxZM1F0Wm05eWJXRjBkR1ZrSUc5dVpYTmNibVoxYm1OMGFXOXVJR055WldGMFpVOXdkR2x2Ym5Nb0lHOXdkR2x2Ym5NZ0tTQjdYRzVjZEhaaGNpQnZZbXBsWTNRZ1BTQjdmVHRjYmx4MGFsRjFaWEo1TG1WaFkyZ29JRzl3ZEdsdmJuTXViV0YwWTJnb0lISnViM1JvZEcxc2QyaHBkR1VnS1NCOGZDQmJYU3dnWm5WdVkzUnBiMjRvSUY4c0lHWnNZV2NnS1NCN1hHNWNkRngwYjJKcVpXTjBXeUJtYkdGbklGMGdQU0IwY25WbE8xeHVYSFI5SUNrN1hHNWNkSEpsZEhWeWJpQnZZbXBsWTNRN1hHNTlYRzVjYmk4cVhHNGdLaUJEY21WaGRHVWdZU0JqWVd4c1ltRmpheUJzYVhOMElIVnphVzVuSUhSb1pTQm1iMnhzYjNkcGJtY2djR0Z5WVcxbGRHVnljenBjYmlBcVhHNGdLbHgwYjNCMGFXOXVjem9nWVc0Z2IzQjBhVzl1WVd3Z2JHbHpkQ0J2WmlCemNHRmpaUzF6WlhCaGNtRjBaV1FnYjNCMGFXOXVjeUIwYUdGMElIZHBiR3dnWTJoaGJtZGxJR2h2ZDF4dUlDcGNkRngwWEhSMGFHVWdZMkZzYkdKaFkyc2diR2x6ZENCaVpXaGhkbVZ6SUc5eUlHRWdiVzl5WlNCMGNtRmthWFJwYjI1aGJDQnZjSFJwYjI0Z2IySnFaV04wWEc0Z0tseHVJQ29nUW5rZ1pHVm1ZWFZzZENCaElHTmhiR3hpWVdOcklHeHBjM1FnZDJsc2JDQmhZM1FnYkdsclpTQmhiaUJsZG1WdWRDQmpZV3hzWW1GamF5QnNhWE4wSUdGdVpDQmpZVzRnWW1WY2JpQXFJRndpWm1seVpXUmNJaUJ0ZFd4MGFYQnNaU0IwYVcxbGN5NWNiaUFxWEc0Z0tpQlFiM056YVdKc1pTQnZjSFJwYjI1ek9seHVJQ3BjYmlBcVhIUnZibU5sT2x4MFhIUmNkSGRwYkd3Z1pXNXpkWEpsSUhSb1pTQmpZV3hzWW1GamF5QnNhWE4wSUdOaGJpQnZibXg1SUdKbElHWnBjbVZrSUc5dVkyVWdLR3hwYTJVZ1lTQkVaV1psY25KbFpDbGNiaUFxWEc0Z0tseDBiV1Z0YjNKNU9seDBYSFJjZEhkcGJHd2dhMlZsY0NCMGNtRmpheUJ2WmlCd2NtVjJhVzkxY3lCMllXeDFaWE1nWVc1a0lIZHBiR3dnWTJGc2JDQmhibmtnWTJGc2JHSmhZMnNnWVdSa1pXUmNiaUFxWEhSY2RGeDBYSFJjZEdGbWRHVnlJSFJvWlNCc2FYTjBJR2hoY3lCaVpXVnVJR1pwY21Wa0lISnBaMmgwSUdGM1lYa2dkMmwwYUNCMGFHVWdiR0YwWlhOMElGd2liV1Z0YjNKcGVtVmtYQ0pjYmlBcVhIUmNkRngwWEhSY2RIWmhiSFZsY3lBb2JHbHJaU0JoSUVSbFptVnljbVZrS1Z4dUlDcGNiaUFxWEhSMWJtbHhkV1U2WEhSY2RGeDBkMmxzYkNCbGJuTjFjbVVnWVNCallXeHNZbUZqYXlCallXNGdiMjVzZVNCaVpTQmhaR1JsWkNCdmJtTmxJQ2h1YnlCa2RYQnNhV05oZEdVZ2FXNGdkR2hsSUd4cGMzUXBYRzRnS2x4dUlDcGNkSE4wYjNCUGJrWmhiSE5sT2x4MGFXNTBaWEp5ZFhCMElHTmhiR3hwYm1keklIZG9aVzRnWVNCallXeHNZbUZqYXlCeVpYUjFjbTV6SUdaaGJITmxYRzRnS2x4dUlDb3ZYRzVxVVhWbGNua3VRMkZzYkdKaFkydHpJRDBnWm5WdVkzUnBiMjRvSUc5d2RHbHZibk1nS1NCN1hHNWNibHgwTHk4Z1EyOXVkbVZ5ZENCdmNIUnBiMjV6SUdaeWIyMGdVM1J5YVc1bkxXWnZjbTFoZEhSbFpDQjBieUJQWW1wbFkzUXRabTl5YldGMGRHVmtJR2xtSUc1bFpXUmxaRnh1WEhRdkx5QW9kMlVnWTJobFkyc2dhVzRnWTJGamFHVWdabWx5YzNRcFhHNWNkRzl3ZEdsdmJuTWdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnWENKemRISnBibWRjSWlBL1hHNWNkRngwWTNKbFlYUmxUM0IwYVc5dWN5Z2diM0IwYVc5dWN5QXBJRHBjYmx4MFhIUnFVWFZsY25rdVpYaDBaVzVrS0NCN2ZTd2diM0IwYVc5dWN5QXBPMXh1WEc1Y2RIWmhjaUF2THlCR2JHRm5JSFJ2SUd0dWIzY2dhV1lnYkdsemRDQnBjeUJqZFhKeVpXNTBiSGtnWm1seWFXNW5YRzVjZEZ4MFptbHlhVzVuTEZ4dVhHNWNkRngwTHk4Z1RHRnpkQ0JtYVhKbElIWmhiSFZsSUdadmNpQnViMjR0Wm05eVoyVjBkR0ZpYkdVZ2JHbHpkSE5jYmx4MFhIUnRaVzF2Y25rc1hHNWNibHgwWEhRdkx5QkdiR0ZuSUhSdklHdHViM2NnYVdZZ2JHbHpkQ0IzWVhNZ1lXeHlaV0ZrZVNCbWFYSmxaRnh1WEhSY2RHWnBjbVZrTEZ4dVhHNWNkRngwTHk4Z1JteGhaeUIwYnlCd2NtVjJaVzUwSUdacGNtbHVaMXh1WEhSY2RHeHZZMnRsWkN4Y2JseHVYSFJjZEM4dklFRmpkSFZoYkNCallXeHNZbUZqYXlCc2FYTjBYRzVjZEZ4MGJHbHpkQ0E5SUZ0ZExGeHVYRzVjZEZ4MEx5OGdVWFZsZFdVZ2IyWWdaWGhsWTNWMGFXOXVJR1JoZEdFZ1ptOXlJSEpsY0dWaGRHRmliR1VnYkdsemRITmNibHgwWEhSeGRXVjFaU0E5SUZ0ZExGeHVYRzVjZEZ4MEx5OGdTVzVrWlhnZ2IyWWdZM1Z5Y21WdWRHeDVJR1pwY21sdVp5QmpZV3hzWW1GamF5QW9iVzlrYVdacFpXUWdZbmtnWVdSa0wzSmxiVzkyWlNCaGN5QnVaV1ZrWldRcFhHNWNkRngwWm1seWFXNW5TVzVrWlhnZ1BTQXRNU3hjYmx4dVhIUmNkQzh2SUVacGNtVWdZMkZzYkdKaFkydHpYRzVjZEZ4MFptbHlaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJGYm1admNtTmxJSE5wYm1kc1pTMW1hWEpwYm1kY2JseDBYSFJjZEd4dlkydGxaQ0E5SUd4dlkydGxaQ0I4ZkNCdmNIUnBiMjV6TG05dVkyVTdYRzVjYmx4MFhIUmNkQzh2SUVWNFpXTjFkR1VnWTJGc2JHSmhZMnR6SUdadmNpQmhiR3dnY0dWdVpHbHVaeUJsZUdWamRYUnBiMjV6TEZ4dVhIUmNkRngwTHk4Z2NtVnpjR1ZqZEdsdVp5Qm1hWEpwYm1kSmJtUmxlQ0J2ZG1WeWNtbGtaWE1nWVc1a0lISjFiblJwYldVZ1kyaGhibWRsYzF4dVhIUmNkRngwWm1seVpXUWdQU0JtYVhKcGJtY2dQU0IwY25WbE8xeHVYSFJjZEZ4MFptOXlJQ2dnT3lCeGRXVjFaUzVzWlc1bmRHZzdJR1pwY21sdVowbHVaR1Y0SUQwZ0xURWdLU0I3WEc1Y2RGeDBYSFJjZEcxbGJXOXllU0E5SUhGMVpYVmxMbk5vYVdaMEtDazdYRzVjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLeXRtYVhKcGJtZEpibVJsZUNBOElHeHBjM1F1YkdWdVozUm9JQ2tnZTF4dVhHNWNkRngwWEhSY2RGeDBMeThnVW5WdUlHTmhiR3hpWVdOcklHRnVaQ0JqYUdWamF5Qm1iM0lnWldGeWJIa2dkR1Z5YldsdVlYUnBiMjVjYmx4MFhIUmNkRngwWEhScFppQW9JR3hwYzNSYklHWnBjbWx1WjBsdVpHVjRJRjB1WVhCd2JIa29JRzFsYlc5eWVWc2dNQ0JkTENCdFpXMXZjbmxiSURFZ1hTQXBJRDA5UFNCbVlXeHpaU0FtSmx4dVhIUmNkRngwWEhSY2RGeDBiM0IwYVc5dWN5NXpkRzl3VDI1R1lXeHpaU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1NuVnRjQ0IwYnlCbGJtUWdZVzVrSUdadmNtZGxkQ0IwYUdVZ1pHRjBZU0J6YnlBdVlXUmtJR1J2WlhOdUozUWdjbVV0Wm1seVpWeHVYSFJjZEZ4MFhIUmNkRngwWm1seWFXNW5TVzVrWlhnZ1BTQnNhWE4wTG14bGJtZDBhRHRjYmx4MFhIUmNkRngwWEhSY2RHMWxiVzl5ZVNBOUlHWmhiSE5sTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCR2IzSm5aWFFnZEdobElHUmhkR0VnYVdZZ2QyVW5jbVVnWkc5dVpTQjNhWFJvSUdsMFhHNWNkRngwWEhScFppQW9JQ0Z2Y0hScGIyNXpMbTFsYlc5eWVTQXBJSHRjYmx4MFhIUmNkRngwYldWdGIzSjVJRDBnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR1pwY21sdVp5QTlJR1poYkhObE8xeHVYRzVjZEZ4MFhIUXZMeUJEYkdWaGJpQjFjQ0JwWmlCM1pTZHlaU0JrYjI1bElHWnBjbWx1WnlCbWIzSWdaMjl2WkZ4dVhIUmNkRngwYVdZZ0tDQnNiMk5yWldRZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1MyVmxjQ0JoYmlCbGJYQjBlU0JzYVhOMElHbG1JSGRsSUdoaGRtVWdaR0YwWVNCbWIzSWdablYwZFhKbElHRmtaQ0JqWVd4c2MxeHVYSFJjZEZ4MFhIUnBaaUFvSUcxbGJXOXllU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnNhWE4wSUQwZ1cxMDdYRzVjYmx4MFhIUmNkRngwTHk4Z1QzUm9aWEozYVhObExDQjBhR2x6SUc5aWFtVmpkQ0JwY3lCemNHVnVkRnh1WEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEd4cGMzUWdQU0JjSWx3aU8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJRUZqZEhWaGJDQkRZV3hzWW1GamEzTWdiMkpxWldOMFhHNWNkRngwYzJWc1ppQTlJSHRjYmx4dVhIUmNkRngwTHk4Z1FXUmtJR0VnWTJGc2JHSmhZMnNnYjNJZ1lTQmpiMnhzWldOMGFXOXVJRzltSUdOaGJHeGlZV05yY3lCMGJ5QjBhR1VnYkdsemRGeHVYSFJjZEZ4MFlXUmtPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0JzYVhOMElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdTV1lnZDJVZ2FHRjJaU0J0WlcxdmNua2dabkp2YlNCaElIQmhjM1FnY25WdUxDQjNaU0J6YUc5MWJHUWdabWx5WlNCaFpuUmxjaUJoWkdScGJtZGNibHgwWEhSY2RGeDBYSFJwWmlBb0lHMWxiVzl5ZVNBbUppQWhabWx5YVc1bklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFptbHlhVzVuU1c1a1pYZ2dQU0JzYVhOMExteGxibWQwYUNBdElERTdYRzVjZEZ4MFhIUmNkRngwWEhSeGRXVjFaUzV3ZFhOb0tDQnRaVzF2Y25rZ0tUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUW9JR1oxYm1OMGFXOXVJR0ZrWkNnZ1lYSm5jeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNWxZV05vS0NCaGNtZHpMQ0JtZFc1amRHbHZiaWdnWHl3Z1lYSm5JQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJwWmlBb0lHbHpSblZ1WTNScGIyNG9JR0Z5WnlBcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnZ0lXOXdkR2x2Ym5NdWRXNXBjWFZsSUh4OElDRnpaV3htTG1oaGN5Z2dZWEpuSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJzYVhOMExuQjFjMmdvSUdGeVp5QXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RGeDBmU0JsYkhObElHbG1JQ2dnWVhKbklDWW1JR0Z5Wnk1c1pXNW5kR2dnSmlZZ2RHOVVlWEJsS0NCaGNtY2dLU0FoUFQwZ1hDSnpkSEpwYm1kY0lpQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklFbHVjM0JsWTNRZ2NtVmpkWEp6YVhabGJIbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmhaR1FvSUdGeVp5QXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSOUlDazdYRzVjZEZ4MFhIUmNkRngwZlNBcEtDQmhjbWQxYldWdWRITWdLVHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYldWdGIzSjVJQ1ltSUNGbWFYSnBibWNnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJtYVhKbEtDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RGeDBmU3hjYmx4dVhIUmNkRngwTHk4Z1VtVnRiM1psSUdFZ1kyRnNiR0poWTJzZ1puSnZiU0IwYUdVZ2JHbHpkRnh1WEhSY2RGeDBjbVZ0YjNabE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVMbVZoWTJnb0lHRnlaM1Z0Wlc1MGN5d2dablZ1WTNScGIyNG9JRjhzSUdGeVp5QXBJSHRjYmx4MFhIUmNkRngwWEhSMllYSWdhVzVrWlhnN1hHNWNkRngwWEhSY2RGeDBkMmhwYkdVZ0tDQW9JR2x1WkdWNElEMGdhbEYxWlhKNUxtbHVRWEp5WVhrb0lHRnlaeXdnYkdsemRDd2dhVzVrWlhnZ0tTQXBJRDRnTFRFZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSc2FYTjBMbk53YkdsalpTZ2dhVzVrWlhnc0lERWdLVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnU0dGdVpHeGxJR1pwY21sdVp5QnBibVJsZUdWelhHNWNkRngwWEhSY2RGeDBYSFJwWmlBb0lHbHVaR1Y0SUR3OUlHWnBjbWx1WjBsdVpHVjRJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJtYVhKcGJtZEpibVJsZUMwdE8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmU0FwTzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RIMHNYRzVjYmx4MFhIUmNkQzh2SUVOb1pXTnJJR2xtSUdFZ1oybDJaVzRnWTJGc2JHSmhZMnNnYVhNZ2FXNGdkR2hsSUd4cGMzUXVYRzVjZEZ4MFhIUXZMeUJKWmlCdWJ5QmhjbWQxYldWdWRDQnBjeUJuYVhabGJpd2djbVYwZFhKdUlIZG9aWFJvWlhJZ2IzSWdibTkwSUd4cGMzUWdhR0Z6SUdOaGJHeGlZV05yY3lCaGRIUmhZMmhsWkM1Y2JseDBYSFJjZEdoaGN6b2dablZ1WTNScGIyNG9JR1p1SUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1ptNGdQMXh1WEhSY2RGeDBYSFJjZEdwUmRXVnllUzVwYmtGeWNtRjVLQ0JtYml3Z2JHbHpkQ0FwSUQ0Z0xURWdPbHh1WEhSY2RGeDBYSFJjZEd4cGMzUXViR1Z1WjNSb0lENGdNRHRjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEM4dklGSmxiVzkyWlNCaGJHd2dZMkZzYkdKaFkydHpJR1p5YjIwZ2RHaGxJR3hwYzNSY2JseDBYSFJjZEdWdGNIUjVPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0JzYVhOMElDa2dlMXh1WEhSY2RGeDBYSFJjZEd4cGMzUWdQU0JiWFR0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEM4dklFUnBjMkZpYkdVZ0xtWnBjbVVnWVc1a0lDNWhaR1JjYmx4MFhIUmNkQzh2SUVGaWIzSjBJR0Z1ZVNCamRYSnlaVzUwTDNCbGJtUnBibWNnWlhobFkzVjBhVzl1YzF4dVhIUmNkRngwTHk4Z1EyeGxZWElnWVd4c0lHTmhiR3hpWVdOcmN5QmhibVFnZG1Gc2RXVnpYRzVjZEZ4MFhIUmthWE5oWW14bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwYkc5amEyVmtJRDBnY1hWbGRXVWdQU0JiWFR0Y2JseDBYSFJjZEZ4MGJHbHpkQ0E5SUcxbGJXOXllU0E5SUZ3aVhDSTdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEdScGMyRmliR1ZrT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDRnNhWE4wTzF4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MEx5OGdSR2x6WVdKc1pTQXVabWx5WlZ4dVhIUmNkRngwTHk4Z1FXeHpieUJrYVhOaFlteGxJQzVoWkdRZ2RXNXNaWE56SUhkbElHaGhkbVVnYldWdGIzSjVJQ2h6YVc1alpTQnBkQ0IzYjNWc1pDQm9ZWFpsSUc1dklHVm1abVZqZENsY2JseDBYSFJjZEM4dklFRmliM0owSUdGdWVTQndaVzVrYVc1bklHVjRaV04xZEdsdmJuTmNibHgwWEhSY2RHeHZZMnM2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnNiMk5yWldRZ1BTQnhkV1YxWlNBOUlGdGRPMXh1WEhSY2RGeDBYSFJwWmlBb0lDRnRaVzF2Y25rZ0ppWWdJV1pwY21sdVp5QXBJSHRjYmx4MFhIUmNkRngwWEhSc2FYTjBJRDBnYldWdGIzSjVJRDBnWENKY0lqdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSc2IyTnJaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z0lTRnNiMk5yWldRN1hHNWNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUXZMeUJEWVd4c0lHRnNiQ0JqWVd4c1ltRmphM01nZDJsMGFDQjBhR1VnWjJsMlpXNGdZMjl1ZEdWNGRDQmhibVFnWVhKbmRXMWxiblJ6WEc1Y2RGeDBYSFJtYVhKbFYybDBhRG9nWm5WdVkzUnBiMjRvSUdOdmJuUmxlSFFzSUdGeVozTWdLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJV3h2WTJ0bFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSaGNtZHpJRDBnWVhKbmN5QjhmQ0JiWFR0Y2JseDBYSFJjZEZ4MFhIUmhjbWR6SUQwZ1d5QmpiMjUwWlhoMExDQmhjbWR6TG5Oc2FXTmxJRDhnWVhKbmN5NXpiR2xqWlNncElEb2dZWEpuY3lCZE8xeHVYSFJjZEZ4MFhIUmNkSEYxWlhWbExuQjFjMmdvSUdGeVozTWdLVHRjYmx4MFhIUmNkRngwWEhScFppQW9JQ0ZtYVhKcGJtY2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUm1hWEpsS0NrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBMeThnUTJGc2JDQmhiR3dnZEdobElHTmhiR3hpWVdOcmN5QjNhWFJvSUhSb1pTQm5hWFpsYmlCaGNtZDFiV1Z1ZEhOY2JseDBYSFJjZEdacGNtVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSelpXeG1MbVpwY21WWGFYUm9LQ0IwYUdsekxDQmhjbWQxYldWdWRITWdLVHRjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUXZMeUJVYnlCcmJtOTNJR2xtSUhSb1pTQmpZV3hzWW1GamEzTWdhR0YyWlNCaGJISmxZV1I1SUdKbFpXNGdZMkZzYkdWa0lHRjBJR3hsWVhOMElHOXVZMlZjYmx4MFhIUmNkR1pwY21Wa09pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJQ0VoWm1seVpXUTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZUdGNibHh1WEhSeVpYUjFjbTRnYzJWc1pqdGNibjA3WEc1Y2JseHVablZ1WTNScGIyNGdTV1JsYm5ScGRIa29JSFlnS1NCN1hHNWNkSEpsZEhWeWJpQjJPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1ZHaHliM2RsY2lnZ1pYZ2dLU0I3WEc1Y2RIUm9jbTkzSUdWNE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFpHOXdkRlpoYkhWbEtDQjJZV3gxWlN3Z2NtVnpiMngyWlN3Z2NtVnFaV04wTENCdWIxWmhiSFZsSUNrZ2UxeHVYSFIyWVhJZ2JXVjBhRzlrTzF4dVhHNWNkSFJ5ZVNCN1hHNWNibHgwWEhRdkx5QkRhR1ZqYXlCbWIzSWdjSEp2YldselpTQmhjM0JsWTNRZ1ptbHljM1FnZEc4Z2NISnBkbWxzWldkbElITjVibU5vY205dWIzVnpJR0psYUdGMmFXOXlYRzVjZEZ4MGFXWWdLQ0IyWVd4MVpTQW1KaUJwYzBaMWJtTjBhVzl1S0NBb0lHMWxkR2h2WkNBOUlIWmhiSFZsTG5CeWIyMXBjMlVnS1NBcElDa2dlMXh1WEhSY2RGeDBiV1YwYUc5a0xtTmhiR3dvSUhaaGJIVmxJQ2t1Wkc5dVpTZ2djbVZ6YjJ4MlpTQXBMbVpoYVd3b0lISmxhbVZqZENBcE8xeHVYRzVjZEZ4MEx5OGdUM1JvWlhJZ2RHaGxibUZpYkdWelhHNWNkRngwZlNCbGJITmxJR2xtSUNnZ2RtRnNkV1VnSmlZZ2FYTkdkVzVqZEdsdmJpZ2dLQ0J0WlhSb2IyUWdQU0IyWVd4MVpTNTBhR1Z1SUNrZ0tTQXBJSHRjYmx4MFhIUmNkRzFsZEdodlpDNWpZV3hzS0NCMllXeDFaU3dnY21WemIyeDJaU3dnY21WcVpXTjBJQ2s3WEc1Y2JseDBYSFF2THlCUGRHaGxjaUJ1YjI0dGRHaGxibUZpYkdWelhHNWNkRngwZlNCbGJITmxJSHRjYmx4dVhIUmNkRngwTHk4Z1EyOXVkSEp2YkNCZ2NtVnpiMngyWldBZ1lYSm5kVzFsYm5SeklHSjVJR3hsZEhScGJtY2dRWEp5WVhramMyeHBZMlVnWTJGemRDQmliMjlzWldGdUlHQnViMVpoYkhWbFlDQjBieUJwYm5SbFoyVnlPbHh1WEhSY2RGeDBMeThnS2lCbVlXeHpaVG9nV3lCMllXeDFaU0JkTG5Oc2FXTmxLQ0F3SUNrZ1BUNGdjbVZ6YjJ4MlpTZ2dkbUZzZFdVZ0tWeHVYSFJjZEZ4MEx5OGdLaUIwY25WbE9pQmJJSFpoYkhWbElGMHVjMnhwWTJVb0lERWdLU0E5UGlCeVpYTnZiSFpsS0NsY2JseDBYSFJjZEhKbGMyOXNkbVV1WVhCd2JIa29JSFZ1WkdWbWFXNWxaQ3dnV3lCMllXeDFaU0JkTG5Oc2FXTmxLQ0J1YjFaaGJIVmxJQ2tnS1R0Y2JseDBYSFI5WEc1Y2JseDBMeThnUm05eUlGQnliMjFwYzJWekwwRXJMQ0JqYjI1MlpYSjBJR1Y0WTJWd2RHbHZibk1nYVc1MGJ5QnlaV3BsWTNScGIyNXpYRzVjZEM4dklGTnBibU5sSUdwUmRXVnllUzUzYUdWdUlHUnZaWE51SjNRZ2RXNTNjbUZ3SUhSb1pXNWhZbXhsY3l3Z2QyVWdZMkZ1SUhOcmFYQWdkR2hsSUdWNGRISmhJR05vWldOcmN5QmhjSEJsWVhKcGJtY2dhVzVjYmx4MEx5OGdSR1ZtWlhKeVpXUWpkR2hsYmlCMGJ5QmpiMjVrYVhScGIyNWhiR3g1SUhOMWNIQnlaWE56SUhKbGFtVmpkR2x2Ymk1Y2JseDBmU0JqWVhSamFDQW9JSFpoYkhWbElDa2dlMXh1WEc1Y2RGeDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0EwTGpBZ2IyNXNlVnh1WEhSY2RDOHZJRk4wY21samRDQnRiMlJsSUdaMWJtTjBhVzl1Y3lCcGJuWnZhMlZrSUhkcGRHaHZkWFFnTG1OaGJHd3ZMbUZ3Y0d4NUlHZGxkQ0JuYkc5aVlXd3RiMkpxWldOMElHTnZiblJsZUhSY2JseDBYSFJ5WldwbFkzUXVZWEJ3Ykhrb0lIVnVaR1ZtYVc1bFpDd2dXeUIyWVd4MVpTQmRJQ2s3WEc1Y2RIMWNibjFjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhHNWNkRVJsWm1WeWNtVmtPaUJtZFc1amRHbHZiaWdnWm5WdVl5QXBJSHRjYmx4MFhIUjJZWElnZEhWd2JHVnpJRDBnVzF4dVhHNWNkRngwWEhSY2RDOHZJR0ZqZEdsdmJpd2dZV1JrSUd4cGMzUmxibVZ5TENCallXeHNZbUZqYTNNc1hHNWNkRngwWEhSY2RDOHZJQzR1TGlBdWRHaGxiaUJvWVc1a2JHVnljeXdnWVhKbmRXMWxiblFnYVc1a1pYZ3NJRnRtYVc1aGJDQnpkR0YwWlYxY2JseDBYSFJjZEZ4MFd5QmNJbTV2ZEdsbWVWd2lMQ0JjSW5CeWIyZHlaWE56WENJc0lHcFJkV1Z5ZVM1RFlXeHNZbUZqYTNNb0lGd2liV1Z0YjNKNVhDSWdLU3hjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1UTJGc2JHSmhZMnR6S0NCY0ltMWxiVzl5ZVZ3aUlDa3NJRElnWFN4Y2JseDBYSFJjZEZ4MFd5QmNJbkpsYzI5c2RtVmNJaXdnWENKa2IyNWxYQ0lzSUdwUmRXVnllUzVEWVd4c1ltRmphM01vSUZ3aWIyNWpaU0J0WlcxdmNubGNJaUFwTEZ4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1RFlXeHNZbUZqYTNNb0lGd2liMjVqWlNCdFpXMXZjbmxjSWlBcExDQXdMQ0JjSW5KbGMyOXNkbVZrWENJZ1hTeGNibHgwWEhSY2RGeDBXeUJjSW5KbGFtVmpkRndpTENCY0ltWmhhV3hjSWl3Z2FsRjFaWEo1TGtOaGJHeGlZV05yY3lnZ1hDSnZibU5sSUcxbGJXOXllVndpSUNrc1hHNWNkRngwWEhSY2RGeDBhbEYxWlhKNUxrTmhiR3hpWVdOcmN5Z2dYQ0p2Ym1ObElHMWxiVzl5ZVZ3aUlDa3NJREVzSUZ3aWNtVnFaV04wWldSY0lpQmRYRzVjZEZ4MFhIUmRMRnh1WEhSY2RGeDBjM1JoZEdVZ1BTQmNJbkJsYm1ScGJtZGNJaXhjYmx4MFhIUmNkSEJ5YjIxcGMyVWdQU0I3WEc1Y2RGeDBYSFJjZEhOMFlYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2MzUmhkR1U3WEc1Y2RGeDBYSFJjZEgwc1hHNWNkRngwWEhSY2RHRnNkMkY1Y3pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkRngwWkdWbVpYSnlaV1F1Wkc5dVpTZ2dZWEpuZFcxbGJuUnpJQ2t1Wm1GcGJDZ2dZWEpuZFcxbGJuUnpJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEZ3aVkyRjBZMmhjSWpvZ1puVnVZM1JwYjI0b0lHWnVJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCd2NtOXRhWE5sTG5Sb1pXNG9JRzUxYkd3c0lHWnVJQ2s3WEc1Y2RGeDBYSFJjZEgwc1hHNWNibHgwWEhSY2RGeDBMeThnUzJWbGNDQndhWEJsSUdadmNpQmlZV05yTFdOdmJYQmhkRnh1WEhSY2RGeDBYSFJ3YVhCbE9pQm1kVzVqZEdsdmJpZ2dMeW9nWm01RWIyNWxMQ0JtYmtaaGFXd3NJR1p1VUhKdlozSmxjM01nS2k4Z0tTQjdYRzVjZEZ4MFhIUmNkRngwZG1GeUlHWnVjeUE5SUdGeVozVnRaVzUwY3p0Y2JseHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnFVWFZsY25rdVJHVm1aWEp5WldRb0lHWjFibU4wYVc5dUtDQnVaWGRFWldabGNpQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1bFlXTm9LQ0IwZFhCc1pYTXNJR1oxYm1OMGFXOXVLQ0JwTENCMGRYQnNaU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5Qk5ZWEFnZEhWd2JHVnpJQ2h3Y205bmNtVnpjeXdnWkc5dVpTd2dabUZwYkNrZ2RHOGdZWEpuZFcxbGJuUnpJQ2hrYjI1bExDQm1ZV2xzTENCd2NtOW5jbVZ6Y3lsY2JseDBYSFJjZEZ4MFhIUmNkRngwZG1GeUlHWnVJRDBnYVhOR2RXNWpkR2x2YmlnZ1ptNXpXeUIwZFhCc1pWc2dOQ0JkSUYwZ0tTQW1KaUJtYm5OYklIUjFjR3hsV3lBMElGMGdYVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCa1pXWmxjbkpsWkM1d2NtOW5jbVZ6Y3lobWRXNWpkR2x2YmlncElIc2dZbWx1WkNCMGJ5QnVaWGRFWldabGNpQnZjaUJ1WlhkRVpXWmxjaTV1YjNScFpua2dmU2xjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnWkdWbVpYSnlaV1F1Wkc5dVpTaG1kVzVqZEdsdmJpZ3BJSHNnWW1sdVpDQjBieUJ1WlhkRVpXWmxjaUJ2Y2lCdVpYZEVaV1psY2k1eVpYTnZiSFpsSUgwcFhHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklHUmxabVZ5Y21Wa0xtWmhhV3dvWm5WdVkzUnBiMjRvS1NCN0lHSnBibVFnZEc4Z2JtVjNSR1ZtWlhJZ2IzSWdibVYzUkdWbVpYSXVjbVZxWldOMElIMHBYRzVjZEZ4MFhIUmNkRngwWEhSY2RHUmxabVZ5Y21Wa1d5QjBkWEJzWlZzZ01TQmRJRjBvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIWmhjaUJ5WlhSMWNtNWxaQ0E5SUdadUlDWW1JR1p1TG1Gd2NHeDVLQ0IwYUdsekxDQmhjbWQxYldWdWRITWdLVHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJwWmlBb0lISmxkSFZ5Ym1Wa0lDWW1JR2x6Um5WdVkzUnBiMjRvSUhKbGRIVnlibVZrTG5CeWIyMXBjMlVnS1NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJtVmtMbkJ5YjIxcGMyVW9LVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdWNISnZaM0psYzNNb0lHNWxkMFJsWm1WeUxtNXZkR2xtZVNBcFhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzVrYjI1bEtDQnVaWGRFWldabGNpNXlaWE52YkhabElDbGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTG1aaGFXd29JRzVsZDBSbFptVnlMbkpsYW1WamRDQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ1WlhkRVpXWmxjbHNnZEhWd2JHVmJJREFnWFNBcklGd2lWMmwwYUZ3aUlGMG9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhSb2FYTXNYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdadUlEOGdXeUJ5WlhSMWNtNWxaQ0JkSURvZ1lYSm5kVzFsYm5SelhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RGeDBmU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBmU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBabTV6SUQwZ2JuVnNiRHRjYmx4MFhIUmNkRngwWEhSOUlDa3VjSEp2YldselpTZ3BPMXh1WEhSY2RGeDBYSFI5TEZ4dVhIUmNkRngwWEhSMGFHVnVPaUJtZFc1amRHbHZiaWdnYjI1R2RXeG1hV3hzWldRc0lHOXVVbVZxWldOMFpXUXNJRzl1VUhKdlozSmxjM01nS1NCN1hHNWNkRngwWEhSY2RGeDBkbUZ5SUcxaGVFUmxjSFJvSUQwZ01EdGNibHgwWEhSY2RGeDBYSFJtZFc1amRHbHZiaUJ5WlhOdmJIWmxLQ0JrWlhCMGFDd2daR1ZtWlhKeVpXUXNJR2hoYm1Sc1pYSXNJSE53WldOcFlXd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RIWmhjaUIwYUdGMElEMGdkR2hwY3l4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSaGNtZHpJRDBnWVhKbmRXMWxiblJ6TEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEcxcFoyaDBWR2h5YjNjZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhaaGNpQnlaWFIxY201bFpDd2dkR2hsYmp0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nVUhKdmJXbHpaWE12UVNzZ2MyVmpkR2x2YmlBeUxqTXVNeTR6TGpOY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR2gwZEhCek9pOHZjSEp2YldselpYTmhjR3gxY3k1amIyMHZJM0J2YVc1MExUVTVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCSloyNXZjbVVnWkc5MVlteGxMWEpsYzI5c2RYUnBiMjRnWVhSMFpXMXdkSE5jYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2daR1Z3ZEdnZ1BDQnRZWGhFWlhCMGFDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNWxaQ0E5SUdoaGJtUnNaWEl1WVhCd2JIa29JSFJvWVhRc0lHRnlaM01nS1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nVUhKdmJXbHpaWE12UVNzZ2MyVmpkR2x2YmlBeUxqTXVNVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z2FIUjBjSE02THk5d2NtOXRhWE5sYzJGd2JIVnpMbU52YlM4amNHOXBiblF0TkRoY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnY21WMGRYSnVaV1FnUFQwOUlHUmxabVZ5Y21Wa0xuQnliMjFwYzJVb0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ2dYQ0pVYUdWdVlXSnNaU0J6Wld4bUxYSmxjMjlzZFhScGIyNWNJaUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCUWNtOXRhWE5sY3k5Qkt5QnpaV04wYVc5dWN5QXlMak11TXk0eExDQXpMalZjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklHaDBkSEJ6T2k4dmNISnZiV2x6WlhOaGNHeDFjeTVqYjIwdkkzQnZhVzUwTFRVMFhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMM0J5YjIxcGMyVnpZWEJzZFhNdVkyOXRMeU53YjJsdWRDMDNOVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1VtVjBjbWxsZG1VZ1lIUm9aVzVnSUc5dWJIa2diMjVqWlZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRHaGxiaUE5SUhKbGRIVnlibVZrSUNZbVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1VISnZiV2x6WlhNdlFTc2djMlZqZEdsdmJpQXlMak11TkZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMM0J5YjIxcGMyVnpZWEJzZFhNdVkyOXRMeU53YjJsdWRDMDJORnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlBibXg1SUdOb1pXTnJJRzlpYW1WamRITWdZVzVrSUdaMWJtTjBhVzl1Y3lCbWIzSWdkR2hsYm1GaWFXeHBkSGxjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEtDQjBlWEJsYjJZZ2NtVjBkWEp1WldRZ1BUMDlJRndpYjJKcVpXTjBYQ0lnZkh4Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFIwZVhCbGIyWWdjbVYwZFhKdVpXUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQXBJQ1ltWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxkSFZ5Ym1Wa0xuUm9aVzQ3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRWhoYm1Sc1pTQmhJSEpsZEhWeWJtVmtJSFJvWlc1aFlteGxYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJwWmlBb0lHbHpSblZ1WTNScGIyNG9JSFJvWlc0Z0tTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUY0dWamFXRnNJSEJ5YjJObGMzTnZjbk1nS0c1dmRHbG1lU2tnYW5WemRDQjNZV2wwSUdadmNpQnlaWE52YkhWMGFXOXVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2djM0JsWTJsaGJDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjBhR1Z1TG1OaGJHd29YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY201bFpDeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxjMjlzZG1Vb0lHMWhlRVJsY0hSb0xDQmtaV1psY25KbFpDd2dTV1JsYm5ScGRIa3NJSE53WldOcFlXd2dLU3hjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsYzI5c2RtVW9JRzFoZUVSbGNIUm9MQ0JrWldabGNuSmxaQ3dnVkdoeWIzZGxjaXdnYzNCbFkybGhiQ0FwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBLVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJPYjNKdFlXd2djSEp2WTJWemMyOXljeUFvY21WemIyeDJaU2tnWVd4emJ5Qm9iMjlySUdsdWRHOGdjSEp2WjNKbGMzTmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUM0dUxtRnVaQ0JrYVhOeVpXZGhjbVFnYjJ4a1pYSWdjbVZ6YjJ4MWRHbHZiaUIyWVd4MVpYTmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSdFlYaEVaWEIwYUNzck8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRHaGxiaTVqWVd4c0tGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1WldRc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTnZiSFpsS0NCdFlYaEVaWEIwYUN3Z1pHVm1aWEp5WldRc0lFbGtaVzUwYVhSNUxDQnpjR1ZqYVdGc0lDa3NYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE52YkhabEtDQnRZWGhFWlhCMGFDd2daR1ZtWlhKeVpXUXNJRlJvY205M1pYSXNJSE53WldOcFlXd2dLU3hjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsYzI5c2RtVW9JRzFoZUVSbGNIUm9MQ0JrWldabGNuSmxaQ3dnU1dSbGJuUnBkSGtzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdSbFptVnljbVZrTG01dmRHbG1lVmRwZEdnZ0tWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZENrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEx5OGdTR0Z1Wkd4bElHRnNiQ0J2ZEdobGNpQnlaWFIxY201bFpDQjJZV3gxWlhOY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwTHk4Z1QyNXNlU0J6ZFdKemRHbDBkWFJsSUdoaGJtUnNaWEp6SUhCaGMzTWdiMjRnWTI5dWRHVjRkRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QmhibVFnYlhWc2RHbHdiR1VnZG1Gc2RXVnpJQ2h1YjI0dGMzQmxZeUJpWldoaGRtbHZjaWxjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JvWVc1a2JHVnlJQ0U5UFNCSlpHVnVkR2wwZVNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFHRjBJRDBnZFc1a1pXWnBibVZrTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR0Z5WjNNZ1BTQmJJSEpsZEhWeWJtVmtJRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlFjbTlqWlhOeklIUm9aU0IyWVd4MVpTaHpLVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QkVaV1poZFd4MElIQnliMk5sYzNNZ2FYTWdjbVZ6YjJ4MlpWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFFvSUhOd1pXTnBZV3dnZkh3Z1pHVm1aWEp5WldRdWNtVnpiMngyWlZkcGRHZ2dLU2dnZEdoaGRDd2dZWEpuY3lBcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QlBibXg1SUc1dmNtMWhiQ0J3Y205alpYTnpiM0p6SUNoeVpYTnZiSFpsS1NCallYUmphQ0JoYm1RZ2NtVnFaV04wSUdWNFkyVndkR2x2Ym5OY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSd2NtOWpaWE56SUQwZ2MzQmxZMmxoYkNBL1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnRhV2RvZEZSb2NtOTNJRHBjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEcxcFoyaDBWR2h5YjNjb0tUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVFWldabGNuSmxaQzVsZUdObGNIUnBiMjVJYjI5cklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBhbEYxWlhKNUxrUmxabVZ5Y21Wa0xtVjRZMlZ3ZEdsdmJraHZiMnNvSUdVc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIQnliMk5sYzNNdWMzUmhZMnRVY21GalpTQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRkJ5YjIxcGMyVnpMMEVySUhObFkzUnBiMjRnTWk0ekxqTXVNeTQwTGpGY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCb2RIUndjem92TDNCeWIyMXBjMlZ6WVhCc2RYTXVZMjl0THlOd2IybHVkQzAyTVZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVsbmJtOXlaU0J3YjNOMExYSmxjMjlzZFhScGIyNGdaWGhqWlhCMGFXOXVjMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWkdWd2RHZ2dLeUF4SUQ0OUlHMWhlRVJsY0hSb0lDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCUGJteDVJSE4xWW5OMGFYUjFkR1VnYUdGdVpHeGxjbk1nY0dGemN5QnZiaUJqYjI1MFpYaDBYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJoYm1RZ2JYVnNkR2x3YkdVZ2RtRnNkV1Z6SUNodWIyNHRjM0JsWXlCaVpXaGhkbWx2Y2lsY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2dhR0Z1Wkd4bGNpQWhQVDBnVkdoeWIzZGxjaUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRHaGhkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFlYSm5jeUE5SUZzZ1pTQmRPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJrWldabGNuSmxaQzV5WldwbFkzUlhhWFJvS0NCMGFHRjBMQ0JoY21keklDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSOU8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRk4xY0hCdmNuUTZJRkJ5YjIxcGMyVnpMMEVySUhObFkzUnBiMjRnTWk0ekxqTXVNeTR4WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUdoMGRIQnpPaTh2Y0hKdmJXbHpaWE5oY0d4MWN5NWpiMjB2STNCdmFXNTBMVFUzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUZKbExYSmxjMjlzZG1VZ2NISnZiV2x6WlhNZ2FXMXRaV1JwWVhSbGJIa2dkRzhnWkc5a1oyVWdabUZzYzJVZ2NtVnFaV04wYVc5dUlHWnliMjFjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnYzNWaWMyVnhkV1Z1ZENCbGNuSnZjbk5jYmx4MFhIUmNkRngwWEhSY2RGeDBhV1lnS0NCa1pYQjBhQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSd2NtOWpaWE56S0NrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QkRZV3hzSUdGdUlHOXdkR2x2Ym1Gc0lHaHZiMnNnZEc4Z2NtVmpiM0prSUhSb1pTQnpkR0ZqYXl3Z2FXNGdZMkZ6WlNCdlppQmxlR05sY0hScGIyNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJ6YVc1alpTQnBkQ2R6SUc5MGFHVnlkMmx6WlNCc2IzTjBJSGRvWlc0Z1pYaGxZM1YwYVc5dUlHZHZaWE1nWVhONWJtTmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVFWldabGNuSmxaQzVuWlhSVGRHRmphMGh2YjJzZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ3Y205alpYTnpMbk4wWVdOclZISmhZMlVnUFNCcVVYVmxjbmt1UkdWbVpYSnlaV1F1WjJWMFUzUmhZMnRJYjI5cktDazdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQ0J3Y205alpYTnpJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMDdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlHcFJkV1Z5ZVM1RVpXWmxjbkpsWkNnZ1puVnVZM1JwYjI0b0lHNWxkMFJsWm1WeUlDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJ3Y205bmNtVnpjMTlvWVc1a2JHVnljeTVoWkdRb0lDNHVMaUFwWEc1Y2RGeDBYSFJjZEZ4MFhIUjBkWEJzWlhOYklEQWdYVnNnTXlCZExtRmtaQ2hjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVZ6YjJ4MlpTaGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXdMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzVsZDBSbFptVnlMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2x6Um5WdVkzUnBiMjRvSUc5dVVISnZaM0psYzNNZ0tTQS9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ2YmxCeWIyZHlaWE56SURwY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RFbGtaVzUwYVhSNUxGeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHNWxkMFJsWm1WeUxtNXZkR2xtZVZkcGRHaGNibHgwWEhSY2RGeDBYSFJjZEZ4MEtWeHVYSFJjZEZ4MFhIUmNkRngwS1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1puVnNabWxzYkdWa1gyaGhibVJzWlhKekxtRmtaQ2dnTGk0dUlDbGNibHgwWEhSY2RGeDBYSFJjZEhSMWNHeGxjMXNnTVNCZFd5QXpJRjB1WVdSa0tGeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTnZiSFpsS0Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZERBc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGJtVjNSR1ZtWlhJc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGFYTkdkVzVqZEdsdmJpZ2diMjVHZFd4bWFXeHNaV1FnS1NBL1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnZia1oxYkdacGJHeGxaQ0E2WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSSlpHVnVkR2wwZVZ4dVhIUmNkRngwWEhSY2RGeDBYSFFwWEc1Y2RGeDBYSFJjZEZ4MFhIUXBPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJ5WldwbFkzUmxaRjlvWVc1a2JHVnljeTVoWkdRb0lDNHVMaUFwWEc1Y2RGeDBYSFJjZEZ4MFhIUjBkWEJzWlhOYklESWdYVnNnTXlCZExtRmtaQ2hjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVZ6YjJ4MlpTaGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXdMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzVsZDBSbFptVnlMRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2x6Um5WdVkzUnBiMjRvSUc5dVVtVnFaV04wWldRZ0tTQS9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ2YmxKbGFtVmpkR1ZrSURwY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGUm9jbTkzWlhKY2JseDBYSFJjZEZ4MFhIUmNkRngwS1Z4dVhIUmNkRngwWEhSY2RGeDBLVHRjYmx4MFhIUmNkRngwWEhSOUlDa3VjSEp2YldselpTZ3BPMXh1WEhSY2RGeDBYSFI5TEZ4dVhHNWNkRngwWEhSY2RDOHZJRWRsZENCaElIQnliMjFwYzJVZ1ptOXlJSFJvYVhNZ1pHVm1aWEp5WldSY2JseDBYSFJjZEZ4MEx5OGdTV1lnYjJKcUlHbHpJSEJ5YjNacFpHVmtMQ0IwYUdVZ2NISnZiV2x6WlNCaGMzQmxZM1FnYVhNZ1lXUmtaV1FnZEc4Z2RHaGxJRzlpYW1WamRGeHVYSFJjZEZ4MFhIUndjbTl0YVhObE9pQm1kVzVqZEdsdmJpZ2diMkpxSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnZZbW9nSVQwZ2JuVnNiQ0EvSUdwUmRXVnllUzVsZUhSbGJtUW9JRzlpYWl3Z2NISnZiV2x6WlNBcElEb2djSEp2YldselpUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkR1JsWm1WeWNtVmtJRDBnZTMwN1hHNWNibHgwWEhRdkx5QkJaR1FnYkdsemRDMXpjR1ZqYVdacFl5QnRaWFJvYjJSelhHNWNkRngwYWxGMVpYSjVMbVZoWTJnb0lIUjFjR3hsY3l3Z1puVnVZM1JwYjI0b0lHa3NJSFIxY0d4bElDa2dlMXh1WEhSY2RGeDBkbUZ5SUd4cGMzUWdQU0IwZFhCc1pWc2dNaUJkTEZ4dVhIUmNkRngwWEhSemRHRjBaVk4wY21sdVp5QTlJSFIxY0d4bFd5QTFJRjA3WEc1Y2JseDBYSFJjZEM4dklIQnliMjFwYzJVdWNISnZaM0psYzNNZ1BTQnNhWE4wTG1Ga1pGeHVYSFJjZEZ4MEx5OGdjSEp2YldselpTNWtiMjVsSUQwZ2JHbHpkQzVoWkdSY2JseDBYSFJjZEM4dklIQnliMjFwYzJVdVptRnBiQ0E5SUd4cGMzUXVZV1JrWEc1Y2RGeDBYSFJ3Y205dGFYTmxXeUIwZFhCc1pWc2dNU0JkSUYwZ1BTQnNhWE4wTG1Ga1pEdGNibHh1WEhSY2RGeDBMeThnU0dGdVpHeGxJSE4wWVhSbFhHNWNkRngwWEhScFppQW9JSE4wWVhSbFUzUnlhVzVuSUNrZ2UxeHVYSFJjZEZ4MFhIUnNhWE4wTG1Ga1pDaGNibHgwWEhSY2RGeDBYSFJtZFc1amRHbHZiaWdwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkRngwTHk4Z2MzUmhkR1VnUFNCY0luSmxjMjlzZG1Wa1hDSWdLR2t1WlM0c0lHWjFiR1pwYkd4bFpDbGNibHgwWEhSY2RGeDBYSFJjZEM4dklITjBZWFJsSUQwZ1hDSnlaV3BsWTNSbFpGd2lYRzVjZEZ4MFhIUmNkRngwWEhSemRHRjBaU0E5SUhOMFlYUmxVM1J5YVc1bk8xeHVYSFJjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJ5WldwbFkzUmxaRjlqWVd4c1ltRmphM011WkdsellXSnNaVnh1WEhSY2RGeDBYSFJjZEM4dklHWjFiR1pwYkd4bFpGOWpZV3hzWW1GamEzTXVaR2x6WVdKc1pWeHVYSFJjZEZ4MFhIUmNkSFIxY0d4bGMxc2dNeUF0SUdrZ1hWc2dNaUJkTG1ScGMyRmliR1VzWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJ5WldwbFkzUmxaRjlvWVc1a2JHVnljeTVrYVhOaFlteGxYRzVjZEZ4MFhIUmNkRngwTHk4Z1puVnNabWxzYkdWa1gyaGhibVJzWlhKekxtUnBjMkZpYkdWY2JseDBYSFJjZEZ4MFhIUjBkWEJzWlhOYklETWdMU0JwSUYxYklETWdYUzVrYVhOaFlteGxMRnh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdjSEp2WjNKbGMzTmZZMkZzYkdKaFkydHpMbXh2WTJ0Y2JseDBYSFJjZEZ4MFhIUjBkWEJzWlhOYklEQWdYVnNnTWlCZExteHZZMnNzWEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJ3Y205bmNtVnpjMTlvWVc1a2JHVnljeTVzYjJOclhHNWNkRngwWEhSY2RGeDBkSFZ3YkdWeld5QXdJRjFiSURNZ1hTNXNiMk5yWEc1Y2RGeDBYSFJjZENrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJSEJ5YjJkeVpYTnpYMmhoYm1Sc1pYSnpMbVpwY21WY2JseDBYSFJjZEM4dklHWjFiR1pwYkd4bFpGOW9ZVzVrYkdWeWN5NW1hWEpsWEc1Y2RGeDBYSFF2THlCeVpXcGxZM1JsWkY5b1lXNWtiR1Z5Y3k1bWFYSmxYRzVjZEZ4MFhIUnNhWE4wTG1Ga1pDZ2dkSFZ3YkdWYklETWdYUzVtYVhKbElDazdYRzVjYmx4MFhIUmNkQzh2SUdSbFptVnljbVZrTG01dmRHbG1lU0E5SUdaMWJtTjBhVzl1S0NrZ2V5QmtaV1psY25KbFpDNXViM1JwWm5sWGFYUm9LQzR1TGlrZ2ZWeHVYSFJjZEZ4MEx5OGdaR1ZtWlhKeVpXUXVjbVZ6YjJ4MlpTQTlJR1oxYm1OMGFXOXVLQ2tnZXlCa1pXWmxjbkpsWkM1eVpYTnZiSFpsVjJsMGFDZ3VMaTRwSUgxY2JseDBYSFJjZEM4dklHUmxabVZ5Y21Wa0xuSmxhbVZqZENBOUlHWjFibU4wYVc5dUtDa2dleUJrWldabGNuSmxaQzV5WldwbFkzUlhhWFJvS0M0dUxpa2dmVnh1WEhSY2RGeDBaR1ZtWlhKeVpXUmJJSFIxY0d4bFd5QXdJRjBnWFNBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJrWldabGNuSmxaRnNnZEhWd2JHVmJJREFnWFNBcklGd2lWMmwwYUZ3aUlGMG9JSFJvYVhNZ1BUMDlJR1JsWm1WeWNtVmtJRDhnZFc1a1pXWnBibVZrSURvZ2RHaHBjeXdnWVhKbmRXMWxiblJ6SUNrN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RGeDBmVHRjYmx4dVhIUmNkRngwTHk4Z1pHVm1aWEp5WldRdWJtOTBhV1o1VjJsMGFDQTlJR3hwYzNRdVptbHlaVmRwZEdoY2JseDBYSFJjZEM4dklHUmxabVZ5Y21Wa0xuSmxjMjlzZG1WWGFYUm9JRDBnYkdsemRDNW1hWEpsVjJsMGFGeHVYSFJjZEZ4MEx5OGdaR1ZtWlhKeVpXUXVjbVZxWldOMFYybDBhQ0E5SUd4cGMzUXVabWx5WlZkcGRHaGNibHgwWEhSY2RHUmxabVZ5Y21Wa1d5QjBkWEJzWlZzZ01DQmRJQ3NnWENKWGFYUm9YQ0lnWFNBOUlHeHBjM1F1Wm1seVpWZHBkR2c3WEc1Y2RGeDBmU0FwTzF4dVhHNWNkRngwTHk4Z1RXRnJaU0IwYUdVZ1pHVm1aWEp5WldRZ1lTQndjbTl0YVhObFhHNWNkRngwY0hKdmJXbHpaUzV3Y205dGFYTmxLQ0JrWldabGNuSmxaQ0FwTzF4dVhHNWNkRngwTHk4Z1EyRnNiQ0JuYVhabGJpQm1kVzVqSUdsbUlHRnVlVnh1WEhSY2RHbG1JQ2dnWm5WdVl5QXBJSHRjYmx4MFhIUmNkR1oxYm1NdVkyRnNiQ2dnWkdWbVpYSnlaV1FzSUdSbFptVnljbVZrSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1FXeHNJR1J2Ym1VaFhHNWNkRngwY21WMGRYSnVJR1JsWm1WeWNtVmtPMXh1WEhSOUxGeHVYRzVjZEM4dklFUmxabVZ5Y21Wa0lHaGxiSEJsY2x4dVhIUjNhR1Z1T2lCbWRXNWpkR2x2YmlnZ2MybHVaMnhsVm1Gc2RXVWdLU0I3WEc1Y2RGeDBkbUZ5WEc1Y2JseDBYSFJjZEM4dklHTnZkVzUwSUc5bUlIVnVZMjl0Y0d4bGRHVmtJSE4xWW05eVpHbHVZWFJsYzF4dVhIUmNkRngwY21WdFlXbHVhVzVuSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUN4Y2JseHVYSFJjZEZ4MEx5OGdZMjkxYm5RZ2IyWWdkVzV3Y205alpYTnpaV1FnWVhKbmRXMWxiblJ6WEc1Y2RGeDBYSFJwSUQwZ2NtVnRZV2x1YVc1bkxGeHVYRzVjZEZ4MFhIUXZMeUJ6ZFdKdmNtUnBibUYwWlNCbWRXeG1hV3hzYldWdWRDQmtZWFJoWEc1Y2RGeDBYSFJ5WlhOdmJIWmxRMjl1ZEdWNGRITWdQU0JCY25KaGVTZ2dhU0FwTEZ4dVhIUmNkRngwY21WemIyeDJaVlpoYkhWbGN5QTlJSE5zYVdObExtTmhiR3dvSUdGeVozVnRaVzUwY3lBcExGeHVYRzVjZEZ4MFhIUXZMeUIwYUdVZ2JXRnpkR1Z5SUVSbFptVnljbVZrWEc1Y2RGeDBYSFJ0WVhOMFpYSWdQU0JxVVhWbGNua3VSR1ZtWlhKeVpXUW9LU3hjYmx4dVhIUmNkRngwTHk4Z2MzVmliM0prYVc1aGRHVWdZMkZzYkdKaFkyc2dabUZqZEc5eWVWeHVYSFJjZEZ4MGRYQmtZWFJsUm5WdVl5QTlJR1oxYm1OMGFXOXVLQ0JwSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1puVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsYzI5c2RtVkRiMjUwWlhoMGMxc2dhU0JkSUQwZ2RHaHBjenRjYmx4MFhIUmNkRngwWEhSeVpYTnZiSFpsVm1Gc2RXVnpXeUJwSUYwZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUhOc2FXTmxMbU5oYkd3b0lHRnlaM1Z0Wlc1MGN5QXBJRG9nZG1Gc2RXVTdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQWhLQ0F0TFhKbGJXRnBibWx1WnlBcElDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGJXRnpkR1Z5TG5KbGMyOXNkbVZYYVhSb0tDQnlaWE52YkhabFEyOXVkR1Y0ZEhNc0lISmxjMjlzZG1WV1lXeDFaWE1nS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDA3WEc1Y2RGeDBYSFI5TzF4dVhHNWNkRngwTHk4Z1UybHVaMnhsTFNCaGJtUWdaVzF3ZEhrZ1lYSm5kVzFsYm5SeklHRnlaU0JoWkc5d2RHVmtJR3hwYTJVZ1VISnZiV2x6WlM1eVpYTnZiSFpsWEc1Y2RGeDBhV1lnS0NCeVpXMWhhVzVwYm1jZ1BEMGdNU0FwSUh0Y2JseDBYSFJjZEdGa2IzQjBWbUZzZFdVb0lITnBibWRzWlZaaGJIVmxMQ0J0WVhOMFpYSXVaRzl1WlNnZ2RYQmtZWFJsUm5WdVl5Z2dhU0FwSUNrdWNtVnpiMngyWlN3Z2JXRnpkR1Z5TG5KbGFtVmpkQ3hjYmx4MFhIUmNkRngwSVhKbGJXRnBibWx1WnlBcE8xeHVYRzVjZEZ4MFhIUXZMeUJWYzJVZ0xuUm9aVzRvS1NCMGJ5QjFibmR5WVhBZ2MyVmpiMjVrWVhKNUlIUm9aVzVoWW14bGN5QW9ZMll1SUdkb0xUTXdNREFwWEc1Y2RGeDBYSFJwWmlBb0lHMWhjM1JsY2k1emRHRjBaU2dwSUQwOVBTQmNJbkJsYm1ScGJtZGNJaUI4ZkZ4dVhIUmNkRngwWEhScGMwWjFibU4wYVc5dUtDQnlaWE52YkhabFZtRnNkV1Z6V3lCcElGMGdKaVlnY21WemIyeDJaVlpoYkhWbGMxc2dhU0JkTG5Sb1pXNGdLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JXRnpkR1Z5TG5Sb1pXNG9LVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJOZFd4MGFYQnNaU0JoY21kMWJXVnVkSE1nWVhKbElHRm5aM0psWjJGMFpXUWdiR2xyWlNCUWNtOXRhWE5sTG1Gc2JDQmhjbkpoZVNCbGJHVnRaVzUwYzF4dVhIUmNkSGRvYVd4bElDZ2dhUzB0SUNrZ2UxeHVYSFJjZEZ4MFlXUnZjSFJXWVd4MVpTZ2djbVZ6YjJ4MlpWWmhiSFZsYzFzZ2FTQmRMQ0IxY0dSaGRHVkdkVzVqS0NCcElDa3NJRzFoYzNSbGNpNXlaV3BsWTNRZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnYldGemRHVnlMbkJ5YjIxcGMyVW9LVHRjYmx4MGZWeHVmU0FwTzF4dVhHNWNiaTh2SUZSb1pYTmxJSFZ6ZFdGc2JIa2dhVzVrYVdOaGRHVWdZU0J3Y205bmNtRnRiV1Z5SUcxcGMzUmhhMlVnWkhWeWFXNW5JR1JsZG1Wc2IzQnRaVzUwTEZ4dUx5OGdkMkZ5YmlCaFltOTFkQ0IwYUdWdElFRlRRVkFnY21GMGFHVnlJSFJvWVc0Z2MzZGhiR3h2ZDJsdVp5QjBhR1Z0SUdKNUlHUmxabUYxYkhRdVhHNTJZWElnY21WeWNtOXlUbUZ0WlhNZ1BTQXZYaWhGZG1Gc2ZFbHVkR1Z5Ym1Gc2ZGSmhibWRsZkZKbFptVnlaVzVqWlh4VGVXNTBZWGg4Vkhsd1pYeFZVa2twUlhKeWIzSWtMenRjYmx4dWFsRjFaWEo1TGtSbFptVnljbVZrTG1WNFkyVndkR2x2YmtodmIyc2dQU0JtZFc1amRHbHZiaWdnWlhKeWIzSXNJSE4wWVdOcklDa2dlMXh1WEc1Y2RDOHZJRk4xY0hCdmNuUTZJRWxGSURnZ0xTQTVJRzl1YkhsY2JseDBMeThnUTI5dWMyOXNaU0JsZUdsemRITWdkMmhsYmlCa1pYWWdkRzl2YkhNZ1lYSmxJRzl3Wlc0c0lIZG9hV05vSUdOaGJpQm9ZWEJ3Wlc0Z1lYUWdZVzU1SUhScGJXVmNibHgwYVdZZ0tDQjNhVzVrYjNjdVkyOXVjMjlzWlNBbUppQjNhVzVrYjNjdVkyOXVjMjlzWlM1M1lYSnVJQ1ltSUdWeWNtOXlJQ1ltSUhKbGNuSnZjazVoYldWekxuUmxjM1FvSUdWeWNtOXlMbTVoYldVZ0tTQXBJSHRjYmx4MFhIUjNhVzVrYjNjdVkyOXVjMjlzWlM1M1lYSnVLQ0JjSW1wUmRXVnllUzVFWldabGNuSmxaQ0JsZUdObGNIUnBiMjQ2SUZ3aUlDc2daWEp5YjNJdWJXVnpjMkZuWlN3Z1pYSnliM0l1YzNSaFkyc3NJSE4wWVdOcklDazdYRzVjZEgxY2JuMDdYRzVjYmx4dVhHNWNibXBSZFdWeWVTNXlaV0ZrZVVWNFkyVndkR2x2YmlBOUlHWjFibU4wYVc5dUtDQmxjbkp2Y2lBcElIdGNibHgwZDJsdVpHOTNMbk5sZEZScGJXVnZkWFFvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhSb2NtOTNJR1Z5Y205eU8xeHVYSFI5SUNrN1hHNTlPMXh1WEc1Y2JseHVYRzR2THlCVWFHVWdaR1ZtWlhKeVpXUWdkWE5sWkNCdmJpQkVUMDBnY21WaFpIbGNiblpoY2lCeVpXRmtlVXhwYzNRZ1BTQnFVWFZsY25rdVJHVm1aWEp5WldRb0tUdGNibHh1YWxGMVpYSjVMbVp1TG5KbFlXUjVJRDBnWm5WdVkzUnBiMjRvSUdadUlDa2dlMXh1WEc1Y2RISmxZV1I1VEdsemRGeHVYSFJjZEM1MGFHVnVLQ0JtYmlBcFhHNWNibHgwWEhRdkx5QlhjbUZ3SUdwUmRXVnllUzV5WldGa2VVVjRZMlZ3ZEdsdmJpQnBiaUJoSUdaMWJtTjBhVzl1SUhOdklIUm9ZWFFnZEdobElHeHZiMnQxY0Z4dVhIUmNkQzh2SUdoaGNIQmxibk1nWVhRZ2RHaGxJSFJwYldVZ2IyWWdaWEp5YjNJZ2FHRnVaR3hwYm1jZ2FXNXpkR1ZoWkNCdlppQmpZV3hzWW1GamExeHVYSFJjZEM4dklISmxaMmx6ZEhKaGRHbHZiaTVjYmx4MFhIUXVZMkYwWTJnb0lHWjFibU4wYVc5dUtDQmxjbkp2Y2lBcElIdGNibHgwWEhSY2RHcFJkV1Z5ZVM1eVpXRmtlVVY0WTJWd2RHbHZiaWdnWlhKeWIzSWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2JseDBjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjYmx4MEx5OGdTWE1nZEdobElFUlBUU0J5WldGa2VTQjBieUJpWlNCMWMyVmtQeUJUWlhRZ2RHOGdkSEoxWlNCdmJtTmxJR2wwSUc5alkzVnljeTVjYmx4MGFYTlNaV0ZrZVRvZ1ptRnNjMlVzWEc1Y2JseDBMeThnUVNCamIzVnVkR1Z5SUhSdklIUnlZV05ySUdodmR5QnRZVzU1SUdsMFpXMXpJSFJ2SUhkaGFYUWdabTl5SUdKbFptOXlaVnh1WEhRdkx5QjBhR1VnY21WaFpIa2daWFpsYm5RZ1ptbHlaWE11SUZObFpTQWpOamM0TVZ4dVhIUnlaV0ZrZVZkaGFYUTZJREVzWEc1Y2JseDBMeThnU0dGdVpHeGxJSGRvWlc0Z2RHaGxJRVJQVFNCcGN5QnlaV0ZrZVZ4dVhIUnlaV0ZrZVRvZ1puVnVZM1JwYjI0b0lIZGhhWFFnS1NCN1hHNWNibHgwWEhRdkx5QkJZbTl5ZENCcFppQjBhR1Z5WlNCaGNtVWdjR1Z1WkdsdVp5Qm9iMnhrY3lCdmNpQjNaU2R5WlNCaGJISmxZV1I1SUhKbFlXUjVYRzVjZEZ4MGFXWWdLQ0IzWVdsMElEMDlQU0IwY25WbElEOGdMUzFxVVhWbGNua3VjbVZoWkhsWFlXbDBJRG9nYWxGMVpYSjVMbWx6VW1WaFpIa2dLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVbVZ0WlcxaVpYSWdkR2hoZENCMGFHVWdSRTlOSUdseklISmxZV1I1WEc1Y2RGeDBhbEYxWlhKNUxtbHpVbVZoWkhrZ1BTQjBjblZsTzF4dVhHNWNkRngwTHk4Z1NXWWdZU0J1YjNKdFlXd2dSRTlOSUZKbFlXUjVJR1YyWlc1MElHWnBjbVZrTENCa1pXTnlaVzFsYm5Rc0lHRnVaQ0IzWVdsMElHbG1JRzVsWldRZ1ltVmNibHgwWEhScFppQW9JSGRoYVhRZ0lUMDlJSFJ5ZFdVZ0ppWWdMUzFxVVhWbGNua3VjbVZoWkhsWFlXbDBJRDRnTUNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCSlppQjBhR1Z5WlNCaGNtVWdablZ1WTNScGIyNXpJR0p2ZFc1a0xDQjBieUJsZUdWamRYUmxYRzVjZEZ4MGNtVmhaSGxNYVhOMExuSmxjMjlzZG1WWGFYUm9LQ0JrYjJOMWJXVnVkQ3dnV3lCcVVYVmxjbmtnWFNBcE8xeHVYSFI5WEc1OUlDazdYRzVjYm1wUmRXVnllUzV5WldGa2VTNTBhR1Z1SUQwZ2NtVmhaSGxNYVhOMExuUm9aVzQ3WEc1Y2JpOHZJRlJvWlNCeVpXRmtlU0JsZG1WdWRDQm9ZVzVrYkdWeUlHRnVaQ0J6Wld4bUlHTnNaV0Z1ZFhBZ2JXVjBhRzlrWEc1bWRXNWpkR2x2YmlCamIyMXdiR1YwWldRb0tTQjdYRzVjZEdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0lGd2lSRTlOUTI5dWRHVnVkRXh2WVdSbFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseDBkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9JRndpYkc5aFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseDBhbEYxWlhKNUxuSmxZV1I1S0NrN1hHNTlYRzVjYmk4dklFTmhkR05vSUdOaGMyVnpJSGRvWlhKbElDUW9aRzlqZFcxbGJuUXBMbkpsWVdSNUtDa2dhWE1nWTJGc2JHVmtYRzR2THlCaFpuUmxjaUIwYUdVZ1luSnZkM05sY2lCbGRtVnVkQ0JvWVhNZ1lXeHlaV0ZrZVNCdlkyTjFjbkpsWkM1Y2JpOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQXRJREV3SUc5dWJIbGNiaTh2SUU5c1pHVnlJRWxGSUhOdmJXVjBhVzFsY3lCemFXZHVZV3h6SUZ3aWFXNTBaWEpoWTNScGRtVmNJaUIwYjI4Z2MyOXZibHh1YVdZZ0tDQmtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJRDA5UFNCY0ltTnZiWEJzWlhSbFhDSWdmSHhjYmx4MEtDQmtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJQ0U5UFNCY0lteHZZV1JwYm1kY0lpQW1KaUFoWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbVJ2VTJOeWIyeHNJQ2tnS1NCN1hHNWNibHgwTHk4Z1NHRnVaR3hsSUdsMElHRnplVzVqYUhKdmJtOTFjMng1SUhSdklHRnNiRzkzSUhOamNtbHdkSE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdSbGJHRjVJSEpsWVdSNVhHNWNkSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQ0JxVVhWbGNua3VjbVZoWkhrZ0tUdGNibHh1ZlNCbGJITmxJSHRjYmx4dVhIUXZMeUJWYzJVZ2RHaGxJR2hoYm1SNUlHVjJaVzUwSUdOaGJHeGlZV05yWEc1Y2RHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0lGd2lSRTlOUTI5dWRHVnVkRXh2WVdSbFpGd2lMQ0JqYjIxd2JHVjBaV1FnS1R0Y2JseHVYSFF2THlCQklHWmhiR3hpWVdOcklIUnZJSGRwYm1SdmR5NXZibXh2WVdRc0lIUm9ZWFFnZDJsc2JDQmhiSGRoZVhNZ2QyOXlhMXh1WEhSM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWdnWENKc2IyRmtYQ0lzSUdOdmJYQnNaWFJsWkNBcE8xeHVmVnh1WEc1Y2JseHVYRzR2THlCTmRXeDBhV1oxYm1OMGFXOXVZV3dnYldWMGFHOWtJSFJ2SUdkbGRDQmhibVFnYzJWMElIWmhiSFZsY3lCdlppQmhJR052Ykd4bFkzUnBiMjVjYmk4dklGUm9aU0IyWVd4MVpTOXpJR05oYmlCdmNIUnBiMjVoYkd4NUlHSmxJR1Y0WldOMWRHVmtJR2xtSUdsMEozTWdZU0JtZFc1amRHbHZibHh1ZG1GeUlHRmpZMlZ6Y3lBOUlHWjFibU4wYVc5dUtDQmxiR1Z0Y3l3Z1ptNHNJR3RsZVN3Z2RtRnNkV1VzSUdOb1lXbHVZV0pzWlN3Z1pXMXdkSGxIWlhRc0lISmhkeUFwSUh0Y2JseDBkbUZ5SUdrZ1BTQXdMRnh1WEhSY2RHeGxiaUE5SUdWc1pXMXpMbXhsYm1kMGFDeGNibHgwWEhSaWRXeHJJRDBnYTJWNUlEMDlJRzUxYkd3N1hHNWNibHgwTHk4Z1UyVjBjeUJ0WVc1NUlIWmhiSFZsYzF4dVhIUnBaaUFvSUhSdlZIbHdaU2dnYTJWNUlDa2dQVDA5SUZ3aWIySnFaV04wWENJZ0tTQjdYRzVjZEZ4MFkyaGhhVzVoWW14bElEMGdkSEoxWlR0Y2JseDBYSFJtYjNJZ0tDQnBJR2x1SUd0bGVTQXBJSHRjYmx4MFhIUmNkR0ZqWTJWemN5Z2daV3hsYlhNc0lHWnVMQ0JwTENCclpYbGJJR2tnWFN3Z2RISjFaU3dnWlcxd2RIbEhaWFFzSUhKaGR5QXBPMXh1WEhSY2RIMWNibHh1WEhRdkx5QlRaWFJ6SUc5dVpTQjJZV3gxWlZ4dVhIUjlJR1ZzYzJVZ2FXWWdLQ0IyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEdOb1lXbHVZV0pzWlNBOUlIUnlkV1U3WEc1Y2JseDBYSFJwWmlBb0lDRnBjMFoxYm1OMGFXOXVLQ0IyWVd4MVpTQXBJQ2tnZTF4dVhIUmNkRngwY21GM0lEMGdkSEoxWlR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHSjFiR3NnS1NCN1hHNWNibHgwWEhSY2RDOHZJRUoxYkdzZ2IzQmxjbUYwYVc5dWN5QnlkVzRnWVdkaGFXNXpkQ0IwYUdVZ1pXNTBhWEpsSUhObGRGeHVYSFJjZEZ4MGFXWWdLQ0J5WVhjZ0tTQjdYRzVjZEZ4MFhIUmNkR1p1TG1OaGJHd29JR1ZzWlcxekxDQjJZV3gxWlNBcE8xeHVYSFJjZEZ4MFhIUm1iaUE5SUc1MWJHdzdYRzVjYmx4MFhIUmNkQzh2SUM0dUxtVjRZMlZ3ZENCM2FHVnVJR1Y0WldOMWRHbHVaeUJtZFc1amRHbHZiaUIyWVd4MVpYTmNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHSjFiR3NnUFNCbWJqdGNibHgwWEhSY2RGeDBabTRnUFNCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYTJWNUxDQjJZV3gxWlNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdZblZzYXk1allXeHNLQ0JxVVhWbGNua29JR1ZzWlcwZ0tTd2dkbUZzZFdVZ0tUdGNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvSUdadUlDa2dlMXh1WEhSY2RGeDBabTl5SUNnZ095QnBJRHdnYkdWdU95QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RHWnVLRnh1WEhSY2RGeDBYSFJjZEdWc1pXMXpXeUJwSUYwc0lHdGxlU3dnY21GM0lEOWNibHgwWEhSY2RGeDBYSFIyWVd4MVpTQTZYRzVjZEZ4MFhIUmNkRngwZG1Gc2RXVXVZMkZzYkNnZ1pXeGxiWE5iSUdrZ1hTd2dhU3dnWm00b0lHVnNaVzF6V3lCcElGMHNJR3RsZVNBcElDbGNibHgwWEhSY2RGeDBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJwWmlBb0lHTm9ZV2x1WVdKc1pTQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pXeGxiWE03WEc1Y2RIMWNibHh1WEhRdkx5QkhaWFJ6WEc1Y2RHbG1JQ2dnWW5Wc2F5QXBJSHRjYmx4MFhIUnlaWFIxY200Z1ptNHVZMkZzYkNnZ1pXeGxiWE1nS1R0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCc1pXNGdQeUJtYmlnZ1pXeGxiWE5iSURBZ1hTd2dhMlY1SUNrZ09pQmxiWEIwZVVkbGREdGNibjA3WEc1Y2JseHVMeThnVFdGMFkyaGxjeUJrWVhOb1pXUWdjM1J5YVc1bklHWnZjaUJqWVcxbGJHbDZhVzVuWEc1MllYSWdjbTF6VUhKbFptbDRJRDBnTDE0dGJYTXRMeXhjYmx4MGNtUmhjMmhCYkhCb1lTQTlJQzh0S0Z0aExYcGRLUzluTzF4dVhHNHZMeUJWYzJWa0lHSjVJR05oYldWc1EyRnpaU0JoY3lCallXeHNZbUZqYXlCMGJ5QnlaWEJzWVdObEtDbGNibVoxYm1OMGFXOXVJR1pqWVcxbGJFTmhjMlVvSUdGc2JDd2diR1YwZEdWeUlDa2dlMXh1WEhSeVpYUjFjbTRnYkdWMGRHVnlMblJ2VlhCd1pYSkRZWE5sS0NrN1hHNTlYRzVjYmk4dklFTnZiblpsY25RZ1pHRnphR1ZrSUhSdklHTmhiV1ZzUTJGelpUc2dkWE5sWkNCaWVTQjBhR1VnWTNOeklHRnVaQ0JrWVhSaElHMXZaSFZzWlhOY2JpOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQXRJREV4TENCRlpHZGxJREV5SUMwZ01UVmNiaTh2SUUxcFkzSnZjMjltZENCbWIzSm5iM1FnZEc4Z2FIVnRjQ0IwYUdWcGNpQjJaVzVrYjNJZ2NISmxabWw0SUNnak9UVTNNaWxjYm1aMWJtTjBhVzl1SUdOaGJXVnNRMkZ6WlNnZ2MzUnlhVzVuSUNrZ2UxeHVYSFJ5WlhSMWNtNGdjM1J5YVc1bkxuSmxjR3hoWTJVb0lISnRjMUJ5WldacGVDd2dYQ0p0Y3kxY0lpQXBMbkpsY0d4aFkyVW9JSEprWVhOb1FXeHdhR0VzSUdaallXMWxiRU5oYzJVZ0tUdGNibjFjYm5aaGNpQmhZMk5sY0hSRVlYUmhJRDBnWm5WdVkzUnBiMjRvSUc5M2JtVnlJQ2tnZTF4dVhHNWNkQzh2SUVGalkyVndkSE1nYjI1c2VUcGNibHgwTHk4Z0lDMGdUbTlrWlZ4dVhIUXZMeUFnSUNBdElFNXZaR1V1UlV4RlRVVk9WRjlPVDBSRlhHNWNkQzh2SUNBZ0lDMGdUbTlrWlM1RVQwTlZUVVZPVkY5T1QwUkZYRzVjZEM4dklDQXRJRTlpYW1WamRGeHVYSFF2THlBZ0lDQXRJRUZ1ZVZ4dVhIUnlaWFIxY200Z2IzZHVaWEl1Ym05a1pWUjVjR1VnUFQwOUlERWdmSHdnYjNkdVpYSXVibTlrWlZSNWNHVWdQVDA5SURrZ2ZId2dJU2dnSzI5M2JtVnlMbTV2WkdWVWVYQmxJQ2s3WEc1OU8xeHVYRzVjYmx4dVhHNW1kVzVqZEdsdmJpQkVZWFJoS0NrZ2UxeHVYSFIwYUdsekxtVjRjR0Z1Wkc4Z1BTQnFVWFZsY25rdVpYaHdZVzVrYnlBcklFUmhkR0V1ZFdsa0t5czdYRzU5WEc1Y2JrUmhkR0V1ZFdsa0lEMGdNVHRjYmx4dVJHRjBZUzV3Y205MGIzUjVjR1VnUFNCN1hHNWNibHgwWTJGamFHVTZJR1oxYm1OMGFXOXVLQ0J2ZDI1bGNpQXBJSHRjYmx4dVhIUmNkQzh2SUVOb1pXTnJJR2xtSUhSb1pTQnZkMjVsY2lCdlltcGxZM1FnWVd4eVpXRmtlU0JvWVhNZ1lTQmpZV05vWlZ4dVhIUmNkSFpoY2lCMllXeDFaU0E5SUc5M2JtVnlXeUIwYUdsekxtVjRjR0Z1Wkc4Z1hUdGNibHh1WEhSY2RDOHZJRWxtSUc1dmRDd2dZM0psWVhSbElHOXVaVnh1WEhSY2RHbG1JQ2dnSVhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwZG1Gc2RXVWdQU0I3ZlR0Y2JseHVYSFJjZEZ4MEx5OGdWMlVnWTJGdUlHRmpZMlZ3ZENCa1lYUmhJR1p2Y2lCdWIyNHRaV3hsYldWdWRDQnViMlJsY3lCcGJpQnRiMlJsY200Z1luSnZkM05sY25Nc1hHNWNkRngwWEhRdkx5QmlkWFFnZDJVZ2MyaHZkV3hrSUc1dmRDd2djMlZsSUNNNE16TTFMbHh1WEhSY2RGeDBMeThnUVd4M1lYbHpJSEpsZEhWeWJpQmhiaUJsYlhCMGVTQnZZbXBsWTNRdVhHNWNkRngwWEhScFppQW9JR0ZqWTJWd2RFUmhkR0VvSUc5M2JtVnlJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ2FYUWdhWE1nWVNCdWIyUmxJSFZ1YkdsclpXeDVJSFJ2SUdKbElITjBjbWx1WjJsbWVTMWxaQ0J2Y2lCc2IyOXdaV1FnYjNabGNseHVYSFJjZEZ4MFhIUXZMeUIxYzJVZ2NHeGhhVzRnWVhOemFXZHViV1Z1ZEZ4dVhIUmNkRngwWEhScFppQW9JRzkzYm1WeUxtNXZaR1ZVZVhCbElDa2dlMXh1WEhSY2RGeDBYSFJjZEc5M2JtVnlXeUIwYUdsekxtVjRjR0Z1Wkc4Z1hTQTlJSFpoYkhWbE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUU5MGFHVnlkMmx6WlNCelpXTjFjbVVnYVhRZ2FXNGdZU0J1YjI0dFpXNTFiV1Z5WVdKc1pTQndjbTl3WlhKMGVWeHVYSFJjZEZ4MFhIUXZMeUJqYjI1bWFXZDFjbUZpYkdVZ2JYVnpkQ0JpWlNCMGNuVmxJSFJ2SUdGc2JHOTNJSFJvWlNCd2NtOXdaWEowZVNCMGJ5QmlaVnh1WEhSY2RGeDBYSFF2THlCa1pXeGxkR1ZrSUhkb1pXNGdaR0YwWVNCcGN5QnlaVzF2ZG1Wa1hHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0NCdmQyNWxjaXdnZEdocGN5NWxlSEJoYm1SdkxDQjdYRzVjZEZ4MFhIUmNkRngwWEhSMllXeDFaVG9nZG1Gc2RXVXNYRzVjZEZ4MFhIUmNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWY2JseDBYSFJjZEZ4MFhIUjlJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdkbUZzZFdVN1hHNWNkSDBzWEc1Y2RITmxkRG9nWm5WdVkzUnBiMjRvSUc5M2JtVnlMQ0JrWVhSaExDQjJZV3gxWlNBcElIdGNibHgwWEhSMllYSWdjSEp2Y0N4Y2JseDBYSFJjZEdOaFkyaGxJRDBnZEdocGN5NWpZV05vWlNnZ2IzZHVaWElnS1R0Y2JseHVYSFJjZEM4dklFaGhibVJzWlRvZ1d5QnZkMjVsY2l3Z2EyVjVMQ0IyWVd4MVpTQmRJR0Z5WjNOY2JseDBYSFF2THlCQmJIZGhlWE1nZFhObElHTmhiV1ZzUTJGelpTQnJaWGtnS0dkb0xUSXlOVGNwWEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnWkdGMFlTQTlQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RHTmhZMmhsV3lCallXMWxiRU5oYzJVb0lHUmhkR0VnS1NCZElEMGdkbUZzZFdVN1hHNWNibHgwWEhRdkx5QklZVzVrYkdVNklGc2diM2R1WlhJc0lIc2djSEp2Y0dWeWRHbGxjeUI5SUYwZ1lYSm5jMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNibHgwWEhSY2RDOHZJRU52Y0hrZ2RHaGxJSEJ5YjNCbGNuUnBaWE1nYjI1bExXSjVMVzl1WlNCMGJ5QjBhR1VnWTJGamFHVWdiMkpxWldOMFhHNWNkRngwWEhSbWIzSWdLQ0J3Y205d0lHbHVJR1JoZEdFZ0tTQjdYRzVjZEZ4MFhIUmNkR05oWTJobFd5QmpZVzFsYkVOaGMyVW9JSEJ5YjNBZ0tTQmRJRDBnWkdGMFlWc2djSEp2Y0NCZE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBYSFJ5WlhSMWNtNGdZMkZqYUdVN1hHNWNkSDBzWEc1Y2RHZGxkRG9nWm5WdVkzUnBiMjRvSUc5M2JtVnlMQ0JyWlhrZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUd0bGVTQTlQVDBnZFc1a1pXWnBibVZrSUQ5Y2JseDBYSFJjZEhSb2FYTXVZMkZqYUdVb0lHOTNibVZ5SUNrZ09seHVYRzVjZEZ4MFhIUXZMeUJCYkhkaGVYTWdkWE5sSUdOaGJXVnNRMkZ6WlNCclpYa2dLR2RvTFRJeU5UY3BYRzVjZEZ4MFhIUnZkMjVsY2xzZ2RHaHBjeTVsZUhCaGJtUnZJRjBnSmlZZ2IzZHVaWEpiSUhSb2FYTXVaWGh3WVc1a2J5QmRXeUJqWVcxbGJFTmhjMlVvSUd0bGVTQXBJRjA3WEc1Y2RIMHNYRzVjZEdGalkyVnpjem9nWm5WdVkzUnBiMjRvSUc5M2JtVnlMQ0JyWlhrc0lIWmhiSFZsSUNrZ2UxeHVYRzVjZEZ4MEx5OGdTVzRnWTJGelpYTWdkMmhsY21VZ1pXbDBhR1Z5T2x4dVhIUmNkQzh2WEc1Y2RGeDBMeThnSUNBeExpQk9ieUJyWlhrZ2QyRnpJSE53WldOcFptbGxaRnh1WEhSY2RDOHZJQ0FnTWk0Z1FTQnpkSEpwYm1jZ2EyVjVJSGRoY3lCemNHVmphV1pwWldRc0lHSjFkQ0J1YnlCMllXeDFaU0J3Y205MmFXUmxaRnh1WEhSY2RDOHZYRzVjZEZ4MEx5OGdWR0ZyWlNCMGFHVWdYQ0p5WldGa1hDSWdjR0YwYUNCaGJtUWdZV3hzYjNjZ2RHaGxJR2RsZENCdFpYUm9iMlFnZEc4Z1pHVjBaWEp0YVc1bFhHNWNkRngwTHk4Z2QyaHBZMmdnZG1Gc2RXVWdkRzhnY21WMGRYSnVMQ0J5WlhOd1pXTjBhWFpsYkhrZ1pXbDBhR1Z5T2x4dVhIUmNkQzh2WEc1Y2RGeDBMeThnSUNBeExpQlVhR1VnWlc1MGFYSmxJR05oWTJobElHOWlhbVZqZEZ4dVhIUmNkQzh2SUNBZ01pNGdWR2hsSUdSaGRHRWdjM1J2Y21Wa0lHRjBJSFJvWlNCclpYbGNibHgwWEhRdkwxeHVYSFJjZEdsbUlDZ2dhMlY1SUQwOVBTQjFibVJsWm1sdVpXUWdmSHhjYmx4MFhIUmNkRngwS0NBb0lHdGxlU0FtSmlCMGVYQmxiMllnYTJWNUlEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ0ppWWdkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjeTVuWlhRb0lHOTNibVZ5TENCclpYa2dLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJYYUdWdUlIUm9aU0JyWlhrZ2FYTWdibTkwSUdFZ2MzUnlhVzVuTENCdmNpQmliM1JvSUdFZ2EyVjVJR0Z1WkNCMllXeDFaVnh1WEhSY2RDOHZJR0Z5WlNCemNHVmphV1pwWldRc0lITmxkQ0J2Y2lCbGVIUmxibVFnS0dWNGFYTjBhVzVuSUc5aWFtVmpkSE1wSUhkcGRHZ2daV2wwYUdWeU9seHVYSFJjZEM4dlhHNWNkRngwTHk4Z0lDQXhMaUJCYmlCdlltcGxZM1FnYjJZZ2NISnZjR1Z5ZEdsbGMxeHVYSFJjZEM4dklDQWdNaTRnUVNCclpYa2dZVzVrSUhaaGJIVmxYRzVjZEZ4MEx5OWNibHgwWEhSMGFHbHpMbk5sZENnZ2IzZHVaWElzSUd0bGVTd2dkbUZzZFdVZ0tUdGNibHh1WEhSY2RDOHZJRk5wYm1ObElIUm9aU0JjSW5ObGRGd2lJSEJoZEdnZ1kyRnVJR2hoZG1VZ2RIZHZJSEJ2YzNOcFlteGxJR1Z1ZEhKNUlIQnZhVzUwYzF4dVhIUmNkQzh2SUhKbGRIVnliaUIwYUdVZ1pYaHdaV04wWldRZ1pHRjBZU0JpWVhObFpDQnZiaUIzYUdsamFDQndZWFJvSUhkaGN5QjBZV3RsYmxzcVhWeHVYSFJjZEhKbGRIVnliaUIyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUQ4Z2RtRnNkV1VnT2lCclpYazdYRzVjZEgwc1hHNWNkSEpsYlc5MlpUb2dablZ1WTNScGIyNG9JRzkzYm1WeUxDQnJaWGtnS1NCN1hHNWNkRngwZG1GeUlHa3NYRzVjZEZ4MFhIUmpZV05vWlNBOUlHOTNibVZ5V3lCMGFHbHpMbVY0Y0dGdVpHOGdYVHRjYmx4dVhIUmNkR2xtSUNnZ1kyRmphR1VnUFQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9JR3RsZVNBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKMElHRnljbUY1SUc5eUlITndZV05sSUhObGNHRnlZWFJsWkNCemRISnBibWNnYjJZZ2EyVjVjMXh1WEhSY2RGeDBhV1lnS0NCQmNuSmhlUzVwYzBGeWNtRjVLQ0JyWlhrZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QkpaaUJyWlhrZ2FYTWdZVzRnWVhKeVlYa2diMllnYTJWNWN5NHVMbHh1WEhSY2RGeDBYSFF2THlCWFpTQmhiSGRoZVhNZ2MyVjBJR05oYldWc1EyRnpaU0JyWlhsekxDQnpieUJ5WlcxdmRtVWdkR2hoZEM1Y2JseDBYSFJjZEZ4MGEyVjVJRDBnYTJWNUxtMWhjQ2dnWTJGdFpXeERZWE5sSUNrN1hHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSclpYa2dQU0JqWVcxbGJFTmhjMlVvSUd0bGVTQXBPMXh1WEc1Y2RGeDBYSFJjZEM4dklFbG1JR0VnYTJWNUlIZHBkR2dnZEdobElITndZV05sY3lCbGVHbHpkSE1zSUhWelpTQnBkQzVjYmx4MFhIUmNkRngwTHk4Z1QzUm9aWEozYVhObExDQmpjbVZoZEdVZ1lXNGdZWEp5WVhrZ1lua2diV0YwWTJocGJtY2dibTl1TFhkb2FYUmxjM0JoWTJWY2JseDBYSFJjZEZ4MGEyVjVJRDBnYTJWNUlHbHVJR05oWTJobElEOWNibHgwWEhSY2RGeDBYSFJiSUd0bGVTQmRJRHBjYmx4MFhIUmNkRngwWEhRb0lHdGxlUzV0WVhSamFDZ2djbTV2ZEdoMGJXeDNhR2wwWlNBcElIeDhJRnRkSUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHa2dQU0JyWlhrdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSM2FHbHNaU0FvSUdrdExTQXBJSHRjYmx4MFhIUmNkRngwWkdWc1pYUmxJR05oWTJobFd5QnJaWGxiSUdrZ1hTQmRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRkpsYlc5MlpTQjBhR1VnWlhod1lXNWtieUJwWmlCMGFHVnlaU2R6SUc1dklHMXZjbVVnWkdGMFlWeHVYSFJjZEdsbUlDZ2dhMlY1SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnYWxGMVpYSjVMbWx6Ulcxd2RIbFBZbXBsWTNRb0lHTmhZMmhsSUNrZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVOb2NtOXRaU0E4UFRNMUlDMGdORFZjYmx4MFhIUmNkQzh2SUZkbFltdHBkQ0FtSUVKc2FXNXJJSEJsY21admNtMWhibU5sSUhOMVptWmxjbk1nZDJobGJpQmtaV3hsZEdsdVp5QndjbTl3WlhKMGFXVnpYRzVjZEZ4MFhIUXZMeUJtY205dElFUlBUU0J1YjJSbGN5d2djMjhnYzJWMElIUnZJSFZ1WkdWbWFXNWxaQ0JwYm5OMFpXRmtYRzVjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMMkoxWjNNdVkyaHliMjFwZFcwdWIzSm5MM0F2WTJoeWIyMXBkVzB2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDB6TnpnMk1EY2dLR0oxWnlCeVpYTjBjbWxqZEdWa0tWeHVYSFJjZEZ4MGFXWWdLQ0J2ZDI1bGNpNXViMlJsVkhsd1pTQXBJSHRjYmx4MFhIUmNkRngwYjNkdVpYSmJJSFJvYVhNdVpYaHdZVzVrYnlCZElEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBaR1ZzWlhSbElHOTNibVZ5V3lCMGFHbHpMbVY0Y0dGdVpHOGdYVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgwc1hHNWNkR2hoYzBSaGRHRTZJR1oxYm1OMGFXOXVLQ0J2ZDI1bGNpQXBJSHRjYmx4MFhIUjJZWElnWTJGamFHVWdQU0J2ZDI1bGNsc2dkR2hwY3k1bGVIQmhibVJ2SUYwN1hHNWNkRngwY21WMGRYSnVJR05oWTJobElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ0lXcFJkV1Z5ZVM1cGMwVnRjSFI1VDJKcVpXTjBLQ0JqWVdOb1pTQXBPMXh1WEhSOVhHNTlPMXh1ZG1GeUlHUmhkR0ZRY21sMklEMGdibVYzSUVSaGRHRW9LVHRjYmx4dWRtRnlJR1JoZEdGVmMyVnlJRDBnYm1WM0lFUmhkR0VvS1R0Y2JseHVYRzVjYmk4dlhIUkpiWEJzWlcxbGJuUmhkR2x2YmlCVGRXMXRZWEo1WEc0dkwxeHVMeTljZERFdUlFVnVabTl5WTJVZ1FWQkpJSE4xY21aaFkyVWdZVzVrSUhObGJXRnVkR2xqSUdOdmJYQmhkR2xpYVd4cGRIa2dkMmwwYUNBeExqa3VlQ0JpY21GdVkyaGNiaTh2WEhReUxpQkpiWEJ5YjNabElIUm9aU0J0YjJSMWJHVW5jeUJ0WVdsdWRHRnBibUZpYVd4cGRIa2dZbmtnY21Wa2RXTnBibWNnZEdobElITjBiM0poWjJWY2JpOHZYSFJjZEhCaGRHaHpJSFJ2SUdFZ2MybHVaMnhsSUcxbFkyaGhibWx6YlM1Y2JpOHZYSFF6TGlCVmMyVWdkR2hsSUhOaGJXVWdjMmx1WjJ4bElHMWxZMmhoYm1semJTQjBieUJ6ZFhCd2IzSjBJRndpY0hKcGRtRjBaVndpSUdGdVpDQmNJblZ6WlhKY0lpQmtZWFJoTGx4dUx5OWNkRFF1SUY5T1pYWmxjbDhnWlhod2IzTmxJRndpY0hKcGRtRjBaVndpSUdSaGRHRWdkRzhnZFhObGNpQmpiMlJsSUNoVVQwUlBPaUJFY205d0lGOWtZWFJoTENCZmNtVnRiM1psUkdGMFlTbGNiaTh2WEhRMUxpQkJkbTlwWkNCbGVIQnZjMmx1WnlCcGJYQnNaVzFsYm5SaGRHbHZiaUJrWlhSaGFXeHpJRzl1SUhWelpYSWdiMkpxWldOMGN5QW9aV2N1SUdWNGNHRnVaRzhnY0hKdmNHVnlkR2xsY3lsY2JpOHZYSFEyTGlCUWNtOTJhV1JsSUdFZ1kyeGxZWElnY0dGMGFDQm1iM0lnYVcxd2JHVnRaVzUwWVhScGIyNGdkWEJuY21Ga1pTQjBieUJYWldGclRXRndJR2x1SURJd01UUmNibHh1ZG1GeUlISmljbUZqWlNBOUlDOWVLRDg2WEZ4N1cxeGNkMXhjVjEwcVhGeDlmRnhjVzF0Y1hIZGNYRmRkS2x4Y1hTa2tMeXhjYmx4MGNtMTFiSFJwUkdGemFDQTlJQzliUVMxYVhTOW5PMXh1WEc1bWRXNWpkR2x2YmlCblpYUkVZWFJoS0NCa1lYUmhJQ2tnZTF4dVhIUnBaaUFvSUdSaGRHRWdQVDA5SUZ3aWRISjFaVndpSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFI5WEc1Y2JseDBhV1lnS0NCa1lYUmhJRDA5UFNCY0ltWmhiSE5sWENJZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSOVhHNWNibHgwYVdZZ0tDQmtZWFJoSUQwOVBTQmNJbTUxYkd4Y0lpQXBJSHRjYmx4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmx4MGZWeHVYRzVjZEM4dklFOXViSGtnWTI5dWRtVnlkQ0IwYnlCaElHNTFiV0psY2lCcFppQnBkQ0JrYjJWemJpZDBJR05vWVc1blpTQjBhR1VnYzNSeWFXNW5YRzVjZEdsbUlDZ2daR0YwWVNBOVBUMGdLMlJoZEdFZ0t5QmNJbHdpSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUFyWkdGMFlUdGNibHgwZlZ4dVhHNWNkR2xtSUNnZ2NtSnlZV05sTG5SbGMzUW9JR1JoZEdFZ0tTQXBJSHRjYmx4MFhIUnlaWFIxY200Z1NsTlBUaTV3WVhKelpTZ2daR0YwWVNBcE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHUmhkR0U3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JoZEdGQmRIUnlLQ0JsYkdWdExDQnJaWGtzSUdSaGRHRWdLU0I3WEc1Y2RIWmhjaUJ1WVcxbE8xeHVYRzVjZEM4dklFbG1JRzV2ZEdocGJtY2dkMkZ6SUdadmRXNWtJR2x1ZEdWeWJtRnNiSGtzSUhSeWVTQjBieUJtWlhSamFDQmhibmxjYmx4MEx5OGdaR0YwWVNCbWNtOXRJSFJvWlNCSVZFMU1OU0JrWVhSaExTb2dZWFIwY21saWRYUmxYRzVjZEdsbUlDZ2daR0YwWVNBOVBUMGdkVzVrWldacGJtVmtJQ1ltSUdWc1pXMHVibTlrWlZSNWNHVWdQVDA5SURFZ0tTQjdYRzVjZEZ4MGJtRnRaU0E5SUZ3aVpHRjBZUzFjSWlBcklHdGxlUzV5WlhCc1lXTmxLQ0J5YlhWc2RHbEVZWE5vTENCY0lpMGtKbHdpSUNrdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4MFhIUmtZWFJoSUQwZ1pXeGxiUzVuWlhSQmRIUnlhV0oxZEdVb0lHNWhiV1VnS1R0Y2JseHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlHUmhkR0VnUFQwOUlGd2ljM1J5YVc1blhDSWdLU0I3WEc1Y2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUmtZWFJoSUQwZ1oyVjBSR0YwWVNnZ1pHRjBZU0FwTzF4dVhIUmNkRngwZlNCallYUmphQ0FvSUdVZ0tTQjdmVnh1WEc1Y2RGeDBYSFF2THlCTllXdGxJSE4xY21VZ2QyVWdjMlYwSUhSb1pTQmtZWFJoSUhOdklHbDBJR2x6YmlkMElHTm9ZVzVuWldRZ2JHRjBaWEpjYmx4MFhIUmNkR1JoZEdGVmMyVnlMbk5sZENnZ1pXeGxiU3dnYTJWNUxDQmtZWFJoSUNrN1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkR1JoZEdFZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2RISmxkSFZ5YmlCa1lYUmhPMXh1ZlZ4dVhHNXFVWFZsY25rdVpYaDBaVzVrS0NCN1hHNWNkR2hoYzBSaGRHRTZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCa1lYUmhWWE5sY2k1b1lYTkVZWFJoS0NCbGJHVnRJQ2tnZkh3Z1pHRjBZVkJ5YVhZdWFHRnpSR0YwWVNnZ1pXeGxiU0FwTzF4dVhIUjlMRnh1WEc1Y2RHUmhkR0U2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0J1WVcxbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJrWVhSaFZYTmxjaTVoWTJObGMzTW9JR1ZzWlcwc0lHNWhiV1VzSUdSaGRHRWdLVHRjYmx4MGZTeGNibHh1WEhSeVpXMXZkbVZFWVhSaE9pQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z2JtRnRaU0FwSUh0Y2JseDBYSFJrWVhSaFZYTmxjaTV5WlcxdmRtVW9JR1ZzWlcwc0lHNWhiV1VnS1R0Y2JseDBmU3hjYmx4dVhIUXZMeUJVVDBSUE9pQk9iM2NnZEdoaGRDQmhiR3dnWTJGc2JITWdkRzhnWDJSaGRHRWdZVzVrSUY5eVpXMXZkbVZFWVhSaElHaGhkbVVnWW1WbGJpQnlaWEJzWVdObFpGeHVYSFF2THlCM2FYUm9JR1JwY21WamRDQmpZV3hzY3lCMGJ5QmtZWFJoVUhKcGRpQnRaWFJvYjJSekxDQjBhR1Z6WlNCallXNGdZbVVnWkdWd2NtVmpZWFJsWkM1Y2JseDBYMlJoZEdFNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCdVlXMWxMQ0JrWVhSaElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCa1lYUmhVSEpwZGk1aFkyTmxjM01vSUdWc1pXMHNJRzVoYldVc0lHUmhkR0VnS1R0Y2JseDBmU3hjYmx4dVhIUmZjbVZ0YjNabFJHRjBZVG9nWm5WdVkzUnBiMjRvSUdWc1pXMHNJRzVoYldVZ0tTQjdYRzVjZEZ4MFpHRjBZVkJ5YVhZdWNtVnRiM1psS0NCbGJHVnRMQ0J1WVcxbElDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1adUxtVjRkR1Z1WkNnZ2UxeHVYSFJrWVhSaE9pQm1kVzVqZEdsdmJpZ2dhMlY1TENCMllXeDFaU0FwSUh0Y2JseDBYSFIyWVhJZ2FTd2dibUZ0WlN3Z1pHRjBZU3hjYmx4MFhIUmNkR1ZzWlcwZ1BTQjBhR2x6V3lBd0lGMHNYRzVjZEZ4MFhIUmhkSFJ5Y3lBOUlHVnNaVzBnSmlZZ1pXeGxiUzVoZEhSeWFXSjFkR1Z6TzF4dVhHNWNkRngwTHk4Z1IyVjBjeUJoYkd3Z2RtRnNkV1Z6WEc1Y2RGeDBhV1lnS0NCclpYa2dQVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnZEdocGN5NXNaVzVuZEdnZ0tTQjdYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoVlhObGNpNW5aWFFvSUdWc1pXMGdLVHRjYmx4dVhIUmNkRngwWEhScFppQW9JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnSmlZZ0lXUmhkR0ZRY21sMkxtZGxkQ2dnWld4bGJTd2dYQ0pvWVhORVlYUmhRWFIwY25OY0lpQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RHa2dQU0JoZEhSeWN5NXNaVzVuZEdnN1hHNWNkRngwWEhSY2RGeDBkMmhwYkdVZ0tDQnBMUzBnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJREV4SUc5dWJIbGNibHgwWEhSY2RGeDBYSFJjZEM4dklGUm9aU0JoZEhSeWN5QmxiR1Z0Wlc1MGN5QmpZVzRnWW1VZ2JuVnNiQ0FvSXpFME9EazBLVnh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JoZEhSeWMxc2dhU0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSdVlXMWxJRDBnWVhSMGNuTmJJR2tnWFM1dVlXMWxPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUc1aGJXVXVhVzVrWlhoUFppZ2dYQ0prWVhSaExWd2lJQ2tnUFQwOUlEQWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYm1GdFpTQTlJR05oYldWc1EyRnpaU2dnYm1GdFpTNXpiR2xqWlNnZ05TQXBJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWkdGMFlVRjBkSElvSUdWc1pXMHNJRzVoYldVc0lHUmhkR0ZiSUc1aGJXVWdYU0FwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RHUmhkR0ZRY21sMkxuTmxkQ2dnWld4bGJTd2dYQ0pvWVhORVlYUmhRWFIwY25OY0lpd2dkSEoxWlNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQmtZWFJoTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZObGRITWdiWFZzZEdsd2JHVWdkbUZzZFdWelhHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ2EyVjVJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEdSaGRHRlZjMlZ5TG5ObGRDZ2dkR2hwY3l3Z2EyVjVJQ2s3WEc1Y2RGeDBYSFI5SUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR0ZqWTJWemN5Z2dkR2hwY3l3Z1puVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MGRtRnlJR1JoZEdFN1hHNWNibHgwWEhSY2RDOHZJRlJvWlNCallXeHNhVzVuSUdwUmRXVnllU0J2WW1wbFkzUWdLR1ZzWlcxbGJuUWdiV0YwWTJobGN5a2dhWE1nYm05MElHVnRjSFI1WEc1Y2RGeDBYSFF2THlBb1lXNWtJSFJvWlhKbFptOXlaU0JvWVhNZ1lXNGdaV3hsYldWdWRDQmhjSEJsWVhKeklHRjBJSFJvYVhOYklEQWdYU2tnWVc1a0lIUm9aVnh1WEhSY2RGeDBMeThnWUhaaGJIVmxZQ0J3WVhKaGJXVjBaWElnZDJGeklHNXZkQ0IxYm1SbFptbHVaV1F1SUVGdUlHVnRjSFI1SUdwUmRXVnllU0J2WW1wbFkzUmNibHgwWEhSY2RDOHZJSGRwYkd3Z2NtVnpkV3gwSUdsdUlHQjFibVJsWm1sdVpXUmdJR1p2Y2lCbGJHVnRJRDBnZEdocGMxc2dNQ0JkSUhkb2FXTm9JSGRwYkd4Y2JseDBYSFJjZEM4dklIUm9jbTkzSUdGdUlHVjRZMlZ3ZEdsdmJpQnBaaUJoYmlCaGRIUmxiWEIwSUhSdklISmxZV1FnWVNCa1lYUmhJR05oWTJobElHbHpJRzFoWkdVdVhHNWNkRngwWEhScFppQW9JR1ZzWlcwZ0ppWWdkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJCZEhSbGJYQjBJSFJ2SUdkbGRDQmtZWFJoSUdaeWIyMGdkR2hsSUdOaFkyaGxYRzVjZEZ4MFhIUmNkQzh2SUZSb1pTQnJaWGtnZDJsc2JDQmhiSGRoZVhNZ1ltVWdZMkZ0Wld4RFlYTmxaQ0JwYmlCRVlYUmhYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoVlhObGNpNW5aWFFvSUdWc1pXMHNJR3RsZVNBcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSUdSaGRHRWdJVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdaR0YwWVR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkQzh2SUVGMGRHVnRjSFFnZEc4Z1hDSmthWE5qYjNabGNsd2lJSFJvWlNCa1lYUmhJR2x1WEc1Y2RGeDBYSFJjZEM4dklFaFVUVXcxSUdOMWMzUnZiU0JrWVhSaExTb2dZWFIwY25OY2JseDBYSFJjZEZ4MFpHRjBZU0E5SUdSaGRHRkJkSFJ5S0NCbGJHVnRMQ0JyWlhrZ0tUdGNibHgwWEhSY2RGeDBhV1lnS0NCa1lYUmhJQ0U5UFNCMWJtUmxabWx1WldRZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1JoZEdFN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCWFpTQjBjbWxsWkNCeVpXRnNiSGtnYUdGeVpDd2dZblYwSUhSb1pTQmtZWFJoSUdSdlpYTnVKM1FnWlhocGMzUXVYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVTJWMElIUm9aU0JrWVhSaExpNHVYRzVjZEZ4MFhIUjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRmRsSUdGc2QyRjVjeUJ6ZEc5eVpTQjBhR1VnWTJGdFpXeERZWE5sWkNCclpYbGNibHgwWEhSY2RGeDBaR0YwWVZWelpYSXVjMlYwS0NCMGFHbHpMQ0JyWlhrc0lIWmhiSFZsSUNrN1hHNWNkRngwWEhSOUlDazdYRzVjZEZ4MGZTd2diblZzYkN3Z2RtRnNkV1VzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeExDQnVkV3hzTENCMGNuVmxJQ2s3WEc1Y2RIMHNYRzVjYmx4MGNtVnRiM1psUkdGMFlUb2dablZ1WTNScGIyNG9JR3RsZVNBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHUmhkR0ZWYzJWeUxuSmxiVzkyWlNnZ2RHaHBjeXdnYTJWNUlDazdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JseHVhbEYxWlhKNUxtVjRkR1Z1WkNnZ2UxeHVYSFJ4ZFdWMVpUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lIUjVjR1VzSUdSaGRHRWdLU0I3WEc1Y2RGeDBkbUZ5SUhGMVpYVmxPMXh1WEc1Y2RGeDBhV1lnS0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwZEhsd1pTQTlJQ2dnZEhsd1pTQjhmQ0JjSW1aNFhDSWdLU0FySUZ3aWNYVmxkV1ZjSWp0Y2JseDBYSFJjZEhGMVpYVmxJRDBnWkdGMFlWQnlhWFl1WjJWMEtDQmxiR1Z0TENCMGVYQmxJQ2s3WEc1Y2JseDBYSFJjZEM4dklGTndaV1ZrSUhWd0lHUmxjWFZsZFdVZ1lua2daMlYwZEdsdVp5QnZkWFFnY1hWcFkydHNlU0JwWmlCMGFHbHpJR2x6SUdwMWMzUWdZU0JzYjI5cmRYQmNibHgwWEhSY2RHbG1JQ2dnWkdGMFlTQXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQWhjWFZsZFdVZ2ZId2dRWEp5WVhrdWFYTkJjbkpoZVNnZ1pHRjBZU0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEYxWlhWbElEMGdaR0YwWVZCeWFYWXVZV05qWlhOektDQmxiR1Z0TENCMGVYQmxMQ0JxVVhWbGNua3ViV0ZyWlVGeWNtRjVLQ0JrWVhSaElDa2dLVHRjYmx4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhSeGRXVjFaUzV3ZFhOb0tDQmtZWFJoSUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSY2RISmxkSFZ5YmlCeGRXVjFaU0I4ZkNCYlhUdGNibHgwWEhSOVhHNWNkSDBzWEc1Y2JseDBaR1Z4ZFdWMVpUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lIUjVjR1VnS1NCN1hHNWNkRngwZEhsd1pTQTlJSFI1Y0dVZ2ZId2dYQ0ptZUZ3aU8xeHVYRzVjZEZ4MGRtRnlJSEYxWlhWbElEMGdhbEYxWlhKNUxuRjFaWFZsS0NCbGJHVnRMQ0IwZVhCbElDa3NYRzVjZEZ4MFhIUnpkR0Z5ZEV4bGJtZDBhQ0E5SUhGMVpYVmxMbXhsYm1kMGFDeGNibHgwWEhSY2RHWnVJRDBnY1hWbGRXVXVjMmhwWm5Rb0tTeGNibHgwWEhSY2RHaHZiMnR6SUQwZ2FsRjFaWEo1TGw5eGRXVjFaVWh2YjJ0ektDQmxiR1Z0TENCMGVYQmxJQ2tzWEc1Y2RGeDBYSFJ1WlhoMElEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEdwUmRXVnllUzVrWlhGMVpYVmxLQ0JsYkdWdExDQjBlWEJsSUNrN1hHNWNkRngwWEhSOU8xeHVYRzVjZEZ4MEx5OGdTV1lnZEdobElHWjRJSEYxWlhWbElHbHpJR1JsY1hWbGRXVmtMQ0JoYkhkaGVYTWdjbVZ0YjNabElIUm9aU0J3Y205bmNtVnpjeUJ6Wlc1MGFXNWxiRnh1WEhSY2RHbG1JQ2dnWm00Z1BUMDlJRndpYVc1d2NtOW5jbVZ6YzF3aUlDa2dlMXh1WEhSY2RGeDBabTRnUFNCeGRXVjFaUzV6YUdsbWRDZ3BPMXh1WEhSY2RGeDBjM1JoY25STVpXNW5kR2d0TFR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHWnVJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkJaR1FnWVNCd2NtOW5jbVZ6Y3lCelpXNTBhVzVsYkNCMGJ5QndjbVYyWlc1MElIUm9aU0JtZUNCeGRXVjFaU0JtY205dElHSmxhVzVuWEc1Y2RGeDBYSFF2THlCaGRYUnZiV0YwYVdOaGJHeDVJR1JsY1hWbGRXVmtYRzVjZEZ4MFhIUnBaaUFvSUhSNWNHVWdQVDA5SUZ3aVpuaGNJaUFwSUh0Y2JseDBYSFJjZEZ4MGNYVmxkV1V1ZFc1emFHbG1kQ2dnWENKcGJuQnliMmR5WlhOelhDSWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1EyeGxZWElnZFhBZ2RHaGxJR3hoYzNRZ2NYVmxkV1VnYzNSdmNDQm1kVzVqZEdsdmJseHVYSFJjZEZ4MFpHVnNaWFJsSUdodmIydHpMbk4wYjNBN1hHNWNkRngwWEhSbWJpNWpZV3hzS0NCbGJHVnRMQ0J1WlhoMExDQm9iMjlyY3lBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2dJWE4wWVhKMFRHVnVaM1JvSUNZbUlHaHZiMnR6SUNrZ2UxeHVYSFJjZEZ4MGFHOXZhM011Wlcxd2RIa3VabWx5WlNncE8xeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUXZMeUJPYjNRZ2NIVmliR2xqSUMwZ1oyVnVaWEpoZEdVZ1lTQnhkV1YxWlVodmIydHpJRzlpYW1WamRDd2diM0lnY21WMGRYSnVJSFJvWlNCamRYSnlaVzUwSUc5dVpWeHVYSFJmY1hWbGRXVkliMjlyY3pvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhSNWNHVWdLU0I3WEc1Y2RGeDBkbUZ5SUd0bGVTQTlJSFI1Y0dVZ0t5QmNJbkYxWlhWbFNHOXZhM05jSWp0Y2JseDBYSFJ5WlhSMWNtNGdaR0YwWVZCeWFYWXVaMlYwS0NCbGJHVnRMQ0JyWlhrZ0tTQjhmQ0JrWVhSaFVISnBkaTVoWTJObGMzTW9JR1ZzWlcwc0lHdGxlU3dnZTF4dVhIUmNkRngwWlcxd2RIazZJR3BSZFdWeWVTNURZV3hzWW1GamEzTW9JRndpYjI1alpTQnRaVzF2Y25sY0lpQXBMbUZrWkNnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkR1JoZEdGUWNtbDJMbkpsYlc5MlpTZ2daV3hsYlN3Z1d5QjBlWEJsSUNzZ1hDSnhkV1YxWlZ3aUxDQnJaWGtnWFNBcE8xeHVYSFJjZEZ4MGZTQXBYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwY1hWbGRXVTZJR1oxYm1OMGFXOXVLQ0IwZVhCbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhaaGNpQnpaWFIwWlhJZ1BTQXlPMXh1WEc1Y2RGeDBhV1lnS0NCMGVYQmxiMllnZEhsd1pTQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RHUmhkR0VnUFNCMGVYQmxPMXh1WEhSY2RGeDBkSGx3WlNBOUlGd2labmhjSWp0Y2JseDBYSFJjZEhObGRIUmxjaTB0TzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBOElITmxkSFJsY2lBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCcVVYVmxjbmt1Y1hWbGRXVW9JSFJvYVhOYklEQWdYU3dnZEhsd1pTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCa1lYUmhJRDA5UFNCMWJtUmxabWx1WldRZ1AxeHVYSFJjZEZ4MGRHaHBjeUE2WEc1Y2RGeDBYSFIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnY1hWbGRXVWdQU0JxVVhWbGNua3VjWFZsZFdVb0lIUm9hWE1zSUhSNWNHVXNJR1JoZEdFZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCRmJuTjFjbVVnWVNCb2IyOXJjeUJtYjNJZ2RHaHBjeUJ4ZFdWMVpWeHVYSFJjZEZ4MFhIUnFVWFZsY25rdVgzRjFaWFZsU0c5dmEzTW9JSFJvYVhNc0lIUjVjR1VnS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUhSNWNHVWdQVDA5SUZ3aVpuaGNJaUFtSmlCeGRXVjFaVnNnTUNCZElDRTlQU0JjSW1sdWNISnZaM0psYzNOY0lpQXBJSHRjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1WkdWeGRXVjFaU2dnZEdocGN5d2dkSGx3WlNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlJQ2s3WEc1Y2RIMHNYRzVjZEdSbGNYVmxkV1U2SUdaMWJtTjBhVzl1S0NCMGVYQmxJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVMbVJsY1hWbGRXVW9JSFJvYVhNc0lIUjVjR1VnS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDBzWEc1Y2RHTnNaV0Z5VVhWbGRXVTZJR1oxYm1OMGFXOXVLQ0IwZVhCbElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbkYxWlhWbEtDQjBlWEJsSUh4OElGd2labmhjSWl3Z1cxMGdLVHRjYmx4MGZTeGNibHh1WEhRdkx5QkhaWFFnWVNCd2NtOXRhWE5sSUhKbGMyOXNkbVZrSUhkb1pXNGdjWFZsZFdWeklHOW1JR0VnWTJWeWRHRnBiaUIwZVhCbFhHNWNkQzh2SUdGeVpTQmxiWEIwYVdWa0lDaG1lQ0JwY3lCMGFHVWdkSGx3WlNCaWVTQmtaV1poZFd4MEtWeHVYSFJ3Y205dGFYTmxPaUJtZFc1amRHbHZiaWdnZEhsd1pTd2diMkpxSUNrZ2UxeHVYSFJjZEhaaGNpQjBiWEFzWEc1Y2RGeDBYSFJqYjNWdWRDQTlJREVzWEc1Y2RGeDBYSFJrWldabGNpQTlJR3BSZFdWeWVTNUVaV1psY25KbFpDZ3BMRnh1WEhSY2RGeDBaV3hsYldWdWRITWdQU0IwYUdsekxGeHVYSFJjZEZ4MGFTQTlJSFJvYVhNdWJHVnVaM1JvTEZ4dVhIUmNkRngwY21WemIyeDJaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUNFb0lDMHRZMjkxYm5RZ0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSa1pXWmxjaTV5WlhOdmJIWmxWMmwwYUNnZ1pXeGxiV1Z1ZEhNc0lGc2daV3hsYldWdWRITWdYU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOU8xeHVYRzVjZEZ4MGFXWWdLQ0IwZVhCbGIyWWdkSGx3WlNBaFBUMGdYQ0p6ZEhKcGJtZGNJaUFwSUh0Y2JseDBYSFJjZEc5aWFpQTlJSFI1Y0dVN1hHNWNkRngwWEhSMGVYQmxJRDBnZFc1a1pXWnBibVZrTzF4dVhIUmNkSDFjYmx4MFhIUjBlWEJsSUQwZ2RIbHdaU0I4ZkNCY0ltWjRYQ0k3WEc1Y2JseDBYSFIzYUdsc1pTQW9JR2t0TFNBcElIdGNibHgwWEhSY2RIUnRjQ0E5SUdSaGRHRlFjbWwyTG1kbGRDZ2daV3hsYldWdWRITmJJR2tnWFN3Z2RIbHdaU0FySUZ3aWNYVmxkV1ZJYjI5cmMxd2lJQ2s3WEc1Y2RGeDBYSFJwWmlBb0lIUnRjQ0FtSmlCMGJYQXVaVzF3ZEhrZ0tTQjdYRzVjZEZ4MFhIUmNkR052ZFc1MEt5czdYRzVjZEZ4MFhIUmNkSFJ0Y0M1bGJYQjBlUzVoWkdRb0lISmxjMjlzZG1VZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkRngwY21WemIyeDJaU2dwTzF4dVhIUmNkSEpsZEhWeWJpQmtaV1psY2k1d2NtOXRhWE5sS0NCdlltb2dLVHRjYmx4MGZWeHVmU0FwTzF4dWRtRnlJSEJ1ZFcwZ1BTQW9JQzliS3kxZFB5Zy9PbHhjWkNwY1hDNThLVnhjWkNzb1B6cGJaVVZkV3lzdFhUOWNYR1FyZkNrdklDa3VjMjkxY21ObE8xeHVYRzUyWVhJZ2NtTnpjMDUxYlNBOUlHNWxkeUJTWldkRmVIQW9JRndpWGlnL09paGJLeTFkS1QxOEtTaGNJaUFySUhCdWRXMGdLeUJjSWlrb1cyRXRlaVZkS2lra1hDSXNJRndpYVZ3aUlDazdYRzVjYmx4dWRtRnlJR056YzBWNGNHRnVaQ0E5SUZzZ1hDSlViM0JjSWl3Z1hDSlNhV2RvZEZ3aUxDQmNJa0p2ZEhSdmJWd2lMQ0JjSWt4bFpuUmNJaUJkTzF4dVhHNTJZWElnYVhOSWFXUmtaVzVYYVhSb2FXNVVjbVZsSUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUdWc0lDa2dlMXh1WEc1Y2RGeDBMeThnYVhOSWFXUmtaVzVYYVhSb2FXNVVjbVZsSUcxcFoyaDBJR0psSUdOaGJHeGxaQ0JtY205dElHcFJkV1Z5ZVNObWFXeDBaWElnWm5WdVkzUnBiMjQ3WEc1Y2RGeDBMeThnYVc0Z2RHaGhkQ0JqWVhObExDQmxiR1Z0Wlc1MElIZHBiR3dnWW1VZ2MyVmpiMjVrSUdGeVozVnRaVzUwWEc1Y2RGeDBaV3hsYlNBOUlHVnNJSHg4SUdWc1pXMDdYRzVjYmx4MFhIUXZMeUJKYm14cGJtVWdjM1I1YkdVZ2RISjFiWEJ6SUdGc2JGeHVYSFJjZEhKbGRIVnliaUJsYkdWdExuTjBlV3hsTG1ScGMzQnNZWGtnUFQwOUlGd2libTl1WlZ3aUlIeDhYRzVjZEZ4MFhIUmxiR1Z0TG5OMGVXeGxMbVJwYzNCc1lYa2dQVDA5SUZ3aVhDSWdKaVpjYmx4dVhIUmNkRngwTHk4Z1QzUm9aWEozYVhObExDQmphR1ZqYXlCamIyMXdkWFJsWkNCemRIbHNaVnh1WEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nUm1seVpXWnZlQ0E4UFRReklDMGdORFZjYmx4MFhIUmNkQzh2SUVScGMyTnZibTVsWTNSbFpDQmxiR1Z0Wlc1MGN5QmpZVzRnYUdGMlpTQmpiMjF3ZFhSbFpDQmthWE53YkdGNU9pQnViMjVsTENCemJ5Qm1hWEp6ZENCamIyNW1hWEp0SUhSb1lYUWdaV3hsYlNCcGMxeHVYSFJjZEZ4MEx5OGdhVzRnZEdobElHUnZZM1Z0Wlc1MExseHVYSFJjZEZ4MGFsRjFaWEo1TG1OdmJuUmhhVzV6S0NCbGJHVnRMbTkzYm1WeVJHOWpkVzFsYm5Rc0lHVnNaVzBnS1NBbUpseHVYRzVjZEZ4MFhIUnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQmNJbVJwYzNCc1lYbGNJaUFwSUQwOVBTQmNJbTV2Ym1WY0lqdGNibHgwZlR0Y2JseHVkbUZ5SUhOM1lYQWdQU0JtZFc1amRHbHZiaWdnWld4bGJTd2diM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3NJR0Z5WjNNZ0tTQjdYRzVjZEhaaGNpQnlaWFFzSUc1aGJXVXNYRzVjZEZ4MGIyeGtJRDBnZTMwN1hHNWNibHgwTHk4Z1VtVnRaVzFpWlhJZ2RHaGxJRzlzWkNCMllXeDFaWE1zSUdGdVpDQnBibk5sY25RZ2RHaGxJRzVsZHlCdmJtVnpYRzVjZEdadmNpQW9JRzVoYldVZ2FXNGdiM0IwYVc5dWN5QXBJSHRjYmx4MFhIUnZiR1JiSUc1aGJXVWdYU0E5SUdWc1pXMHVjM1I1YkdWYklHNWhiV1VnWFR0Y2JseDBYSFJsYkdWdExuTjBlV3hsV3lCdVlXMWxJRjBnUFNCdmNIUnBiMjV6V3lCdVlXMWxJRjA3WEc1Y2RIMWNibHh1WEhSeVpYUWdQU0JqWVd4c1ltRmpheTVoY0hCc2VTZ2daV3hsYlN3Z1lYSm5jeUI4ZkNCYlhTQXBPMXh1WEc1Y2RDOHZJRkpsZG1WeWRDQjBhR1VnYjJ4a0lIWmhiSFZsYzF4dVhIUm1iM0lnS0NCdVlXMWxJR2x1SUc5d2RHbHZibk1nS1NCN1hHNWNkRngwWld4bGJTNXpkSGxzWlZzZ2JtRnRaU0JkSUQwZ2IyeGtXeUJ1WVcxbElGMDdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1WEc1Y2JseHVablZ1WTNScGIyNGdZV1JxZFhOMFExTlRLQ0JsYkdWdExDQndjbTl3TENCMllXeDFaVkJoY25SekxDQjBkMlZsYmlBcElIdGNibHgwZG1GeUlHRmthblZ6ZEdWa0xDQnpZMkZzWlN4Y2JseDBYSFJ0WVhoSmRHVnlZWFJwYjI1eklEMGdNakFzWEc1Y2RGeDBZM1Z5Y21WdWRGWmhiSFZsSUQwZ2RIZGxaVzRnUDF4dVhIUmNkRngwWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGQyVmxiaTVqZFhJb0tUdGNibHgwWEhSY2RIMGdPbHh1WEhSY2RGeDBablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJxVVhWbGNua3VZM056S0NCbGJHVnRMQ0J3Y205d0xDQmNJbHdpSUNrN1hHNWNkRngwWEhSOUxGeHVYSFJjZEdsdWFYUnBZV3dnUFNCamRYSnlaVzUwVm1Gc2RXVW9LU3hjYmx4MFhIUjFibWwwSUQwZ2RtRnNkV1ZRWVhKMGN5QW1KaUIyWVd4MVpWQmhjblJ6V3lBeklGMGdmSHdnS0NCcVVYVmxjbmt1WTNOelRuVnRZbVZ5V3lCd2NtOXdJRjBnUHlCY0lsd2lJRG9nWENKd2VGd2lJQ2tzWEc1Y2JseDBYSFF2THlCVGRHRnlkR2x1WnlCMllXeDFaU0JqYjIxd2RYUmhkR2x2YmlCcGN5QnlaWEYxYVhKbFpDQm1iM0lnY0c5MFpXNTBhV0ZzSUhWdWFYUWdiV2x6YldGMFkyaGxjMXh1WEhSY2RHbHVhWFJwWVd4SmJsVnVhWFFnUFNBb0lHcFJkV1Z5ZVM1amMzTk9kVzFpWlhKYklIQnliM0FnWFNCOGZDQjFibWwwSUNFOVBTQmNJbkI0WENJZ0ppWWdLMmx1YVhScFlXd2dLU0FtSmx4dVhIUmNkRngwY21OemMwNTFiUzVsZUdWaktDQnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQndjbTl3SUNrZ0tUdGNibHh1WEhScFppQW9JR2x1YVhScFlXeEpibFZ1YVhRZ0ppWWdhVzVwZEdsaGJFbHVWVzVwZEZzZ015QmRJQ0U5UFNCMWJtbDBJQ2tnZTF4dVhHNWNkRngwTHk4Z1UzVndjRzl5ZERvZ1JtbHlaV1p2ZUNBOFBUVTBYRzVjZEZ4MEx5OGdTR0ZzZG1VZ2RHaGxJR2wwWlhKaGRHbHZiaUIwWVhKblpYUWdkbUZzZFdVZ2RHOGdjSEpsZG1WdWRDQnBiblJsY21abGNtVnVZMlVnWm5KdmJTQkRVMU1nZFhCd1pYSWdZbTkxYm1SeklDaG5hQzB5TVRRMEtWeHVYSFJjZEdsdWFYUnBZV3dnUFNCcGJtbDBhV0ZzSUM4Z01qdGNibHh1WEhSY2RDOHZJRlJ5ZFhOMElIVnVhWFJ6SUhKbGNHOXlkR1ZrSUdKNUlHcFJkV1Z5ZVM1amMzTmNibHgwWEhSMWJtbDBJRDBnZFc1cGRDQjhmQ0JwYm1sMGFXRnNTVzVWYm1sMFd5QXpJRjA3WEc1Y2JseDBYSFF2THlCSmRHVnlZWFJwZG1Wc2VTQmhjSEJ5YjNocGJXRjBaU0JtY205dElHRWdibTl1ZW1WeWJ5QnpkR0Z5ZEdsdVp5QndiMmx1ZEZ4dVhIUmNkR2x1YVhScFlXeEpibFZ1YVhRZ1BTQXJhVzVwZEdsaGJDQjhmQ0F4TzF4dVhHNWNkRngwZDJocGJHVWdLQ0J0WVhoSmRHVnlZWFJwYjI1ekxTMGdLU0I3WEc1Y2JseDBYSFJjZEM4dklFVjJZV3gxWVhSbElHRnVaQ0IxY0dSaGRHVWdiM1Z5SUdKbGMzUWdaM1ZsYzNNZ0tHUnZkV0pzYVc1bklHZDFaWE56WlhNZ2RHaGhkQ0I2WlhKdklHOTFkQ2t1WEc1Y2RGeDBYSFF2THlCR2FXNXBjMmdnYVdZZ2RHaGxJSE5qWVd4bElHVnhkV0ZzY3lCdmNpQmpjbTl6YzJWeklERWdLRzFoYTJsdVp5QjBhR1VnYjJ4a0ttNWxkeUJ3Y205a2RXTjBJRzV2Ymkxd2IzTnBkR2wyWlNrdVhHNWNkRngwWEhScVVYVmxjbmt1YzNSNWJHVW9JR1ZzWlcwc0lIQnliM0FzSUdsdWFYUnBZV3hKYmxWdWFYUWdLeUIxYm1sMElDazdYRzVjZEZ4MFhIUnBaaUFvSUNnZ01TQXRJSE5qWVd4bElDa2dLaUFvSURFZ0xTQW9JSE5qWVd4bElEMGdZM1Z5Y21WdWRGWmhiSFZsS0NrZ0x5QnBibWwwYVdGc0lIeDhJREF1TlNBcElDa2dQRDBnTUNBcElIdGNibHgwWEhSY2RGeDBiV0Y0U1hSbGNtRjBhVzl1Y3lBOUlEQTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnBibWwwYVdGc1NXNVZibWwwSUQwZ2FXNXBkR2xoYkVsdVZXNXBkQ0F2SUhOallXeGxPMXh1WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhVzVwZEdsaGJFbHVWVzVwZENBOUlHbHVhWFJwWVd4SmJsVnVhWFFnS2lBeU8xeHVYSFJjZEdwUmRXVnllUzV6ZEhsc1pTZ2daV3hsYlN3Z2NISnZjQ3dnYVc1cGRHbGhiRWx1Vlc1cGRDQXJJSFZ1YVhRZ0tUdGNibHh1WEhSY2RDOHZJRTFoYTJVZ2MzVnlaU0IzWlNCMWNHUmhkR1VnZEdobElIUjNaV1Z1SUhCeWIzQmxjblJwWlhNZ2JHRjBaWElnYjI1Y2JseDBYSFIyWVd4MVpWQmhjblJ6SUQwZ2RtRnNkV1ZRWVhKMGN5QjhmQ0JiWFR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2dnZG1Gc2RXVlFZWEowY3lBcElIdGNibHgwWEhScGJtbDBhV0ZzU1c1VmJtbDBJRDBnSzJsdWFYUnBZV3hKYmxWdWFYUWdmSHdnSzJsdWFYUnBZV3dnZkh3Z01EdGNibHh1WEhSY2RDOHZJRUZ3Y0d4NUlISmxiR0YwYVhabElHOW1abk5sZENBb0t6MHZMVDBwSUdsbUlITndaV05wWm1sbFpGeHVYSFJjZEdGa2FuVnpkR1ZrSUQwZ2RtRnNkV1ZRWVhKMGMxc2dNU0JkSUQ5Y2JseDBYSFJjZEdsdWFYUnBZV3hKYmxWdWFYUWdLeUFvSUhaaGJIVmxVR0Z5ZEhOYklERWdYU0FySURFZ0tTQXFJSFpoYkhWbFVHRnlkSE5iSURJZ1hTQTZYRzVjZEZ4MFhIUXJkbUZzZFdWUVlYSjBjMXNnTWlCZE8xeHVYSFJjZEdsbUlDZ2dkSGRsWlc0Z0tTQjdYRzVjZEZ4MFhIUjBkMlZsYmk1MWJtbDBJRDBnZFc1cGREdGNibHgwWEhSY2RIUjNaV1Z1TG5OMFlYSjBJRDBnYVc1cGRHbGhiRWx1Vlc1cGREdGNibHgwWEhSY2RIUjNaV1Z1TG1WdVpDQTlJR0ZrYW5WemRHVmtPMXh1WEhSY2RIMWNibHgwZlZ4dVhIUnlaWFIxY200Z1lXUnFkWE4wWldRN1hHNTlYRzVjYmx4dWRtRnlJR1JsWm1GMWJIUkVhWE53YkdGNVRXRndJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJR2RsZEVSbFptRjFiSFJFYVhOd2JHRjVLQ0JsYkdWdElDa2dlMXh1WEhSMllYSWdkR1Z0Y0N4Y2JseDBYSFJrYjJNZ1BTQmxiR1Z0TG05M2JtVnlSRzlqZFcxbGJuUXNYRzVjZEZ4MGJtOWtaVTVoYldVZ1BTQmxiR1Z0TG01dlpHVk9ZVzFsTEZ4dVhIUmNkR1JwYzNCc1lYa2dQU0JrWldaaGRXeDBSR2x6Y0d4aGVVMWhjRnNnYm05a1pVNWhiV1VnWFR0Y2JseHVYSFJwWmlBb0lHUnBjM0JzWVhrZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdScGMzQnNZWGs3WEc1Y2RIMWNibHh1WEhSMFpXMXdJRDBnWkc5akxtSnZaSGt1WVhCd1pXNWtRMmhwYkdRb0lHUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtDQnViMlJsVG1GdFpTQXBJQ2s3WEc1Y2RHUnBjM0JzWVhrZ1BTQnFVWFZsY25rdVkzTnpLQ0IwWlcxd0xDQmNJbVJwYzNCc1lYbGNJaUFwTzF4dVhHNWNkSFJsYlhBdWNHRnlaVzUwVG05a1pTNXlaVzF2ZG1WRGFHbHNaQ2dnZEdWdGNDQXBPMXh1WEc1Y2RHbG1JQ2dnWkdsemNHeGhlU0E5UFQwZ1hDSnViMjVsWENJZ0tTQjdYRzVjZEZ4MFpHbHpjR3hoZVNBOUlGd2lZbXh2WTJ0Y0lqdGNibHgwZlZ4dVhIUmtaV1poZFd4MFJHbHpjR3hoZVUxaGNGc2dibTlrWlU1aGJXVWdYU0E5SUdScGMzQnNZWGs3WEc1Y2JseDBjbVYwZFhKdUlHUnBjM0JzWVhrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOb2IzZElhV1JsS0NCbGJHVnRaVzUwY3l3Z2MyaHZkeUFwSUh0Y2JseDBkbUZ5SUdScGMzQnNZWGtzSUdWc1pXMHNYRzVjZEZ4MGRtRnNkV1Z6SUQwZ1cxMHNYRzVjZEZ4MGFXNWtaWGdnUFNBd0xGeHVYSFJjZEd4bGJtZDBhQ0E5SUdWc1pXMWxiblJ6TG14bGJtZDBhRHRjYmx4dVhIUXZMeUJFWlhSbGNtMXBibVVnYm1WM0lHUnBjM0JzWVhrZ2RtRnNkV1VnWm05eUlHVnNaVzFsYm5SeklIUm9ZWFFnYm1WbFpDQjBieUJqYUdGdVoyVmNibHgwWm05eUlDZ2dPeUJwYm1SbGVDQThJR3hsYm1kMGFEc2dhVzVrWlhnckt5QXBJSHRjYmx4MFhIUmxiR1Z0SUQwZ1pXeGxiV1Z1ZEhOYklHbHVaR1Y0SUYwN1hHNWNkRngwYVdZZ0tDQWhaV3hsYlM1emRIbHNaU0FwSUh0Y2JseDBYSFJjZEdOdmJuUnBiblZsTzF4dVhIUmNkSDFjYmx4dVhIUmNkR1JwYzNCc1lYa2dQU0JsYkdWdExuTjBlV3hsTG1ScGMzQnNZWGs3WEc1Y2RGeDBhV1lnS0NCemFHOTNJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlRhVzVqWlNCM1pTQm1iM0pqWlNCMmFYTnBZbWxzYVhSNUlIVndiMjRnWTJGelkyRmtaUzFvYVdSa1pXNGdaV3hsYldWdWRITXNJR0Z1SUdsdGJXVmthV0YwWlNBb1lXNWtJSE5zYjNjcFhHNWNkRngwWEhRdkx5QmphR1ZqYXlCcGN5QnlaWEYxYVhKbFpDQnBiaUIwYUdseklHWnBjbk4wSUd4dmIzQWdkVzVzWlhOeklIZGxJR2hoZG1VZ1lTQnViMjVsYlhCMGVTQmthWE53YkdGNUlIWmhiSFZsSUNobGFYUm9aWEpjYmx4MFhIUmNkQzh2SUdsdWJHbHVaU0J2Y2lCaFltOTFkQzEwYnkxaVpTMXlaWE4wYjNKbFpDbGNibHgwWEhSY2RHbG1JQ2dnWkdsemNHeGhlU0E5UFQwZ1hDSnViMjVsWENJZ0tTQjdYRzVjZEZ4MFhIUmNkSFpoYkhWbGMxc2dhVzVrWlhnZ1hTQTlJR1JoZEdGUWNtbDJMbWRsZENnZ1pXeGxiU3dnWENKa2FYTndiR0Y1WENJZ0tTQjhmQ0J1ZFd4c08xeHVYSFJjZEZ4MFhIUnBaaUFvSUNGMllXeDFaWE5iSUdsdVpHVjRJRjBnS1NCN1hHNWNkRngwWEhSY2RGeDBaV3hsYlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWENKY0lqdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RGeDBhV1lnS0NCbGJHVnRMbk4wZVd4bExtUnBjM0JzWVhrZ1BUMDlJRndpWENJZ0ppWWdhWE5JYVdSa1pXNVhhWFJvYVc1VWNtVmxLQ0JsYkdWdElDa2dLU0I3WEc1Y2RGeDBYSFJjZEhaaGJIVmxjMXNnYVc1a1pYZ2dYU0E5SUdkbGRFUmxabUYxYkhSRWFYTndiR0Y1S0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RHbG1JQ2dnWkdsemNHeGhlU0FoUFQwZ1hDSnViMjVsWENJZ0tTQjdYRzVjZEZ4MFhIUmNkSFpoYkhWbGMxc2dhVzVrWlhnZ1hTQTlJRndpYm05dVpWd2lPMXh1WEc1Y2RGeDBYSFJjZEM4dklGSmxiV1Z0WW1WeUlIZG9ZWFFnZDJVbmNtVWdiM1psY25keWFYUnBibWRjYmx4MFhIUmNkRngwWkdGMFlWQnlhWFl1YzJWMEtDQmxiR1Z0TENCY0ltUnBjM0JzWVhsY0lpd2daR2x6Y0d4aGVTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkQzh2SUZObGRDQjBhR1VnWkdsemNHeGhlU0J2WmlCMGFHVWdaV3hsYldWdWRITWdhVzRnWVNCelpXTnZibVFnYkc5dmNDQjBieUJoZG05cFpDQmpiMjV6ZEdGdWRDQnlaV1pzYjNkY2JseDBabTl5SUNnZ2FXNWtaWGdnUFNBd095QnBibVJsZUNBOElHeGxibWQwYURzZ2FXNWtaWGdyS3lBcElIdGNibHgwWEhScFppQW9JSFpoYkhWbGMxc2dhVzVrWlhnZ1hTQWhQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBaV3hsYldWdWRITmJJR2x1WkdWNElGMHVjM1I1YkdVdVpHbHpjR3hoZVNBOUlIWmhiSFZsYzFzZ2FXNWtaWGdnWFR0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWld4bGJXVnVkSE03WEc1OVhHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4MGMyaHZkem9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY21WMGRYSnVJSE5vYjNkSWFXUmxLQ0IwYUdsekxDQjBjblZsSUNrN1hHNWNkSDBzWEc1Y2RHaHBaR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6YUc5M1NHbGtaU2dnZEdocGN5QXBPMXh1WEhSOUxGeHVYSFIwYjJkbmJHVTZJR1oxYm1OMGFXOXVLQ0J6ZEdGMFpTQXBJSHRjYmx4MFhIUnBaaUFvSUhSNWNHVnZaaUJ6ZEdGMFpTQTlQVDBnWENKaWIyOXNaV0Z1WENJZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2MzUmhkR1VnUHlCMGFHbHpMbk5vYjNjb0tTQTZJSFJvYVhNdWFHbGtaU2dwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwYVdZZ0tDQnBjMGhwWkdSbGJsZHBkR2hwYmxSeVpXVW9JSFJvYVhNZ0tTQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVLQ0IwYUdseklDa3VjMmh2ZHlncE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGFsRjFaWEo1S0NCMGFHbHpJQ2t1YUdsa1pTZ3BPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMGdLVHRjYmx4MGZWeHVmU0FwTzF4dWRtRnlJSEpqYUdWamEyRmliR1ZVZVhCbElEMGdLQ0F2WGlnL09tTm9aV05yWW05NGZISmhaR2x2S1NRdmFTQXBPMXh1WEc1MllYSWdjblJoWjA1aGJXVWdQU0FvSUM4OEtGdGhMWHBkVzE1Y1hDOWNYREErWEZ4NE1qQmNYSFJjWEhKY1hHNWNYR1pkS3lrdmFTQXBPMXh1WEc1MllYSWdjbk5qY21sd2RGUjVjR1VnUFNBb0lDOWVKSHhlYlc5a2RXeGxKSHhjWEM4b1B6cHFZWFpoZkdWamJXRXBjMk55YVhCMEwya2dLVHRjYmx4dVhHNWNiaTh2SUZkbElHaGhkbVVnZEc4Z1kyeHZjMlVnZEdobGMyVWdkR0ZuY3lCMGJ5QnpkWEJ3YjNKMElGaElWRTFNSUNnak1UTXlNREFwWEc1MllYSWdkM0poY0UxaGNDQTlJSHRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dVhIUnZjSFJwYjI0NklGc2dNU3dnWENJOGMyVnNaV04wSUcxMWJIUnBjR3hsUFNkdGRXeDBhWEJzWlNjK1hDSXNJRndpUEM5elpXeGxZM1ErWENJZ1hTeGNibHh1WEhRdkx5QllTRlJOVENCd1lYSnpaWEp6SUdSdklHNXZkQ0J0WVdkcFkyRnNiSGtnYVc1elpYSjBJR1ZzWlcxbGJuUnpJR2x1SUhSb1pWeHVYSFF2THlCellXMWxJSGRoZVNCMGFHRjBJSFJoWnlCemIzVndJSEJoY25ObGNuTWdaRzh1SUZOdklIZGxJR05oYm01dmRDQnphRzl5ZEdWdVhHNWNkQzh2SUhSb2FYTWdZbmtnYjIxcGRIUnBibWNnUEhSaWIyUjVQaUJ2Y2lCdmRHaGxjaUJ5WlhGMWFYSmxaQ0JsYkdWdFpXNTBjeTVjYmx4MGRHaGxZV1E2SUZzZ01Td2dYQ0k4ZEdGaWJHVStYQ0lzSUZ3aVBDOTBZV0pzWlQ1Y0lpQmRMRnh1WEhSamIydzZJRnNnTWl3Z1hDSThkR0ZpYkdVK1BHTnZiR2R5YjNWd1Bsd2lMQ0JjSWp3dlkyOXNaM0p2ZFhBK1BDOTBZV0pzWlQ1Y0lpQmRMRnh1WEhSMGNqb2dXeUF5TENCY0lqeDBZV0pzWlQ0OGRHSnZaSGsrWENJc0lGd2lQQzkwWW05a2VUNDhMM1JoWW14bFBsd2lJRjBzWEc1Y2RIUmtPaUJiSURNc0lGd2lQSFJoWW14bFBqeDBZbTlrZVQ0OGRISStYQ0lzSUZ3aVBDOTBjajQ4TDNSaWIyUjVQand2ZEdGaWJHVStYQ0lnWFN4Y2JseHVYSFJmWkdWbVlYVnNkRG9nV3lBd0xDQmNJbHdpTENCY0lsd2lJRjFjYm4wN1hHNWNiaTh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0J2Ym14NVhHNTNjbUZ3VFdGd0xtOXdkR2R5YjNWd0lEMGdkM0poY0UxaGNDNXZjSFJwYjI0N1hHNWNibmR5WVhCTllYQXVkR0p2WkhrZ1BTQjNjbUZ3VFdGd0xuUm1iMjkwSUQwZ2QzSmhjRTFoY0M1amIyeG5jbTkxY0NBOUlIZHlZWEJOWVhBdVkyRndkR2x2YmlBOUlIZHlZWEJOWVhBdWRHaGxZV1E3WEc1M2NtRndUV0Z3TG5Sb0lEMGdkM0poY0UxaGNDNTBaRHRjYmx4dVhHNW1kVzVqZEdsdmJpQm5aWFJCYkd3b0lHTnZiblJsZUhRc0lIUmhaeUFwSUh0Y2JseHVYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnTFNBeE1TQnZibXg1WEc1Y2RDOHZJRlZ6WlNCMGVYQmxiMllnZEc4Z1lYWnZhV1FnZW1WeWJ5MWhjbWQxYldWdWRDQnRaWFJvYjJRZ2FXNTJiMk5oZEdsdmJpQnZiaUJvYjNOMElHOWlhbVZqZEhNZ0tDTXhOVEUxTVNsY2JseDBkbUZ5SUhKbGREdGNibHh1WEhScFppQW9JSFI1Y0dWdlppQmpiMjUwWlhoMExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ2tnZTF4dVhIUmNkSEpsZENBOUlHTnZiblJsZUhRdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9JSFJoWnlCOGZDQmNJaXBjSWlBcE8xeHVYRzVjZEgwZ1pXeHpaU0JwWmlBb0lIUjVjR1Z2WmlCamIyNTBaWGgwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnS1NCN1hHNWNkRngwY21WMElEMGdZMjl1ZEdWNGRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDQjBZV2NnZkh3Z1hDSXFYQ0lnS1R0Y2JseHVYSFI5SUdWc2MyVWdlMXh1WEhSY2RISmxkQ0E5SUZ0ZE8xeHVYSFI5WEc1Y2JseDBhV1lnS0NCMFlXY2dQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQjBZV2NnSmlZZ2JtOWtaVTVoYldVb0lHTnZiblJsZUhRc0lIUmhaeUFwSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJxVVhWbGNua3ViV1Z5WjJVb0lGc2dZMjl1ZEdWNGRDQmRMQ0J5WlhRZ0tUdGNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibHh1THk4Z1RXRnlheUJ6WTNKcGNIUnpJR0Z6SUdoaGRtbHVaeUJoYkhKbFlXUjVJR0psWlc0Z1pYWmhiSFZoZEdWa1hHNW1kVzVqZEdsdmJpQnpaWFJIYkc5aVlXeEZkbUZzS0NCbGJHVnRjeXdnY21WbVJXeGxiV1Z1ZEhNZ0tTQjdYRzVjZEhaaGNpQnBJRDBnTUN4Y2JseDBYSFJzSUQwZ1pXeGxiWE11YkdWdVozUm9PMXh1WEc1Y2RHWnZjaUFvSURzZ2FTQThJR3c3SUdrckt5QXBJSHRjYmx4MFhIUmtZWFJoVUhKcGRpNXpaWFFvWEc1Y2RGeDBYSFJsYkdWdGMxc2dhU0JkTEZ4dVhIUmNkRngwWENKbmJHOWlZV3hGZG1Gc1hDSXNYRzVjZEZ4MFhIUWhjbVZtUld4bGJXVnVkSE1nZkh3Z1pHRjBZVkJ5YVhZdVoyVjBLQ0J5WldaRmJHVnRaVzUwYzFzZ2FTQmRMQ0JjSW1kc2IySmhiRVYyWVd4Y0lpQXBYRzVjZEZ4MEtUdGNibHgwZlZ4dWZWeHVYRzVjYm5aaGNpQnlhSFJ0YkNBOUlDODhmQ1lqUDF4Y2R5czdMenRjYmx4dVpuVnVZM1JwYjI0Z1luVnBiR1JHY21GbmJXVnVkQ2dnWld4bGJYTXNJR052Ym5SbGVIUXNJSE5qY21sd2RITXNJSE5sYkdWamRHbHZiaXdnYVdkdWIzSmxaQ0FwSUh0Y2JseDBkbUZ5SUdWc1pXMHNJSFJ0Y0N3Z2RHRm5MQ0IzY21Gd0xDQmpiMjUwWVdsdWN5d2dhaXhjYmx4MFhIUm1jbUZuYldWdWRDQTlJR052Ym5SbGVIUXVZM0psWVhSbFJHOWpkVzFsYm5SR2NtRm5iV1Z1ZENncExGeHVYSFJjZEc1dlpHVnpJRDBnVzEwc1hHNWNkRngwYVNBOUlEQXNYRzVjZEZ4MGJDQTlJR1ZzWlcxekxteGxibWQwYUR0Y2JseHVYSFJtYjNJZ0tDQTdJR2tnUENCc095QnBLeXNnS1NCN1hHNWNkRngwWld4bGJTQTlJR1ZzWlcxeld5QnBJRjA3WEc1Y2JseDBYSFJwWmlBb0lHVnNaVzBnZkh3Z1pXeGxiU0E5UFQwZ01DQXBJSHRjYmx4dVhIUmNkRngwTHk4Z1FXUmtJRzV2WkdWeklHUnBjbVZqZEd4NVhHNWNkRngwWEhScFppQW9JSFJ2Vkhsd1pTZ2daV3hsYlNBcElEMDlQU0JjSW05aWFtVmpkRndpSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnUEQwMExqQWdiMjVzZVN3Z1VHaGhiblJ2YlVwVElERWdiMjVzZVZ4dVhIUmNkRngwWEhRdkx5QndkWE5vTG1Gd2NHeDVLRjhzSUdGeWNtRjViR2xyWlNrZ2RHaHliM2R6SUc5dUlHRnVZMmxsYm5RZ1YyVmlTMmwwWEc1Y2RGeDBYSFJjZEdwUmRXVnllUzV0WlhKblpTZ2dibTlrWlhNc0lHVnNaVzB1Ym05a1pWUjVjR1VnUHlCYklHVnNaVzBnWFNBNklHVnNaVzBnS1R0Y2JseHVYSFJjZEZ4MEx5OGdRMjl1ZG1WeWRDQnViMjR0YUhSdGJDQnBiblJ2SUdFZ2RHVjRkQ0J1YjJSbFhHNWNkRngwWEhSOUlHVnNjMlVnYVdZZ0tDQWhjbWgwYld3dWRHVnpkQ2dnWld4bGJTQXBJQ2tnZTF4dVhIUmNkRngwWEhSdWIyUmxjeTV3ZFhOb0tDQmpiMjUwWlhoMExtTnlaV0YwWlZSbGVIUk9iMlJsS0NCbGJHVnRJQ2tnS1R0Y2JseHVYSFJjZEZ4MEx5OGdRMjl1ZG1WeWRDQm9kRzFzSUdsdWRHOGdSRTlOSUc1dlpHVnpYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUjBiWEFnUFNCMGJYQWdmSHdnWm5KaFoyMWxiblF1WVhCd1pXNWtRMmhwYkdRb0lHTnZiblJsZUhRdVkzSmxZWFJsUld4bGJXVnVkQ2dnWENKa2FYWmNJaUFwSUNrN1hHNWNibHgwWEhSY2RGeDBMeThnUkdWelpYSnBZV3hwZW1VZ1lTQnpkR0Z1WkdGeVpDQnlaWEJ5WlhObGJuUmhkR2x2Ymx4dVhIUmNkRngwWEhSMFlXY2dQU0FvSUhKMFlXZE9ZVzFsTG1WNFpXTW9JR1ZzWlcwZ0tTQjhmQ0JiSUZ3aVhDSXNJRndpWENJZ1hTQXBXeUF4SUYwdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4MFhIUmNkRngwZDNKaGNDQTlJSGR5WVhCTllYQmJJSFJoWnlCZElIeDhJSGR5WVhCTllYQXVYMlJsWm1GMWJIUTdYRzVjZEZ4MFhIUmNkSFJ0Y0M1cGJtNWxja2hVVFV3Z1BTQjNjbUZ3V3lBeElGMGdLeUJxVVhWbGNua3VhSFJ0YkZCeVpXWnBiSFJsY2lnZ1pXeGxiU0FwSUNzZ2QzSmhjRnNnTWlCZE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVSbGMyTmxibVFnZEdoeWIzVm5hQ0IzY21Gd2NHVnljeUIwYnlCMGFHVWdjbWxuYUhRZ1kyOXVkR1Z1ZEZ4dVhIUmNkRngwWEhScUlEMGdkM0poY0ZzZ01DQmRPMXh1WEhSY2RGeDBYSFIzYUdsc1pTQW9JR290TFNBcElIdGNibHgwWEhSY2RGeDBYSFIwYlhBZ1BTQjBiWEF1YkdGemRFTm9hV3hrTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0E4UFRRdU1DQnZibXg1TENCUWFHRnVkRzl0U2xNZ01TQnZibXg1WEc1Y2RGeDBYSFJjZEM4dklIQjFjMmd1WVhCd2JIa29YeXdnWVhKeVlYbHNhV3RsS1NCMGFISnZkM01nYjI0Z1lXNWphV1Z1ZENCWFpXSkxhWFJjYmx4MFhIUmNkRngwYWxGMVpYSjVMbTFsY21kbEtDQnViMlJsY3l3Z2RHMXdMbU5vYVd4a1RtOWtaWE1nS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJTWlcxbGJXSmxjaUIwYUdVZ2RHOXdMV3hsZG1Wc0lHTnZiblJoYVc1bGNseHVYSFJjZEZ4MFhIUjBiWEFnUFNCbWNtRm5iV1Z1ZEM1bWFYSnpkRU5vYVd4a08xeHVYRzVjZEZ4MFhIUmNkQzh2SUVWdWMzVnlaU0IwYUdVZ1kzSmxZWFJsWkNCdWIyUmxjeUJoY21VZ2IzSndhR0Z1WldRZ0tDTXhNak01TWlsY2JseDBYSFJjZEZ4MGRHMXdMblJsZUhSRGIyNTBaVzUwSUQwZ1hDSmNJanRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2THlCU1pXMXZkbVVnZDNKaGNIQmxjaUJtY205dElHWnlZV2R0Wlc1MFhHNWNkR1p5WVdkdFpXNTBMblJsZUhSRGIyNTBaVzUwSUQwZ1hDSmNJanRjYmx4dVhIUnBJRDBnTUR0Y2JseDBkMmhwYkdVZ0tDQW9JR1ZzWlcwZ1BTQnViMlJsYzFzZ2FTc3JJRjBnS1NBcElIdGNibHh1WEhSY2RDOHZJRk5yYVhBZ1pXeGxiV1Z1ZEhNZ1lXeHlaV0ZrZVNCcGJpQjBhR1VnWTI5dWRHVjRkQ0JqYjJ4c1pXTjBhVzl1SUNoMGNtRmpMVFF3T0RjcFhHNWNkRngwYVdZZ0tDQnpaV3hsWTNScGIyNGdKaVlnYWxGMVpYSjVMbWx1UVhKeVlYa29JR1ZzWlcwc0lITmxiR1ZqZEdsdmJpQXBJRDRnTFRFZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUdsbmJtOXlaV1FnS1NCN1hHNWNkRngwWEhSY2RHbG5ibTl5WldRdWNIVnphQ2dnWld4bGJTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBZMjl1ZEdsdWRXVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFkyOXVkR0ZwYm5NZ1BTQnFVWFZsY25rdVkyOXVkR0ZwYm5Nb0lHVnNaVzB1YjNkdVpYSkViMk4xYldWdWRDd2daV3hsYlNBcE8xeHVYRzVjZEZ4MEx5OGdRWEJ3Wlc1a0lIUnZJR1p5WVdkdFpXNTBYRzVjZEZ4MGRHMXdJRDBnWjJWMFFXeHNLQ0JtY21GbmJXVnVkQzVoY0hCbGJtUkRhR2xzWkNnZ1pXeGxiU0FwTENCY0luTmpjbWx3ZEZ3aUlDazdYRzVjYmx4MFhIUXZMeUJRY21WelpYSjJaU0J6WTNKcGNIUWdaWFpoYkhWaGRHbHZiaUJvYVhOMGIzSjVYRzVjZEZ4MGFXWWdLQ0JqYjI1MFlXbHVjeUFwSUh0Y2JseDBYSFJjZEhObGRFZHNiMkpoYkVWMllXd29JSFJ0Y0NBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFTmhjSFIxY21VZ1pYaGxZM1YwWVdKc1pYTmNibHgwWEhScFppQW9JSE5qY21sd2RITWdLU0I3WEc1Y2RGeDBYSFJxSUQwZ01EdGNibHgwWEhSY2RIZG9hV3hsSUNnZ0tDQmxiR1Z0SUQwZ2RHMXdXeUJxS3lzZ1hTQXBJQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JSEp6WTNKcGNIUlVlWEJsTG5SbGMzUW9JR1ZzWlcwdWRIbHdaU0I4ZkNCY0lsd2lJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBjMk55YVhCMGN5NXdkWE5vS0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWm5KaFoyMWxiblE3WEc1OVhHNWNibHh1S0NCbWRXNWpkR2x2YmlncElIdGNibHgwZG1GeUlHWnlZV2R0Wlc1MElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJHOWpkVzFsYm5SR2NtRm5iV1Z1ZENncExGeHVYSFJjZEdScGRpQTlJR1p5WVdkdFpXNTBMbUZ3Y0dWdVpFTm9hV3hrS0NCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ0JjSW1ScGRsd2lJQ2tnS1N4Y2JseDBYSFJwYm5CMWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lhVzV3ZFhSY0lpQXBPMXh1WEc1Y2RDOHZJRk4xY0hCdmNuUTZJRUZ1WkhKdmFXUWdOQzR3SUMwZ05DNHpJRzl1YkhsY2JseDBMeThnUTJobFkyc2djM1JoZEdVZ2JHOXpkQ0JwWmlCMGFHVWdibUZ0WlNCcGN5QnpaWFFnS0NNeE1USXhOeWxjYmx4MEx5OGdVM1Z3Y0c5eWREb2dWMmx1Wkc5M2N5QlhaV0lnUVhCd2N5QW9WMWRCS1Z4dVhIUXZMeUJnYm1GdFpXQWdZVzVrSUdCMGVYQmxZQ0J0ZFhOMElIVnpaU0F1YzJWMFFYUjBjbWxpZFhSbElHWnZjaUJYVjBFZ0tDTXhORGt3TVNsY2JseDBhVzV3ZFhRdWMyVjBRWFIwY21saWRYUmxLQ0JjSW5SNWNHVmNJaXdnWENKeVlXUnBiMXdpSUNrN1hHNWNkR2x1Y0hWMExuTmxkRUYwZEhKcFluVjBaU2dnWENKamFHVmphMlZrWENJc0lGd2lZMmhsWTJ0bFpGd2lJQ2s3WEc1Y2RHbHVjSFYwTG5ObGRFRjBkSEpwWW5WMFpTZ2dYQ0p1WVcxbFhDSXNJRndpZEZ3aUlDazdYRzVjYmx4MFpHbDJMbUZ3Y0dWdVpFTm9hV3hrS0NCcGJuQjFkQ0FwTzF4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnUEQwMExqRWdiMjVzZVZ4dVhIUXZMeUJQYkdSbGNpQlhaV0pMYVhRZ1pHOWxjMjRuZENCamJHOXVaU0JqYUdWamEyVmtJSE4wWVhSbElHTnZjbkpsWTNSc2VTQnBiaUJtY21GbmJXVnVkSE5jYmx4MGMzVndjRzl5ZEM1amFHVmphME5zYjI1bElEMGdaR2wyTG1Oc2IyNWxUbTlrWlNnZ2RISjFaU0FwTG1Oc2IyNWxUbTlrWlNnZ2RISjFaU0FwTG14aGMzUkRhR2xzWkM1amFHVmphMlZrTzF4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlNVEVnYjI1c2VWeHVYSFF2THlCTllXdGxJSE4xY21VZ2RHVjRkR0Z5WldFZ0tHRnVaQ0JqYUdWamEySnZlQ2tnWkdWbVlYVnNkRlpoYkhWbElHbHpJSEJ5YjNCbGNteDVJR05zYjI1bFpGeHVYSFJrYVhZdWFXNXVaWEpJVkUxTUlEMGdYQ0k4ZEdWNGRHRnlaV0UrZUR3dmRHVjRkR0Z5WldFK1hDSTdYRzVjZEhOMWNIQnZjblF1Ym05RGJHOXVaVU5vWldOclpXUWdQU0FoSVdScGRpNWpiRzl1WlU1dlpHVW9JSFJ5ZFdVZ0tTNXNZWE4wUTJocGJHUXVaR1ZtWVhWc2RGWmhiSFZsTzF4dWZTQXBLQ2s3WEc1MllYSWdaRzlqZFcxbGJuUkZiR1Z0Wlc1MElEMGdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVYRzVjYmx4dWRtRnlYRzVjZEhKclpYbEZkbVZ1ZENBOUlDOWVhMlY1THl4Y2JseDBjbTF2ZFhObFJYWmxiblFnUFNBdlhpZy9PbTF2ZFhObGZIQnZhVzUwWlhKOFkyOXVkR1Y0ZEcxbGJuVjhaSEpoWjN4a2NtOXdLWHhqYkdsamF5OHNYRzVjZEhKMGVYQmxibUZ0WlhOd1lXTmxJRDBnTDE0b1cxNHVYU29wS0Q4NlhGd3VLQzRyS1h3cEx6dGNibHh1Wm5WdVkzUnBiMjRnY21WMGRYSnVWSEoxWlNncElIdGNibHgwY21WMGRYSnVJSFJ5ZFdVN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGRIVnlia1poYkhObEtDa2dlMXh1WEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JpOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQnZibXg1WEc0dkx5QlRaV1VnSXpFek16a3pJR1p2Y2lCdGIzSmxJR2x1Wm05Y2JtWjFibU4wYVc5dUlITmhabVZCWTNScGRtVkZiR1Z0Wlc1MEtDa2dlMXh1WEhSMGNua2dlMXh1WEhSY2RISmxkSFZ5YmlCa2IyTjFiV1Z1ZEM1aFkzUnBkbVZGYkdWdFpXNTBPMXh1WEhSOUlHTmhkR05vSUNnZ1pYSnlJQ2tnZXlCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUc5dUtDQmxiR1Z0TENCMGVYQmxjeXdnYzJWc1pXTjBiM0lzSUdSaGRHRXNJR1p1TENCdmJtVWdLU0I3WEc1Y2RIWmhjaUJ2Y21sblJtNHNJSFI1Y0dVN1hHNWNibHgwTHk4Z1ZIbHdaWE1nWTJGdUlHSmxJR0VnYldGd0lHOW1JSFI1Y0dWekwyaGhibVJzWlhKelhHNWNkR2xtSUNnZ2RIbHdaVzltSUhSNWNHVnpJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDa2dlMXh1WEc1Y2RGeDBMeThnS0NCMGVYQmxjeTFQWW1wbFkzUXNJSE5sYkdWamRHOXlMQ0JrWVhSaElDbGNibHgwWEhScFppQW9JSFI1Y0dWdlppQnpaV3hsWTNSdmNpQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHh1WEhSY2RGeDBMeThnS0NCMGVYQmxjeTFQWW1wbFkzUXNJR1JoZEdFZ0tWeHVYSFJjZEZ4MFpHRjBZU0E5SUdSaGRHRWdmSHdnYzJWc1pXTjBiM0k3WEc1Y2RGeDBYSFJ6Wld4bFkzUnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JseDBYSFI5WEc1Y2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCMGVYQmxjeUFwSUh0Y2JseDBYSFJjZEc5dUtDQmxiR1Z0TENCMGVYQmxMQ0J6Wld4bFkzUnZjaXdnWkdGMFlTd2dkSGx3WlhOYklIUjVjR1VnWFN3Z2IyNWxJQ2s3WEc1Y2RGeDBmVnh1WEhSY2RISmxkSFZ5YmlCbGJHVnRPMXh1WEhSOVhHNWNibHgwYVdZZ0tDQmtZWFJoSUQwOUlHNTFiR3dnSmlZZ1ptNGdQVDBnYm5Wc2JDQXBJSHRjYmx4dVhIUmNkQzh2SUNnZ2RIbHdaWE1zSUdadUlDbGNibHgwWEhSbWJpQTlJSE5sYkdWamRHOXlPMXh1WEhSY2RHUmhkR0VnUFNCelpXeGxZM1J2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNibHgwZlNCbGJITmxJR2xtSUNnZ1ptNGdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUnBaaUFvSUhSNWNHVnZaaUJ6Wld4bFkzUnZjaUE5UFQwZ1hDSnpkSEpwYm1kY0lpQXBJSHRjYmx4dVhIUmNkRngwTHk4Z0tDQjBlWEJsY3l3Z2MyVnNaV04wYjNJc0lHWnVJQ2xjYmx4MFhIUmNkR1p1SUQwZ1pHRjBZVHRjYmx4MFhIUmNkR1JoZEdFZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseHVYSFJjZEZ4MEx5OGdLQ0IwZVhCbGN5d2daR0YwWVN3Z1ptNGdLVnh1WEhSY2RGeDBabTRnUFNCa1lYUmhPMXh1WEhSY2RGeDBaR0YwWVNBOUlITmxiR1ZqZEc5eU8xeHVYSFJjZEZ4MGMyVnNaV04wYjNJZ1BTQjFibVJsWm1sdVpXUTdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2RHbG1JQ2dnWm00Z1BUMDlJR1poYkhObElDa2dlMXh1WEhSY2RHWnVJRDBnY21WMGRYSnVSbUZzYzJVN1hHNWNkSDBnWld4elpTQnBaaUFvSUNGbWJpQXBJSHRjYmx4MFhIUnlaWFIxY200Z1pXeGxiVHRjYmx4MGZWeHVYRzVjZEdsbUlDZ2diMjVsSUQwOVBTQXhJQ2tnZTF4dVhIUmNkRzl5YVdkR2JpQTlJR1p1TzF4dVhIUmNkR1p1SUQwZ1puVnVZM1JwYjI0b0lHVjJaVzUwSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJEWVc0Z2RYTmxJR0Z1SUdWdGNIUjVJSE5sZEN3Z2MybHVZMlVnWlhabGJuUWdZMjl1ZEdGcGJuTWdkR2hsSUdsdVptOWNibHgwWEhSY2RHcFJkV1Z5ZVNncExtOW1aaWdnWlhabGJuUWdLVHRjYmx4MFhIUmNkSEpsZEhWeWJpQnZjbWxuUm00dVlYQndiSGtvSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeUFwTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFF2THlCVmMyVWdjMkZ0WlNCbmRXbGtJSE52SUdOaGJHeGxjaUJqWVc0Z2NtVnRiM1psSUhWemFXNW5JRzl5YVdkR2JseHVYSFJjZEdadUxtZDFhV1FnUFNCdmNtbG5SbTR1WjNWcFpDQjhmQ0FvSUc5eWFXZEdiaTVuZFdsa0lEMGdhbEYxWlhKNUxtZDFhV1FyS3lBcE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCbGJHVnRMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzVoWkdRb0lIUm9hWE1zSUhSNWNHVnpMQ0JtYml3Z1pHRjBZU3dnYzJWc1pXTjBiM0lnS1R0Y2JseDBmU0FwTzF4dWZWeHVYRzR2S2x4dUlDb2dTR1ZzY0dWeUlHWjFibU4wYVc5dWN5Qm1iM0lnYldGdVlXZHBibWNnWlhabGJuUnpJQzB0SUc1dmRDQndZWEowSUc5bUlIUm9aU0J3ZFdKc2FXTWdhVzUwWlhKbVlXTmxMbHh1SUNvZ1VISnZjSE1nZEc4Z1JHVmhiaUJGWkhkaGNtUnpKeUJoWkdSRmRtVnVkQ0JzYVdKeVlYSjVJR1p2Y2lCdFlXNTVJRzltSUhSb1pTQnBaR1ZoY3k1Y2JpQXFMMXh1YWxGMVpYSjVMbVYyWlc1MElEMGdlMXh1WEc1Y2RHZHNiMkpoYkRvZ2UzMHNYRzVjYmx4MFlXUmtPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dkSGx3WlhNc0lHaGhibVJzWlhJc0lHUmhkR0VzSUhObGJHVmpkRzl5SUNrZ2UxeHVYRzVjZEZ4MGRtRnlJR2hoYm1Sc1pVOWlha2x1TENCbGRtVnVkRWhoYm1Sc1pTd2dkRzF3TEZ4dVhIUmNkRngwWlhabGJuUnpMQ0IwTENCb1lXNWtiR1ZQWW1vc1hHNWNkRngwWEhSemNHVmphV0ZzTENCb1lXNWtiR1Z5Y3l3Z2RIbHdaU3dnYm1GdFpYTndZV05sY3l3Z2IzSnBaMVI1Y0dVc1hHNWNkRngwWEhSbGJHVnRSR0YwWVNBOUlHUmhkR0ZRY21sMkxtZGxkQ2dnWld4bGJTQXBPMXh1WEc1Y2RGeDBMeThnUkc5dUozUWdZWFIwWVdOb0lHVjJaVzUwY3lCMGJ5QnViMFJoZEdFZ2IzSWdkR1Y0ZEM5amIyMXRaVzUwSUc1dlpHVnpJQ2hpZFhRZ1lXeHNiM2NnY0d4aGFXNGdiMkpxWldOMGN5bGNibHgwWEhScFppQW9JQ0ZsYkdWdFJHRjBZU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJEWVd4c1pYSWdZMkZ1SUhCaGMzTWdhVzRnWVc0Z2IySnFaV04wSUc5bUlHTjFjM1J2YlNCa1lYUmhJR2x1SUd4cFpYVWdiMllnZEdobElHaGhibVJzWlhKY2JseDBYSFJwWmlBb0lHaGhibVJzWlhJdWFHRnVaR3hsY2lBcElIdGNibHgwWEhSY2RHaGhibVJzWlU5aWFrbHVJRDBnYUdGdVpHeGxjanRjYmx4MFhIUmNkR2hoYm1Sc1pYSWdQU0JvWVc1a2JHVlBZbXBKYmk1b1lXNWtiR1Z5TzF4dVhIUmNkRngwYzJWc1pXTjBiM0lnUFNCb1lXNWtiR1ZQWW1wSmJpNXpaV3hsWTNSdmNqdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkZibk4xY21VZ2RHaGhkQ0JwYm5aaGJHbGtJSE5sYkdWamRHOXljeUIwYUhKdmR5QmxlR05sY0hScGIyNXpJR0YwSUdGMGRHRmphQ0IwYVcxbFhHNWNkRngwTHk4Z1JYWmhiSFZoZEdVZ1lXZGhhVzV6ZENCa2IyTjFiV1Z1ZEVWc1pXMWxiblFnYVc0Z1kyRnpaU0JsYkdWdElHbHpJR0VnYm05dUxXVnNaVzFsYm5RZ2JtOWtaU0FvWlM1bkxpd2daRzlqZFcxbGJuUXBYRzVjZEZ4MGFXWWdLQ0J6Wld4bFkzUnZjaUFwSUh0Y2JseDBYSFJjZEdwUmRXVnllUzVtYVc1a0xtMWhkR05vWlhOVFpXeGxZM1J2Y2lnZ1pHOWpkVzFsYm5SRmJHVnRaVzUwTENCelpXeGxZM1J2Y2lBcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFMWhhMlVnYzNWeVpTQjBhR0YwSUhSb1pTQm9ZVzVrYkdWeUlHaGhjeUJoSUhWdWFYRjFaU0JKUkN3Z2RYTmxaQ0IwYnlCbWFXNWtMM0psYlc5MlpTQnBkQ0JzWVhSbGNseHVYSFJjZEdsbUlDZ2dJV2hoYm1Sc1pYSXVaM1ZwWkNBcElIdGNibHgwWEhSY2RHaGhibVJzWlhJdVozVnBaQ0E5SUdwUmRXVnllUzVuZFdsa0t5czdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTVzVwZENCMGFHVWdaV3hsYldWdWRDZHpJR1YyWlc1MElITjBjblZqZEhWeVpTQmhibVFnYldGcGJpQm9ZVzVrYkdWeUxDQnBaaUIwYUdseklHbHpJSFJvWlNCbWFYSnpkRnh1WEhSY2RHbG1JQ2dnSVNnZ1pYWmxiblJ6SUQwZ1pXeGxiVVJoZEdFdVpYWmxiblJ6SUNrZ0tTQjdYRzVjZEZ4MFhIUmxkbVZ1ZEhNZ1BTQmxiR1Z0UkdGMFlTNWxkbVZ1ZEhNZ1BTQjdmVHRjYmx4MFhIUjlYRzVjZEZ4MGFXWWdLQ0FoS0NCbGRtVnVkRWhoYm1Sc1pTQTlJR1ZzWlcxRVlYUmhMbWhoYm1Sc1pTQXBJQ2tnZTF4dVhIUmNkRngwWlhabGJuUklZVzVrYkdVZ1BTQmxiR1Z0UkdGMFlTNW9ZVzVrYkdVZ1BTQm1kVzVqZEdsdmJpZ2daU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJFYVhOallYSmtJSFJvWlNCelpXTnZibVFnWlhabGJuUWdiMllnWVNCcVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNpZ3BJR0Z1WkZ4dVhIUmNkRngwWEhRdkx5QjNhR1Z1SUdGdUlHVjJaVzUwSUdseklHTmhiR3hsWkNCaFpuUmxjaUJoSUhCaFoyVWdhR0Z6SUhWdWJHOWhaR1ZrWEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwZVhCbGIyWWdhbEYxWlhKNUlDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlDWW1JR3BSZFdWeWVTNWxkbVZ1ZEM1MGNtbG5aMlZ5WldRZ0lUMDlJR1V1ZEhsd1pTQS9YRzVjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbVYyWlc1MExtUnBjM0JoZEdOb0xtRndjR3g1S0NCbGJHVnRMQ0JoY21kMWJXVnVkSE1nS1NBNklIVnVaR1ZtYVc1bFpEdGNibHgwWEhSY2RIMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTR0Z1Wkd4bElHMTFiSFJwY0d4bElHVjJaVzUwY3lCelpYQmhjbUYwWldRZ1lua2dZU0J6Y0dGalpWeHVYSFJjZEhSNWNHVnpJRDBnS0NCMGVYQmxjeUI4ZkNCY0lsd2lJQ2t1YldGMFkyZ29JSEp1YjNSb2RHMXNkMmhwZEdVZ0tTQjhmQ0JiSUZ3aVhDSWdYVHRjYmx4MFhIUjBJRDBnZEhsd1pYTXViR1Z1WjNSb08xeHVYSFJjZEhkb2FXeGxJQ2dnZEMwdElDa2dlMXh1WEhSY2RGeDBkRzF3SUQwZ2NuUjVjR1Z1WVcxbGMzQmhZMlV1WlhobFl5Z2dkSGx3WlhOYklIUWdYU0FwSUh4OElGdGRPMXh1WEhSY2RGeDBkSGx3WlNBOUlHOXlhV2RVZVhCbElEMGdkRzF3V3lBeElGMDdYRzVjZEZ4MFhIUnVZVzFsYzNCaFkyVnpJRDBnS0NCMGJYQmJJRElnWFNCOGZDQmNJbHdpSUNrdWMzQnNhWFFvSUZ3aUxsd2lJQ2t1YzI5eWRDZ3BPMXh1WEc1Y2RGeDBYSFF2THlCVWFHVnlaU0FxYlhWemRDb2dZbVVnWVNCMGVYQmxMQ0J1YnlCaGRIUmhZMmhwYm1jZ2JtRnRaWE53WVdObExXOXViSGtnYUdGdVpHeGxjbk5jYmx4MFhIUmNkR2xtSUNnZ0lYUjVjR1VnS1NCN1hHNWNkRngwWEhSY2RHTnZiblJwYm5WbE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJKWmlCbGRtVnVkQ0JqYUdGdVoyVnpJR2wwY3lCMGVYQmxMQ0IxYzJVZ2RHaGxJSE53WldOcFlXd2daWFpsYm5RZ2FHRnVaR3hsY25NZ1ptOXlJSFJvWlNCamFHRnVaMlZrSUhSNWNHVmNibHgwWEhSY2RITndaV05wWVd3Z1BTQnFVWFZsY25rdVpYWmxiblF1YzNCbFkybGhiRnNnZEhsd1pTQmRJSHg4SUh0OU8xeHVYRzVjZEZ4MFhIUXZMeUJKWmlCelpXeGxZM1J2Y2lCa1pXWnBibVZrTENCa1pYUmxjbTFwYm1VZ2MzQmxZMmxoYkNCbGRtVnVkQ0JoY0drZ2RIbHdaU3dnYjNSb1pYSjNhWE5sSUdkcGRtVnVJSFI1Y0dWY2JseDBYSFJjZEhSNWNHVWdQU0FvSUhObGJHVmpkRzl5SUQ4Z2MzQmxZMmxoYkM1a1pXeGxaMkYwWlZSNWNHVWdPaUJ6Y0dWamFXRnNMbUpwYm1SVWVYQmxJQ2tnZkh3Z2RIbHdaVHRjYmx4dVhIUmNkRngwTHk4Z1ZYQmtZWFJsSUhOd1pXTnBZV3dnWW1GelpXUWdiMjRnYm1WM2JIa2djbVZ6WlhRZ2RIbHdaVnh1WEhSY2RGeDBjM0JsWTJsaGJDQTlJR3BSZFdWeWVTNWxkbVZ1ZEM1emNHVmphV0ZzV3lCMGVYQmxJRjBnZkh3Z2UzMDdYRzVjYmx4MFhIUmNkQzh2SUdoaGJtUnNaVTlpYWlCcGN5QndZWE56WldRZ2RHOGdZV3hzSUdWMlpXNTBJR2hoYm1Sc1pYSnpYRzVjZEZ4MFhIUm9ZVzVrYkdWUFltb2dQU0JxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjZEZ4MFhIUmNkSFI1Y0dVNklIUjVjR1VzWEc1Y2RGeDBYSFJjZEc5eWFXZFVlWEJsT2lCdmNtbG5WSGx3WlN4Y2JseDBYSFJjZEZ4MFpHRjBZVG9nWkdGMFlTeGNibHgwWEhSY2RGeDBhR0Z1Wkd4bGNqb2dhR0Z1Wkd4bGNpeGNibHgwWEhSY2RGeDBaM1ZwWkRvZ2FHRnVaR3hsY2k1bmRXbGtMRnh1WEhSY2RGeDBYSFJ6Wld4bFkzUnZjam9nYzJWc1pXTjBiM0lzWEc1Y2RGeDBYSFJjZEc1bFpXUnpRMjl1ZEdWNGREb2djMlZzWldOMGIzSWdKaVlnYWxGMVpYSjVMbVY0Y0hJdWJXRjBZMmd1Ym1WbFpITkRiMjUwWlhoMExuUmxjM1FvSUhObGJHVmpkRzl5SUNrc1hHNWNkRngwWEhSY2RHNWhiV1Z6Y0dGalpUb2dibUZ0WlhOd1lXTmxjeTVxYjJsdUtDQmNJaTVjSWlBcFhHNWNkRngwWEhSOUxDQm9ZVzVrYkdWUFltcEpiaUFwTzF4dVhHNWNkRngwWEhRdkx5QkpibWwwSUhSb1pTQmxkbVZ1ZENCb1lXNWtiR1Z5SUhGMVpYVmxJR2xtSUhkbEozSmxJSFJvWlNCbWFYSnpkRnh1WEhSY2RGeDBhV1lnS0NBaEtDQm9ZVzVrYkdWeWN5QTlJR1YyWlc1MGMxc2dkSGx3WlNCZElDa2dLU0I3WEc1Y2RGeDBYSFJjZEdoaGJtUnNaWEp6SUQwZ1pYWmxiblJ6V3lCMGVYQmxJRjBnUFNCYlhUdGNibHgwWEhSY2RGeDBhR0Z1Wkd4bGNuTXVaR1ZzWldkaGRHVkRiM1Z1ZENBOUlEQTdYRzVjYmx4MFhIUmNkRngwTHk4Z1QyNXNlU0IxYzJVZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2lCcFppQjBhR1VnYzNCbFkybGhiQ0JsZG1WdWRITWdhR0Z1Wkd4bGNpQnlaWFIxY201eklHWmhiSE5sWEc1Y2RGeDBYSFJjZEdsbUlDZ2dJWE53WldOcFlXd3VjMlYwZFhBZ2ZIeGNibHgwWEhSY2RGeDBYSFJ6Y0dWamFXRnNMbk5sZEhWd0xtTmhiR3dvSUdWc1pXMHNJR1JoZEdFc0lHNWhiV1Z6Y0dGalpYTXNJR1YyWlc1MFNHRnVaR3hsSUNrZ1BUMDlJR1poYkhObElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JsYkdWdExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbGJHVnRMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9JSFI1Y0dVc0lHVjJaVzUwU0dGdVpHeGxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNnZ2MzQmxZMmxoYkM1aFpHUWdLU0I3WEc1Y2RGeDBYSFJjZEhOd1pXTnBZV3d1WVdSa0xtTmhiR3dvSUdWc1pXMHNJR2hoYm1Sc1pVOWlhaUFwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnSVdoaGJtUnNaVTlpYWk1b1lXNWtiR1Z5TG1kMWFXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFHRnVaR3hsVDJKcUxtaGhibVJzWlhJdVozVnBaQ0E5SUdoaGJtUnNaWEl1WjNWcFpEdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCQlpHUWdkRzhnZEdobElHVnNaVzFsYm5RbmN5Qm9ZVzVrYkdWeUlHeHBjM1FzSUdSbGJHVm5ZWFJsY3lCcGJpQm1jbTl1ZEZ4dVhIUmNkRngwYVdZZ0tDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUmNkRngwYUdGdVpHeGxjbk11YzNCc2FXTmxLQ0JvWVc1a2JHVnljeTVrWld4bFoyRjBaVU52ZFc1MEt5c3NJREFzSUdoaGJtUnNaVTlpYWlBcE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGFHRnVaR3hsY25NdWNIVnphQ2dnYUdGdVpHeGxUMkpxSUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRXRsWlhBZ2RISmhZMnNnYjJZZ2QyaHBZMmdnWlhabGJuUnpJR2hoZG1VZ1pYWmxjaUJpWldWdUlIVnpaV1FzSUdadmNpQmxkbVZ1ZENCdmNIUnBiV2w2WVhScGIyNWNibHgwWEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzVuYkc5aVlXeGJJSFI1Y0dVZ1hTQTlJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhHNWNkSDBzWEc1Y2JseDBMeThnUkdWMFlXTm9JR0Z1SUdWMlpXNTBJRzl5SUhObGRDQnZaaUJsZG1WdWRITWdabkp2YlNCaGJpQmxiR1Z0Wlc1MFhHNWNkSEpsYlc5MlpUb2dablZ1WTNScGIyNG9JR1ZzWlcwc0lIUjVjR1Z6TENCb1lXNWtiR1Z5TENCelpXeGxZM1J2Y2l3Z2JXRndjR1ZrVkhsd1pYTWdLU0I3WEc1Y2JseDBYSFIyWVhJZ2Fpd2diM0pwWjBOdmRXNTBMQ0IwYlhBc1hHNWNkRngwWEhSbGRtVnVkSE1zSUhRc0lHaGhibVJzWlU5aWFpeGNibHgwWEhSY2RITndaV05wWVd3c0lHaGhibVJzWlhKekxDQjBlWEJsTENCdVlXMWxjM0JoWTJWekxDQnZjbWxuVkhsd1pTeGNibHgwWEhSY2RHVnNaVzFFWVhSaElEMGdaR0YwWVZCeWFYWXVhR0Z6UkdGMFlTZ2daV3hsYlNBcElDWW1JR1JoZEdGUWNtbDJMbWRsZENnZ1pXeGxiU0FwTzF4dVhHNWNkRngwYVdZZ0tDQWhaV3hsYlVSaGRHRWdmSHdnSVNnZ1pYWmxiblJ6SUQwZ1pXeGxiVVJoZEdFdVpYWmxiblJ6SUNrZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1QyNWpaU0JtYjNJZ1pXRmphQ0IwZVhCbExtNWhiV1Z6Y0dGalpTQnBiaUIwZVhCbGN6c2dkSGx3WlNCdFlYa2dZbVVnYjIxcGRIUmxaRnh1WEhSY2RIUjVjR1Z6SUQwZ0tDQjBlWEJsY3lCOGZDQmNJbHdpSUNrdWJXRjBZMmdvSUhKdWIzUm9kRzFzZDJocGRHVWdLU0I4ZkNCYklGd2lYQ0lnWFR0Y2JseDBYSFIwSUQwZ2RIbHdaWE11YkdWdVozUm9PMXh1WEhSY2RIZG9hV3hsSUNnZ2RDMHRJQ2tnZTF4dVhIUmNkRngwZEcxd0lEMGdjblI1Y0dWdVlXMWxjM0JoWTJVdVpYaGxZeWdnZEhsd1pYTmJJSFFnWFNBcElIeDhJRnRkTzF4dVhIUmNkRngwZEhsd1pTQTlJRzl5YVdkVWVYQmxJRDBnZEcxd1d5QXhJRjA3WEc1Y2RGeDBYSFJ1WVcxbGMzQmhZMlZ6SUQwZ0tDQjBiWEJiSURJZ1hTQjhmQ0JjSWx3aUlDa3VjM0JzYVhRb0lGd2lMbHdpSUNrdWMyOXlkQ2dwTzF4dVhHNWNkRngwWEhRdkx5QlZibUpwYm1RZ1lXeHNJR1YyWlc1MGN5QW9iMjRnZEdocGN5QnVZVzFsYzNCaFkyVXNJR2xtSUhCeWIzWnBaR1ZrS1NCbWIzSWdkR2hsSUdWc1pXMWxiblJjYmx4MFhIUmNkR2xtSUNnZ0lYUjVjR1VnS1NCN1hHNWNkRngwWEhSY2RHWnZjaUFvSUhSNWNHVWdhVzRnWlhabGJuUnpJQ2tnZTF4dVhIUmNkRngwWEhSY2RHcFJkV1Z5ZVM1bGRtVnVkQzV5WlcxdmRtVW9JR1ZzWlcwc0lIUjVjR1VnS3lCMGVYQmxjMXNnZENCZExDQm9ZVzVrYkdWeUxDQnpaV3hsWTNSdmNpd2dkSEoxWlNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJ6Y0dWamFXRnNJRDBnYWxGMVpYSjVMbVYyWlc1MExuTndaV05wWVd4YklIUjVjR1VnWFNCOGZDQjdmVHRjYmx4MFhIUmNkSFI1Y0dVZ1BTQW9JSE5sYkdWamRHOXlJRDhnYzNCbFkybGhiQzVrWld4bFoyRjBaVlI1Y0dVZ09pQnpjR1ZqYVdGc0xtSnBibVJVZVhCbElDa2dmSHdnZEhsd1pUdGNibHgwWEhSY2RHaGhibVJzWlhKeklEMGdaWFpsYm5Seld5QjBlWEJsSUYwZ2ZId2dXMTA3WEc1Y2RGeDBYSFIwYlhBZ1BTQjBiWEJiSURJZ1hTQW1KbHh1WEhSY2RGeDBYSFJ1WlhjZ1VtVm5SWGh3S0NCY0lpaGVmRnhjWEZ3dUtWd2lJQ3NnYm1GdFpYTndZV05sY3k1cWIybHVLQ0JjSWx4Y1hGd3VLRDg2TGlwY1hGeGNMbndwWENJZ0tTQXJJRndpS0Z4Y1hGd3VmQ1FwWENJZ0tUdGNibHh1WEhSY2RGeDBMeThnVW1WdGIzWmxJRzFoZEdOb2FXNW5JR1YyWlc1MGMxeHVYSFJjZEZ4MGIzSnBaME52ZFc1MElEMGdhaUE5SUdoaGJtUnNaWEp6TG14bGJtZDBhRHRjYmx4MFhIUmNkSGRvYVd4bElDZ2dhaTB0SUNrZ2UxeHVYSFJjZEZ4MFhIUm9ZVzVrYkdWUFltb2dQU0JvWVc1a2JHVnljMXNnYWlCZE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNnZ0tDQnRZWEJ3WldSVWVYQmxjeUI4ZkNCdmNtbG5WSGx3WlNBOVBUMGdhR0Z1Wkd4bFQySnFMbTl5YVdkVWVYQmxJQ2tnSmlaY2JseDBYSFJjZEZ4MFhIUW9JQ0ZvWVc1a2JHVnlJSHg4SUdoaGJtUnNaWEl1WjNWcFpDQTlQVDBnYUdGdVpHeGxUMkpxTG1kMWFXUWdLU0FtSmx4dVhIUmNkRngwWEhSY2RDZ2dJWFJ0Y0NCOGZDQjBiWEF1ZEdWemRDZ2dhR0Z1Wkd4bFQySnFMbTVoYldWemNHRmpaU0FwSUNrZ0ppWmNibHgwWEhSY2RGeDBYSFFvSUNGelpXeGxZM1J2Y2lCOGZDQnpaV3hsWTNSdmNpQTlQVDBnYUdGdVpHeGxUMkpxTG5ObGJHVmpkRzl5SUh4OFhHNWNkRngwWEhSY2RGeDBYSFJ6Wld4bFkzUnZjaUE5UFQwZ1hDSXFLbHdpSUNZbUlHaGhibVJzWlU5aWFpNXpaV3hsWTNSdmNpQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RHaGhibVJzWlhKekxuTndiR2xqWlNnZ2Fpd2dNU0FwTzF4dVhHNWNkRngwWEhSY2RGeDBhV1lnS0NCb1lXNWtiR1ZQWW1vdWMyVnNaV04wYjNJZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSb1lXNWtiR1Z5Y3k1a1pXeGxaMkYwWlVOdmRXNTBMUzA3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2MzQmxZMmxoYkM1eVpXMXZkbVVnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ6Y0dWamFXRnNMbkpsYlc5MlpTNWpZV3hzS0NCbGJHVnRMQ0JvWVc1a2JHVlBZbW9nS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1VtVnRiM1psSUdkbGJtVnlhV01nWlhabGJuUWdhR0Z1Wkd4bGNpQnBaaUIzWlNCeVpXMXZkbVZrSUhOdmJXVjBhR2x1WnlCaGJtUWdibThnYlc5eVpTQm9ZVzVrYkdWeWN5QmxlR2x6ZEZ4dVhIUmNkRngwTHk4Z0tHRjJiMmxrY3lCd2IzUmxiblJwWVd3Z1ptOXlJR1Z1Wkd4bGMzTWdjbVZqZFhKemFXOXVJR1IxY21sdVp5QnlaVzF2ZG1Gc0lHOW1JSE53WldOcFlXd2daWFpsYm5RZ2FHRnVaR3hsY25NcFhHNWNkRngwWEhScFppQW9JRzl5YVdkRGIzVnVkQ0FtSmlBaGFHRnVaR3hsY25NdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUNGemNHVmphV0ZzTG5SbFlYSmtiM2R1SUh4OFhHNWNkRngwWEhSY2RGeDBjM0JsWTJsaGJDNTBaV0Z5Wkc5M2JpNWpZV3hzS0NCbGJHVnRMQ0J1WVcxbGMzQmhZMlZ6TENCbGJHVnRSR0YwWVM1b1lXNWtiR1VnS1NBOVBUMGdabUZzYzJVZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1Y21WdGIzWmxSWFpsYm5Rb0lHVnNaVzBzSUhSNWNHVXNJR1ZzWlcxRVlYUmhMbWhoYm1Sc1pTQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFpHVnNaWFJsSUdWMlpXNTBjMXNnZEhsd1pTQmRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRkpsYlc5MlpTQmtZWFJoSUdGdVpDQjBhR1VnWlhod1lXNWtieUJwWmlCcGRDZHpJRzV2SUd4dmJtZGxjaUIxYzJWa1hHNWNkRngwYVdZZ0tDQnFVWFZsY25rdWFYTkZiWEIwZVU5aWFtVmpkQ2dnWlhabGJuUnpJQ2tnS1NCN1hHNWNkRngwWEhSa1lYUmhVSEpwZGk1eVpXMXZkbVVvSUdWc1pXMHNJRndpYUdGdVpHeGxJR1YyWlc1MGMxd2lJQ2s3WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEdScGMzQmhkR05vT2lCbWRXNWpkR2x2YmlnZ2JtRjBhWFpsUlhabGJuUWdLU0I3WEc1Y2JseDBYSFF2THlCTllXdGxJR0VnZDNKcGRHRmliR1VnYWxGMVpYSjVMa1YyWlc1MElHWnliMjBnZEdobElHNWhkR2wyWlNCbGRtVnVkQ0J2WW1wbFkzUmNibHgwWEhSMllYSWdaWFpsYm5RZ1BTQnFVWFZsY25rdVpYWmxiblF1Wm1sNEtDQnVZWFJwZG1WRmRtVnVkQ0FwTzF4dVhHNWNkRngwZG1GeUlHa3NJR29zSUhKbGRDd2diV0YwWTJobFpDd2dhR0Z1Wkd4bFQySnFMQ0JvWVc1a2JHVnlVWFZsZFdVc1hHNWNkRngwWEhSaGNtZHpJRDBnYm1WM0lFRnljbUY1S0NCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNrc1hHNWNkRngwWEhSb1lXNWtiR1Z5Y3lBOUlDZ2daR0YwWVZCeWFYWXVaMlYwS0NCMGFHbHpMQ0JjSW1WMlpXNTBjMXdpSUNrZ2ZId2dlMzBnS1ZzZ1pYWmxiblF1ZEhsd1pTQmRJSHg4SUZ0ZExGeHVYSFJjZEZ4MGMzQmxZMmxoYkNBOUlHcFJkV1Z5ZVM1bGRtVnVkQzV6Y0dWamFXRnNXeUJsZG1WdWRDNTBlWEJsSUYwZ2ZId2dlMzA3WEc1Y2JseDBYSFF2THlCVmMyVWdkR2hsSUdacGVDMWxaQ0JxVVhWbGNua3VSWFpsYm5RZ2NtRjBhR1Z5SUhSb1lXNGdkR2hsSUNoeVpXRmtMVzl1YkhrcElHNWhkR2wyWlNCbGRtVnVkRnh1WEhSY2RHRnlaM05iSURBZ1hTQTlJR1YyWlc1ME8xeHVYRzVjZEZ4MFptOXlJQ2dnYVNBOUlERTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJoY21keld5QnBJRjBnUFNCaGNtZDFiV1Z1ZEhOYklHa2dYVHRjYmx4MFhIUjlYRzVjYmx4MFhIUmxkbVZ1ZEM1a1pXeGxaMkYwWlZSaGNtZGxkQ0E5SUhSb2FYTTdYRzVjYmx4MFhIUXZMeUJEWVd4c0lIUm9aU0J3Y21WRWFYTndZWFJqYUNCb2IyOXJJR1p2Y2lCMGFHVWdiV0Z3Y0dWa0lIUjVjR1VzSUdGdVpDQnNaWFFnYVhRZ1ltRnBiQ0JwWmlCa1pYTnBjbVZrWEc1Y2RGeDBhV1lnS0NCemNHVmphV0ZzTG5CeVpVUnBjM0JoZEdOb0lDWW1JSE53WldOcFlXd3VjSEpsUkdsemNHRjBZMmd1WTJGc2JDZ2dkR2hwY3l3Z1pYWmxiblFnS1NBOVBUMGdabUZzYzJVZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1JHVjBaWEp0YVc1bElHaGhibVJzWlhKelhHNWNkRngwYUdGdVpHeGxjbEYxWlhWbElEMGdhbEYxWlhKNUxtVjJaVzUwTG1oaGJtUnNaWEp6TG1OaGJHd29JSFJvYVhNc0lHVjJaVzUwTENCb1lXNWtiR1Z5Y3lBcE8xeHVYRzVjZEZ4MEx5OGdVblZ1SUdSbGJHVm5ZWFJsY3lCbWFYSnpkRHNnZEdobGVTQnRZWGtnZDJGdWRDQjBieUJ6ZEc5d0lIQnliM0JoWjJGMGFXOXVJR0psYm1WaGRHZ2dkWE5jYmx4MFhIUnBJRDBnTUR0Y2JseDBYSFIzYUdsc1pTQW9JQ2dnYldGMFkyaGxaQ0E5SUdoaGJtUnNaWEpSZFdWMVpWc2dhU3NySUYwZ0tTQW1KaUFoWlhabGJuUXVhWE5RY205d1lXZGhkR2x2YmxOMGIzQndaV1FvS1NBcElIdGNibHgwWEhSY2RHVjJaVzUwTG1OMWNuSmxiblJVWVhKblpYUWdQU0J0WVhSamFHVmtMbVZzWlcwN1hHNWNibHgwWEhSY2RHb2dQU0F3TzF4dVhIUmNkRngwZDJocGJHVWdLQ0FvSUdoaGJtUnNaVTlpYWlBOUlHMWhkR05vWldRdWFHRnVaR3hsY25OYklHb3JLeUJkSUNrZ0ppWmNibHgwWEhSY2RGeDBJV1YyWlc1MExtbHpTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtLQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnVkhKcFoyZGxjbVZrSUdWMlpXNTBJRzExYzNRZ1pXbDBhR1Z5SURFcElHaGhkbVVnYm04Z2JtRnRaWE53WVdObExDQnZjaUF5S1NCb1lYWmxJRzVoYldWemNHRmpaU2h6S1Z4dVhIUmNkRngwWEhRdkx5QmhJSE4xWW5ObGRDQnZjaUJsY1hWaGJDQjBieUIwYUc5elpTQnBiaUIwYUdVZ1ltOTFibVFnWlhabGJuUWdLR0p2ZEdnZ1kyRnVJR2hoZG1VZ2JtOGdibUZ0WlhOd1lXTmxLUzVjYmx4MFhIUmNkRngwYVdZZ0tDQWhaWFpsYm5RdWNtNWhiV1Z6Y0dGalpTQjhmQ0JsZG1WdWRDNXlibUZ0WlhOd1lXTmxMblJsYzNRb0lHaGhibVJzWlU5aWFpNXVZVzFsYzNCaFkyVWdLU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkR1YyWlc1MExtaGhibVJzWlU5aWFpQTlJR2hoYm1Sc1pVOWlhanRjYmx4MFhIUmNkRngwWEhSbGRtVnVkQzVrWVhSaElEMGdhR0Z1Wkd4bFQySnFMbVJoZEdFN1hHNWNibHgwWEhSY2RGeDBYSFJ5WlhRZ1BTQW9JQ2dnYWxGMVpYSjVMbVYyWlc1MExuTndaV05wWVd4YklHaGhibVJzWlU5aWFpNXZjbWxuVkhsd1pTQmRJSHg4SUh0OUlDa3VhR0Z1Wkd4bElIeDhYRzVjZEZ4MFhIUmNkRngwWEhSb1lXNWtiR1ZQWW1vdWFHRnVaR3hsY2lBcExtRndjR3g1S0NCdFlYUmphR1ZrTG1Wc1pXMHNJR0Z5WjNNZ0tUdGNibHh1WEhSY2RGeDBYSFJjZEdsbUlDZ2djbVYwSUNFOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUNnZ1pYWmxiblF1Y21WemRXeDBJRDBnY21WMElDa2dQVDA5SUdaaGJITmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSbGRtVnVkQzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFF2THlCRFlXeHNJSFJvWlNCd2IzTjBSR2x6Y0dGMFkyZ2dhRzl2YXlCbWIzSWdkR2hsSUcxaGNIQmxaQ0IwZVhCbFhHNWNkRngwYVdZZ0tDQnpjR1ZqYVdGc0xuQnZjM1JFYVhOd1lYUmphQ0FwSUh0Y2JseDBYSFJjZEhOd1pXTnBZV3d1Y0c5emRFUnBjM0JoZEdOb0xtTmhiR3dvSUhSb2FYTXNJR1YyWlc1MElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdWMlpXNTBMbkpsYzNWc2REdGNibHgwZlN4Y2JseHVYSFJvWVc1a2JHVnljem9nWm5WdVkzUnBiMjRvSUdWMlpXNTBMQ0JvWVc1a2JHVnljeUFwSUh0Y2JseDBYSFIyWVhJZ2FTd2dhR0Z1Wkd4bFQySnFMQ0J6Wld3c0lHMWhkR05vWldSSVlXNWtiR1Z5Y3l3Z2JXRjBZMmhsWkZObGJHVmpkRzl5Y3l4Y2JseDBYSFJjZEdoaGJtUnNaWEpSZFdWMVpTQTlJRnRkTEZ4dVhIUmNkRngwWkdWc1pXZGhkR1ZEYjNWdWRDQTlJR2hoYm1Sc1pYSnpMbVJsYkdWbllYUmxRMjkxYm5Rc1hHNWNkRngwWEhSamRYSWdQU0JsZG1WdWRDNTBZWEpuWlhRN1hHNWNibHgwWEhRdkx5QkdhVzVrSUdSbGJHVm5ZWFJsSUdoaGJtUnNaWEp6WEc1Y2RGeDBhV1lnS0NCa1pXeGxaMkYwWlVOdmRXNTBJQ1ltWEc1Y2JseDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T1Z4dVhIUmNkRngwTHk4Z1FteGhZMnN0YUc5c1pTQlRWa2NnUEhWelpUNGdhVzV6ZEdGdVkyVWdkSEpsWlhNZ0tIUnlZV010TVRNeE9EQXBYRzVjZEZ4MFhIUmpkWEl1Ym05a1pWUjVjR1VnSmlaY2JseHVYSFJjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dSbWx5WldadmVDQThQVFF5WEc1Y2RGeDBYSFF2THlCVGRYQndjbVZ6Y3lCemNHVmpMWFpwYjJ4aGRHbHVaeUJqYkdsamEzTWdhVzVrYVdOaGRHbHVaeUJoSUc1dmJpMXdjbWx0WVhKNUlIQnZhVzUwWlhJZ1luVjBkRzl1SUNoMGNtRmpMVE00TmpFcFhHNWNkRngwWEhRdkx5Qm9kSFJ3Y3pvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2UkU5TkxVeGxkbVZzTFRNdFJYWmxiblJ6THlObGRtVnVkQzEwZVhCbExXTnNhV05yWEc1Y2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQXhNU0J2Ym14NVhHNWNkRngwWEhRdkx5QXVMaTVpZFhRZ2JtOTBJR0Z5Y205M0lHdGxlU0JjSW1Oc2FXTnJjMXdpSUc5bUlISmhaR2x2SUdsdWNIVjBjeXdnZDJocFkyZ2dZMkZ1SUdoaGRtVWdZR0oxZEhSdmJtQWdMVEVnS0dkb0xUSXpORE1wWEc1Y2RGeDBYSFFoS0NCbGRtVnVkQzUwZVhCbElEMDlQU0JjSW1Oc2FXTnJYQ0lnSmlZZ1pYWmxiblF1WW5WMGRHOXVJRDQ5SURFZ0tTQXBJSHRjYmx4dVhIUmNkRngwWm05eUlDZ2dPeUJqZFhJZ0lUMDlJSFJvYVhNN0lHTjFjaUE5SUdOMWNpNXdZWEpsYm5ST2IyUmxJSHg4SUhSb2FYTWdLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdSRzl1SjNRZ1kyaGxZMnNnYm05dUxXVnNaVzFsYm5SeklDZ2pNVE15TURncFhHNWNkRngwWEhSY2RDOHZJRVJ2YmlkMElIQnliMk5sYzNNZ1kyeHBZMnR6SUc5dUlHUnBjMkZpYkdWa0lHVnNaVzFsYm5SeklDZ2pOamt4TVN3Z0l6Z3hOalVzSUNNeE1UTTRNaXdnSXpFeE56WTBLVnh1WEhSY2RGeDBYSFJwWmlBb0lHTjFjaTV1YjJSbFZIbHdaU0E5UFQwZ01TQW1KaUFoS0NCbGRtVnVkQzUwZVhCbElEMDlQU0JjSW1Oc2FXTnJYQ0lnSmlZZ1kzVnlMbVJwYzJGaWJHVmtJRDA5UFNCMGNuVmxJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBiV0YwWTJobFpFaGhibVJzWlhKeklEMGdXMTA3WEc1Y2RGeDBYSFJjZEZ4MGJXRjBZMmhsWkZObGJHVmpkRzl5Y3lBOUlIdDlPMXh1WEhSY2RGeDBYSFJjZEdadmNpQW9JR2tnUFNBd095QnBJRHdnWkdWc1pXZGhkR1ZEYjNWdWREc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYUdGdVpHeGxUMkpxSUQwZ2FHRnVaR3hsY25OYklHa2dYVHRjYmx4dVhIUmNkRngwWEhSY2RGeDBMeThnUkc5dUozUWdZMjl1Wm14cFkzUWdkMmwwYUNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsSUhCeWIzQmxjblJwWlhNZ0tDTXhNekl3TXlsY2JseDBYSFJjZEZ4MFhIUmNkSE5sYkNBOUlHaGhibVJzWlU5aWFpNXpaV3hsWTNSdmNpQXJJRndpSUZ3aU8xeHVYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9JRzFoZEdOb1pXUlRaV3hsWTNSdmNuTmJJSE5sYkNCZElEMDlQU0IxYm1SbFptbHVaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEcxaGRHTm9aV1JUWld4bFkzUnZjbk5iSUhObGJDQmRJRDBnYUdGdVpHeGxUMkpxTG01bFpXUnpRMjl1ZEdWNGRDQS9YRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBhbEYxWlhKNUtDQnpaV3dzSUhSb2FYTWdLUzVwYm1SbGVDZ2dZM1Z5SUNrZ1BpQXRNU0E2WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbVpwYm1Rb0lITmxiQ3dnZEdocGN5d2diblZzYkN3Z1d5QmpkWElnWFNBcExteGxibWQwYUR0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnYldGMFkyaGxaRk5sYkdWamRHOXljMXNnYzJWc0lGMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRzFoZEdOb1pXUklZVzVrYkdWeWN5NXdkWE5vS0NCb1lXNWtiR1ZQWW1vZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQnRZWFJqYUdWa1NHRnVaR3hsY25NdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYUdGdVpHeGxjbEYxWlhWbExuQjFjMmdvSUhzZ1pXeGxiVG9nWTNWeUxDQm9ZVzVrYkdWeWN6b2diV0YwWTJobFpFaGhibVJzWlhKeklIMGdLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkJaR1FnZEdobElISmxiV0ZwYm1sdVp5QW9aR2x5WldOMGJIa3RZbTkxYm1RcElHaGhibVJzWlhKelhHNWNkRngwWTNWeUlEMGdkR2hwY3p0Y2JseDBYSFJwWmlBb0lHUmxiR1ZuWVhSbFEyOTFiblFnUENCb1lXNWtiR1Z5Y3k1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSb1lXNWtiR1Z5VVhWbGRXVXVjSFZ6YUNnZ2V5QmxiR1Z0T2lCamRYSXNJR2hoYm1Sc1pYSnpPaUJvWVc1a2JHVnljeTV6YkdsalpTZ2daR1ZzWldkaGRHVkRiM1Z1ZENBcElIMGdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2FHRnVaR3hsY2xGMVpYVmxPMXh1WEhSOUxGeHVYRzVjZEdGa1pGQnliM0E2SUdaMWJtTjBhVzl1S0NCdVlXMWxMQ0JvYjI5cklDa2dlMXh1WEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2dnYWxGMVpYSjVMa1YyWlc1MExuQnliM1J2ZEhsd1pTd2dibUZ0WlN3Z2UxeHVYSFJjZEZ4MFpXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JseDBYSFJjZEdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JseHVYSFJjZEZ4MFoyVjBPaUJwYzBaMWJtTjBhVzl1S0NCb2IyOXJJQ2tnUDF4dVhIUmNkRngwWEhSbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lIUm9hWE11YjNKcFoybHVZV3hGZG1WdWRDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlHaHZiMnNvSUhSb2FYTXViM0pwWjJsdVlXeEZkbVZ1ZENBcE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlNBNlhHNWNkRngwWEhSY2RHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dkR2hwY3k1dmNtbG5hVzVoYkVWMlpXNTBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1dmNtbG5hVzVoYkVWMlpXNTBXeUJ1WVcxbElGMDdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUnpaWFE2SUdaMWJtTjBhVzl1S0NCMllXeDFaU0FwSUh0Y2JseDBYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLQ0IwYUdsekxDQnVZVzFsTENCN1hHNWNkRngwWEhSY2RGeDBaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNibHgwWEhSY2RGeDBYSFJqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc1Y2RGeDBYSFJjZEZ4MGQzSnBkR0ZpYkdVNklIUnlkV1VzWEc1Y2RGeDBYSFJjZEZ4MGRtRnNkV1U2SUhaaGJIVmxYRzVjZEZ4MFhIUmNkSDBnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5SUNrN1hHNWNkSDBzWEc1Y2JseDBabWw0T2lCbWRXNWpkR2x2YmlnZ2IzSnBaMmx1WVd4RmRtVnVkQ0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdiM0pwWjJsdVlXeEZkbVZ1ZEZzZ2FsRjFaWEo1TG1WNGNHRnVaRzhnWFNBL1hHNWNkRngwWEhSdmNtbG5hVzVoYkVWMlpXNTBJRHBjYmx4MFhIUmNkRzVsZHlCcVVYVmxjbmt1UlhabGJuUW9JRzl5YVdkcGJtRnNSWFpsYm5RZ0tUdGNibHgwZlN4Y2JseHVYSFJ6Y0dWamFXRnNPaUI3WEc1Y2RGeDBiRzloWkRvZ2UxeHVYRzVjZEZ4MFhIUXZMeUJRY21WMlpXNTBJSFJ5YVdkblpYSmxaQ0JwYldGblpTNXNiMkZrSUdWMlpXNTBjeUJtY205dElHSjFZbUpzYVc1bklIUnZJSGRwYm1SdmR5NXNiMkZrWEc1Y2RGeDBYSFJ1YjBKMVltSnNaVG9nZEhKMVpWeHVYSFJjZEgwc1hHNWNkRngwWm05amRYTTZJSHRjYmx4dVhIUmNkRngwTHk4Z1JtbHlaU0J1WVhScGRtVWdaWFpsYm5RZ2FXWWdjRzl6YzJsaWJHVWdjMjhnWW14MWNpOW1iMk4xY3lCelpYRjFaVzVqWlNCcGN5QmpiM0p5WldOMFhHNWNkRngwWEhSMGNtbG5aMlZ5T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBhV1lnS0NCMGFHbHpJQ0U5UFNCellXWmxRV04wYVhabFJXeGxiV1Z1ZENncElDWW1JSFJvYVhNdVptOWpkWE1nS1NCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1bWIyTjFjeWdwTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEdSbGJHVm5ZWFJsVkhsd1pUb2dYQ0ptYjJOMWMybHVYQ0pjYmx4MFhIUjlMRnh1WEhSY2RHSnNkWEk2SUh0Y2JseDBYSFJjZEhSeWFXZG5aWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUhSb2FYTWdQVDA5SUhOaFptVkJZM1JwZG1WRmJHVnRaVzUwS0NrZ0ppWWdkR2hwY3k1aWJIVnlJQ2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11WW14MWNpZ3BPMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJtWVd4elpUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkR1JsYkdWbllYUmxWSGx3WlRvZ1hDSm1iMk4xYzI5MWRGd2lYRzVjZEZ4MGZTeGNibHgwWEhSamJHbGphem9nZTF4dVhHNWNkRngwWEhRdkx5QkdiM0lnWTJobFkydGliM2dzSUdacGNtVWdibUYwYVhabElHVjJaVzUwSUhOdklHTm9aV05yWldRZ2MzUmhkR1VnZDJsc2JDQmlaU0J5YVdkb2RGeHVYSFJjZEZ4MGRISnBaMmRsY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ2RHaHBjeTUwZVhCbElEMDlQU0JjSW1Ob1pXTnJZbTk0WENJZ0ppWWdkR2hwY3k1amJHbGpheUFtSmlCdWIyUmxUbUZ0WlNnZ2RHaHBjeXdnWENKcGJuQjFkRndpSUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwZEdocGN5NWpiR2xqYXlncE8xeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBMeThnUm05eUlHTnliM056TFdKeWIzZHpaWElnWTI5dWMybHpkR1Z1WTNrc0lHUnZiaWQwSUdacGNtVWdibUYwYVhabElDNWpiR2xqYXlncElHOXVJR3hwYm10elhHNWNkRngwWEhSZlpHVm1ZWFZzZERvZ1puVnVZM1JwYjI0b0lHVjJaVzUwSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JtOWtaVTVoYldVb0lHVjJaVzUwTG5SaGNtZGxkQ3dnWENKaFhDSWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMRnh1WEc1Y2RGeDBZbVZtYjNKbGRXNXNiMkZrT2lCN1hHNWNkRngwWEhSd2IzTjBSR2x6Y0dGMFkyZzZJR1oxYm1OMGFXOXVLQ0JsZG1WdWRDQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkdhWEpsWm05NElESXdLMXh1WEhSY2RGeDBYSFF2THlCR2FYSmxabTk0SUdSdlpYTnVKM1FnWVd4bGNuUWdhV1lnZEdobElISmxkSFZ5YmxaaGJIVmxJR1pwWld4a0lHbHpJRzV2ZENCelpYUXVYRzVjZEZ4MFhIUmNkR2xtSUNnZ1pYWmxiblF1Y21WemRXeDBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdaWFpsYm5RdWIzSnBaMmx1WVd4RmRtVnVkQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmxkbVZ1ZEM1dmNtbG5hVzVoYkVWMlpXNTBMbkpsZEhWeWJsWmhiSFZsSUQwZ1pYWmxiblF1Y21WemRXeDBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNTlPMXh1WEc1cVVYVmxjbmt1Y21WdGIzWmxSWFpsYm5RZ1BTQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z2RIbHdaU3dnYUdGdVpHeGxJQ2tnZTF4dVhHNWNkQzh2SUZSb2FYTWdYQ0pwWmx3aUlHbHpJRzVsWldSbFpDQm1iM0lnY0d4aGFXNGdiMkpxWldOMGMxeHVYSFJwWmlBb0lHVnNaVzB1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lBcElIdGNibHgwWEhSbGJHVnRMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSUhSNWNHVXNJR2hoYm1Sc1pTQXBPMXh1WEhSOVhHNTlPMXh1WEc1cVVYVmxjbmt1UlhabGJuUWdQU0JtZFc1amRHbHZiaWdnYzNKakxDQndjbTl3Y3lBcElIdGNibHh1WEhRdkx5QkJiR3h2ZHlCcGJuTjBZVzUwYVdGMGFXOXVJSGRwZEdodmRYUWdkR2hsSUNkdVpYY25JR3RsZVhkdmNtUmNibHgwYVdZZ0tDQWhLQ0IwYUdseklHbHVjM1JoYm1ObGIyWWdhbEYxWlhKNUxrVjJaVzUwSUNrZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUc1bGR5QnFVWFZsY25rdVJYWmxiblFvSUhOeVl5d2djSEp2Y0hNZ0tUdGNibHgwZlZ4dVhHNWNkQzh2SUVWMlpXNTBJRzlpYW1WamRGeHVYSFJwWmlBb0lITnlZeUFtSmlCemNtTXVkSGx3WlNBcElIdGNibHgwWEhSMGFHbHpMbTl5YVdkcGJtRnNSWFpsYm5RZ1BTQnpjbU03WEc1Y2RGeDBkR2hwY3k1MGVYQmxJRDBnYzNKakxuUjVjR1U3WEc1Y2JseDBYSFF2THlCRmRtVnVkSE1nWW5WaVlteHBibWNnZFhBZ2RHaGxJR1J2WTNWdFpXNTBJRzFoZVNCb1lYWmxJR0psWlc0Z2JXRnlhMlZrSUdGeklIQnlaWFpsYm5SbFpGeHVYSFJjZEM4dklHSjVJR0VnYUdGdVpHeGxjaUJzYjNkbGNpQmtiM2R1SUhSb1pTQjBjbVZsT3lCeVpXWnNaV04wSUhSb1pTQmpiM0p5WldOMElIWmhiSFZsTGx4dVhIUmNkSFJvYVhNdWFYTkVaV1poZFd4MFVISmxkbVZ1ZEdWa0lEMGdjM0pqTG1SbFptRjFiSFJRY21WMlpXNTBaV1FnZkh4Y2JseDBYSFJjZEZ4MGMzSmpMbVJsWm1GMWJIUlFjbVYyWlc1MFpXUWdQVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVYRzVjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUVGdVpISnZhV1FnUEQweUxqTWdiMjVzZVZ4dVhIUmNkRngwWEhSemNtTXVjbVYwZFhKdVZtRnNkV1VnUFQwOUlHWmhiSE5sSUQ5Y2JseDBYSFJjZEhKbGRIVnlibFJ5ZFdVZ09seHVYSFJjZEZ4MGNtVjBkWEp1Um1Gc2MyVTdYRzVjYmx4MFhIUXZMeUJEY21WaGRHVWdkR0Z5WjJWMElIQnliM0JsY25ScFpYTmNibHgwWEhRdkx5QlRkWEJ3YjNKME9pQlRZV1poY21rZ1BEMDJJQzBnTnlCdmJteDVYRzVjZEZ4MEx5OGdWR0Z5WjJWMElITm9iM1ZzWkNCdWIzUWdZbVVnWVNCMFpYaDBJRzV2WkdVZ0tDTTFNRFFzSUNNeE16RTBNeWxjYmx4MFhIUjBhR2x6TG5SaGNtZGxkQ0E5SUNnZ2MzSmpMblJoY21kbGRDQW1KaUJ6Y21NdWRHRnlaMlYwTG01dlpHVlVlWEJsSUQwOVBTQXpJQ2tnUDF4dVhIUmNkRngwYzNKakxuUmhjbWRsZEM1d1lYSmxiblJPYjJSbElEcGNibHgwWEhSY2RITnlZeTUwWVhKblpYUTdYRzVjYmx4MFhIUjBhR2x6TG1OMWNuSmxiblJVWVhKblpYUWdQU0J6Y21NdVkzVnljbVZ1ZEZSaGNtZGxkRHRjYmx4MFhIUjBhR2x6TG5KbGJHRjBaV1JVWVhKblpYUWdQU0J6Y21NdWNtVnNZWFJsWkZSaGNtZGxkRHRjYmx4dVhIUXZMeUJGZG1WdWRDQjBlWEJsWEc1Y2RIMGdaV3h6WlNCN1hHNWNkRngwZEdocGN5NTBlWEJsSUQwZ2MzSmpPMXh1WEhSOVhHNWNibHgwTHk4Z1VIVjBJR1Y0Y0d4cFkybDBiSGtnY0hKdmRtbGtaV1FnY0hKdmNHVnlkR2xsY3lCdmJuUnZJSFJvWlNCbGRtVnVkQ0J2WW1wbFkzUmNibHgwYVdZZ0tDQndjbTl3Y3lBcElIdGNibHgwWEhScVVYVmxjbmt1WlhoMFpXNWtLQ0IwYUdsekxDQndjbTl3Y3lBcE8xeHVYSFI5WEc1Y2JseDBMeThnUTNKbFlYUmxJR0VnZEdsdFpYTjBZVzF3SUdsbUlHbHVZMjl0YVc1bklHVjJaVzUwSUdSdlpYTnVKM1FnYUdGMlpTQnZibVZjYmx4MGRHaHBjeTUwYVcxbFUzUmhiWEFnUFNCemNtTWdKaVlnYzNKakxuUnBiV1ZUZEdGdGNDQjhmQ0JFWVhSbExtNXZkeWdwTzF4dVhHNWNkQzh2SUUxaGNtc2dhWFFnWVhNZ1ptbDRaV1JjYmx4MGRHaHBjMXNnYWxGMVpYSjVMbVY0Y0dGdVpHOGdYU0E5SUhSeWRXVTdYRzU5TzF4dVhHNHZMeUJxVVhWbGNua3VSWFpsYm5RZ2FYTWdZbUZ6WldRZ2IyNGdSRTlOTXlCRmRtVnVkSE1nWVhNZ2MzQmxZMmxtYVdWa0lHSjVJSFJvWlNCRlEwMUJVMk55YVhCMElFeGhibWQxWVdkbElFSnBibVJwYm1kY2JpOHZJR2gwZEhCek9pOHZkM2QzTG5jekxtOXlaeTlVVWk4eU1EQXpMMWRFTFVSUFRTMU1aWFpsYkMwekxVVjJaVzUwY3kweU1EQXpNRE16TVM5bFkyMWhMWE5qY21sd2RDMWlhVzVrYVc1bkxtaDBiV3hjYm1wUmRXVnllUzVGZG1WdWRDNXdjbTkwYjNSNWNHVWdQU0I3WEc1Y2RHTnZibk4wY25WamRHOXlPaUJxVVhWbGNua3VSWFpsYm5Rc1hHNWNkR2x6UkdWbVlYVnNkRkJ5WlhabGJuUmxaRG9nY21WMGRYSnVSbUZzYzJVc1hHNWNkR2x6VUhKdmNHRm5ZWFJwYjI1VGRHOXdjR1ZrT2lCeVpYUjFjbTVHWVd4elpTeGNibHgwYVhOSmJXMWxaR2xoZEdWUWNtOXdZV2RoZEdsdmJsTjBiM0J3WldRNklISmxkSFZ5YmtaaGJITmxMRnh1WEhScGMxTnBiWFZzWVhSbFpEb2dabUZzYzJVc1hHNWNibHgwY0hKbGRtVnVkRVJsWm1GMWJIUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSFpoY2lCbElEMGdkR2hwY3k1dmNtbG5hVzVoYkVWMlpXNTBPMXh1WEc1Y2RGeDBkR2hwY3k1cGMwUmxabUYxYkhSUWNtVjJaVzUwWldRZ1BTQnlaWFIxY201VWNuVmxPMXh1WEc1Y2RGeDBhV1lnS0NCbElDWW1JQ0YwYUdsekxtbHpVMmx0ZFd4aGRHVmtJQ2tnZTF4dVhIUmNkRngwWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dVhIUmNkSDFjYmx4MGZTeGNibHgwYzNSdmNGQnliM0JoWjJGMGFXOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFIyWVhJZ1pTQTlJSFJvYVhNdWIzSnBaMmx1WVd4RmRtVnVkRHRjYmx4dVhIUmNkSFJvYVhNdWFYTlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUWdQU0J5WlhSMWNtNVVjblZsTzF4dVhHNWNkRngwYVdZZ0tDQmxJQ1ltSUNGMGFHbHpMbWx6VTJsdGRXeGhkR1ZrSUNrZ2UxeHVYSFJjZEZ4MFpTNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNibHgwWEhSOVhHNWNkSDBzWEc1Y2RITjBiM0JKYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmpvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MGRtRnlJR1VnUFNCMGFHbHpMbTl5YVdkcGJtRnNSWFpsYm5RN1hHNWNibHgwWEhSMGFHbHpMbWx6U1cxdFpXUnBZWFJsVUhKdmNHRm5ZWFJwYjI1VGRHOXdjR1ZrSUQwZ2NtVjBkWEp1VkhKMVpUdGNibHh1WEhSY2RHbG1JQ2dnWlNBbUppQWhkR2hwY3k1cGMxTnBiWFZzWVhSbFpDQXBJSHRjYmx4MFhIUmNkR1V1YzNSdmNFbHRiV1ZrYVdGMFpWQnliM0JoWjJGMGFXOXVLQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBkR2hwY3k1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JseDBmVnh1ZlR0Y2JseHVMeThnU1c1amJIVmtaWE1nWVd4c0lHTnZiVzF2YmlCbGRtVnVkQ0J3Y205d2N5QnBibU5zZFdScGJtY2dTMlY1UlhabGJuUWdZVzVrSUUxdmRYTmxSWFpsYm5RZ2MzQmxZMmxtYVdNZ2NISnZjSE5jYm1wUmRXVnllUzVsWVdOb0tDQjdYRzVjZEdGc2RFdGxlVG9nZEhKMVpTeGNibHgwWW5WaVlteGxjem9nZEhKMVpTeGNibHgwWTJGdVkyVnNZV0pzWlRvZ2RISjFaU3hjYmx4MFkyaGhibWRsWkZSdmRXTm9aWE02SUhSeWRXVXNYRzVjZEdOMGNteExaWGs2SUhSeWRXVXNYRzVjZEdSbGRHRnBiRG9nZEhKMVpTeGNibHgwWlhabGJuUlFhR0Z6WlRvZ2RISjFaU3hjYmx4MGJXVjBZVXRsZVRvZ2RISjFaU3hjYmx4MGNHRm5aVmc2SUhSeWRXVXNYRzVjZEhCaFoyVlpPaUIwY25WbExGeHVYSFJ6YUdsbWRFdGxlVG9nZEhKMVpTeGNibHgwZG1sbGR6b2dkSEoxWlN4Y2JseDBYQ0pqYUdGeVhDSTZJSFJ5ZFdVc1hHNWNkR05vWVhKRGIyUmxPaUIwY25WbExGeHVYSFJyWlhrNklIUnlkV1VzWEc1Y2RHdGxlVU52WkdVNklIUnlkV1VzWEc1Y2RHSjFkSFJ2YmpvZ2RISjFaU3hjYmx4MFluVjBkRzl1Y3pvZ2RISjFaU3hjYmx4MFkyeHBaVzUwV0RvZ2RISjFaU3hjYmx4MFkyeHBaVzUwV1RvZ2RISjFaU3hjYmx4MGIyWm1jMlYwV0RvZ2RISjFaU3hjYmx4MGIyWm1jMlYwV1RvZ2RISjFaU3hjYmx4MGNHOXBiblJsY2tsa09pQjBjblZsTEZ4dVhIUndiMmx1ZEdWeVZIbHdaVG9nZEhKMVpTeGNibHgwYzJOeVpXVnVXRG9nZEhKMVpTeGNibHgwYzJOeVpXVnVXVG9nZEhKMVpTeGNibHgwZEdGeVoyVjBWRzkxWTJobGN6b2dkSEoxWlN4Y2JseDBkRzlGYkdWdFpXNTBPaUIwY25WbExGeHVYSFIwYjNWamFHVnpPaUIwY25WbExGeHVYRzVjZEhkb2FXTm9PaUJtZFc1amRHbHZiaWdnWlhabGJuUWdLU0I3WEc1Y2RGeDBkbUZ5SUdKMWRIUnZiaUE5SUdWMlpXNTBMbUoxZEhSdmJqdGNibHh1WEhSY2RDOHZJRUZrWkNCM2FHbGphQ0JtYjNJZ2EyVjVJR1YyWlc1MGMxeHVYSFJjZEdsbUlDZ2daWFpsYm5RdWQyaHBZMmdnUFQwZ2JuVnNiQ0FtSmlCeWEyVjVSWFpsYm5RdWRHVnpkQ2dnWlhabGJuUXVkSGx3WlNBcElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHVjJaVzUwTG1Ob1lYSkRiMlJsSUNFOUlHNTFiR3dnUHlCbGRtVnVkQzVqYUdGeVEyOWtaU0E2SUdWMlpXNTBMbXRsZVVOdlpHVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRV1JrSUhkb2FXTm9JR1p2Y2lCamJHbGphem9nTVNBOVBUMGdiR1ZtZERzZ01pQTlQVDBnYldsa1pHeGxPeUF6SUQwOVBTQnlhV2RvZEZ4dVhIUmNkR2xtSUNnZ0lXVjJaVzUwTG5kb2FXTm9JQ1ltSUdKMWRIUnZiaUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSEp0YjNWelpVVjJaVzUwTG5SbGMzUW9JR1YyWlc1MExuUjVjR1VnS1NBcElIdGNibHgwWEhSY2RHbG1JQ2dnWW5WMGRHOXVJQ1lnTVNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlERTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNnZ1luVjBkRzl1SUNZZ01pQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRE03WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDZ2dZblYwZEc5dUlDWWdOQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SURJN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlBd08xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJsZG1WdWRDNTNhR2xqYUR0Y2JseDBmVnh1ZlN3Z2FsRjFaWEo1TG1WMlpXNTBMbUZrWkZCeWIzQWdLVHRjYmx4dUx5OGdRM0psWVhSbElHMXZkWE5sWlc1MFpYSXZiR1ZoZG1VZ1pYWmxiblJ6SUhWemFXNW5JRzF2ZFhObGIzWmxjaTl2ZFhRZ1lXNWtJR1YyWlc1MExYUnBiV1VnWTJobFkydHpYRzR2THlCemJ5QjBhR0YwSUdWMlpXNTBJR1JsYkdWbllYUnBiMjRnZDI5eWEzTWdhVzRnYWxGMVpYSjVMbHh1THk4Z1JHOGdkR2hsSUhOaGJXVWdabTl5SUhCdmFXNTBaWEpsYm5SbGNpOXdiMmx1ZEdWeWJHVmhkbVVnWVc1a0lIQnZhVzUwWlhKdmRtVnlMM0J2YVc1MFpYSnZkWFJjYmk4dlhHNHZMeUJUZFhCd2IzSjBPaUJUWVdaaGNta2dOeUJ2Ym14NVhHNHZMeUJUWVdaaGNta2djMlZ1WkhNZ2JXOTFjMlZsYm5SbGNpQjBiMjhnYjJaMFpXNDdJSE5sWlRwY2JpOHZJR2gwZEhCek9pOHZZblZuY3k1amFISnZiV2wxYlM1dmNtY3ZjQzlqYUhKdmJXbDFiUzlwYzNOMVpYTXZaR1YwWVdsc1AybGtQVFEzTURJMU9GeHVMeThnWm05eUlIUm9aU0JrWlhOamNtbHdkR2x2YmlCdlppQjBhR1VnWW5WbklDaHBkQ0JsZUdsemRHVmtJR2x1SUc5c1pHVnlJRU5vY205dFpTQjJaWEp6YVc5dWN5QmhjeUIzWld4c0tTNWNibXBSZFdWeWVTNWxZV05vS0NCN1hHNWNkRzF2ZFhObFpXNTBaWEk2SUZ3aWJXOTFjMlZ2ZG1WeVhDSXNYRzVjZEcxdmRYTmxiR1ZoZG1VNklGd2liVzkxYzJWdmRYUmNJaXhjYmx4MGNHOXBiblJsY21WdWRHVnlPaUJjSW5CdmFXNTBaWEp2ZG1WeVhDSXNYRzVjZEhCdmFXNTBaWEpzWldGMlpUb2dYQ0p3YjJsdWRHVnliM1YwWENKY2JuMHNJR1oxYm1OMGFXOXVLQ0J2Y21sbkxDQm1hWGdnS1NCN1hHNWNkR3BSZFdWeWVTNWxkbVZ1ZEM1emNHVmphV0ZzV3lCdmNtbG5JRjBnUFNCN1hHNWNkRngwWkdWc1pXZGhkR1ZVZVhCbE9pQm1hWGdzWEc1Y2RGeDBZbWx1WkZSNWNHVTZJR1pwZUN4Y2JseHVYSFJjZEdoaGJtUnNaVG9nWm5WdVkzUnBiMjRvSUdWMlpXNTBJQ2tnZTF4dVhIUmNkRngwZG1GeUlISmxkQ3hjYmx4MFhIUmNkRngwZEdGeVoyVjBJRDBnZEdocGN5eGNibHgwWEhSY2RGeDBjbVZzWVhSbFpDQTlJR1YyWlc1MExuSmxiR0YwWldSVVlYSm5aWFFzWEc1Y2RGeDBYSFJjZEdoaGJtUnNaVTlpYWlBOUlHVjJaVzUwTG1oaGJtUnNaVTlpYWp0Y2JseHVYSFJjZEZ4MEx5OGdSbTl5SUcxdmRYTmxaVzUwWlhJdmJHVmhkbVVnWTJGc2JDQjBhR1VnYUdGdVpHeGxjaUJwWmlCeVpXeGhkR1ZrSUdseklHOTFkSE5wWkdVZ2RHaGxJSFJoY21kbGRDNWNibHgwWEhSY2RDOHZJRTVDT2lCT2J5QnlaV3hoZEdWa1ZHRnlaMlYwSUdsbUlIUm9aU0J0YjNWelpTQnNaV1owTDJWdWRHVnlaV1FnZEdobElHSnliM2R6WlhJZ2QybHVaRzkzWEc1Y2RGeDBYSFJwWmlBb0lDRnlaV3hoZEdWa0lIeDhJQ2dnY21Wc1lYUmxaQ0FoUFQwZ2RHRnlaMlYwSUNZbUlDRnFVWFZsY25rdVkyOXVkR0ZwYm5Nb0lIUmhjbWRsZEN3Z2NtVnNZWFJsWkNBcElDa2dLU0I3WEc1Y2RGeDBYSFJjZEdWMlpXNTBMblI1Y0dVZ1BTQm9ZVzVrYkdWUFltb3ViM0pwWjFSNWNHVTdYRzVjZEZ4MFhIUmNkSEpsZENBOUlHaGhibVJzWlU5aWFpNW9ZVzVrYkdWeUxtRndjR3g1S0NCMGFHbHpMQ0JoY21kMWJXVnVkSE1nS1R0Y2JseDBYSFJjZEZ4MFpYWmxiblF1ZEhsd1pTQTlJR1pwZUR0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEhKbGRIVnliaUJ5WlhRN1hHNWNkRngwZlZ4dVhIUjlPMXh1ZlNBcE8xeHVYRzVxVVhWbGNua3VabTR1WlhoMFpXNWtLQ0I3WEc1Y2JseDBiMjQ2SUdaMWJtTjBhVzl1S0NCMGVYQmxjeXdnYzJWc1pXTjBiM0lzSUdSaGRHRXNJR1p1SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ2YmlnZ2RHaHBjeXdnZEhsd1pYTXNJSE5sYkdWamRHOXlMQ0JrWVhSaExDQm1iaUFwTzF4dVhIUjlMRnh1WEhSdmJtVTZJR1oxYm1OMGFXOXVLQ0IwZVhCbGN5d2djMlZzWldOMGIzSXNJR1JoZEdFc0lHWnVJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnZiaWdnZEdocGN5d2dkSGx3WlhNc0lITmxiR1ZqZEc5eUxDQmtZWFJoTENCbWJpd2dNU0FwTzF4dVhIUjlMRnh1WEhSdlptWTZJR1oxYm1OMGFXOXVLQ0IwZVhCbGN5d2djMlZzWldOMGIzSXNJR1p1SUNrZ2UxeHVYSFJjZEhaaGNpQm9ZVzVrYkdWUFltb3NJSFI1Y0dVN1hHNWNkRngwYVdZZ0tDQjBlWEJsY3lBbUppQjBlWEJsY3k1d2NtVjJaVzUwUkdWbVlYVnNkQ0FtSmlCMGVYQmxjeTVvWVc1a2JHVlBZbW9nS1NCN1hHNWNibHgwWEhSY2RDOHZJQ2dnWlhabGJuUWdLU0FnWkdsemNHRjBZMmhsWkNCcVVYVmxjbmt1UlhabGJuUmNibHgwWEhSY2RHaGhibVJzWlU5aWFpQTlJSFI1Y0dWekxtaGhibVJzWlU5aWFqdGNibHgwWEhSY2RHcFJkV1Z5ZVNnZ2RIbHdaWE11WkdWc1pXZGhkR1ZVWVhKblpYUWdLUzV2Wm1Zb1hHNWNkRngwWEhSY2RHaGhibVJzWlU5aWFpNXVZVzFsYzNCaFkyVWdQMXh1WEhSY2RGeDBYSFJjZEdoaGJtUnNaVTlpYWk1dmNtbG5WSGx3WlNBcklGd2lMbHdpSUNzZ2FHRnVaR3hsVDJKcUxtNWhiV1Z6Y0dGalpTQTZYRzVjZEZ4MFhIUmNkRngwYUdGdVpHeGxUMkpxTG05eWFXZFVlWEJsTEZ4dVhIUmNkRngwWEhSb1lXNWtiR1ZQWW1vdWMyVnNaV04wYjNJc1hHNWNkRngwWEhSY2RHaGhibVJzWlU5aWFpNW9ZVzVrYkdWeVhHNWNkRngwWEhRcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MGZWeHVYSFJjZEdsbUlDZ2dkSGx3Wlc5bUlIUjVjR1Z6SUQwOVBTQmNJbTlpYW1WamRGd2lJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QW9JSFI1Y0dWekxXOWlhbVZqZENCYkxDQnpaV3hsWTNSdmNsMGdLVnh1WEhSY2RGeDBabTl5SUNnZ2RIbHdaU0JwYmlCMGVYQmxjeUFwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTV2Wm1Zb0lIUjVjR1VzSUhObGJHVmpkRzl5TENCMGVYQmxjMXNnZEhsd1pTQmRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBYSFI5WEc1Y2RGeDBhV1lnS0NCelpXeGxZM1J2Y2lBOVBUMGdabUZzYzJVZ2ZId2dkSGx3Wlc5bUlITmxiR1ZqZEc5eUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0tTQjdYRzVjYmx4MFhIUmNkQzh2SUNnZ2RIbHdaWE1nV3l3Z1ptNWRJQ2xjYmx4MFhIUmNkR1p1SUQwZ2MyVnNaV04wYjNJN1hHNWNkRngwWEhSelpXeGxZM1J2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNibHgwWEhSOVhHNWNkRngwYVdZZ0tDQm1iaUE5UFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSbWJpQTlJSEpsZEhWeWJrWmhiSE5sTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWxkbVZ1ZEM1eVpXMXZkbVVvSUhSb2FYTXNJSFI1Y0dWekxDQm1iaXdnYzJWc1pXTjBiM0lnS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1WEc1MllYSmNibHh1WEhRdktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdFlYZ3RiR1Z1SUNvdlhHNWNibHgwTHk4Z1UyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlsYzJ4cGJuUXZaWE5zYVc1MEwybHpjM1ZsY3k4ek1qSTVYRzVjZEhKNGFIUnRiRlJoWnlBOUlDODhLRDhoWVhKbFlYeGljbnhqYjJ4OFpXMWlaV1I4YUhKOGFXMW5mR2x1Y0hWMGZHeHBibXQ4YldWMFlYeHdZWEpoYlNrb0tGdGhMWHBkVzE1Y1hDOWNYREErWEZ4NE1qQmNYSFJjWEhKY1hHNWNYR1pkS2lsYlhqNWRLaWxjWEM4K0wyZHBMRnh1WEc1Y2RDOHFJR1Z6YkdsdWRDMWxibUZpYkdVZ0tpOWNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFd0lDMGdNVEVzSUVWa1oyVWdNVElnTFNBeE15QnZibXg1WEc1Y2RDOHZJRWx1SUVsRkwwVmtaMlVnZFhOcGJtY2djbVZuWlhnZ1ozSnZkWEJ6SUdobGNtVWdZMkYxYzJWeklITmxkbVZ5WlNCemJHOTNaRzkzYm5NdVhHNWNkQzh2SUZObFpTQm9kSFJ3Y3pvdkwyTnZibTVsWTNRdWJXbGpjbTl6YjJaMExtTnZiUzlKUlM5bVpXVmtZbUZqYXk5a1pYUmhhV3h6THpFM016WTFNVEl2WEc1Y2RISnViMGx1Ym1WeWFIUnRiQ0E5SUM4OGMyTnlhWEIwZkR4emRIbHNaWHc4YkdsdWF5OXBMRnh1WEc1Y2RDOHZJR05vWldOclpXUTlYQ0pqYUdWamEyVmtYQ0lnYjNJZ1kyaGxZMnRsWkZ4dVhIUnlZMmhsWTJ0bFpDQTlJQzlqYUdWamEyVmtYRnh6S2lnL09sdGVQVjE4UFZ4Y2N5b3VZMmhsWTJ0bFpDNHBMMmtzWEc1Y2RISmpiR1ZoYmxOamNtbHdkQ0E5SUM5ZVhGeHpLandoS0Q4NlhGeGJRMFJCVkVGY1hGdDhMUzBwZkNnL09seGNYVnhjWFh3dExTaytYRnh6S2lRdlp6dGNibHh1THk4Z1VISmxabVZ5SUdFZ2RHSnZaSGtnYjNabGNpQnBkSE1nY0dGeVpXNTBJSFJoWW14bElHWnZjaUJqYjI1MFlXbHVhVzVuSUc1bGR5QnliM2R6WEc1bWRXNWpkR2x2YmlCdFlXNXBjSFZzWVhScGIyNVVZWEpuWlhRb0lHVnNaVzBzSUdOdmJuUmxiblFnS1NCN1hHNWNkR2xtSUNnZ2JtOWtaVTVoYldVb0lHVnNaVzBzSUZ3aWRHRmliR1ZjSWlBcElDWW1YRzVjZEZ4MGJtOWtaVTVoYldVb0lHTnZiblJsYm5RdWJtOWtaVlI1Y0dVZ0lUMDlJREV4SUQ4Z1kyOXVkR1Z1ZENBNklHTnZiblJsYm5RdVptbHljM1JEYUdsc1pDd2dYQ0owY2x3aUlDa2dLU0I3WEc1Y2JseDBYSFJ5WlhSMWNtNGdhbEYxWlhKNUtDQmxiR1Z0SUNrdVkyaHBiR1J5Wlc0b0lGd2lkR0p2WkhsY0lpQXBXeUF3SUYwZ2ZId2daV3hsYlR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCbGJHVnRPMXh1ZlZ4dVhHNHZMeUJTWlhCc1lXTmxMM0psYzNSdmNtVWdkR2hsSUhSNWNHVWdZWFIwY21saWRYUmxJRzltSUhOamNtbHdkQ0JsYkdWdFpXNTBjeUJtYjNJZ2MyRm1aU0JFVDAwZ2JXRnVhWEIxYkdGMGFXOXVYRzVtZFc1amRHbHZiaUJrYVhOaFlteGxVMk55YVhCMEtDQmxiR1Z0SUNrZ2UxeHVYSFJsYkdWdExuUjVjR1VnUFNBb0lHVnNaVzB1WjJWMFFYUjBjbWxpZFhSbEtDQmNJblI1Y0dWY0lpQXBJQ0U5UFNCdWRXeHNJQ2tnS3lCY0lpOWNJaUFySUdWc1pXMHVkSGx3WlR0Y2JseDBjbVYwZFhKdUlHVnNaVzA3WEc1OVhHNW1kVzVqZEdsdmJpQnlaWE4wYjNKbFUyTnlhWEIwS0NCbGJHVnRJQ2tnZTF4dVhIUnBaaUFvSUNnZ1pXeGxiUzUwZVhCbElIeDhJRndpWENJZ0tTNXpiR2xqWlNnZ01Dd2dOU0FwSUQwOVBTQmNJblJ5ZFdVdlhDSWdLU0I3WEc1Y2RGeDBaV3hsYlM1MGVYQmxJRDBnWld4bGJTNTBlWEJsTG5Oc2FXTmxLQ0ExSUNrN1hHNWNkSDBnWld4elpTQjdYRzVjZEZ4MFpXeGxiUzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9JRndpZEhsd1pWd2lJQ2s3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWld4bGJUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyeHZibVZEYjNCNVJYWmxiblFvSUhOeVl5d2daR1Z6ZENBcElIdGNibHgwZG1GeUlHa3NJR3dzSUhSNWNHVXNJSEJrWVhSaFQyeGtMQ0J3WkdGMFlVTjFjaXdnZFdSaGRHRlBiR1FzSUhWa1lYUmhRM1Z5TENCbGRtVnVkSE03WEc1Y2JseDBhV1lnS0NCa1pYTjBMbTV2WkdWVWVYQmxJQ0U5UFNBeElDa2dlMXh1WEhSY2RISmxkSFZ5Ymp0Y2JseDBmVnh1WEc1Y2RDOHZJREV1SUVOdmNIa2djSEpwZG1GMFpTQmtZWFJoT2lCbGRtVnVkSE1zSUdoaGJtUnNaWEp6TENCbGRHTXVYRzVjZEdsbUlDZ2daR0YwWVZCeWFYWXVhR0Z6UkdGMFlTZ2djM0pqSUNrZ0tTQjdYRzVjZEZ4MGNHUmhkR0ZQYkdRZ1BTQmtZWFJoVUhKcGRpNWhZMk5sYzNNb0lITnlZeUFwTzF4dVhIUmNkSEJrWVhSaFEzVnlJRDBnWkdGMFlWQnlhWFl1YzJWMEtDQmtaWE4wTENCd1pHRjBZVTlzWkNBcE8xeHVYSFJjZEdWMlpXNTBjeUE5SUhCa1lYUmhUMnhrTG1WMlpXNTBjenRjYmx4dVhIUmNkR2xtSUNnZ1pYWmxiblJ6SUNrZ2UxeHVYSFJjZEZ4MFpHVnNaWFJsSUhCa1lYUmhRM1Z5TG1oaGJtUnNaVHRjYmx4MFhIUmNkSEJrWVhSaFEzVnlMbVYyWlc1MGN5QTlJSHQ5TzF4dVhHNWNkRngwWEhSbWIzSWdLQ0IwZVhCbElHbHVJR1YyWlc1MGN5QXBJSHRjYmx4MFhIUmNkRngwWm05eUlDZ2dhU0E5SURBc0lHd2dQU0JsZG1WdWRITmJJSFI1Y0dVZ1hTNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMbUZrWkNnZ1pHVnpkQ3dnZEhsd1pTd2daWFpsYm5Seld5QjBlWEJsSUYxYklHa2dYU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdNaTRnUTI5d2VTQjFjMlZ5SUdSaGRHRmNibHgwYVdZZ0tDQmtZWFJoVlhObGNpNW9ZWE5FWVhSaEtDQnpjbU1nS1NBcElIdGNibHgwWEhSMVpHRjBZVTlzWkNBOUlHUmhkR0ZWYzJWeUxtRmpZMlZ6Y3lnZ2MzSmpJQ2s3WEc1Y2RGeDBkV1JoZEdGRGRYSWdQU0JxVVhWbGNua3VaWGgwWlc1a0tDQjdmU3dnZFdSaGRHRlBiR1FnS1R0Y2JseHVYSFJjZEdSaGRHRlZjMlZ5TG5ObGRDZ2daR1Z6ZEN3Z2RXUmhkR0ZEZFhJZ0tUdGNibHgwZlZ4dWZWeHVYRzR2THlCR2FYZ2dTVVVnWW5WbmN5d2djMlZsSUhOMWNIQnZjblFnZEdWemRITmNibVoxYm1OMGFXOXVJR1pwZUVsdWNIVjBLQ0J6Y21Nc0lHUmxjM1FnS1NCN1hHNWNkSFpoY2lCdWIyUmxUbUZ0WlNBOUlHUmxjM1F1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1WEhRdkx5QkdZV2xzY3lCMGJ5QndaWEp6YVhOMElIUm9aU0JqYUdWamEyVmtJSE4wWVhSbElHOW1JR0VnWTJ4dmJtVmtJR05vWldOclltOTRJRzl5SUhKaFpHbHZJR0oxZEhSdmJpNWNibHgwYVdZZ0tDQnViMlJsVG1GdFpTQTlQVDBnWENKcGJuQjFkRndpSUNZbUlISmphR1ZqYTJGaWJHVlVlWEJsTG5SbGMzUW9JSE55WXk1MGVYQmxJQ2tnS1NCN1hHNWNkRngwWkdWemRDNWphR1ZqYTJWa0lEMGdjM0pqTG1Ob1pXTnJaV1E3WEc1Y2JseDBMeThnUm1GcGJITWdkRzhnY21WMGRYSnVJSFJvWlNCelpXeGxZM1JsWkNCdmNIUnBiMjRnZEc4Z2RHaGxJR1JsWm1GMWJIUWdjMlZzWldOMFpXUWdjM1JoZEdVZ2QyaGxiaUJqYkc5dWFXNW5JRzl3ZEdsdmJuTmNibHgwZlNCbGJITmxJR2xtSUNnZ2JtOWtaVTVoYldVZ1BUMDlJRndpYVc1d2RYUmNJaUI4ZkNCdWIyUmxUbUZ0WlNBOVBUMGdYQ0owWlhoMFlYSmxZVndpSUNrZ2UxeHVYSFJjZEdSbGMzUXVaR1ZtWVhWc2RGWmhiSFZsSUQwZ2MzSmpMbVJsWm1GMWJIUldZV3gxWlR0Y2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtiMjFOWVc1cGNDZ2dZMjlzYkdWamRHbHZiaXdnWVhKbmN5d2dZMkZzYkdKaFkyc3NJR2xuYm05eVpXUWdLU0I3WEc1Y2JseDBMeThnUm14aGRIUmxiaUJoYm5rZ2JtVnpkR1ZrSUdGeWNtRjVjMXh1WEhSaGNtZHpJRDBnWTI5dVkyRjBMbUZ3Y0d4NUtDQmJYU3dnWVhKbmN5QXBPMXh1WEc1Y2RIWmhjaUJtY21GbmJXVnVkQ3dnWm1seWMzUXNJSE5qY21sd2RITXNJR2hoYzFOamNtbHdkSE1zSUc1dlpHVXNJR1J2WXl4Y2JseDBYSFJwSUQwZ01DeGNibHgwWEhSc0lEMGdZMjlzYkdWamRHbHZiaTVzWlc1bmRHZ3NYRzVjZEZ4MGFVNXZRMnh2Ym1VZ1BTQnNJQzBnTVN4Y2JseDBYSFIyWVd4MVpTQTlJR0Z5WjNOYklEQWdYU3hjYmx4MFhIUjJZV3gxWlVselJuVnVZM1JwYjI0Z1BTQnBjMFoxYm1OMGFXOXVLQ0IyWVd4MVpTQXBPMXh1WEc1Y2RDOHZJRmRsSUdOaGJpZDBJR05zYjI1bFRtOWtaU0JtY21GbmJXVnVkSE1nZEdoaGRDQmpiMjUwWVdsdUlHTm9aV05yWldRc0lHbHVJRmRsWWt0cGRGeHVYSFJwWmlBb0lIWmhiSFZsU1hOR2RXNWpkR2x2YmlCOGZGeHVYSFJjZEZ4MEtDQnNJRDRnTVNBbUppQjBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlGd2ljM1J5YVc1blhDSWdKaVpjYmx4MFhIUmNkRngwSVhOMWNIQnZjblF1WTJobFkydERiRzl1WlNBbUppQnlZMmhsWTJ0bFpDNTBaWE4wS0NCMllXeDFaU0FwSUNrZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdOdmJHeGxZM1JwYjI0dVpXRmphQ2dnWm5WdVkzUnBiMjRvSUdsdVpHVjRJQ2tnZTF4dVhIUmNkRngwZG1GeUlITmxiR1lnUFNCamIyeHNaV04wYVc5dUxtVnhLQ0JwYm1SbGVDQXBPMXh1WEhSY2RGeDBhV1lnS0NCMllXeDFaVWx6Um5WdVkzUnBiMjRnS1NCN1hHNWNkRngwWEhSY2RHRnlaM05iSURBZ1hTQTlJSFpoYkhWbExtTmhiR3dvSUhSb2FYTXNJR2x1WkdWNExDQnpaV3htTG1oMGJXd29LU0FwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwWkc5dFRXRnVhWEFvSUhObGJHWXNJR0Z5WjNNc0lHTmhiR3hpWVdOckxDQnBaMjV2Y21Wa0lDazdYRzVjZEZ4MGZTQXBPMXh1WEhSOVhHNWNibHgwYVdZZ0tDQnNJQ2tnZTF4dVhIUmNkR1p5WVdkdFpXNTBJRDBnWW5WcGJHUkdjbUZuYldWdWRDZ2dZWEpuY3l3Z1kyOXNiR1ZqZEdsdmJsc2dNQ0JkTG05M2JtVnlSRzlqZFcxbGJuUXNJR1poYkhObExDQmpiMnhzWldOMGFXOXVMQ0JwWjI1dmNtVmtJQ2s3WEc1Y2RGeDBabWx5YzNRZ1BTQm1jbUZuYldWdWRDNW1hWEp6ZEVOb2FXeGtPMXh1WEc1Y2RGeDBhV1lnS0NCbWNtRm5iV1Z1ZEM1amFHbHNaRTV2WkdWekxteGxibWQwYUNBOVBUMGdNU0FwSUh0Y2JseDBYSFJjZEdaeVlXZHRaVzUwSUQwZ1ptbHljM1E3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVW1WeGRXbHlaU0JsYVhSb1pYSWdibVYzSUdOdmJuUmxiblFnYjNJZ1lXNGdhVzUwWlhKbGMzUWdhVzRnYVdkdWIzSmxaQ0JsYkdWdFpXNTBjeUIwYnlCcGJuWnZhMlVnZEdobElHTmhiR3hpWVdOclhHNWNkRngwYVdZZ0tDQm1hWEp6ZENCOGZDQnBaMjV2Y21Wa0lDa2dlMXh1WEhSY2RGeDBjMk55YVhCMGN5QTlJR3BSZFdWeWVTNXRZWEFvSUdkbGRFRnNiQ2dnWm5KaFoyMWxiblFzSUZ3aWMyTnlhWEIwWENJZ0tTd2daR2x6WVdKc1pWTmpjbWx3ZENBcE8xeHVYSFJjZEZ4MGFHRnpVMk55YVhCMGN5QTlJSE5qY21sd2RITXViR1Z1WjNSb08xeHVYRzVjZEZ4MFhIUXZMeUJWYzJVZ2RHaGxJRzl5YVdkcGJtRnNJR1p5WVdkdFpXNTBJR1p2Y2lCMGFHVWdiR0Z6ZENCcGRHVnRYRzVjZEZ4MFhIUXZMeUJwYm5OMFpXRmtJRzltSUhSb1pTQm1hWEp6ZENCaVpXTmhkWE5sSUdsMElHTmhiaUJsYm1RZ2RYQmNibHgwWEhSY2RDOHZJR0psYVc1bklHVnRjSFJwWldRZ2FXNWpiM0p5WldOMGJIa2dhVzRnWTJWeWRHRnBiaUJ6YVhSMVlYUnBiMjV6SUNnak9EQTNNQ2t1WEc1Y2RGeDBYSFJtYjNJZ0tDQTdJR2tnUENCc095QnBLeXNnS1NCN1hHNWNkRngwWEhSY2RHNXZaR1VnUFNCbWNtRm5iV1Z1ZER0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUdrZ0lUMDlJR2xPYjBOc2IyNWxJQ2tnZTF4dVhIUmNkRngwWEhSY2RHNXZaR1VnUFNCcVVYVmxjbmt1WTJ4dmJtVW9JRzV2WkdVc0lIUnlkV1VzSUhSeWRXVWdLVHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRXRsWlhBZ2NtVm1aWEpsYm1ObGN5QjBieUJqYkc5dVpXUWdjMk55YVhCMGN5Qm1iM0lnYkdGMFpYSWdjbVZ6ZEc5eVlYUnBiMjVjYmx4MFhIUmNkRngwWEhScFppQW9JR2hoYzFOamNtbHdkSE1nS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFRnVaSEp2YVdRZ1BEMDBMakFnYjI1c2VTd2dVR2hoYm5SdmJVcFRJREVnYjI1c2VWeHVYSFJjZEZ4MFhIUmNkRngwTHk4Z2NIVnphQzVoY0hCc2VTaGZMQ0JoY25KaGVXeHBhMlVwSUhSb2NtOTNjeUJ2YmlCaGJtTnBaVzUwSUZkbFlrdHBkRnh1WEhSY2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG0xbGNtZGxLQ0J6WTNKcGNIUnpMQ0JuWlhSQmJHd29JRzV2WkdVc0lGd2ljMk55YVhCMFhDSWdLU0FwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdOaGJHeGlZV05yTG1OaGJHd29JR052Ykd4bFkzUnBiMjViSUdrZ1hTd2dibTlrWlN3Z2FTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb0lHaGhjMU5qY21sd2RITWdLU0I3WEc1Y2RGeDBYSFJjZEdSdll5QTlJSE5qY21sd2RITmJJSE5qY21sd2RITXViR1Z1WjNSb0lDMGdNU0JkTG05M2JtVnlSRzlqZFcxbGJuUTdYRzVjYmx4MFhIUmNkRngwTHk4Z1VtVmxibUZpYkdVZ2MyTnlhWEIwYzF4dVhIUmNkRngwWEhScVVYVmxjbmt1YldGd0tDQnpZM0pwY0hSekxDQnlaWE4wYjNKbFUyTnlhWEIwSUNrN1hHNWNibHgwWEhSY2RGeDBMeThnUlhaaGJIVmhkR1VnWlhobFkzVjBZV0pzWlNCelkzSnBjSFJ6SUc5dUlHWnBjbk4wSUdSdlkzVnRaVzUwSUdsdWMyVnlkR2x2Ymx4dVhIUmNkRngwWEhSbWIzSWdLQ0JwSUQwZ01Ec2dhU0E4SUdoaGMxTmpjbWx3ZEhNN0lHa3JLeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUnViMlJsSUQwZ2MyTnlhWEIwYzFzZ2FTQmRPMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2djbk5qY21sd2RGUjVjR1V1ZEdWemRDZ2dibTlrWlM1MGVYQmxJSHg4SUZ3aVhDSWdLU0FtSmx4dVhIUmNkRngwWEhSY2RGeDBJV1JoZEdGUWNtbDJMbUZqWTJWemN5Z2dibTlrWlN3Z1hDSm5iRzlpWVd4RmRtRnNYQ0lnS1NBbUpseHVYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbU52Ym5SaGFXNXpLQ0JrYjJNc0lHNXZaR1VnS1NBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0J1YjJSbExuTnlZeUFtSmlBb0lHNXZaR1V1ZEhsd1pTQjhmQ0JjSWx3aUlDa3VkRzlNYjNkbGNrTmhjMlVvS1NBZ0lUMDlJRndpYlc5a2RXeGxYQ0lnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdUM0IwYVc5dVlXd2dRVXBCV0NCa1pYQmxibVJsYm1ONUxDQmlkWFFnZDI5dUozUWdjblZ1SUhOamNtbHdkSE1nYVdZZ2JtOTBJSEJ5WlhObGJuUmNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JxVVhWbGNua3VYMlYyWVd4VmNtd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbDlsZG1Gc1ZYSnNLQ0J1YjJSbExuTnlZeUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSRVQwMUZkbUZzS0NCdWIyUmxMblJsZUhSRGIyNTBaVzUwTG5KbGNHeGhZMlVvSUhKamJHVmhibE5qY21sd2RDd2dYQ0pjSWlBcExDQmtiMk1zSUc1dlpHVWdLVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWTI5c2JHVmpkR2x2Ymp0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WdGIzWmxLQ0JsYkdWdExDQnpaV3hsWTNSdmNpd2dhMlZsY0VSaGRHRWdLU0I3WEc1Y2RIWmhjaUJ1YjJSbExGeHVYSFJjZEc1dlpHVnpJRDBnYzJWc1pXTjBiM0lnUHlCcVVYVmxjbmt1Wm1sc2RHVnlLQ0J6Wld4bFkzUnZjaXdnWld4bGJTQXBJRG9nWld4bGJTeGNibHgwWEhScElEMGdNRHRjYmx4dVhIUm1iM0lnS0NBN0lDZ2dibTlrWlNBOUlHNXZaR1Z6V3lCcElGMGdLU0FoUFNCdWRXeHNPeUJwS3lzZ0tTQjdYRzVjZEZ4MGFXWWdLQ0FoYTJWbGNFUmhkR0VnSmlZZ2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ01TQXBJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWpiR1ZoYmtSaGRHRW9JR2RsZEVGc2JDZ2dibTlrWlNBcElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLQ0J1YjJSbExuQmhjbVZ1ZEU1dlpHVWdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHdGxaWEJFWVhSaElDWW1JR3BSZFdWeWVTNWpiMjUwWVdsdWN5Z2dibTlrWlM1dmQyNWxja1J2WTNWdFpXNTBMQ0J1YjJSbElDa2dLU0I3WEc1Y2RGeDBYSFJjZEhObGRFZHNiMkpoYkVWMllXd29JR2RsZEVGc2JDZ2dibTlrWlN3Z1hDSnpZM0pwY0hSY0lpQXBJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ1YjJSbExuQmhjbVZ1ZEU1dlpHVXVjbVZ0YjNabFEyaHBiR1FvSUc1dlpHVWdLVHRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdaV3hsYlR0Y2JuMWNibHh1YWxGMVpYSjVMbVY0ZEdWdVpDZ2dlMXh1WEhSb2RHMXNVSEpsWm1sc2RHVnlPaUJtZFc1amRHbHZiaWdnYUhSdGJDQXBJSHRjYmx4MFhIUnlaWFIxY200Z2FIUnRiQzV5WlhCc1lXTmxLQ0J5ZUdoMGJXeFVZV2NzSUZ3aVBDUXhQand2SkRJK1hDSWdLVHRjYmx4MGZTeGNibHh1WEhSamJHOXVaVG9nWm5WdVkzUnBiMjRvSUdWc1pXMHNJR1JoZEdGQmJtUkZkbVZ1ZEhNc0lHUmxaWEJFWVhSaFFXNWtSWFpsYm5SeklDa2dlMXh1WEhSY2RIWmhjaUJwTENCc0xDQnpjbU5GYkdWdFpXNTBjeXdnWkdWemRFVnNaVzFsYm5SekxGeHVYSFJjZEZ4MFkyeHZibVVnUFNCbGJHVnRMbU5zYjI1bFRtOWtaU2dnZEhKMVpTQXBMRnh1WEhSY2RGeDBhVzVRWVdkbElEMGdhbEYxWlhKNUxtTnZiblJoYVc1ektDQmxiR1Z0TG05M2JtVnlSRzlqZFcxbGJuUXNJR1ZzWlcwZ0tUdGNibHh1WEhSY2RDOHZJRVpwZUNCSlJTQmpiRzl1YVc1bklHbHpjM1ZsYzF4dVhIUmNkR2xtSUNnZ0lYTjFjSEJ2Y25RdWJtOURiRzl1WlVOb1pXTnJaV1FnSmlZZ0tDQmxiR1Z0TG01dlpHVlVlWEJsSUQwOVBTQXhJSHg4SUdWc1pXMHVibTlrWlZSNWNHVWdQVDA5SURFeElDa2dKaVpjYmx4MFhIUmNkRngwSVdwUmRXVnllUzVwYzFoTlRFUnZZeWdnWld4bGJTQXBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlhaU0JsYzJOb1pYY2dVMmw2ZW14bElHaGxjbVVnWm05eUlIQmxjbVp2Y20xaGJtTmxJSEpsWVhOdmJuTTZJR2gwZEhCek9pOHZhbk53WlhKbUxtTnZiUzluWlhSaGJHd3Rkbk10YzJsNmVteGxMekpjYmx4MFhIUmNkR1JsYzNSRmJHVnRaVzUwY3lBOUlHZGxkRUZzYkNnZ1kyeHZibVVnS1R0Y2JseDBYSFJjZEhOeVkwVnNaVzFsYm5SeklEMGdaMlYwUVd4c0tDQmxiR1Z0SUNrN1hHNWNibHgwWEhSY2RHWnZjaUFvSUdrZ1BTQXdMQ0JzSUQwZ2MzSmpSV3hsYldWdWRITXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWEhSbWFYaEpibkIxZENnZ2MzSmpSV3hsYldWdWRITmJJR2tnWFN3Z1pHVnpkRVZzWlcxbGJuUnpXeUJwSUYwZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkRiM0I1SUhSb1pTQmxkbVZ1ZEhNZ1puSnZiU0IwYUdVZ2IzSnBaMmx1WVd3Z2RHOGdkR2hsSUdOc2IyNWxYRzVjZEZ4MGFXWWdLQ0JrWVhSaFFXNWtSWFpsYm5SeklDa2dlMXh1WEhSY2RGeDBhV1lnS0NCa1pXVndSR0YwWVVGdVpFVjJaVzUwY3lBcElIdGNibHgwWEhSY2RGeDBjM0pqUld4bGJXVnVkSE1nUFNCemNtTkZiR1Z0Wlc1MGN5QjhmQ0JuWlhSQmJHd29JR1ZzWlcwZ0tUdGNibHgwWEhSY2RGeDBaR1Z6ZEVWc1pXMWxiblJ6SUQwZ1pHVnpkRVZzWlcxbGJuUnpJSHg4SUdkbGRFRnNiQ2dnWTJ4dmJtVWdLVHRjYmx4dVhIUmNkRngwWEhSbWIzSWdLQ0JwSUQwZ01Dd2diQ0E5SUhOeVkwVnNaVzFsYm5SekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5QXBJSHRjYmx4MFhIUmNkRngwWEhSamJHOXVaVU52Y0hsRmRtVnVkQ2dnYzNKalJXeGxiV1Z1ZEhOYklHa2dYU3dnWkdWemRFVnNaVzFsYm5Seld5QnBJRjBnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFkyeHZibVZEYjNCNVJYWmxiblFvSUdWc1pXMHNJR05zYjI1bElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVSEpsYzJWeWRtVWdjMk55YVhCMElHVjJZV3gxWVhScGIyNGdhR2x6ZEc5eWVWeHVYSFJjZEdSbGMzUkZiR1Z0Wlc1MGN5QTlJR2RsZEVGc2JDZ2dZMnh2Ym1Vc0lGd2ljMk55YVhCMFhDSWdLVHRjYmx4MFhIUnBaaUFvSUdSbGMzUkZiR1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXdJQ2tnZTF4dVhIUmNkRngwYzJWMFIyeHZZbUZzUlhaaGJDZ2daR1Z6ZEVWc1pXMWxiblJ6TENBaGFXNVFZV2RsSUNZbUlHZGxkRUZzYkNnZ1pXeGxiU3dnWENKelkzSnBjSFJjSWlBcElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JqYkc5dVpXUWdjMlYwWEc1Y2RGeDBjbVYwZFhKdUlHTnNiMjVsTzF4dVhIUjlMRnh1WEc1Y2RHTnNaV0Z1UkdGMFlUb2dablZ1WTNScGIyNG9JR1ZzWlcxeklDa2dlMXh1WEhSY2RIWmhjaUJrWVhSaExDQmxiR1Z0TENCMGVYQmxMRnh1WEhSY2RGeDBjM0JsWTJsaGJDQTlJR3BSZFdWeWVTNWxkbVZ1ZEM1emNHVmphV0ZzTEZ4dVhIUmNkRngwYVNBOUlEQTdYRzVjYmx4MFhIUm1iM0lnS0NBN0lDZ2daV3hsYlNBOUlHVnNaVzF6V3lCcElGMGdLU0FoUFQwZ2RXNWtaV1pwYm1Wa095QnBLeXNnS1NCN1hHNWNkRngwWEhScFppQW9JR0ZqWTJWd2RFUmhkR0VvSUdWc1pXMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0FvSUdSaGRHRWdQU0JsYkdWdFd5QmtZWFJoVUhKcGRpNWxlSEJoYm1SdklGMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUdSaGRHRXVaWFpsYm5SeklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFptOXlJQ2dnZEhsd1pTQnBiaUJrWVhSaExtVjJaVzUwY3lBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0J6Y0dWamFXRnNXeUIwZVhCbElGMGdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbVYyWlc1MExuSmxiVzkyWlNnZ1pXeGxiU3dnZEhsd1pTQXBPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUZSb2FYTWdhWE1nWVNCemFHOXlkR04xZENCMGJ5QmhkbTlwWkNCcVVYVmxjbmt1WlhabGJuUXVjbVZ0YjNabEozTWdiM1psY21obFlXUmNibHgwWEhSY2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhScVVYVmxjbmt1Y21WdGIzWmxSWFpsYm5Rb0lHVnNaVzBzSUhSNWNHVXNJR1JoZEdFdWFHRnVaR3hsSUNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCRGFISnZiV1VnUEQwek5TQXRJRFExSzF4dVhIUmNkRngwWEhSY2RDOHZJRUZ6YzJsbmJpQjFibVJsWm1sdVpXUWdhVzV6ZEdWaFpDQnZaaUIxYzJsdVp5QmtaV3hsZEdVc0lITmxaU0JFWVhSaEkzSmxiVzkyWlZ4dVhIUmNkRngwWEhSY2RHVnNaVzFiSUdSaGRHRlFjbWwyTG1WNGNHRnVaRzhnWFNBOUlIVnVaR1ZtYVc1bFpEdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJwWmlBb0lHVnNaVzFiSUdSaGRHRlZjMlZ5TG1WNGNHRnVaRzhnWFNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFTm9jbTl0WlNBOFBUTTFJQzBnTkRVclhHNWNkRngwWEhSY2RGeDBMeThnUVhOemFXZHVJSFZ1WkdWbWFXNWxaQ0JwYm5OMFpXRmtJRzltSUhWemFXNW5JR1JsYkdWMFpTd2djMlZsSUVSaGRHRWpjbVZ0YjNabFhHNWNkRngwWEhSY2RGeDBaV3hsYlZzZ1pHRjBZVlZ6WlhJdVpYaHdZVzVrYnlCZElEMGdkVzVrWldacGJtVmtPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNTlJQ2s3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwWkdWMFlXTm9PaUJtZFc1amRHbHZiaWdnYzJWc1pXTjBiM0lnS1NCN1hHNWNkRngwY21WMGRYSnVJSEpsYlc5MlpTZ2dkR2hwY3l3Z2MyVnNaV04wYjNJc0lIUnlkV1VnS1R0Y2JseDBmU3hjYmx4dVhIUnlaVzF2ZG1VNklHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpQXBJSHRjYmx4MFhIUnlaWFIxY200Z2NtVnRiM1psS0NCMGFHbHpMQ0J6Wld4bFkzUnZjaUFwTzF4dVhIUjlMRnh1WEc1Y2RIUmxlSFE2SUdaMWJtTjBhVzl1S0NCMllXeDFaU0FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdZV05qWlhOektDQjBhR2x6TENCbWRXNWpkR2x2YmlnZ2RtRnNkV1VnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNBL1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1MFpYaDBLQ0IwYUdseklDa2dPbHh1WEhSY2RGeDBYSFIwYUdsekxtVnRjSFI1S0NrdVpXRmphQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RGeDBhV1lnS0NCMGFHbHpMbTV2WkdWVWVYQmxJRDA5UFNBeElIeDhJSFJvYVhNdWJtOWtaVlI1Y0dVZ1BUMDlJREV4SUh4OElIUm9hWE11Ym05a1pWUjVjR1VnUFQwOUlEa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUjBhR2x6TG5SbGVIUkRiMjUwWlc1MElEMGdkbUZzZFdVN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5SUNrN1hHNWNkRngwZlN3Z2JuVnNiQ3dnZG1Gc2RXVXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dLVHRjYmx4MGZTeGNibHh1WEhSaGNIQmxibVE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJrYjIxTllXNXBjQ2dnZEdocGN5d2dZWEpuZFcxbGJuUnpMQ0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2RHaHBjeTV1YjJSbFZIbHdaU0E5UFQwZ01TQjhmQ0IwYUdsekxtNXZaR1ZVZVhCbElEMDlQU0F4TVNCOGZDQjBhR2x6TG01dlpHVlVlWEJsSUQwOVBTQTVJQ2tnZTF4dVhIUmNkRngwWEhSMllYSWdkR0Z5WjJWMElEMGdiV0Z1YVhCMWJHRjBhVzl1VkdGeVoyVjBLQ0IwYUdsekxDQmxiR1Z0SUNrN1hHNWNkRngwWEhSY2RIUmhjbWRsZEM1aGNIQmxibVJEYUdsc1pDZ2daV3hsYlNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tUdGNibHgwZlN4Y2JseHVYSFJ3Y21Wd1pXNWtPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdaRzl0VFdGdWFYQW9JSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5d2dablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUhSb2FYTXVibTlrWlZSNWNHVWdQVDA5SURFZ2ZId2dkR2hwY3k1dWIyUmxWSGx3WlNBOVBUMGdNVEVnZkh3Z2RHaHBjeTV1YjJSbFZIbHdaU0E5UFQwZ09TQXBJSHRjYmx4MFhIUmNkRngwZG1GeUlIUmhjbWRsZENBOUlHMWhibWx3ZFd4aGRHbHZibFJoY21kbGRDZ2dkR2hwY3l3Z1pXeGxiU0FwTzF4dVhIUmNkRngwWEhSMFlYSm5aWFF1YVc1elpYSjBRbVZtYjNKbEtDQmxiR1Z0TENCMFlYSm5aWFF1Wm1seWMzUkRhR2xzWkNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tUdGNibHgwZlN4Y2JseHVYSFJpWldadmNtVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmtiMjFOWVc1cGNDZ2dkR2hwY3l3Z1lYSm5kVzFsYm5SekxDQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHgwWEhSY2RHbG1JQ2dnZEdocGN5NXdZWEpsYm5ST2IyUmxJQ2tnZTF4dVhIUmNkRngwWEhSMGFHbHpMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtDQmxiR1Z0TENCMGFHbHpJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0FwTzF4dVhIUjlMRnh1WEc1Y2RHRm1kR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnWkc5dFRXRnVhWEFvSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeXdnWm5WdVkzUnBiMjRvSUdWc1pXMGdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lIUm9hWE11Y0dGeVpXNTBUbTlrWlNBcElIdGNibHgwWEhSY2RGeDBkR2hwY3k1d1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2dnWld4bGJTd2dkR2hwY3k1dVpYaDBVMmxpYkdsdVp5QXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMGdLVHRjYmx4MGZTeGNibHh1WEhSbGJYQjBlVG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwZG1GeUlHVnNaVzBzWEc1Y2RGeDBYSFJwSUQwZ01EdGNibHh1WEhSY2RHWnZjaUFvSURzZ0tDQmxiR1Z0SUQwZ2RHaHBjMXNnYVNCZElDa2dJVDBnYm5Wc2JEc2dhU3NySUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0JsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4SUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUZCeVpYWmxiblFnYldWdGIzSjVJR3hsWVd0elhHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1amJHVmhia1JoZEdFb0lHZGxkRUZzYkNnZ1pXeGxiU3dnWm1Gc2MyVWdLU0FwTzF4dVhHNWNkRngwWEhSY2RDOHZJRkpsYlc5MlpTQmhibmtnY21WdFlXbHVhVzVuSUc1dlpHVnpYRzVjZEZ4MFhIUmNkR1ZzWlcwdWRHVjRkRU52Ym5SbGJuUWdQU0JjSWx3aU8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5TEZ4dVhHNWNkR05zYjI1bE9pQm1kVzVqZEdsdmJpZ2daR0YwWVVGdVpFVjJaVzUwY3l3Z1pHVmxjRVJoZEdGQmJtUkZkbVZ1ZEhNZ0tTQjdYRzVjZEZ4MFpHRjBZVUZ1WkVWMlpXNTBjeUE5SUdSaGRHRkJibVJGZG1WdWRITWdQVDBnYm5Wc2JDQS9JR1poYkhObElEb2daR0YwWVVGdVpFVjJaVzUwY3p0Y2JseDBYSFJrWldWd1JHRjBZVUZ1WkVWMlpXNTBjeUE5SUdSbFpYQkVZWFJoUVc1a1JYWmxiblJ6SUQwOUlHNTFiR3dnUHlCa1lYUmhRVzVrUlhabGJuUnpJRG9nWkdWbGNFUmhkR0ZCYm1SRmRtVnVkSE03WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1dFlYQW9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR3BSZFdWeWVTNWpiRzl1WlNnZ2RHaHBjeXdnWkdGMFlVRnVaRVYyWlc1MGN5d2daR1ZsY0VSaGRHRkJibVJGZG1WdWRITWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMHNYRzVjYmx4MGFIUnRiRG9nWm5WdVkzUnBiMjRvSUhaaGJIVmxJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmhZMk5sYzNNb0lIUm9hWE1zSUdaMWJtTjBhVzl1S0NCMllXeDFaU0FwSUh0Y2JseDBYSFJjZEhaaGNpQmxiR1Z0SUQwZ2RHaHBjMXNnTUNCZElIeDhJSHQ5TEZ4dVhIUmNkRngwWEhScElEMGdNQ3hjYmx4MFhIUmNkRngwYkNBOUlIUm9hWE11YkdWdVozUm9PMXh1WEc1Y2RGeDBYSFJwWmlBb0lIWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnTVNBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHVnNaVzB1YVc1dVpYSklWRTFNTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlRaV1VnYVdZZ2QyVWdZMkZ1SUhSaGEyVWdZU0J6YUc5eWRHTjFkQ0JoYm1RZ2FuVnpkQ0IxYzJVZ2FXNXVaWEpJVkUxTVhHNWNkRngwWEhScFppQW9JSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUFtSmlBaGNtNXZTVzV1WlhKb2RHMXNMblJsYzNRb0lIWmhiSFZsSUNrZ0ppWmNibHgwWEhSY2RGeDBJWGR5WVhCTllYQmJJQ2dnY25SaFowNWhiV1V1WlhobFl5Z2dkbUZzZFdVZ0tTQjhmQ0JiSUZ3aVhDSXNJRndpWENJZ1hTQXBXeUF4SUYwdWRHOU1iM2RsY2tOaGMyVW9LU0JkSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkSFpoYkhWbElEMGdhbEYxWlhKNUxtaDBiV3hRY21WbWFXeDBaWElvSUhaaGJIVmxJQ2s3WEc1Y2JseDBYSFJjZEZ4MGRISjVJSHRjYmx4MFhIUmNkRngwWEhSbWIzSWdLQ0E3SUdrZ1BDQnNPeUJwS3lzZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSbGJHVnRJRDBnZEdocGMxc2dhU0JkSUh4OElIdDlPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJTWlcxdmRtVWdaV3hsYldWdWRDQnViMlJsY3lCaGJtUWdjSEpsZG1WdWRDQnRaVzF2Y25rZ2JHVmhhM05jYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWld4bGJTNXViMlJsVkhsd1pTQTlQVDBnTVNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1Oc1pXRnVSR0YwWVNnZ1oyVjBRV3hzS0NCbGJHVnRMQ0JtWVd4elpTQXBJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR1ZzWlcwdWFXNXVaWEpJVkUxTUlEMGdkbUZzZFdVN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWld4bGJTQTlJREE3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnZFhOcGJtY2dhVzV1WlhKSVZFMU1JSFJvY205M2N5QmhiaUJsZUdObGNIUnBiMjRzSUhWelpTQjBhR1VnWm1Gc2JHSmhZMnNnYldWMGFHOWtYRzVjZEZ4MFhIUmNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UzMWNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBhV1lnS0NCbGJHVnRJQ2tnZTF4dVhIUmNkRngwWEhSMGFHbHpMbVZ0Y0hSNUtDa3VZWEJ3Wlc1a0tDQjJZV3gxWlNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwc0lHNTFiR3dzSUhaaGJIVmxMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JQ2s3WEc1Y2RIMHNYRzVjYmx4MGNtVndiR0ZqWlZkcGRHZzZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSFpoY2lCcFoyNXZjbVZrSUQwZ1cxMDdYRzVjYmx4MFhIUXZMeUJOWVd0bElIUm9aU0JqYUdGdVoyVnpMQ0J5WlhCc1lXTnBibWNnWldGamFDQnViMjR0YVdkdWIzSmxaQ0JqYjI1MFpYaDBJR1ZzWlcxbGJuUWdkMmwwYUNCMGFHVWdibVYzSUdOdmJuUmxiblJjYmx4MFhIUnlaWFIxY200Z1pHOXRUV0Z1YVhBb0lIUm9hWE1zSUdGeVozVnRaVzUwY3l3Z1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkRngwWEhSMllYSWdjR0Z5Wlc1MElEMGdkR2hwY3k1d1lYSmxiblJPYjJSbE8xeHVYRzVjZEZ4MFhIUnBaaUFvSUdwUmRXVnllUzVwYmtGeWNtRjVLQ0IwYUdsekxDQnBaMjV2Y21Wa0lDa2dQQ0F3SUNrZ2UxeHVYSFJjZEZ4MFhIUnFVWFZsY25rdVkyeGxZVzVFWVhSaEtDQm5aWFJCYkd3b0lIUm9hWE1nS1NBcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSUhCaGNtVnVkQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUndZWEpsYm5RdWNtVndiR0ZqWlVOb2FXeGtLQ0JsYkdWdExDQjBhR2x6SUNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHh1WEhSY2RDOHZJRVp2Y21ObElHTmhiR3hpWVdOcklHbHVkbTlqWVhScGIyNWNibHgwWEhSOUxDQnBaMjV2Y21Wa0lDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1WaFkyZ29JSHRjYmx4MFlYQndaVzVrVkc4NklGd2lZWEJ3Wlc1a1hDSXNYRzVjZEhCeVpYQmxibVJVYnpvZ1hDSndjbVZ3Wlc1a1hDSXNYRzVjZEdsdWMyVnlkRUpsWm05eVpUb2dYQ0ppWldadmNtVmNJaXhjYmx4MGFXNXpaWEowUVdaMFpYSTZJRndpWVdaMFpYSmNJaXhjYmx4MGNtVndiR0ZqWlVGc2JEb2dYQ0p5WlhCc1lXTmxWMmwwYUZ3aVhHNTlMQ0JtZFc1amRHbHZiaWdnYm1GdFpTd2diM0pwWjJsdVlXd2dLU0I3WEc1Y2RHcFJkV1Z5ZVM1bWJsc2dibUZ0WlNCZElEMGdablZ1WTNScGIyNG9JSE5sYkdWamRHOXlJQ2tnZTF4dVhIUmNkSFpoY2lCbGJHVnRjeXhjYmx4MFhIUmNkSEpsZENBOUlGdGRMRnh1WEhSY2RGeDBhVzV6WlhKMElEMGdhbEYxWlhKNUtDQnpaV3hsWTNSdmNpQXBMRnh1WEhSY2RGeDBiR0Z6ZENBOUlHbHVjMlZ5ZEM1c1pXNW5kR2dnTFNBeExGeHVYSFJjZEZ4MGFTQTlJREE3WEc1Y2JseDBYSFJtYjNJZ0tDQTdJR2tnUEQwZ2JHRnpkRHNnYVNzcklDa2dlMXh1WEhSY2RGeDBaV3hsYlhNZ1BTQnBJRDA5UFNCc1lYTjBJRDhnZEdocGN5QTZJSFJvYVhNdVkyeHZibVVvSUhSeWRXVWdLVHRjYmx4MFhIUmNkR3BSZFdWeWVTZ2dhVzV6WlhKMFd5QnBJRjBnS1ZzZ2IzSnBaMmx1WVd3Z1hTZ2daV3hsYlhNZ0tUdGNibHh1WEhSY2RGeDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0E4UFRRdU1DQnZibXg1TENCUWFHRnVkRzl0U2xNZ01TQnZibXg1WEc1Y2RGeDBYSFF2THlBdVoyVjBLQ2tnWW1WallYVnpaU0J3ZFhOb0xtRndjR3g1S0Y4c0lHRnljbUY1YkdsclpTa2dkR2h5YjNkeklHOXVJR0Z1WTJsbGJuUWdWMlZpUzJsMFhHNWNkRngwWEhSd2RYTm9MbUZ3Y0d4NUtDQnlaWFFzSUdWc1pXMXpMbWRsZENncElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVjSFZ6YUZOMFlXTnJLQ0J5WlhRZ0tUdGNibHgwZlR0Y2JuMGdLVHRjYm5aaGNpQnliblZ0Ym05dWNIZ2dQU0J1WlhjZ1VtVm5SWGh3S0NCY0lsNG9YQ0lnS3lCd2JuVnRJQ3NnWENJcEtEOGhjSGdwVzJFdGVpVmRLeVJjSWl3Z1hDSnBYQ0lnS1R0Y2JseHVkbUZ5SUdkbGRGTjBlV3hsY3lBOUlHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYRzVjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQweE1TQnZibXg1TENCR2FYSmxabTk0SUR3OU16QWdLQ014TlRBNU9Dd2dJekUwTVRVd0tWeHVYSFJjZEM4dklFbEZJSFJvY205M2N5QnZiaUJsYkdWdFpXNTBjeUJqY21WaGRHVmtJR2x1SUhCdmNIVndjMXh1WEhSY2RDOHZJRVpHSUcxbFlXNTNhR2xzWlNCMGFISnZkM01nYjI0Z1puSmhiV1VnWld4bGJXVnVkSE1nZEdoeWIzVm5hQ0JjSW1SbFptRjFiSFJXYVdWM0xtZGxkRU52YlhCMWRHVmtVM1I1YkdWY0lseHVYSFJjZEhaaGNpQjJhV1YzSUQwZ1pXeGxiUzV2ZDI1bGNrUnZZM1Z0Wlc1MExtUmxabUYxYkhSV2FXVjNPMXh1WEc1Y2RGeDBhV1lnS0NBaGRtbGxkeUI4ZkNBaGRtbGxkeTV2Y0dWdVpYSWdLU0I3WEc1Y2RGeDBYSFIyYVdWM0lEMGdkMmx1Wkc5M08xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIyYVdWM0xtZGxkRU52YlhCMWRHVmtVM1I1YkdVb0lHVnNaVzBnS1R0Y2JseDBmVHRjYmx4dWRtRnlJSEppYjNoVGRIbHNaU0E5SUc1bGR5QlNaV2RGZUhBb0lHTnpjMFY0Y0dGdVpDNXFiMmx1S0NCY0lueGNJaUFwTENCY0ltbGNJaUFwTzF4dVhHNWNibHh1S0NCbWRXNWpkR2x2YmlncElIdGNibHh1WEhRdkx5QkZlR1ZqZFhScGJtY2dZbTkwYUNCd2FYaGxiRkJ2YzJsMGFXOXVJQ1lnWW05NFUybDZhVzVuVW1Wc2FXRmliR1VnZEdWemRITWdjbVZ4ZFdseVpTQnZibXg1SUc5dVpTQnNZWGx2ZFhSY2JseDBMeThnYzI4Z2RHaGxlU2R5WlNCbGVHVmpkWFJsWkNCaGRDQjBhR1VnYzJGdFpTQjBhVzFsSUhSdklITmhkbVVnZEdobElITmxZMjl1WkNCamIyMXdkWFJoZEdsdmJpNWNibHgwWm5WdVkzUnBiMjRnWTI5dGNIVjBaVk4wZVd4bFZHVnpkSE1vS1NCN1hHNWNibHgwWEhRdkx5QlVhR2x6SUdseklHRWdjMmx1WjJ4bGRHOXVMQ0IzWlNCdVpXVmtJSFJ2SUdWNFpXTjFkR1VnYVhRZ2IyNXNlU0J2Ym1ObFhHNWNkRngwYVdZZ0tDQWhaR2wySUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkR052Ym5SaGFXNWxjaTV6ZEhsc1pTNWpjM05VWlhoMElEMGdYQ0p3YjNOcGRHbHZianBoWW5OdmJIVjBaVHRzWldaME9pMHhNVEV4TVhCNE8zZHBaSFJvT2pZd2NIZzdYQ0lnSzF4dVhIUmNkRngwWENKdFlYSm5hVzR0ZEc5d09qRndlRHR3WVdSa2FXNW5PakE3WW05eVpHVnlPakJjSWp0Y2JseDBYSFJrYVhZdWMzUjViR1V1WTNOelZHVjRkQ0E5WEc1Y2RGeDBYSFJjSW5CdmMybDBhVzl1T25KbGJHRjBhWFpsTzJScGMzQnNZWGs2WW14dlkyczdZbTk0TFhOcGVtbHVaenBpYjNKa1pYSXRZbTk0TzI5MlpYSm1iRzkzT25OamNtOXNiRHRjSWlBclhHNWNkRngwWEhSY0ltMWhjbWRwYmpwaGRYUnZPMkp2Y21SbGNqb3hjSGc3Y0dGa1pHbHVaem94Y0hnN1hDSWdLMXh1WEhSY2RGeDBYQ0ozYVdSMGFEbzJNQ1U3ZEc5d09qRWxYQ0k3WEc1Y2RGeDBaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtRndjR1Z1WkVOb2FXeGtLQ0JqYjI1MFlXbHVaWElnS1M1aGNIQmxibVJEYUdsc1pDZ2daR2wySUNrN1hHNWNibHgwWEhSMllYSWdaR2wyVTNSNWJHVWdQU0IzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTZ2daR2wySUNrN1hHNWNkRngwY0dsNFpXeFFiM05wZEdsdmJsWmhiQ0E5SUdScGRsTjBlV3hsTG5SdmNDQWhQVDBnWENJeEpWd2lPMXh1WEc1Y2RGeDBMeThnVTNWd2NHOXlkRG9nUVc1a2NtOXBaQ0EwTGpBZ0xTQTBMak1nYjI1c2VTd2dSbWx5WldadmVDQThQVE1nTFNBME5GeHVYSFJjZEhKbGJHbGhZbXhsVFdGeVoybHVUR1ZtZEZaaGJDQTlJSEp2ZFc1a1VHbDRaV3hOWldGemRYSmxjeWdnWkdsMlUzUjViR1V1YldGeVoybHVUR1ZtZENBcElEMDlQU0F4TWp0Y2JseHVYSFJjZEM4dklGTjFjSEJ2Y25RNklFRnVaSEp2YVdRZ05DNHdJQzBnTkM0eklHOXViSGtzSUZOaFptRnlhU0E4UFRrdU1TQXRJREV3TGpFc0lHbFBVeUE4UFRjdU1DQXRJRGt1TTF4dVhIUmNkQzh2SUZOdmJXVWdjM1I1YkdWeklHTnZiV1VnWW1GamF5QjNhWFJvSUhCbGNtTmxiblJoWjJVZ2RtRnNkV1Z6TENCbGRtVnVJSFJvYjNWbmFDQjBhR1Y1SUhOb2IzVnNaRzRuZEZ4dVhIUmNkR1JwZGk1emRIbHNaUzV5YVdkb2RDQTlJRndpTmpBbFhDSTdYRzVjZEZ4MGNHbDRaV3hDYjNoVGRIbHNaWE5XWVd3Z1BTQnliM1Z1WkZCcGVHVnNUV1ZoYzNWeVpYTW9JR1JwZGxOMGVXeGxMbkpwWjJoMElDa2dQVDA5SURNMk8xeHVYRzVjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnT1NBdElERXhJRzl1YkhsY2JseDBYSFF2THlCRVpYUmxZM1FnYldsemNtVndiM0owYVc1bklHOW1JR052Ym5SbGJuUWdaR2x0Wlc1emFXOXVjeUJtYjNJZ1ltOTRMWE5wZW1sdVp6cGliM0prWlhJdFltOTRJR1ZzWlcxbGJuUnpYRzVjZEZ4MFltOTRVMmw2YVc1blVtVnNhV0ZpYkdWV1lXd2dQU0J5YjNWdVpGQnBlR1ZzVFdWaGMzVnlaWE1vSUdScGRsTjBlV3hsTG5kcFpIUm9JQ2tnUFQwOUlETTJPMXh1WEc1Y2RGeDBMeThnVTNWd2NHOXlkRG9nU1VVZ09TQnZibXg1WEc1Y2RGeDBMeThnUkdWMFpXTjBJRzkyWlhKbWJHOTNPbk5qY205c2JDQnpZM0psZDJsdVpYTnpJQ2huYUMwek5qazVLVnh1WEhSY2RHUnBkaTV6ZEhsc1pTNXdiM05wZEdsdmJpQTlJRndpWVdKemIyeDFkR1ZjSWp0Y2JseDBYSFJ6WTNKdmJHeGliM2hUYVhwbFZtRnNJRDBnWkdsMkxtOW1abk5sZEZkcFpIUm9JRDA5UFNBek5pQjhmQ0JjSW1GaWMyOXNkWFJsWENJN1hHNWNibHgwWEhSa2IyTjFiV1Z1ZEVWc1pXMWxiblF1Y21WdGIzWmxRMmhwYkdRb0lHTnZiblJoYVc1bGNpQXBPMXh1WEc1Y2RGeDBMeThnVG5Wc2JHbG1lU0IwYUdVZ1pHbDJJSE52SUdsMElIZHZkV3hrYmlkMElHSmxJSE4wYjNKbFpDQnBiaUIwYUdVZ2JXVnRiM0o1SUdGdVpGeHVYSFJjZEM4dklHbDBJSGRwYkd3Z1lXeHpieUJpWlNCaElITnBaMjRnZEdoaGRDQmphR1ZqYTNNZ1lXeHlaV0ZrZVNCd1pYSm1iM0p0WldSY2JseDBYSFJrYVhZZ1BTQnVkV3hzTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2NtOTFibVJRYVhobGJFMWxZWE4xY21WektDQnRaV0Z6ZFhKbElDa2dlMXh1WEhSY2RISmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tDQndZWEp6WlVac2IyRjBLQ0J0WldGemRYSmxJQ2tnS1R0Y2JseDBmVnh1WEc1Y2RIWmhjaUJ3YVhobGJGQnZjMmwwYVc5dVZtRnNMQ0JpYjNoVGFYcHBibWRTWld4cFlXSnNaVlpoYkN3Z2MyTnliMnhzWW05NFUybDZaVlpoYkN3Z2NHbDRaV3hDYjNoVGRIbHNaWE5XWVd3c1hHNWNkRngwY21Wc2FXRmliR1ZOWVhKbmFXNU1aV1owVm1Gc0xGeHVYSFJjZEdOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSUZ3aVpHbDJYQ0lnS1N4Y2JseDBYSFJrYVhZZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NCY0ltUnBkbHdpSUNrN1hHNWNibHgwTHk4Z1JtbHVhWE5vSUdWaGNteDVJR2x1SUd4cGJXbDBaV1FnS0c1dmJpMWljbTkzYzJWeUtTQmxiblpwY205dWJXVnVkSE5jYmx4MGFXWWdLQ0FoWkdsMkxuTjBlV3hsSUNrZ2UxeHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5T1NBdElERXhJRzl1YkhsY2JseDBMeThnVTNSNWJHVWdiMllnWTJ4dmJtVmtJR1ZzWlcxbGJuUWdZV1ptWldOMGN5QnpiM1Z5WTJVZ1pXeGxiV1Z1ZENCamJHOXVaV1FnS0NNNE9UQTRLVnh1WEhSa2FYWXVjM1I1YkdVdVltRmphMmR5YjNWdVpFTnNhWEFnUFNCY0ltTnZiblJsYm5RdFltOTRYQ0k3WEc1Y2RHUnBkaTVqYkc5dVpVNXZaR1VvSUhSeWRXVWdLUzV6ZEhsc1pTNWlZV05yWjNKdmRXNWtRMnhwY0NBOUlGd2lYQ0k3WEc1Y2RITjFjSEJ2Y25RdVkyeGxZWEpEYkc5dVpWTjBlV3hsSUQwZ1pHbDJMbk4wZVd4bExtSmhZMnRuY205MWJtUkRiR2x3SUQwOVBTQmNJbU52Ym5SbGJuUXRZbTk0WENJN1hHNWNibHgwYWxGMVpYSjVMbVY0ZEdWdVpDZ2djM1Z3Y0c5eWRDd2dlMXh1WEhSY2RHSnZlRk5wZW1sdVoxSmxiR2xoWW14bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkR052YlhCMWRHVlRkSGxzWlZSbGMzUnpLQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdZbTk0VTJsNmFXNW5VbVZzYVdGaWJHVldZV3c3WEc1Y2RGeDBmU3hjYmx4MFhIUndhWGhsYkVKdmVGTjBlV3hsY3pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmpiMjF3ZFhSbFUzUjViR1ZVWlhOMGN5Z3BPMXh1WEhSY2RGeDBjbVYwZFhKdUlIQnBlR1ZzUW05NFUzUjViR1Z6Vm1Gc08xeHVYSFJjZEgwc1hHNWNkRngwY0dsNFpXeFFiM05wZEdsdmJqb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJqYjIxd2RYUmxVM1I1YkdWVVpYTjBjeWdwTzF4dVhIUmNkRngwY21WMGRYSnVJSEJwZUdWc1VHOXphWFJwYjI1V1lXdzdYRzVjZEZ4MGZTeGNibHgwWEhSeVpXeHBZV0pzWlUxaGNtZHBia3hsWm5RNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBZMjl0Y0hWMFpWTjBlV3hsVkdWemRITW9LVHRjYmx4MFhIUmNkSEpsZEhWeWJpQnlaV3hwWVdKc1pVMWhjbWRwYmt4bFpuUldZV3c3WEc1Y2RGeDBmU3hjYmx4MFhIUnpZM0p2Ykd4aWIzaFRhWHBsT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHTnZiWEIxZEdWVGRIbHNaVlJsYzNSektDazdYRzVjZEZ4MFhIUnlaWFIxY200Z2MyTnliMnhzWW05NFUybDZaVlpoYkR0Y2JseDBYSFI5WEc1Y2RIMGdLVHRjYm4wZ0tTZ3BPMXh1WEc1Y2JtWjFibU4wYVc5dUlHTjFja05UVXlnZ1pXeGxiU3dnYm1GdFpTd2dZMjl0Y0hWMFpXUWdLU0I3WEc1Y2RIWmhjaUIzYVdSMGFDd2diV2x1VjJsa2RHZ3NJRzFoZUZkcFpIUm9MQ0J5WlhRc1hHNWNibHgwWEhRdkx5QlRkWEJ3YjNKME9pQkdhWEpsWm05NElEVXhLMXh1WEhSY2RDOHZJRkpsZEhKcFpYWnBibWNnYzNSNWJHVWdZbVZtYjNKbElHTnZiWEIxZEdWa0lITnZiV1ZvYjNkY2JseDBYSFF2THlCbWFYaGxjeUJoYmlCcGMzTjFaU0IzYVhSb0lHZGxkSFJwYm1jZ2QzSnZibWNnZG1Gc2RXVnpYRzVjZEZ4MEx5OGdiMjRnWkdWMFlXTm9aV1FnWld4bGJXVnVkSE5jYmx4MFhIUnpkSGxzWlNBOUlHVnNaVzB1YzNSNWJHVTdYRzVjYmx4MFkyOXRjSFYwWldRZ1BTQmpiMjF3ZFhSbFpDQjhmQ0JuWlhSVGRIbHNaWE1vSUdWc1pXMGdLVHRjYmx4dVhIUXZMeUJuWlhSUWNtOXdaWEowZVZaaGJIVmxJR2x6SUc1bFpXUmxaQ0JtYjNJNlhHNWNkQzh2SUNBZ0xtTnpjeWduWm1sc2RHVnlKeWtnS0VsRklEa2diMjVzZVN3Z0l6RXlOVE0zS1Z4dVhIUXZMeUFnSUM1amMzTW9KeTB0WTNWemRHOXRVSEp2Y0dWeWRIa3BJQ2dqTXpFME5DbGNibHgwYVdZZ0tDQmpiMjF3ZFhSbFpDQXBJSHRjYmx4MFhIUnlaWFFnUFNCamIyMXdkWFJsWkM1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0NCdVlXMWxJQ2tnZkh3Z1kyOXRjSFYwWldSYklHNWhiV1VnWFR0Y2JseHVYSFJjZEdsbUlDZ2djbVYwSUQwOVBTQmNJbHdpSUNZbUlDRnFVWFZsY25rdVkyOXVkR0ZwYm5Nb0lHVnNaVzB1YjNkdVpYSkViMk4xYldWdWRDd2daV3hsYlNBcElDa2dlMXh1WEhSY2RGeDBjbVYwSUQwZ2FsRjFaWEo1TG5OMGVXeGxLQ0JsYkdWdExDQnVZVzFsSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1FTQjBjbWxpZFhSbElIUnZJSFJvWlNCY0ltRjNaWE52YldVZ2FHRmpheUJpZVNCRVpXRnVJRVZrZDJGeVpITmNJbHh1WEhSY2RDOHZJRUZ1WkhKdmFXUWdRbkp2ZDNObGNpQnlaWFIxY201eklIQmxjbU5sYm5SaFoyVWdabTl5SUhOdmJXVWdkbUZzZFdWekxGeHVYSFJjZEM4dklHSjFkQ0IzYVdSMGFDQnpaV1Z0Y3lCMGJ5QmlaU0J5Wld4cFlXSnNlU0J3YVhobGJITXVYRzVjZEZ4MEx5OGdWR2hwY3lCcGN5QmhaMkZwYm5OMElIUm9aU0JEVTFOUFRTQmtjbUZtZENCemNHVmpPbHh1WEhSY2RDOHZJR2gwZEhCek9pOHZaSEpoWm5SekxtTnpjM2RuTG05eVp5OWpjM052YlM4amNtVnpiMngyWldRdGRtRnNkV1Z6WEc1Y2RGeDBhV1lnS0NBaGMzVndjRzl5ZEM1d2FYaGxiRUp2ZUZOMGVXeGxjeWdwSUNZbUlISnVkVzF1YjI1d2VDNTBaWE4wS0NCeVpYUWdLU0FtSmlCeVltOTRVM1I1YkdVdWRHVnpkQ2dnYm1GdFpTQXBJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QlNaVzFsYldKbGNpQjBhR1VnYjNKcFoybHVZV3dnZG1Gc2RXVnpYRzVjZEZ4MFhIUjNhV1IwYUNBOUlITjBlV3hsTG5kcFpIUm9PMXh1WEhSY2RGeDBiV2x1VjJsa2RHZ2dQU0J6ZEhsc1pTNXRhVzVYYVdSMGFEdGNibHgwWEhSY2RHMWhlRmRwWkhSb0lEMGdjM1I1YkdVdWJXRjRWMmxrZEdnN1hHNWNibHgwWEhSY2RDOHZJRkIxZENCcGJpQjBhR1VnYm1WM0lIWmhiSFZsY3lCMGJ5Qm5aWFFnWVNCamIyMXdkWFJsWkNCMllXeDFaU0J2ZFhSY2JseDBYSFJjZEhOMGVXeGxMbTFwYmxkcFpIUm9JRDBnYzNSNWJHVXViV0Y0VjJsa2RHZ2dQU0J6ZEhsc1pTNTNhV1IwYUNBOUlISmxkRHRjYmx4MFhIUmNkSEpsZENBOUlHTnZiWEIxZEdWa0xuZHBaSFJvTzF4dVhHNWNkRngwWEhRdkx5QlNaWFpsY25RZ2RHaGxJR05vWVc1blpXUWdkbUZzZFdWelhHNWNkRngwWEhSemRIbHNaUzUzYVdSMGFDQTlJSGRwWkhSb08xeHVYSFJjZEZ4MGMzUjViR1V1YldsdVYybGtkR2dnUFNCdGFXNVhhV1IwYUR0Y2JseDBYSFJjZEhOMGVXeGxMbTFoZUZkcFpIUm9JRDBnYldGNFYybGtkR2c3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwY21WMGRYSnVJSEpsZENBaFBUMGdkVzVrWldacGJtVmtJRDljYmx4dVhIUmNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlPU0F0SURFeElHOXViSGxjYmx4MFhIUXZMeUJKUlNCeVpYUjFjbTV6SUhwSmJtUmxlQ0IyWVd4MVpTQmhjeUJoYmlCcGJuUmxaMlZ5TGx4dVhIUmNkSEpsZENBcklGd2lYQ0lnT2x4dVhIUmNkSEpsZER0Y2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCaFpHUkhaWFJJYjI5clNXWW9JR052Ym1ScGRHbHZia1p1TENCb2IyOXJSbTRnS1NCN1hHNWNibHgwTHk4Z1JHVm1hVzVsSUhSb1pTQm9iMjlyTENCM1pTZHNiQ0JqYUdWamF5QnZiaUIwYUdVZ1ptbHljM1FnY25WdUlHbG1JR2wwSjNNZ2NtVmhiR3g1SUc1bFpXUmxaQzVjYmx4MGNtVjBkWEp1SUh0Y2JseDBYSFJuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBhV1lnS0NCamIyNWthWFJwYjI1R2JpZ3BJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRWh2YjJzZ2JtOTBJRzVsWldSbFpDQW9iM0lnYVhRbmN5QnViM1FnY0c5emMybGliR1VnZEc4Z2RYTmxJR2wwSUdSMVpWeHVYSFJjZEZ4MFhIUXZMeUIwYnlCdGFYTnphVzVuSUdSbGNHVnVaR1Z1WTNrcExDQnlaVzF2ZG1VZ2FYUXVYRzVjZEZ4MFhIUmNkR1JsYkdWMFpTQjBhR2x6TG1kbGREdGNibHgwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJJYjI5cklHNWxaV1JsWkRzZ2NtVmtaV1pwYm1VZ2FYUWdjMjhnZEdoaGRDQjBhR1VnYzNWd2NHOXlkQ0IwWlhOMElHbHpJRzV2ZENCbGVHVmpkWFJsWkNCaFoyRnBiaTVjYmx4MFhIUmNkSEpsZEhWeWJpQW9JSFJvYVhNdVoyVjBJRDBnYUc5dmEwWnVJQ2t1WVhCd2JIa29JSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5QXBPMXh1WEhSY2RIMWNibHgwZlR0Y2JuMWNibHh1WEc1MllYSmNibHh1WEhRdkx5QlRkMkZ3Y0dGaWJHVWdhV1lnWkdsemNHeGhlU0JwY3lCdWIyNWxJRzl5SUhOMFlYSjBjeUIzYVhSb0lIUmhZbXhsWEc1Y2RDOHZJR1Y0WTJWd2RDQmNJblJoWW14bFhDSXNJRndpZEdGaWJHVXRZMlZzYkZ3aUxDQnZjaUJjSW5SaFlteGxMV05oY0hScGIyNWNJbHh1WEhRdkx5QlRaV1VnYUdWeVpTQm1iM0lnWkdsemNHeGhlU0IyWVd4MVpYTTZJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlExTlRMMlJwYzNCc1lYbGNibHgwY21ScGMzQnNZWGx6ZDJGd0lEMGdMMTRvYm05dVpYeDBZV0pzWlNnL0lTMWpXMlZoWFNrdUt5a3ZMRnh1WEhSeVkzVnpkRzl0VUhKdmNDQTlJQzllTFMwdkxGeHVYSFJqYzNOVGFHOTNJRDBnZXlCd2IzTnBkR2x2YmpvZ1hDSmhZbk52YkhWMFpWd2lMQ0IyYVhOcFltbHNhWFI1T2lCY0ltaHBaR1JsYmx3aUxDQmthWE53YkdGNU9pQmNJbUpzYjJOclhDSWdmU3hjYmx4MFkzTnpUbTl5YldGc1ZISmhibk5tYjNKdElEMGdlMXh1WEhSY2RHeGxkSFJsY2xOd1lXTnBibWM2SUZ3aU1Gd2lMRnh1WEhSY2RHWnZiblJYWldsbmFIUTZJRndpTkRBd1hDSmNibHgwZlN4Y2JseHVYSFJqYzNOUWNtVm1hWGhsY3lBOUlGc2dYQ0pYWldKcmFYUmNJaXdnWENKTmIzcGNJaXdnWENKdGMxd2lJRjBzWEc1Y2RHVnRjSFI1VTNSNWJHVWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDQmNJbVJwZGx3aUlDa3VjM1I1YkdVN1hHNWNiaTh2SUZKbGRIVnliaUJoSUdOemN5QndjbTl3WlhKMGVTQnRZWEJ3WldRZ2RHOGdZU0J3YjNSbGJuUnBZV3hzZVNCMlpXNWtiM0lnY0hKbFptbDRaV1FnY0hKdmNHVnlkSGxjYm1aMWJtTjBhVzl1SUhabGJtUnZjbEJ5YjNCT1lXMWxLQ0J1WVcxbElDa2dlMXh1WEc1Y2RDOHZJRk5vYjNKMFkzVjBJR1p2Y2lCdVlXMWxjeUIwYUdGMElHRnlaU0J1YjNRZ2RtVnVaRzl5SUhCeVpXWnBlR1ZrWEc1Y2RHbG1JQ2dnYm1GdFpTQnBiaUJsYlhCMGVWTjBlV3hsSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ1WVcxbE8xeHVYSFI5WEc1Y2JseDBMeThnUTJobFkyc2dabTl5SUhabGJtUnZjaUJ3Y21WbWFYaGxaQ0J1WVcxbGMxeHVYSFIyWVhJZ1kyRndUbUZ0WlNBOUlHNWhiV1ZiSURBZ1hTNTBiMVZ3Y0dWeVEyRnpaU2dwSUNzZ2JtRnRaUzV6YkdsalpTZ2dNU0FwTEZ4dVhIUmNkR2tnUFNCamMzTlFjbVZtYVhobGN5NXNaVzVuZEdnN1hHNWNibHgwZDJocGJHVWdLQ0JwTFMwZ0tTQjdYRzVjZEZ4MGJtRnRaU0E5SUdOemMxQnlaV1pwZUdWeld5QnBJRjBnS3lCallYQk9ZVzFsTzF4dVhIUmNkR2xtSUNnZ2JtRnRaU0JwYmlCbGJYQjBlVk4wZVd4bElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHNWhiV1U3WEc1Y2RGeDBmVnh1WEhSOVhHNTlYRzVjYmk4dklGSmxkSFZ5YmlCaElIQnliM0JsY25SNUlHMWhjSEJsWkNCaGJHOXVaeUIzYUdGMElHcFJkV1Z5ZVM1amMzTlFjbTl3Y3lCemRXZG5aWE4wY3lCdmNpQjBiMXh1THk4Z1lTQjJaVzVrYjNJZ2NISmxabWw0WldRZ2NISnZjR1Z5ZEhrdVhHNW1kVzVqZEdsdmJpQm1hVzVoYkZCeWIzQk9ZVzFsS0NCdVlXMWxJQ2tnZTF4dVhIUjJZWElnY21WMElEMGdhbEYxWlhKNUxtTnpjMUJ5YjNCeld5QnVZVzFsSUYwN1hHNWNkR2xtSUNnZ0lYSmxkQ0FwSUh0Y2JseDBYSFJ5WlhRZ1BTQnFVWFZsY25rdVkzTnpVSEp2Y0hOYklHNWhiV1VnWFNBOUlIWmxibVJ2Y2xCeWIzQk9ZVzFsS0NCdVlXMWxJQ2tnZkh3Z2JtRnRaVHRjYmx4MGZWeHVYSFJ5WlhSMWNtNGdjbVYwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSUWIzTnBkR2wyWlU1MWJXSmxjaWdnWld4bGJTd2dkbUZzZFdVc0lITjFZblJ5WVdOMElDa2dlMXh1WEc1Y2RDOHZJRUZ1ZVNCeVpXeGhkR2wyWlNBb0t5OHRLU0IyWVd4MVpYTWdhR0YyWlNCaGJISmxZV1I1SUdKbFpXNWNibHgwTHk4Z2JtOXliV0ZzYVhwbFpDQmhkQ0IwYUdseklIQnZhVzUwWEc1Y2RIWmhjaUJ0WVhSamFHVnpJRDBnY21OemMwNTFiUzVsZUdWaktDQjJZV3gxWlNBcE8xeHVYSFJ5WlhSMWNtNGdiV0YwWTJobGN5QS9YRzVjYmx4MFhIUXZMeUJIZFdGeVpDQmhaMkZwYm5OMElIVnVaR1ZtYVc1bFpDQmNJbk4xWW5SeVlXTjBYQ0lzSUdVdVp5NHNJSGRvWlc0Z2RYTmxaQ0JoY3lCcGJpQmpjM05JYjI5cmMxeHVYSFJjZEUxaGRHZ3ViV0Y0S0NBd0xDQnRZWFJqYUdWeld5QXlJRjBnTFNBb0lITjFZblJ5WVdOMElIeDhJREFnS1NBcElDc2dLQ0J0WVhSamFHVnpXeUF6SUYwZ2ZId2dYQ0p3ZUZ3aUlDa2dPbHh1WEhSY2RIWmhiSFZsTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJpYjNoTmIyUmxiRUZrYW5WemRHMWxiblFvSUdWc1pXMHNJR1JwYldWdWMybHZiaXdnWW05NExDQnBjMEp2Y21SbGNrSnZlQ3dnYzNSNWJHVnpMQ0JqYjIxd2RYUmxaRlpoYkNBcElIdGNibHgwZG1GeUlHa2dQU0JrYVcxbGJuTnBiMjRnUFQwOUlGd2lkMmxrZEdoY0lpQS9JREVnT2lBd0xGeHVYSFJjZEdWNGRISmhJRDBnTUN4Y2JseDBYSFJrWld4MFlTQTlJREE3WEc1Y2JseDBMeThnUVdScWRYTjBiV1Z1ZENCdFlYa2dibTkwSUdKbElHNWxZMlZ6YzJGeWVWeHVYSFJwWmlBb0lHSnZlQ0E5UFQwZ0tDQnBjMEp2Y21SbGNrSnZlQ0EvSUZ3aVltOXlaR1Z5WENJZ09pQmNJbU52Ym5SbGJuUmNJaUFwSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUF3TzF4dVhIUjlYRzVjYmx4MFptOXlJQ2dnT3lCcElEd2dORHNnYVNBclBTQXlJQ2tnZTF4dVhHNWNkRngwTHk4Z1FtOTBhQ0JpYjNnZ2JXOWtaV3h6SUdWNFkyeDFaR1VnYldGeVoybHVYRzVjZEZ4MGFXWWdLQ0JpYjNnZ1BUMDlJRndpYldGeVoybHVYQ0lnS1NCN1hHNWNkRngwWEhSa1pXeDBZU0FyUFNCcVVYVmxjbmt1WTNOektDQmxiR1Z0TENCaWIzZ2dLeUJqYzNORmVIQmhibVJiSUdrZ1hTd2dkSEoxWlN3Z2MzUjViR1Z6SUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1NXWWdkMlVnWjJWMElHaGxjbVVnZDJsMGFDQmhJR052Ym5SbGJuUXRZbTk0TENCM1pTZHlaU0J6WldWcmFXNW5JRndpY0dGa1pHbHVaMXdpSUc5eUlGd2lZbTl5WkdWeVhDSWdiM0lnWENKdFlYSm5hVzVjSWx4dVhIUmNkR2xtSUNnZ0lXbHpRbTl5WkdWeVFtOTRJQ2tnZTF4dVhHNWNkRngwWEhRdkx5QkJaR1FnY0dGa1pHbHVaMXh1WEhSY2RGeDBaR1ZzZEdFZ0t6MGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0p3WVdSa2FXNW5YQ0lnS3lCamMzTkZlSEJoYm1SYklHa2dYU3dnZEhKMVpTd2djM1I1YkdWeklDazdYRzVjYmx4MFhIUmNkQzh2SUVadmNpQmNJbUp2Y21SbGNsd2lJRzl5SUZ3aWJXRnlaMmx1WENJc0lHRmtaQ0JpYjNKa1pYSmNibHgwWEhSY2RHbG1JQ2dnWW05NElDRTlQU0JjSW5CaFpHUnBibWRjSWlBcElIdGNibHgwWEhSY2RGeDBaR1ZzZEdFZ0t6MGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0ppYjNKa1pYSmNJaUFySUdOemMwVjRjR0Z1WkZzZ2FTQmRJQ3NnWENKWGFXUjBhRndpTENCMGNuVmxMQ0J6ZEhsc1pYTWdLVHRjYmx4dVhIUmNkRngwTHk4Z1FuVjBJSE4wYVd4c0lHdGxaWEFnZEhKaFkyc2diMllnYVhRZ2IzUm9aWEozYVhObFhHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSbGVIUnlZU0FyUFNCcVVYVmxjbmt1WTNOektDQmxiR1Z0TENCY0ltSnZjbVJsY2x3aUlDc2dZM056Ulhod1lXNWtXeUJwSUYwZ0t5QmNJbGRwWkhSb1hDSXNJSFJ5ZFdVc0lITjBlV3hsY3lBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTV1lnZDJVZ1oyVjBJR2hsY21VZ2QybDBhQ0JoSUdKdmNtUmxjaTFpYjNnZ0tHTnZiblJsYm5RZ0t5QndZV1JrYVc1bklDc2dZbTl5WkdWeUtTd2dkMlVuY21VZ2MyVmxhMmx1WnlCY0ltTnZiblJsYm5SY0lpQnZjbHh1WEhSY2RDOHZJRndpY0dGa1pHbHVaMXdpSUc5eUlGd2liV0Z5WjJsdVhDSmNibHgwWEhSOUlHVnNjMlVnZTF4dVhHNWNkRngwWEhRdkx5QkdiM0lnWENKamIyNTBaVzUwWENJc0lITjFZblJ5WVdOMElIQmhaR1JwYm1kY2JseDBYSFJjZEdsbUlDZ2dZbTk0SUQwOVBTQmNJbU52Ym5SbGJuUmNJaUFwSUh0Y2JseDBYSFJjZEZ4MFpHVnNkR0VnTFQwZ2FsRjFaWEo1TG1OemN5Z2daV3hsYlN3Z1hDSndZV1JrYVc1blhDSWdLeUJqYzNORmVIQmhibVJiSUdrZ1hTd2dkSEoxWlN3Z2MzUjViR1Z6SUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRVp2Y2lCY0ltTnZiblJsYm5SY0lpQnZjaUJjSW5CaFpHUnBibWRjSWl3Z2MzVmlkSEpoWTNRZ1ltOXlaR1Z5WEc1Y2RGeDBYSFJwWmlBb0lHSnZlQ0FoUFQwZ1hDSnRZWEpuYVc1Y0lpQXBJSHRjYmx4MFhIUmNkRngwWkdWc2RHRWdMVDBnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKaWIzSmtaWEpjSWlBcklHTnpjMFY0Y0dGdVpGc2dhU0JkSUNzZ1hDSlhhV1IwYUZ3aUxDQjBjblZsTENCemRIbHNaWE1nS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhRdkx5QkJZMk52ZFc1MElHWnZjaUJ3YjNOcGRHbDJaU0JqYjI1MFpXNTBMV0p2ZUNCelkzSnZiR3dnWjNWMGRHVnlJSGRvWlc0Z2NtVnhkV1Z6ZEdWa0lHSjVJSEJ5YjNacFpHbHVaeUJqYjIxd2RYUmxaRlpoYkZ4dVhIUnBaaUFvSUNGcGMwSnZjbVJsY2tKdmVDQW1KaUJqYjIxd2RYUmxaRlpoYkNBK1BTQXdJQ2tnZTF4dVhHNWNkRngwTHk4Z2IyWm1jMlYwVjJsa2RHZ3ZiMlptYzJWMFNHVnBaMmgwSUdseklHRWdjbTkxYm1SbFpDQnpkVzBnYjJZZ1kyOXVkR1Z1ZEN3Z2NHRmtaR2x1Wnl3Z2MyTnliMnhzSUdkMWRIUmxjaXdnWVc1a0lHSnZjbVJsY2x4dVhIUmNkQzh2SUVGemMzVnRhVzVuSUdsdWRHVm5aWElnYzJOeWIyeHNJR2QxZEhSbGNpd2djM1ZpZEhKaFkzUWdkR2hsSUhKbGMzUWdZVzVrSUhKdmRXNWtJR1J2ZDI1Y2JseDBYSFJrWld4MFlTQXJQU0JOWVhSb0xtMWhlQ2dnTUN3Z1RXRjBhQzVqWldsc0tGeHVYSFJjZEZ4MFpXeGxiVnNnWENKdlptWnpaWFJjSWlBcklHUnBiV1Z1YzJsdmJsc2dNQ0JkTG5SdlZYQndaWEpEWVhObEtDa2dLeUJrYVcxbGJuTnBiMjR1YzJ4cFkyVW9JREVnS1NCZElDMWNibHgwWEhSY2RHTnZiWEIxZEdWa1ZtRnNJQzFjYmx4MFhIUmNkR1JsYkhSaElDMWNibHgwWEhSY2RHVjRkSEpoSUMxY2JseDBYSFJjZERBdU5WeHVYSFJjZENrZ0tUdGNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQmtaV3gwWVR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFYybGtkR2hQY2tobGFXZG9kQ2dnWld4bGJTd2daR2x0Wlc1emFXOXVMQ0JsZUhSeVlTQXBJSHRjYmx4dVhIUXZMeUJUZEdGeWRDQjNhWFJvSUdOdmJYQjFkR1ZrSUhOMGVXeGxYRzVjZEhaaGNpQnpkSGxzWlhNZ1BTQm5aWFJUZEhsc1pYTW9JR1ZzWlcwZ0tTeGNibHgwWEhSMllXd2dQU0JqZFhKRFUxTW9JR1ZzWlcwc0lHUnBiV1Z1YzJsdmJpd2djM1I1YkdWeklDa3NYRzVjZEZ4MGFYTkNiM0prWlhKQ2IzZ2dQU0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW1KdmVGTnBlbWx1WjF3aUxDQm1ZV3h6WlN3Z2MzUjViR1Z6SUNrZ1BUMDlJRndpWW05eVpHVnlMV0p2ZUZ3aUxGeHVYSFJjZEhaaGJIVmxTWE5DYjNKa1pYSkNiM2dnUFNCcGMwSnZjbVJsY2tKdmVEdGNibHh1WEhRdkx5QlRkWEJ3YjNKME9pQkdhWEpsWm05NElEdzlOVFJjYmx4MEx5OGdVbVYwZFhKdUlHRWdZMjl1Wm05MWJtUnBibWNnYm05dUxYQnBlR1ZzSUhaaGJIVmxJRzl5SUdabGFXZHVJR2xuYm05eVlXNWpaU3dnWVhNZ1lYQndjbTl3Y21saGRHVXVYRzVjZEdsbUlDZ2djbTUxYlc1dmJuQjRMblJsYzNRb0lIWmhiQ0FwSUNrZ2UxeHVYSFJjZEdsbUlDZ2dJV1Y0ZEhKaElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIWmhiRHRjYmx4MFhIUjlYRzVjZEZ4MGRtRnNJRDBnWENKaGRYUnZYQ0k3WEc1Y2RIMWNibHh1WEhRdkx5QkRhR1ZqYXlCbWIzSWdjM1I1YkdVZ2FXNGdZMkZ6WlNCaElHSnliM2R6WlhJZ2QyaHBZMmdnY21WMGRYSnVjeUIxYm5KbGJHbGhZbXhsSUhaaGJIVmxjMXh1WEhRdkx5Qm1iM0lnWjJWMFEyOXRjSFYwWldSVGRIbHNaU0J6YVd4bGJuUnNlU0JtWVd4c2N5QmlZV05ySUhSdklIUm9aU0J5Wld4cFlXSnNaU0JsYkdWdExuTjBlV3hsWEc1Y2RIWmhiSFZsU1hOQ2IzSmtaWEpDYjNnZ1BTQjJZV3gxWlVselFtOXlaR1Z5UW05NElDWW1YRzVjZEZ4MEtDQnpkWEJ3YjNKMExtSnZlRk5wZW1sdVoxSmxiR2xoWW14bEtDa2dmSHdnZG1Gc0lEMDlQU0JsYkdWdExuTjBlV3hsV3lCa2FXMWxibk5wYjI0Z1hTQXBPMXh1WEc1Y2RDOHZJRVpoYkd3Z1ltRmpheUIwYnlCdlptWnpaWFJYYVdSMGFDOXZabVp6WlhSSVpXbG5hSFFnZDJobGJpQjJZV3gxWlNCcGN5QmNJbUYxZEc5Y0lseHVYSFF2THlCVWFHbHpJR2hoY0hCbGJuTWdabTl5SUdsdWJHbHVaU0JsYkdWdFpXNTBjeUIzYVhSb0lHNXZJR1Y0Y0d4cFkybDBJSE5sZEhScGJtY2dLR2RvTFRNMU56RXBYRzVjZEM4dklGTjFjSEJ2Y25RNklFRnVaSEp2YVdRZ1BEMDBMakVnTFNBMExqTWdiMjVzZVZ4dVhIUXZMeUJCYkhOdklIVnpaU0J2Wm1aelpYUlhhV1IwYUM5dlptWnpaWFJJWldsbmFIUWdabTl5SUcxcGMzSmxjRzl5ZEdWa0lHbHViR2x1WlNCa2FXMWxibk5wYjI1eklDaG5hQzB6TmpBeUtWeHVYSFJwWmlBb0lIWmhiQ0E5UFQwZ1hDSmhkWFJ2WENJZ2ZIeGNibHgwWEhRaGNHRnljMlZHYkc5aGRDZ2dkbUZzSUNrZ0ppWWdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0prYVhOd2JHRjVYQ0lzSUdaaGJITmxMQ0J6ZEhsc1pYTWdLU0E5UFQwZ1hDSnBibXhwYm1WY0lpQXBJSHRjYmx4dVhIUmNkSFpoYkNBOUlHVnNaVzFiSUZ3aWIyWm1jMlYwWENJZ0t5QmthVzFsYm5OcGIyNWJJREFnWFM1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnWkdsdFpXNXphVzl1TG5Oc2FXTmxLQ0F4SUNrZ1hUdGNibHh1WEhSY2RDOHZJRzltWm5ObGRGZHBaSFJvTDI5bVpuTmxkRWhsYVdkb2RDQndjbTkyYVdSbElHSnZjbVJsY2kxaWIzZ2dkbUZzZFdWelhHNWNkRngwZG1Gc2RXVkpjMEp2Y21SbGNrSnZlQ0E5SUhSeWRXVTdYRzVjZEgxY2JseHVYSFF2THlCT2IzSnRZV3hwZW1VZ1hDSmNJaUJoYm1RZ1lYVjBiMXh1WEhSMllXd2dQU0J3WVhKelpVWnNiMkYwS0NCMllXd2dLU0I4ZkNBd08xeHVYRzVjZEM4dklFRmthblZ6ZENCbWIzSWdkR2hsSUdWc1pXMWxiblFuY3lCaWIzZ2diVzlrWld4Y2JseDBjbVYwZFhKdUlDZ2dkbUZzSUN0Y2JseDBYSFJpYjNoTmIyUmxiRUZrYW5WemRHMWxiblFvWEc1Y2RGeDBYSFJsYkdWdExGeHVYSFJjZEZ4MFpHbHRaVzV6YVc5dUxGeHVYSFJjZEZ4MFpYaDBjbUVnZkh3Z0tDQnBjMEp2Y21SbGNrSnZlQ0EvSUZ3aVltOXlaR1Z5WENJZ09pQmNJbU52Ym5SbGJuUmNJaUFwTEZ4dVhIUmNkRngwZG1Gc2RXVkpjMEp2Y21SbGNrSnZlQ3hjYmx4MFhIUmNkSE4wZVd4bGN5eGNibHh1WEhSY2RGeDBMeThnVUhKdmRtbGtaU0IwYUdVZ1kzVnljbVZ1ZENCamIyMXdkWFJsWkNCemFYcGxJSFJ2SUhKbGNYVmxjM1FnYzJOeWIyeHNJR2QxZEhSbGNpQmpZV3hqZFd4aGRHbHZiaUFvWjJndE16VTRPU2xjYmx4MFhIUmNkSFpoYkZ4dVhIUmNkQ2xjYmx4MEtTQXJJRndpY0hoY0lqdGNibjFjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhHNWNkQzh2SUVGa1pDQnBiaUJ6ZEhsc1pTQndjbTl3WlhKMGVTQm9iMjlyY3lCbWIzSWdiM1psY25KcFpHbHVaeUIwYUdVZ1pHVm1ZWFZzZEZ4dVhIUXZMeUJpWldoaGRtbHZjaUJ2WmlCblpYUjBhVzVuSUdGdVpDQnpaWFIwYVc1bklHRWdjM1I1YkdVZ2NISnZjR1Z5ZEhsY2JseDBZM056U0c5dmEzTTZJSHRjYmx4MFhIUnZjR0ZqYVhSNU9pQjdYRzVjZEZ4MFhIUm5aWFE2SUdaMWJtTjBhVzl1S0NCbGJHVnRMQ0JqYjIxd2RYUmxaQ0FwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0JqYjIxd2RYUmxaQ0FwSUh0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUZkbElITm9iM1ZzWkNCaGJIZGhlWE1nWjJWMElHRWdiblZ0WW1WeUlHSmhZMnNnWm5KdmJTQnZjR0ZqYVhSNVhHNWNkRngwWEhSY2RGeDBkbUZ5SUhKbGRDQTlJR04xY2tOVFV5Z2daV3hsYlN3Z1hDSnZjR0ZqYVhSNVhDSWdLVHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WMElEMDlQU0JjSWx3aUlEOGdYQ0l4WENJZ09pQnlaWFE3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMHNYRzVjYmx4MEx5OGdSRzl1SjNRZ1lYVjBiMjFoZEdsallXeHNlU0JoWkdRZ1hDSndlRndpSUhSdklIUm9aWE5sSUhCdmMzTnBZbXg1TFhWdWFYUnNaWE56SUhCeWIzQmxjblJwWlhOY2JseDBZM056VG5WdFltVnlPaUI3WEc1Y2RGeDBYQ0poYm1sdFlYUnBiMjVKZEdWeVlYUnBiMjVEYjNWdWRGd2lPaUIwY25WbExGeHVYSFJjZEZ3aVkyOXNkVzF1UTI5MWJuUmNJam9nZEhKMVpTeGNibHgwWEhSY0ltWnBiR3hQY0dGamFYUjVYQ0k2SUhSeWRXVXNYRzVjZEZ4MFhDSm1iR1Y0UjNKdmQxd2lPaUIwY25WbExGeHVYSFJjZEZ3aVpteGxlRk5vY21sdWExd2lPaUIwY25WbExGeHVYSFJjZEZ3aVptOXVkRmRsYVdkb2RGd2lPaUIwY25WbExGeHVYSFJjZEZ3aWJHbHVaVWhsYVdkb2RGd2lPaUIwY25WbExGeHVYSFJjZEZ3aWIzQmhZMmwwZVZ3aU9pQjBjblZsTEZ4dVhIUmNkRndpYjNKa1pYSmNJam9nZEhKMVpTeGNibHgwWEhSY0ltOXljR2hoYm5OY0lqb2dkSEoxWlN4Y2JseDBYSFJjSW5kcFpHOTNjMXdpT2lCMGNuVmxMRnh1WEhSY2RGd2lla2x1WkdWNFhDSTZJSFJ5ZFdVc1hHNWNkRngwWENKNmIyOXRYQ0k2SUhSeWRXVmNibHgwZlN4Y2JseHVYSFF2THlCQlpHUWdhVzRnY0hKdmNHVnlkR2xsY3lCM2FHOXpaU0J1WVcxbGN5QjViM1VnZDJsemFDQjBieUJtYVhnZ1ltVm1iM0psWEc1Y2RDOHZJSE5sZEhScGJtY2diM0lnWjJWMGRHbHVaeUIwYUdVZ2RtRnNkV1ZjYmx4MFkzTnpVSEp2Y0hNNklIdDlMRnh1WEc1Y2RDOHZJRWRsZENCaGJtUWdjMlYwSUhSb1pTQnpkSGxzWlNCd2NtOXdaWEowZVNCdmJpQmhJRVJQVFNCT2IyUmxYRzVjZEhOMGVXeGxPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dibUZ0WlN3Z2RtRnNkV1VzSUdWNGRISmhJQ2tnZTF4dVhHNWNkRngwTHk4Z1JHOXVKM1FnYzJWMElITjBlV3hsY3lCdmJpQjBaWGgwSUdGdVpDQmpiMjF0Wlc1MElHNXZaR1Z6WEc1Y2RGeDBhV1lnS0NBaFpXeGxiU0I4ZkNCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeklIeDhJR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJRGdnZkh3Z0lXVnNaVzB1YzNSNWJHVWdLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdUV0ZyWlNCemRYSmxJSFJvWVhRZ2QyVW5jbVVnZDI5eWEybHVaeUIzYVhSb0lIUm9aU0J5YVdkb2RDQnVZVzFsWEc1Y2RGeDBkbUZ5SUhKbGRDd2dkSGx3WlN3Z2FHOXZhM01zWEc1Y2RGeDBYSFJ2Y21sblRtRnRaU0E5SUdOaGJXVnNRMkZ6WlNnZ2JtRnRaU0FwTEZ4dVhIUmNkRngwYVhORGRYTjBiMjFRY205d0lEMGdjbU4xYzNSdmJWQnliM0F1ZEdWemRDZ2dibUZ0WlNBcExGeHVYSFJjZEZ4MGMzUjViR1VnUFNCbGJHVnRMbk4wZVd4bE8xeHVYRzVjZEZ4MEx5OGdUV0ZyWlNCemRYSmxJSFJvWVhRZ2QyVW5jbVVnZDI5eWEybHVaeUIzYVhSb0lIUm9aU0J5YVdkb2RDQnVZVzFsTGlCWFpTQmtiMjRuZEZ4dVhIUmNkQzh2SUhkaGJuUWdkRzhnY1hWbGNua2dkR2hsSUhaaGJIVmxJR2xtSUdsMElHbHpJR0VnUTFOVElHTjFjM1J2YlNCd2NtOXdaWEowZVZ4dVhIUmNkQzh2SUhOcGJtTmxJSFJvWlhrZ1lYSmxJSFZ6WlhJdFpHVm1hVzVsWkM1Y2JseDBYSFJwWmlBb0lDRnBjME4xYzNSdmJWQnliM0FnS1NCN1hHNWNkRngwWEhSdVlXMWxJRDBnWm1sdVlXeFFjbTl3VG1GdFpTZ2diM0pwWjA1aGJXVWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJIWlhSeklHaHZiMnNnWm05eUlIUm9aU0J3Y21WbWFYaGxaQ0IyWlhKemFXOXVMQ0IwYUdWdUlIVnVjSEpsWm1sNFpXUWdkbVZ5YzJsdmJseHVYSFJjZEdodmIydHpJRDBnYWxGMVpYSjVMbU56YzBodmIydHpXeUJ1WVcxbElGMGdmSHdnYWxGMVpYSjVMbU56YzBodmIydHpXeUJ2Y21sblRtRnRaU0JkTzF4dVhHNWNkRngwTHk4Z1EyaGxZMnNnYVdZZ2QyVW5jbVVnYzJWMGRHbHVaeUJoSUhaaGJIVmxYRzVjZEZ4MGFXWWdLQ0IyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MGRIbHdaU0E5SUhSNWNHVnZaaUIyWVd4MVpUdGNibHh1WEhSY2RGeDBMeThnUTI5dWRtVnlkQ0JjSWlzOVhDSWdiM0lnWENJdFBWd2lJSFJ2SUhKbGJHRjBhWFpsSUc1MWJXSmxjbk1nS0NNM016UTFLVnh1WEhSY2RGeDBhV1lnS0NCMGVYQmxJRDA5UFNCY0luTjBjbWx1WjF3aUlDWW1JQ2dnY21WMElEMGdjbU56YzA1MWJTNWxlR1ZqS0NCMllXeDFaU0FwSUNrZ0ppWWdjbVYwV3lBeElGMGdLU0I3WEc1Y2RGeDBYSFJjZEhaaGJIVmxJRDBnWVdScWRYTjBRMU5US0NCbGJHVnRMQ0J1WVcxbExDQnlaWFFnS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJHYVhobGN5QmlkV2NnSXpreU16ZGNibHgwWEhSY2RGeDBkSGx3WlNBOUlGd2liblZ0WW1WeVhDSTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUUxaGEyVWdjM1Z5WlNCMGFHRjBJRzUxYkd3Z1lXNWtJRTVoVGlCMllXeDFaWE1nWVhKbGJpZDBJSE5sZENBb0l6Y3hNVFlwWEc1Y2RGeDBYSFJwWmlBb0lIWmhiSFZsSUQwOUlHNTFiR3dnZkh3Z2RtRnNkV1VnSVQwOUlIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRWxtSUdFZ2JuVnRZbVZ5SUhkaGN5QndZWE56WldRZ2FXNHNJR0ZrWkNCMGFHVWdkVzVwZENBb1pYaGpaWEIwSUdadmNpQmpaWEowWVdsdUlFTlRVeUJ3Y205d1pYSjBhV1Z6S1Z4dVhIUmNkRngwYVdZZ0tDQjBlWEJsSUQwOVBTQmNJbTUxYldKbGNsd2lJQ2tnZTF4dVhIUmNkRngwWEhSMllXeDFaU0FyUFNCeVpYUWdKaVlnY21WMFd5QXpJRjBnZkh3Z0tDQnFVWFZsY25rdVkzTnpUblZ0WW1WeVd5QnZjbWxuVG1GdFpTQmRJRDhnWENKY0lpQTZJRndpY0hoY0lpQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCaVlXTnJaM0p2ZFc1a0xTb2djSEp2Y0hNZ1lXWm1aV04wSUc5eWFXZHBibUZzSUdOc2IyNWxKM01nZG1Gc2RXVnpYRzVjZEZ4MFhIUnBaaUFvSUNGemRYQndiM0owTG1Oc1pXRnlRMnh2Ym1WVGRIbHNaU0FtSmlCMllXeDFaU0E5UFQwZ1hDSmNJaUFtSmlCdVlXMWxMbWx1WkdWNFQyWW9JRndpWW1GamEyZHliM1Z1WkZ3aUlDa2dQVDA5SURBZ0tTQjdYRzVjZEZ4MFhIUmNkSE4wZVd4bFd5QnVZVzFsSUYwZ1BTQmNJbWx1YUdWeWFYUmNJanRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1NXWWdZU0JvYjI5cklIZGhjeUJ3Y205MmFXUmxaQ3dnZFhObElIUm9ZWFFnZG1Gc2RXVXNJRzkwYUdWeWQybHpaU0JxZFhOMElITmxkQ0IwYUdVZ2MzQmxZMmxtYVdWa0lIWmhiSFZsWEc1Y2RGeDBYSFJwWmlBb0lDRm9iMjlyY3lCOGZDQWhLQ0JjSW5ObGRGd2lJR2x1SUdodmIydHpJQ2tnZkh4Y2JseDBYSFJjZEZ4MEtDQjJZV3gxWlNBOUlHaHZiMnR6TG5ObGRDZ2daV3hsYlN3Z2RtRnNkV1VzSUdWNGRISmhJQ2tnS1NBaFBUMGdkVzVrWldacGJtVmtJQ2tnZTF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnYVhORGRYTjBiMjFRY205d0lDa2dlMXh1WEhSY2RGeDBYSFJjZEhOMGVXeGxMbk5sZEZCeWIzQmxjblI1S0NCdVlXMWxMQ0IyWVd4MVpTQXBPMXh1WEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEhOMGVXeGxXeUJ1WVcxbElGMGdQU0IyWVd4MVpUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBmU0JsYkhObElIdGNibHh1WEhSY2RGeDBMeThnU1dZZ1lTQm9iMjlySUhkaGN5QndjbTkyYVdSbFpDQm5aWFFnZEdobElHNXZiaTFqYjIxd2RYUmxaQ0IyWVd4MVpTQm1jbTl0SUhSb1pYSmxYRzVjZEZ4MFhIUnBaaUFvSUdodmIydHpJQ1ltSUZ3aVoyVjBYQ0lnYVc0Z2FHOXZhM01nSmlaY2JseDBYSFJjZEZ4MEtDQnlaWFFnUFNCb2IyOXJjeTVuWlhRb0lHVnNaVzBzSUdaaGJITmxMQ0JsZUhSeVlTQXBJQ2tnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4dVhIUmNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnYW5WemRDQm5aWFFnZEdobElIWmhiSFZsSUdaeWIyMGdkR2hsSUhOMGVXeGxJRzlpYW1WamRGeHVYSFJjZEZ4MGNtVjBkWEp1SUhOMGVXeGxXeUJ1WVcxbElGMDdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkR056Y3pvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUc1aGJXVXNJR1Y0ZEhKaExDQnpkSGxzWlhNZ0tTQjdYRzVjZEZ4MGRtRnlJSFpoYkN3Z2JuVnRMQ0JvYjI5cmN5eGNibHgwWEhSY2RHOXlhV2RPWVcxbElEMGdZMkZ0Wld4RFlYTmxLQ0J1WVcxbElDa3NYRzVjZEZ4MFhIUnBjME4xYzNSdmJWQnliM0FnUFNCeVkzVnpkRzl0VUhKdmNDNTBaWE4wS0NCdVlXMWxJQ2s3WEc1Y2JseDBYSFF2THlCTllXdGxJSE4xY21VZ2RHaGhkQ0IzWlNkeVpTQjNiM0pyYVc1bklIZHBkR2dnZEdobElISnBaMmgwSUc1aGJXVXVJRmRsSUdSdmJpZDBYRzVjZEZ4MEx5OGdkMkZ1ZENCMGJ5QnRiMlJwWm5rZ2RHaGxJSFpoYkhWbElHbG1JR2wwSUdseklHRWdRMU5USUdOMWMzUnZiU0J3Y205d1pYSjBlVnh1WEhSY2RDOHZJSE5wYm1ObElIUm9aWGtnWVhKbElIVnpaWEl0WkdWbWFXNWxaQzVjYmx4MFhIUnBaaUFvSUNGcGMwTjFjM1J2YlZCeWIzQWdLU0I3WEc1Y2RGeDBYSFJ1WVcxbElEMGdabWx1WVd4UWNtOXdUbUZ0WlNnZ2IzSnBaMDVoYldVZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlVjbmtnY0hKbFptbDRaV1FnYm1GdFpTQm1iMnhzYjNkbFpDQmllU0IwYUdVZ2RXNXdjbVZtYVhobFpDQnVZVzFsWEc1Y2RGeDBhRzl2YTNNZ1BTQnFVWFZsY25rdVkzTnpTRzl2YTNOYklHNWhiV1VnWFNCOGZDQnFVWFZsY25rdVkzTnpTRzl2YTNOYklHOXlhV2RPWVcxbElGMDdYRzVjYmx4MFhIUXZMeUJKWmlCaElHaHZiMnNnZDJGeklIQnliM1pwWkdWa0lHZGxkQ0IwYUdVZ1kyOXRjSFYwWldRZ2RtRnNkV1VnWm5KdmJTQjBhR1Z5WlZ4dVhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSm5aWFJjSWlCcGJpQm9iMjlyY3lBcElIdGNibHgwWEhSY2RIWmhiQ0E5SUdodmIydHpMbWRsZENnZ1pXeGxiU3dnZEhKMVpTd2daWGgwY21FZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlBkR2hsY25kcGMyVXNJR2xtSUdFZ2QyRjVJSFJ2SUdkbGRDQjBhR1VnWTI5dGNIVjBaV1FnZG1Gc2RXVWdaWGhwYzNSekxDQjFjMlVnZEdoaGRGeHVYSFJjZEdsbUlDZ2dkbUZzSUQwOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFIyWVd3Z1BTQmpkWEpEVTFNb0lHVnNaVzBzSUc1aGJXVXNJSE4wZVd4bGN5QXBPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU52Ym5abGNuUWdYQ0p1YjNKdFlXeGNJaUIwYnlCamIyMXdkWFJsWkNCMllXeDFaVnh1WEhSY2RHbG1JQ2dnZG1Gc0lEMDlQU0JjSW01dmNtMWhiRndpSUNZbUlHNWhiV1VnYVc0Z1kzTnpUbTl5YldGc1ZISmhibk5tYjNKdElDa2dlMXh1WEhSY2RGeDBkbUZzSUQwZ1kzTnpUbTl5YldGc1ZISmhibk5tYjNKdFd5QnVZVzFsSUYwN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1RXRnJaU0J1ZFcxbGNtbGpJR2xtSUdadmNtTmxaQ0J2Y2lCaElIRjFZV3hwWm1sbGNpQjNZWE1nY0hKdmRtbGtaV1FnWVc1a0lIWmhiQ0JzYjI5cmN5QnVkVzFsY21salhHNWNkRngwYVdZZ0tDQmxlSFJ5WVNBOVBUMGdYQ0pjSWlCOGZDQmxlSFJ5WVNBcElIdGNibHgwWEhSY2RHNTFiU0E5SUhCaGNuTmxSbXh2WVhRb0lIWmhiQ0FwTzF4dVhIUmNkRngwY21WMGRYSnVJR1Y0ZEhKaElEMDlQU0IwY25WbElIeDhJR2x6Um1sdWFYUmxLQ0J1ZFcwZ0tTQS9JRzUxYlNCOGZDQXdJRG9nZG1Gc08xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIyWVd3N1hHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVZoWTJnb0lGc2dYQ0pvWldsbmFIUmNJaXdnWENKM2FXUjBhRndpSUYwc0lHWjFibU4wYVc5dUtDQnBMQ0JrYVcxbGJuTnBiMjRnS1NCN1hHNWNkR3BSZFdWeWVTNWpjM05JYjI5cmMxc2daR2x0Wlc1emFXOXVJRjBnUFNCN1hHNWNkRngwWjJWME9pQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z1kyOXRjSFYwWldRc0lHVjRkSEpoSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0JqYjIxd2RYUmxaQ0FwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJEWlhKMFlXbHVJR1ZzWlcxbGJuUnpJR05oYmlCb1lYWmxJR1JwYldWdWMybHZiaUJwYm1adklHbG1JSGRsSUdsdWRtbHphV0pzZVNCemFHOTNJSFJvWlcxY2JseDBYSFJjZEZ4MEx5OGdZblYwSUdsMElHMTFjM1FnYUdGMlpTQmhJR04xY25KbGJuUWdaR2x6Y0d4aGVTQnpkSGxzWlNCMGFHRjBJSGR2ZFd4a0lHSmxibVZtYVhSY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhKa2FYTndiR0Y1YzNkaGNDNTBaWE4wS0NCcVVYVmxjbmt1WTNOektDQmxiR1Z0TENCY0ltUnBjM0JzWVhsY0lpQXBJQ2tnSmlaY2JseHVYSFJjZEZ4MFhIUmNkQzh2SUZOMWNIQnZjblE2SUZOaFptRnlhU0E0SzF4dVhIUmNkRngwWEhSY2RDOHZJRlJoWW14bElHTnZiSFZ0Ym5NZ2FXNGdVMkZtWVhKcElHaGhkbVVnYm05dUxYcGxjbThnYjJabWMyVjBWMmxrZEdnZ0ppQjZaWEp2WEc1Y2RGeDBYSFJjZEZ4MEx5OGdaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWQybGtkR2dnZFc1c1pYTnpJR1JwYzNCc1lYa2dhWE1nWTJoaGJtZGxaQzVjYmx4MFhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFeElHOXViSGxjYmx4MFhIUmNkRngwWEhRdkx5QlNkVzV1YVc1bklHZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0J2YmlCaElHUnBjMk52Ym01bFkzUmxaQ0J1YjJSbFhHNWNkRngwWEhSY2RGeDBMeThnYVc0Z1NVVWdkR2h5YjNkeklHRnVJR1Z5Y205eUxseHVYSFJjZEZ4MFhIUmNkQ2dnSVdWc1pXMHVaMlYwUTJ4cFpXNTBVbVZqZEhNb0tTNXNaVzVuZEdnZ2ZId2dJV1ZzWlcwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZDJsa2RHZ2dLU0EvWEc1Y2RGeDBYSFJjZEZ4MFhIUnpkMkZ3S0NCbGJHVnRMQ0JqYzNOVGFHOTNMQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJR2RsZEZkcFpIUm9UM0pJWldsbmFIUW9JR1ZzWlcwc0lHUnBiV1Z1YzJsdmJpd2daWGgwY21FZ0tUdGNibHgwWEhSY2RGeDBYSFJjZEgwZ0tTQTZYRzVjZEZ4MFhIUmNkRngwWEhSblpYUlhhV1IwYUU5eVNHVnBaMmgwS0NCbGJHVnRMQ0JrYVcxbGJuTnBiMjRzSUdWNGRISmhJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU3hjYmx4dVhIUmNkSE5sZERvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxMQ0JsZUhSeVlTQXBJSHRjYmx4MFhIUmNkSFpoY2lCdFlYUmphR1Z6TEZ4dVhIUmNkRngwWEhSemRIbHNaWE1nUFNCblpYUlRkSGxzWlhNb0lHVnNaVzBnS1N4Y2JseDBYSFJjZEZ4MGFYTkNiM0prWlhKQ2IzZ2dQU0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW1KdmVGTnBlbWx1WjF3aUxDQm1ZV3h6WlN3Z2MzUjViR1Z6SUNrZ1BUMDlJRndpWW05eVpHVnlMV0p2ZUZ3aUxGeHVYSFJjZEZ4MFhIUnpkV0owY21GamRDQTlJR1Y0ZEhKaElDWW1JR0p2ZUUxdlpHVnNRV1JxZFhOMGJXVnVkQ2hjYmx4MFhIUmNkRngwWEhSbGJHVnRMRnh1WEhSY2RGeDBYSFJjZEdScGJXVnVjMmx2Yml4Y2JseDBYSFJjZEZ4MFhIUmxlSFJ5WVN4Y2JseDBYSFJjZEZ4MFhIUnBjMEp2Y21SbGNrSnZlQ3hjYmx4MFhIUmNkRngwWEhSemRIbHNaWE5jYmx4MFhIUmNkRngwS1R0Y2JseHVYSFJjZEZ4MEx5OGdRV05qYjNWdWRDQm1iM0lnZFc1eVpXeHBZV0pzWlNCaWIzSmtaWEl0WW05NElHUnBiV1Z1YzJsdmJuTWdZbmtnWTI5dGNHRnlhVzVuSUc5bVpuTmxkQ29nZEc4Z1kyOXRjSFYwWldRZ1lXNWtYRzVjZEZ4MFhIUXZMeUJtWVd0cGJtY2dZU0JqYjI1MFpXNTBMV0p2ZUNCMGJ5Qm5aWFFnWW05eVpHVnlJR0Z1WkNCd1lXUmthVzVuSUNobmFDMHpOams1S1Z4dVhIUmNkRngwYVdZZ0tDQnBjMEp2Y21SbGNrSnZlQ0FtSmlCemRYQndiM0owTG5OamNtOXNiR0p2ZUZOcGVtVW9LU0E5UFQwZ2MzUjViR1Z6TG5CdmMybDBhVzl1SUNrZ2UxeHVYSFJjZEZ4MFhIUnpkV0owY21GamRDQXRQU0JOWVhSb0xtTmxhV3dvWEc1Y2RGeDBYSFJjZEZ4MFpXeGxiVnNnWENKdlptWnpaWFJjSWlBcklHUnBiV1Z1YzJsdmJsc2dNQ0JkTG5SdlZYQndaWEpEWVhObEtDa2dLeUJrYVcxbGJuTnBiMjR1YzJ4cFkyVW9JREVnS1NCZElDMWNibHgwWEhSY2RGeDBYSFJ3WVhKelpVWnNiMkYwS0NCemRIbHNaWE5iSUdScGJXVnVjMmx2YmlCZElDa2dMVnh1WEhSY2RGeDBYSFJjZEdKdmVFMXZaR1ZzUVdScWRYTjBiV1Z1ZENnZ1pXeGxiU3dnWkdsdFpXNXphVzl1TENCY0ltSnZjbVJsY2x3aUxDQm1ZV3h6WlN3Z2MzUjViR1Z6SUNrZ0xWeHVYSFJjZEZ4MFhIUmNkREF1TlZ4dVhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJEYjI1MlpYSjBJSFJ2SUhCcGVHVnNjeUJwWmlCMllXeDFaU0JoWkdwMWMzUnRaVzUwSUdseklHNWxaV1JsWkZ4dVhIUmNkRngwYVdZZ0tDQnpkV0owY21GamRDQW1KaUFvSUcxaGRHTm9aWE1nUFNCeVkzTnpUblZ0TG1WNFpXTW9JSFpoYkhWbElDa2dLU0FtSmx4dVhIUmNkRngwWEhRb0lHMWhkR05vWlhOYklETWdYU0I4ZkNCY0luQjRYQ0lnS1NBaFBUMGdYQ0p3ZUZ3aUlDa2dlMXh1WEc1Y2RGeDBYSFJjZEdWc1pXMHVjM1I1YkdWYklHUnBiV1Z1YzJsdmJpQmRJRDBnZG1Gc2RXVTdYRzVjZEZ4MFhIUmNkSFpoYkhWbElEMGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2daR2x0Wlc1emFXOXVJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJ6WlhSUWIzTnBkR2wyWlU1MWJXSmxjaWdnWld4bGJTd2dkbUZzZFdVc0lITjFZblJ5WVdOMElDazdYRzVjZEZ4MGZWeHVYSFI5TzF4dWZTQXBPMXh1WEc1cVVYVmxjbmt1WTNOelNHOXZhM011YldGeVoybHVUR1ZtZENBOUlHRmtaRWRsZEVodmIydEpaaWdnYzNWd2NHOXlkQzV5Wld4cFlXSnNaVTFoY21kcGJreGxablFzWEc1Y2RHWjFibU4wYVc5dUtDQmxiR1Z0TENCamIyMXdkWFJsWkNBcElIdGNibHgwWEhScFppQW9JR052YlhCMWRHVmtJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJQ2dnY0dGeWMyVkdiRzloZENnZ1kzVnlRMU5US0NCbGJHVnRMQ0JjSW0xaGNtZHBia3hsWm5SY0lpQXBJQ2tnZkh4Y2JseDBYSFJjZEZ4MFpXeGxiUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTNXNaV1owSUMxY2JseDBYSFJjZEZ4MFhIUnpkMkZ3S0NCbGJHVnRMQ0I3SUcxaGNtZHBia3hsWm5RNklEQWdmU3dnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdaV3hsYlM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzVzWldaME8xeHVYSFJjZEZ4MFhIUmNkSDBnS1Z4dVhIUmNkRngwWEhRcElDc2dYQ0p3ZUZ3aU8xeHVYSFJjZEgxY2JseDBmVnh1S1R0Y2JseHVMeThnVkdobGMyVWdhRzl2YTNNZ1lYSmxJSFZ6WldRZ1lua2dZVzVwYldGMFpTQjBieUJsZUhCaGJtUWdjSEp2Y0dWeWRHbGxjMXh1YWxGMVpYSjVMbVZoWTJnb0lIdGNibHgwYldGeVoybHVPaUJjSWx3aUxGeHVYSFJ3WVdSa2FXNW5PaUJjSWx3aUxGeHVYSFJpYjNKa1pYSTZJRndpVjJsa2RHaGNJbHh1ZlN3Z1puVnVZM1JwYjI0b0lIQnlaV1pwZUN3Z2MzVm1abWw0SUNrZ2UxeHVYSFJxVVhWbGNua3VZM056U0c5dmEzTmJJSEJ5WldacGVDQXJJSE4xWm1acGVDQmRJRDBnZTF4dVhIUmNkR1Y0Y0dGdVpEb2dablZ1WTNScGIyNG9JSFpoYkhWbElDa2dlMXh1WEhSY2RGeDBkbUZ5SUdrZ1BTQXdMRnh1WEhSY2RGeDBYSFJsZUhCaGJtUmxaQ0E5SUh0OUxGeHVYRzVjZEZ4MFhIUmNkQzh2SUVGemMzVnRaWE1nWVNCemFXNW5iR1VnYm5WdFltVnlJR2xtSUc1dmRDQmhJSE4wY21sdVoxeHVYSFJjZEZ4MFhIUndZWEowY3lBOUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnpkSEpwYm1kY0lpQS9JSFpoYkhWbExuTndiR2wwS0NCY0lpQmNJaUFwSURvZ1d5QjJZV3gxWlNCZE8xeHVYRzVjZEZ4MFhIUm1iM0lnS0NBN0lHa2dQQ0EwT3lCcEt5c2dLU0I3WEc1Y2RGeDBYSFJjZEdWNGNHRnVaR1ZrV3lCd2NtVm1hWGdnS3lCamMzTkZlSEJoYm1SYklHa2dYU0FySUhOMVptWnBlQ0JkSUQxY2JseDBYSFJjZEZ4MFhIUndZWEowYzFzZ2FTQmRJSHg4SUhCaGNuUnpXeUJwSUMwZ01pQmRJSHg4SUhCaGNuUnpXeUF3SUYwN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlCbGVIQmhibVJsWkR0Y2JseDBYSFI5WEc1Y2RIMDdYRzVjYmx4MGFXWWdLQ0J3Y21WbWFYZ2dJVDA5SUZ3aWJXRnlaMmx1WENJZ0tTQjdYRzVjZEZ4MGFsRjFaWEo1TG1OemMwaHZiMnR6V3lCd2NtVm1hWGdnS3lCemRXWm1hWGdnWFM1elpYUWdQU0J6WlhSUWIzTnBkR2wyWlU1MWJXSmxjanRjYmx4MGZWeHVmU0FwTzF4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjZEdOemN6b2dablZ1WTNScGIyNG9JRzVoYldVc0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJoWTJObGMzTW9JSFJvYVhNc0lHWjFibU4wYVc5dUtDQmxiR1Z0TENCdVlXMWxMQ0IyWVd4MVpTQXBJSHRjYmx4MFhIUmNkSFpoY2lCemRIbHNaWE1zSUd4bGJpeGNibHgwWEhSY2RGeDBiV0Z3SUQwZ2UzMHNYRzVjZEZ4MFhIUmNkR2tnUFNBd08xeHVYRzVjZEZ4MFhIUnBaaUFvSUVGeWNtRjVMbWx6UVhKeVlYa29JRzVoYldVZ0tTQXBJSHRjYmx4MFhIUmNkRngwYzNSNWJHVnpJRDBnWjJWMFUzUjViR1Z6S0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFJjZEd4bGJpQTlJRzVoYldVdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSY2RHWnZjaUFvSURzZ2FTQThJR3hsYmpzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwWEhSY2RHMWhjRnNnYm1GdFpWc2dhU0JkSUYwZ1BTQnFVWFZsY25rdVkzTnpLQ0JsYkdWdExDQnVZVzFsV3lCcElGMHNJR1poYkhObExDQnpkSGxzWlhNZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ0WVhBN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlCMllXeDFaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lEOWNibHgwWEhSY2RGeDBhbEYxWlhKNUxuTjBlV3hsS0NCbGJHVnRMQ0J1WVcxbExDQjJZV3gxWlNBcElEcGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dibUZ0WlNBcE8xeHVYSFJjZEgwc0lHNWhiV1VzSUhaaGJIVmxMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBcE8xeHVYSFI5WEc1OUlDazdYRzVjYmx4dVpuVnVZM1JwYjI0Z1ZIZGxaVzRvSUdWc1pXMHNJRzl3ZEdsdmJuTXNJSEJ5YjNBc0lHVnVaQ3dnWldGemFXNW5JQ2tnZTF4dVhIUnlaWFIxY200Z2JtVjNJRlIzWldWdUxuQnliM1J2ZEhsd1pTNXBibWwwS0NCbGJHVnRMQ0J2Y0hScGIyNXpMQ0J3Y205d0xDQmxibVFzSUdWaGMybHVaeUFwTzF4dWZWeHVhbEYxWlhKNUxsUjNaV1Z1SUQwZ1ZIZGxaVzQ3WEc1Y2JsUjNaV1Z1TG5CeWIzUnZkSGx3WlNBOUlIdGNibHgwWTI5dWMzUnlkV04wYjNJNklGUjNaV1Z1TEZ4dVhIUnBibWwwT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYjNCMGFXOXVjeXdnY0hKdmNDd2daVzVrTENCbFlYTnBibWNzSUhWdWFYUWdLU0I3WEc1Y2RGeDBkR2hwY3k1bGJHVnRJRDBnWld4bGJUdGNibHgwWEhSMGFHbHpMbkJ5YjNBZ1BTQndjbTl3TzF4dVhIUmNkSFJvYVhNdVpXRnphVzVuSUQwZ1pXRnphVzVuSUh4OElHcFJkV1Z5ZVM1bFlYTnBibWN1WDJSbFptRjFiSFE3WEc1Y2RGeDBkR2hwY3k1dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3p0Y2JseDBYSFIwYUdsekxuTjBZWEowSUQwZ2RHaHBjeTV1YjNjZ1BTQjBhR2x6TG1OMWNpZ3BPMXh1WEhSY2RIUm9hWE11Wlc1a0lEMGdaVzVrTzF4dVhIUmNkSFJvYVhNdWRXNXBkQ0E5SUhWdWFYUWdmSHdnS0NCcVVYVmxjbmt1WTNOelRuVnRZbVZ5V3lCd2NtOXdJRjBnUHlCY0lsd2lJRG9nWENKd2VGd2lJQ2s3WEc1Y2RIMHNYRzVjZEdOMWNqb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBkbUZ5SUdodmIydHpJRDBnVkhkbFpXNHVjSEp2Y0VodmIydHpXeUIwYUdsekxuQnliM0FnWFR0Y2JseHVYSFJjZEhKbGRIVnliaUJvYjI5cmN5QW1KaUJvYjI5cmN5NW5aWFFnUDF4dVhIUmNkRngwYUc5dmEzTXVaMlYwS0NCMGFHbHpJQ2tnT2x4dVhIUmNkRngwVkhkbFpXNHVjSEp2Y0VodmIydHpMbDlrWldaaGRXeDBMbWRsZENnZ2RHaHBjeUFwTzF4dVhIUjlMRnh1WEhSeWRXNDZJR1oxYm1OMGFXOXVLQ0J3WlhKalpXNTBJQ2tnZTF4dVhIUmNkSFpoY2lCbFlYTmxaQ3hjYmx4MFhIUmNkR2h2YjJ0eklEMGdWSGRsWlc0dWNISnZjRWh2YjJ0eld5QjBhR2x6TG5CeWIzQWdYVHRjYmx4dVhIUmNkR2xtSUNnZ2RHaHBjeTV2Y0hScGIyNXpMbVIxY21GMGFXOXVJQ2tnZTF4dVhIUmNkRngwZEdocGN5NXdiM01nUFNCbFlYTmxaQ0E5SUdwUmRXVnllUzVsWVhOcGJtZGJJSFJvYVhNdVpXRnphVzVuSUYwb1hHNWNkRngwWEhSY2RIQmxjbU5sYm5Rc0lIUm9hWE11YjNCMGFXOXVjeTVrZFhKaGRHbHZiaUFxSUhCbGNtTmxiblFzSURBc0lERXNJSFJvYVhNdWIzQjBhVzl1Y3k1a2RYSmhkR2x2Ymx4dVhIUmNkRngwS1R0Y2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBkR2hwY3k1d2IzTWdQU0JsWVhObFpDQTlJSEJsY21ObGJuUTdYRzVjZEZ4MGZWeHVYSFJjZEhSb2FYTXVibTkzSUQwZ0tDQjBhR2x6TG1WdVpDQXRJSFJvYVhNdWMzUmhjblFnS1NBcUlHVmhjMlZrSUNzZ2RHaHBjeTV6ZEdGeWREdGNibHh1WEhSY2RHbG1JQ2dnZEdocGN5NXZjSFJwYjI1ekxuTjBaWEFnS1NCN1hHNWNkRngwWEhSMGFHbHpMbTl3ZEdsdmJuTXVjM1JsY0M1allXeHNLQ0IwYUdsekxtVnNaVzBzSUhSb2FYTXVibTkzTENCMGFHbHpJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCb2IyOXJjeUFtSmlCb2IyOXJjeTV6WlhRZ0tTQjdYRzVjZEZ4MFhIUm9iMjlyY3k1elpYUW9JSFJvYVhNZ0tUdGNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwVkhkbFpXNHVjSEp2Y0VodmIydHpMbDlrWldaaGRXeDBMbk5sZENnZ2RHaHBjeUFwTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MGZWeHVmVHRjYmx4dVZIZGxaVzR1Y0hKdmRHOTBlWEJsTG1sdWFYUXVjSEp2ZEc5MGVYQmxJRDBnVkhkbFpXNHVjSEp2ZEc5MGVYQmxPMXh1WEc1VWQyVmxiaTV3Y205d1NHOXZhM01nUFNCN1hHNWNkRjlrWldaaGRXeDBPaUI3WEc1Y2RGeDBaMlYwT2lCbWRXNWpkR2x2YmlnZ2RIZGxaVzRnS1NCN1hHNWNkRngwWEhSMllYSWdjbVZ6ZFd4ME8xeHVYRzVjZEZ4MFhIUXZMeUJWYzJVZ1lTQndjbTl3WlhKMGVTQnZiaUIwYUdVZ1pXeGxiV1Z1ZENCa2FYSmxZM1JzZVNCM2FHVnVJR2wwSUdseklHNXZkQ0JoSUVSUFRTQmxiR1Z0Wlc1MExGeHVYSFJjZEZ4MEx5OGdiM0lnZDJobGJpQjBhR1Z5WlNCcGN5QnVieUJ0WVhSamFHbHVaeUJ6ZEhsc1pTQndjbTl3WlhKMGVTQjBhR0YwSUdWNGFYTjBjeTVjYmx4MFhIUmNkR2xtSUNnZ2RIZGxaVzR1Wld4bGJTNXViMlJsVkhsd1pTQWhQVDBnTVNCOGZGeHVYSFJjZEZ4MFhIUjBkMlZsYmk1bGJHVnRXeUIwZDJWbGJpNXdjbTl3SUYwZ0lUMGdiblZzYkNBbUppQjBkMlZsYmk1bGJHVnRMbk4wZVd4bFd5QjBkMlZsYmk1d2NtOXdJRjBnUFQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSM1pXVnVMbVZzWlcxYklIUjNaV1Z1TG5CeWIzQWdYVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1VHRnpjMmx1WnlCaGJpQmxiWEIwZVNCemRISnBibWNnWVhNZ1lTQXpjbVFnY0dGeVlXMWxkR1Z5SUhSdklDNWpjM01nZDJsc2JDQmhkWFJ2YldGMGFXTmhiR3g1WEc1Y2RGeDBYSFF2THlCaGRIUmxiWEIwSUdFZ2NHRnljMlZHYkc5aGRDQmhibVFnWm1Gc2JHSmhZMnNnZEc4Z1lTQnpkSEpwYm1jZ2FXWWdkR2hsSUhCaGNuTmxJR1poYVd4ekxseHVYSFJjZEZ4MEx5OGdVMmx0Y0d4bElIWmhiSFZsY3lCemRXTm9JR0Z6SUZ3aU1UQndlRndpSUdGeVpTQndZWEp6WldRZ2RHOGdSbXh2WVhRN1hHNWNkRngwWEhRdkx5QmpiMjF3YkdWNElIWmhiSFZsY3lCemRXTm9JR0Z6SUZ3aWNtOTBZWFJsS0RGeVlXUXBYQ0lnWVhKbElISmxkSFZ5Ym1Wa0lHRnpMV2x6TGx4dVhIUmNkRngwY21WemRXeDBJRDBnYWxGMVpYSjVMbU56Y3lnZ2RIZGxaVzR1Wld4bGJTd2dkSGRsWlc0dWNISnZjQ3dnWENKY0lpQXBPMXh1WEc1Y2RGeDBYSFF2THlCRmJYQjBlU0J6ZEhKcGJtZHpMQ0J1ZFd4c0xDQjFibVJsWm1sdVpXUWdZVzVrSUZ3aVlYVjBiMXdpSUdGeVpTQmpiMjUyWlhKMFpXUWdkRzhnTUM1Y2JseDBYSFJjZEhKbGRIVnliaUFoY21WemRXeDBJSHg4SUhKbGMzVnNkQ0E5UFQwZ1hDSmhkWFJ2WENJZ1B5QXdJRG9nY21WemRXeDBPMXh1WEhSY2RIMHNYRzVjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaWdnZEhkbFpXNGdLU0I3WEc1Y2JseDBYSFJjZEM4dklGVnpaU0J6ZEdWd0lHaHZiMnNnWm05eUlHSmhZMnNnWTI5dGNHRjBMbHh1WEhSY2RGeDBMeThnVlhObElHTnpjMGh2YjJzZ2FXWWdhWFJ6SUhSb1pYSmxMbHh1WEhSY2RGeDBMeThnVlhObElDNXpkSGxzWlNCcFppQmhkbUZwYkdGaWJHVWdZVzVrSUhWelpTQndiR0ZwYmlCd2NtOXdaWEowYVdWeklIZG9aWEpsSUdGMllXbHNZV0pzWlM1Y2JseDBYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtWjRMbk4wWlhCYklIUjNaV1Z1TG5CeWIzQWdYU0FwSUh0Y2JseDBYSFJjZEZ4MGFsRjFaWEo1TG1aNExuTjBaWEJiSUhSM1pXVnVMbkJ5YjNBZ1hTZ2dkSGRsWlc0Z0tUdGNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9JSFIzWldWdUxtVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlERWdKaVpjYmx4MFhIUmNkRngwS0NCMGQyVmxiaTVsYkdWdExuTjBlV3hsV3lCcVVYVmxjbmt1WTNOelVISnZjSE5iSUhSM1pXVnVMbkJ5YjNBZ1hTQmRJQ0U5SUc1MWJHd2dmSHhjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1WTNOelNHOXZhM05iSUhSM1pXVnVMbkJ5YjNBZ1hTQXBJQ2tnZTF4dVhIUmNkRngwWEhScVVYVmxjbmt1YzNSNWJHVW9JSFIzWldWdUxtVnNaVzBzSUhSM1pXVnVMbkJ5YjNBc0lIUjNaV1Z1TG01dmR5QXJJSFIzWldWdUxuVnVhWFFnS1R0Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEhSM1pXVnVMbVZzWlcxYklIUjNaV1Z1TG5CeWIzQWdYU0E5SUhSM1pXVnVMbTV2ZHp0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibjA3WEc1Y2JpOHZJRk4xY0hCdmNuUTZJRWxGSUR3OU9TQnZibXg1WEc0dkx5QlFZVzVwWXlCaVlYTmxaQ0JoY0hCeWIyRmphQ0IwYnlCelpYUjBhVzVuSUhSb2FXNW5jeUJ2YmlCa2FYTmpiMjV1WldOMFpXUWdibTlrWlhOY2JsUjNaV1Z1TG5CeWIzQkliMjlyY3k1elkzSnZiR3hVYjNBZ1BTQlVkMlZsYmk1d2NtOXdTRzl2YTNNdWMyTnliMnhzVEdWbWRDQTlJSHRjYmx4MGMyVjBPaUJtZFc1amRHbHZiaWdnZEhkbFpXNGdLU0I3WEc1Y2RGeDBhV1lnS0NCMGQyVmxiaTVsYkdWdExtNXZaR1ZVZVhCbElDWW1JSFIzWldWdUxtVnNaVzB1Y0dGeVpXNTBUbTlrWlNBcElIdGNibHgwWEhSY2RIUjNaV1Z1TG1Wc1pXMWJJSFIzWldWdUxuQnliM0FnWFNBOUlIUjNaV1Z1TG01dmR6dGNibHgwWEhSOVhHNWNkSDFjYm4wN1hHNWNibXBSZFdWeWVTNWxZWE5wYm1jZ1BTQjdYRzVjZEd4cGJtVmhjam9nWm5WdVkzUnBiMjRvSUhBZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhBN1hHNWNkSDBzWEc1Y2RITjNhVzVuT2lCbWRXNWpkR2x2YmlnZ2NDQXBJSHRjYmx4MFhIUnlaWFIxY200Z01DNDFJQzBnVFdGMGFDNWpiM01vSUhBZ0tpQk5ZWFJvTGxCSklDa2dMeUF5TzF4dVhIUjlMRnh1WEhSZlpHVm1ZWFZzZERvZ1hDSnpkMmx1WjF3aVhHNTlPMXh1WEc1cVVYVmxjbmt1Wm5nZ1BTQlVkMlZsYmk1d2NtOTBiM1I1Y0dVdWFXNXBkRHRjYmx4dUx5OGdRbUZqYXlCamIyMXdZWFFnUERFdU9DQmxlSFJsYm5OcGIyNGdjRzlwYm5SY2JtcFJkV1Z5ZVM1bWVDNXpkR1Z3SUQwZ2UzMDdYRzVjYmx4dVhHNWNiblpoY2x4dVhIUm1lRTV2ZHl3Z2FXNVFjbTluY21WemN5eGNibHgwY21aNGRIbHdaWE1nUFNBdlhpZy9PblJ2WjJkc1pYeHphRzkzZkdocFpHVXBKQzhzWEc1Y2RISnlkVzRnUFNBdmNYVmxkV1ZJYjI5cmN5UXZPMXh1WEc1bWRXNWpkR2x2YmlCelkyaGxaSFZzWlNncElIdGNibHgwYVdZZ0tDQnBibEJ5YjJkeVpYTnpJQ2tnZTF4dVhIUmNkR2xtSUNnZ1pHOWpkVzFsYm5RdWFHbGtaR1Z1SUQwOVBTQm1ZV3h6WlNBbUppQjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJQ2tnZTF4dVhIUmNkRngwZDJsdVpHOTNMbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNnZ2MyTm9aV1IxYkdVZ0tUdGNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwZDJsdVpHOTNMbk5sZEZScGJXVnZkWFFvSUhOamFHVmtkV3hsTENCcVVYVmxjbmt1Wm5ndWFXNTBaWEoyWVd3Z0tUdGNibHgwWEhSOVhHNWNibHgwWEhScVVYVmxjbmt1Wm5ndWRHbGpheWdwTzF4dVhIUjlYRzU5WEc1Y2JpOHZJRUZ1YVcxaGRHbHZibk1nWTNKbFlYUmxaQ0J6ZVc1amFISnZibTkxYzJ4NUlIZHBiR3dnY25WdUlITjVibU5vY205dWIzVnpiSGxjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVo0VG05M0tDa2dlMXh1WEhSM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFpuaE9iM2NnUFNCMWJtUmxabWx1WldRN1hHNWNkSDBnS1R0Y2JseDBjbVYwZFhKdUlDZ2dabmhPYjNjZ1BTQkVZWFJsTG01dmR5Z3BJQ2s3WEc1OVhHNWNiaTh2SUVkbGJtVnlZWFJsSUhCaGNtRnRaWFJsY25NZ2RHOGdZM0psWVhSbElHRWdjM1JoYm1SaGNtUWdZVzVwYldGMGFXOXVYRzVtZFc1amRHbHZiaUJuWlc1R2VDZ2dkSGx3WlN3Z2FXNWpiSFZrWlZkcFpIUm9JQ2tnZTF4dVhIUjJZWElnZDJocFkyZ3NYRzVjZEZ4MGFTQTlJREFzWEc1Y2RGeDBZWFIwY25NZ1BTQjdJR2hsYVdkb2REb2dkSGx3WlNCOU8xeHVYRzVjZEM4dklFbG1JSGRsSUdsdVkyeDFaR1VnZDJsa2RHZ3NJSE4wWlhBZ2RtRnNkV1VnYVhNZ01TQjBieUJrYnlCaGJHd2dZM056Ulhod1lXNWtJSFpoYkhWbGN5eGNibHgwTHk4Z2IzUm9aWEozYVhObElITjBaWEFnZG1Gc2RXVWdhWE1nTWlCMGJ5QnphMmx3SUc5MlpYSWdUR1ZtZENCaGJtUWdVbWxuYUhSY2JseDBhVzVqYkhWa1pWZHBaSFJvSUQwZ2FXNWpiSFZrWlZkcFpIUm9JRDhnTVNBNklEQTdYRzVjZEdadmNpQW9JRHNnYVNBOElEUTdJR2tnS3owZ01pQXRJR2x1WTJ4MVpHVlhhV1IwYUNBcElIdGNibHgwWEhSM2FHbGphQ0E5SUdOemMwVjRjR0Z1WkZzZ2FTQmRPMXh1WEhSY2RHRjBkSEp6V3lCY0ltMWhjbWRwYmx3aUlDc2dkMmhwWTJnZ1hTQTlJR0YwZEhKeld5QmNJbkJoWkdScGJtZGNJaUFySUhkb2FXTm9JRjBnUFNCMGVYQmxPMXh1WEhSOVhHNWNibHgwYVdZZ0tDQnBibU5zZFdSbFYybGtkR2dnS1NCN1hHNWNkRngwWVhSMGNuTXViM0JoWTJsMGVTQTlJR0YwZEhKekxuZHBaSFJvSUQwZ2RIbHdaVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJoZEhSeWN6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsVkhkbFpXNG9JSFpoYkhWbExDQndjbTl3TENCaGJtbHRZWFJwYjI0Z0tTQjdYRzVjZEhaaGNpQjBkMlZsYml4Y2JseDBYSFJqYjJ4c1pXTjBhVzl1SUQwZ0tDQkJibWx0WVhScGIyNHVkSGRsWlc1bGNuTmJJSEJ5YjNBZ1hTQjhmQ0JiWFNBcExtTnZibU5oZENnZ1FXNXBiV0YwYVc5dUxuUjNaV1Z1WlhKeld5QmNJaXBjSWlCZElDa3NYRzVjZEZ4MGFXNWtaWGdnUFNBd0xGeHVYSFJjZEd4bGJtZDBhQ0E5SUdOdmJHeGxZM1JwYjI0dWJHVnVaM1JvTzF4dVhIUm1iM0lnS0NBN0lHbHVaR1Y0SUR3Z2JHVnVaM1JvT3lCcGJtUmxlQ3NySUNrZ2UxeHVYSFJjZEdsbUlDZ2dLQ0IwZDJWbGJpQTlJR052Ykd4bFkzUnBiMjViSUdsdVpHVjRJRjB1WTJGc2JDZ2dZVzVwYldGMGFXOXVMQ0J3Y205d0xDQjJZV3gxWlNBcElDa2dLU0I3WEc1Y2JseDBYSFJjZEM4dklGZGxKM0psSUdSdmJtVWdkMmwwYUNCMGFHbHpJSEJ5YjNCbGNuUjVYRzVjZEZ4MFhIUnlaWFIxY200Z2RIZGxaVzQ3WEc1Y2RGeDBmVnh1WEhSOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdSbFptRjFiSFJRY21WbWFXeDBaWElvSUdWc1pXMHNJSEJ5YjNCekxDQnZjSFJ6SUNrZ2UxeHVYSFIyWVhJZ2NISnZjQ3dnZG1Gc2RXVXNJSFJ2WjJkc1pTd2dhRzl2YTNNc0lHOXNaR1pwY21Vc0lIQnliM0JVZDJWbGJpd2djbVZ6ZEc5eVpVUnBjM0JzWVhrc0lHUnBjM0JzWVhrc1hHNWNkRngwYVhOQ2IzZ2dQU0JjSW5kcFpIUm9YQ0lnYVc0Z2NISnZjSE1nZkh3Z1hDSm9aV2xuYUhSY0lpQnBiaUJ3Y205d2N5eGNibHgwWEhSaGJtbHRJRDBnZEdocGN5eGNibHgwWEhSdmNtbG5JRDBnZTMwc1hHNWNkRngwYzNSNWJHVWdQU0JsYkdWdExuTjBlV3hsTEZ4dVhIUmNkR2hwWkdSbGJpQTlJR1ZzWlcwdWJtOWtaVlI1Y0dVZ0ppWWdhWE5JYVdSa1pXNVhhWFJvYVc1VWNtVmxLQ0JsYkdWdElDa3NYRzVjZEZ4MFpHRjBZVk5vYjNjZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUdWc1pXMHNJRndpWm5oemFHOTNYQ0lnS1R0Y2JseHVYSFF2THlCUmRXVjFaUzF6YTJsd2NHbHVaeUJoYm1sdFlYUnBiMjV6SUdocGFtRmpheUIwYUdVZ1puZ2dhRzl2YTNOY2JseDBhV1lnS0NBaGIzQjBjeTV4ZFdWMVpTQXBJSHRjYmx4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1ZmNYVmxkV1ZJYjI5cmN5Z2daV3hsYlN3Z1hDSm1lRndpSUNrN1hHNWNkRngwYVdZZ0tDQm9iMjlyY3k1MWJuRjFaWFZsWkNBOVBTQnVkV3hzSUNrZ2UxeHVYSFJjZEZ4MGFHOXZhM011ZFc1eGRXVjFaV1FnUFNBd08xeHVYSFJjZEZ4MGIyeGtabWx5WlNBOUlHaHZiMnR6TG1WdGNIUjVMbVpwY21VN1hHNWNkRngwWEhSb2IyOXJjeTVsYlhCMGVTNW1hWEpsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXaHZiMnR6TG5WdWNYVmxkV1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRzlzWkdacGNtVW9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlR0Y2JseDBYSFI5WEc1Y2RGeDBhRzl2YTNNdWRXNXhkV1YxWldRckt6dGNibHh1WEhSY2RHRnVhVzB1WVd4M1lYbHpLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseHVYSFJjZEZ4MEx5OGdSVzV6ZFhKbElIUm9aU0JqYjIxd2JHVjBaU0JvWVc1a2JHVnlJR2x6SUdOaGJHeGxaQ0JpWldadmNtVWdkR2hwY3lCamIyMXdiR1YwWlhOY2JseDBYSFJjZEdGdWFXMHVZV3gzWVhsektDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwYUc5dmEzTXVkVzV4ZFdWMVpXUXRMVHRjYmx4MFhIUmNkRngwYVdZZ0tDQWhhbEYxWlhKNUxuRjFaWFZsS0NCbGJHVnRMQ0JjSW1aNFhDSWdLUzVzWlc1bmRHZ2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFHOXZhM011Wlcxd2RIa3VabWx5WlNncE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlJQ2s3WEc1Y2RGeDBmU0FwTzF4dVhIUjlYRzVjYmx4MEx5OGdSR1YwWldOMElITm9iM2N2YUdsa1pTQmhibWx0WVhScGIyNXpYRzVjZEdadmNpQW9JSEJ5YjNBZ2FXNGdjSEp2Y0hNZ0tTQjdYRzVjZEZ4MGRtRnNkV1VnUFNCd2NtOXdjMXNnY0hKdmNDQmRPMXh1WEhSY2RHbG1JQ2dnY21aNGRIbHdaWE11ZEdWemRDZ2dkbUZzZFdVZ0tTQXBJSHRjYmx4MFhIUmNkR1JsYkdWMFpTQndjbTl3YzFzZ2NISnZjQ0JkTzF4dVhIUmNkRngwZEc5bloyeGxJRDBnZEc5bloyeGxJSHg4SUhaaGJIVmxJRDA5UFNCY0luUnZaMmRzWlZ3aU8xeHVYSFJjZEZ4MGFXWWdLQ0IyWVd4MVpTQTlQVDBnS0NCb2FXUmtaVzRnUHlCY0ltaHBaR1ZjSWlBNklGd2ljMmh2ZDF3aUlDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdVSEpsZEdWdVpDQjBieUJpWlNCb2FXUmtaVzRnYVdZZ2RHaHBjeUJwY3lCaElGd2ljMmh2ZDF3aUlHRnVaRnh1WEhSY2RGeDBYSFF2THlCMGFHVnlaU0JwY3lCemRHbHNiQ0JrWVhSaElHWnliMjBnWVNCemRHOXdjR1ZrSUhOb2IzY3ZhR2xrWlZ4dVhIUmNkRngwWEhScFppQW9JSFpoYkhWbElEMDlQU0JjSW5Ob2IzZGNJaUFtSmlCa1lYUmhVMmh2ZHlBbUppQmtZWFJoVTJodmQxc2djSEp2Y0NCZElDRTlQU0IxYm1SbFptbHVaV1FnS1NCN1hHNWNkRngwWEhSY2RGeDBhR2xrWkdWdUlEMGdkSEoxWlR0Y2JseHVYSFJjZEZ4MFhIUXZMeUJKWjI1dmNtVWdZV3hzSUc5MGFHVnlJRzV2TFc5d0lITm9iM2N2YUdsa1pTQmtZWFJoWEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFkyOXVkR2x1ZFdVN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSY2RHOXlhV2RiSUhCeWIzQWdYU0E5SUdSaGRHRlRhRzkzSUNZbUlHUmhkR0ZUYUc5M1d5QndjbTl3SUYwZ2ZId2dhbEYxWlhKNUxuTjBlV3hsS0NCbGJHVnRMQ0J3Y205d0lDazdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBMeThnUW1GcGJDQnZkWFFnYVdZZ2RHaHBjeUJwY3lCaElHNXZMVzl3SUd4cGEyVWdMbWhwWkdVb0tTNW9hV1JsS0NsY2JseDBjSEp2Y0ZSM1pXVnVJRDBnSVdwUmRXVnllUzVwYzBWdGNIUjVUMkpxWldOMEtDQndjbTl3Y3lBcE8xeHVYSFJwWmlBb0lDRndjbTl3VkhkbFpXNGdKaVlnYWxGMVpYSjVMbWx6Ulcxd2RIbFBZbXBsWTNRb0lHOXlhV2NnS1NBcElIdGNibHgwWEhSeVpYUjFjbTQ3WEc1Y2RIMWNibHh1WEhRdkx5QlNaWE4wY21samRDQmNJbTkyWlhKbWJHOTNYQ0lnWVc1a0lGd2laR2x6Y0d4aGVWd2lJSE4wZVd4bGN5QmtkWEpwYm1jZ1ltOTRJR0Z1YVcxaGRHbHZibk5jYmx4MGFXWWdLQ0JwYzBKdmVDQW1KaUJsYkdWdExtNXZaR1ZVZVhCbElEMDlQU0F4SUNrZ2UxeHVYRzVjZEZ4MEx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQwNUlDMGdNVEVzSUVWa1oyVWdNVElnTFNBeE5WeHVYSFJjZEM4dklGSmxZMjl5WkNCaGJHd2dNeUJ2ZG1WeVpteHZkeUJoZEhSeWFXSjFkR1Z6SUdKbFkyRjFjMlVnU1VVZ1pHOWxjeUJ1YjNRZ2FXNW1aWElnZEdobElITm9iM0owYUdGdVpGeHVYSFJjZEM4dklHWnliMjBnYVdSbGJuUnBZMkZzYkhrdGRtRnNkV1ZrSUc5MlpYSm1iRzkzV0NCaGJtUWdiM1psY21ac2IzZFpJR0Z1WkNCRlpHZGxJR3AxYzNRZ2JXbHljbTl5YzF4dVhIUmNkQzh2SUhSb1pTQnZkbVZ5Wm14dmQxZ2dkbUZzZFdVZ2RHaGxjbVV1WEc1Y2RGeDBiM0IwY3k1dmRtVnlabXh2ZHlBOUlGc2djM1I1YkdVdWIzWmxjbVpzYjNjc0lITjBlV3hsTG05MlpYSm1iRzkzV0N3Z2MzUjViR1V1YjNabGNtWnNiM2RaSUYwN1hHNWNibHgwWEhRdkx5QkpaR1Z1ZEdsbWVTQmhJR1JwYzNCc1lYa2dkSGx3WlN3Z2NISmxabVZ5Y21sdVp5QnZiR1FnYzJodmR5OW9hV1JsSUdSaGRHRWdiM1psY2lCMGFHVWdRMU5USUdOaGMyTmhaR1ZjYmx4MFhIUnlaWE4wYjNKbFJHbHpjR3hoZVNBOUlHUmhkR0ZUYUc5M0lDWW1JR1JoZEdGVGFHOTNMbVJwYzNCc1lYazdYRzVjZEZ4MGFXWWdLQ0J5WlhOMGIzSmxSR2x6Y0d4aGVTQTlQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBjbVZ6ZEc5eVpVUnBjM0JzWVhrZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUdWc1pXMHNJRndpWkdsemNHeGhlVndpSUNrN1hHNWNkRngwZlZ4dVhIUmNkR1JwYzNCc1lYa2dQU0JxVVhWbGNua3VZM056S0NCbGJHVnRMQ0JjSW1ScGMzQnNZWGxjSWlBcE8xeHVYSFJjZEdsbUlDZ2daR2x6Y0d4aGVTQTlQVDBnWENKdWIyNWxYQ0lnS1NCN1hHNWNkRngwWEhScFppQW9JSEpsYzNSdmNtVkVhWE53YkdGNUlDa2dlMXh1WEhSY2RGeDBYSFJrYVhOd2JHRjVJRDBnY21WemRHOXlaVVJwYzNCc1lYazdYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUVkbGRDQnViMjVsYlhCMGVTQjJZV3gxWlNoektTQmllU0IwWlcxd2IzSmhjbWxzZVNCbWIzSmphVzVuSUhacGMybGlhV3hwZEhsY2JseDBYSFJjZEZ4MGMyaHZkMGhwWkdVb0lGc2daV3hsYlNCZExDQjBjblZsSUNrN1hHNWNkRngwWEhSY2RISmxjM1J2Y21WRWFYTndiR0Y1SUQwZ1pXeGxiUzV6ZEhsc1pTNWthWE53YkdGNUlIeDhJSEpsYzNSdmNtVkVhWE53YkdGNU8xeHVYSFJjZEZ4MFhIUmthWE53YkdGNUlEMGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0prYVhOd2JHRjVYQ0lnS1R0Y2JseDBYSFJjZEZ4MGMyaHZkMGhwWkdVb0lGc2daV3hsYlNCZElDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRVzVwYldGMFpTQnBibXhwYm1VZ1pXeGxiV1Z1ZEhNZ1lYTWdhVzVzYVc1bExXSnNiMk5yWEc1Y2RGeDBhV1lnS0NCa2FYTndiR0Y1SUQwOVBTQmNJbWx1YkdsdVpWd2lJSHg4SUdScGMzQnNZWGtnUFQwOUlGd2lhVzVzYVc1bExXSnNiMk5yWENJZ0ppWWdjbVZ6ZEc5eVpVUnBjM0JzWVhrZ0lUMGdiblZzYkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKbWJHOWhkRndpSUNrZ1BUMDlJRndpYm05dVpWd2lJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRkpsYzNSdmNtVWdkR2hsSUc5eWFXZHBibUZzSUdScGMzQnNZWGtnZG1Gc2RXVWdZWFFnZEdobElHVnVaQ0J2WmlCd2RYSmxJSE5vYjNjdmFHbGtaU0JoYm1sdFlYUnBiMjV6WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJWEJ5YjNCVWQyVmxiaUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmhibWx0TG1SdmJtVW9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjM1I1YkdVdVpHbHpjR3hoZVNBOUlISmxjM1J2Y21WRWFYTndiR0Y1TzF4dVhIUmNkRngwWEhSY2RIMGdLVHRjYmx4MFhIUmNkRngwWEhScFppQW9JSEpsYzNSdmNtVkVhWE53YkdGNUlEMDlJRzUxYkd3Z0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSa2FYTndiR0Y1SUQwZ2MzUjViR1V1WkdsemNHeGhlVHRjYmx4MFhIUmNkRngwWEhSY2RISmxjM1J2Y21WRWFYTndiR0Y1SUQwZ1pHbHpjR3hoZVNBOVBUMGdYQ0p1YjI1bFhDSWdQeUJjSWx3aUlEb2daR2x6Y0d4aGVUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWFXNXNhVzVsTFdKc2IyTnJYQ0k3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwYVdZZ0tDQnZjSFJ6TG05MlpYSm1iRzkzSUNrZ2UxeHVYSFJjZEhOMGVXeGxMbTkyWlhKbWJHOTNJRDBnWENKb2FXUmtaVzVjSWp0Y2JseDBYSFJoYm1sdExtRnNkMkY1Y3lnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnpkSGxzWlM1dmRtVnlabXh2ZHlBOUlHOXdkSE11YjNabGNtWnNiM2RiSURBZ1hUdGNibHgwWEhSY2RITjBlV3hsTG05MlpYSm1iRzkzV0NBOUlHOXdkSE11YjNabGNtWnNiM2RiSURFZ1hUdGNibHgwWEhSY2RITjBlV3hsTG05MlpYSm1iRzkzV1NBOUlHOXdkSE11YjNabGNtWnNiM2RiSURJZ1hUdGNibHgwWEhSOUlDazdYRzVjZEgxY2JseHVYSFF2THlCSmJYQnNaVzFsYm5RZ2MyaHZkeTlvYVdSbElHRnVhVzFoZEdsdmJuTmNibHgwY0hKdmNGUjNaV1Z1SUQwZ1ptRnNjMlU3WEc1Y2RHWnZjaUFvSUhCeWIzQWdhVzRnYjNKcFp5QXBJSHRjYmx4dVhIUmNkQzh2SUVkbGJtVnlZV3dnYzJodmR5OW9hV1JsSUhObGRIVndJR1p2Y2lCMGFHbHpJR1ZzWlcxbGJuUWdZVzVwYldGMGFXOXVYRzVjZEZ4MGFXWWdLQ0FoY0hKdmNGUjNaV1Z1SUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0JrWVhSaFUyaHZkeUFwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0JjSW1ocFpHUmxibHdpSUdsdUlHUmhkR0ZUYUc5M0lDa2dlMXh1WEhSY2RGeDBYSFJjZEdocFpHUmxiaUE5SUdSaGRHRlRhRzkzTG1ocFpHUmxianRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWkdGMFlWTm9iM2NnUFNCa1lYUmhVSEpwZGk1aFkyTmxjM01vSUdWc1pXMHNJRndpWm5oemFHOTNYQ0lzSUhzZ1pHbHpjR3hoZVRvZ2NtVnpkRzl5WlVScGMzQnNZWGtnZlNBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUZEc5eVpTQm9hV1JrWlc0dmRtbHphV0pzWlNCbWIzSWdkRzluWjJ4bElITnZJR0F1YzNSdmNDZ3BMblJ2WjJkc1pTZ3BZQ0JjSW5KbGRtVnljMlZ6WENKY2JseDBYSFJjZEdsbUlDZ2dkRzluWjJ4bElDa2dlMXh1WEhSY2RGeDBYSFJrWVhSaFUyaHZkeTVvYVdSa1pXNGdQU0FoYUdsa1pHVnVPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCVGFHOTNJR1ZzWlcxbGJuUnpJR0psWm05eVpTQmhibWx0WVhScGJtY2dkR2hsYlZ4dVhIUmNkRngwYVdZZ0tDQm9hV1JrWlc0Z0tTQjdYRzVjZEZ4MFhIUmNkSE5vYjNkSWFXUmxLQ0JiSUdWc1pXMGdYU3dnZEhKMVpTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2S2lCbGMyeHBiblF0WkdsellXSnNaU0J1Ynkxc2IyOXdMV1oxYm1NZ0tpOWNibHh1WEhSY2RGeDBZVzVwYlM1a2IyNWxLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseHVYSFJjZEZ4MEx5b2daWE5zYVc1MExXVnVZV0pzWlNCdWJ5MXNiMjl3TFdaMWJtTWdLaTljYmx4dVhIUmNkRngwWEhRdkx5QlVhR1VnWm1sdVlXd2djM1JsY0NCdlppQmhJRndpYUdsa1pWd2lJR0Z1YVcxaGRHbHZiaUJwY3lCaFkzUjFZV3hzZVNCb2FXUnBibWNnZEdobElHVnNaVzFsYm5SY2JseDBYSFJjZEZ4MGFXWWdLQ0FoYUdsa1pHVnVJQ2tnZTF4dVhIUmNkRngwWEhSY2RITm9iM2RJYVdSbEtDQmJJR1ZzWlcwZ1hTQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEdSaGRHRlFjbWwyTG5KbGJXOTJaU2dnWld4bGJTd2dYQ0ptZUhOb2IzZGNJaUFwTzF4dVhIUmNkRngwWEhSbWIzSWdLQ0J3Y205d0lHbHVJRzl5YVdjZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbk4wZVd4bEtDQmxiR1Z0TENCd2NtOXdMQ0J2Y21sbld5QndjbTl3SUYwZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZCbGNpMXdjbTl3WlhKMGVTQnpaWFIxY0Z4dVhIUmNkSEJ5YjNCVWQyVmxiaUE5SUdOeVpXRjBaVlIzWldWdUtDQm9hV1JrWlc0Z1B5QmtZWFJoVTJodmQxc2djSEp2Y0NCZElEb2dNQ3dnY0hKdmNDd2dZVzVwYlNBcE8xeHVYSFJjZEdsbUlDZ2dJU2dnY0hKdmNDQnBiaUJrWVhSaFUyaHZkeUFwSUNrZ2UxeHVYSFJjZEZ4MFpHRjBZVk5vYjNkYklIQnliM0FnWFNBOUlIQnliM0JVZDJWbGJpNXpkR0Z5ZER0Y2JseDBYSFJjZEdsbUlDZ2dhR2xrWkdWdUlDa2dlMXh1WEhSY2RGeDBYSFJ3Y205d1ZIZGxaVzR1Wlc1a0lEMGdjSEp2Y0ZSM1pXVnVMbk4wWVhKME8xeHVYSFJjZEZ4MFhIUndjbTl3VkhkbFpXNHVjM1JoY25RZ1BTQXdPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205d1JtbHNkR1Z5S0NCd2NtOXdjeXdnYzNCbFkybGhiRVZoYzJsdVp5QXBJSHRjYmx4MGRtRnlJR2x1WkdWNExDQnVZVzFsTENCbFlYTnBibWNzSUhaaGJIVmxMQ0JvYjI5cmN6dGNibHh1WEhRdkx5QmpZVzFsYkVOaGMyVXNJSE53WldOcFlXeEZZWE5wYm1jZ1lXNWtJR1Y0Y0dGdVpDQmpjM05JYjI5cklIQmhjM05jYmx4MFptOXlJQ2dnYVc1a1pYZ2dhVzRnY0hKdmNITWdLU0I3WEc1Y2RGeDBibUZ0WlNBOUlHTmhiV1ZzUTJGelpTZ2dhVzVrWlhnZ0tUdGNibHgwWEhSbFlYTnBibWNnUFNCemNHVmphV0ZzUldGemFXNW5XeUJ1WVcxbElGMDdYRzVjZEZ4MGRtRnNkV1VnUFNCd2NtOXdjMXNnYVc1a1pYZ2dYVHRjYmx4MFhIUnBaaUFvSUVGeWNtRjVMbWx6UVhKeVlYa29JSFpoYkhWbElDa2dLU0I3WEc1Y2RGeDBYSFJsWVhOcGJtY2dQU0IyWVd4MVpWc2dNU0JkTzF4dVhIUmNkRngwZG1Gc2RXVWdQU0J3Y205d2Mxc2dhVzVrWlhnZ1hTQTlJSFpoYkhWbFd5QXdJRjA3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCcGJtUmxlQ0FoUFQwZ2JtRnRaU0FwSUh0Y2JseDBYSFJjZEhCeWIzQnpXeUJ1WVcxbElGMGdQU0IyWVd4MVpUdGNibHgwWEhSY2RHUmxiR1YwWlNCd2NtOXdjMXNnYVc1a1pYZ2dYVHRjYmx4MFhIUjlYRzVjYmx4MFhIUm9iMjlyY3lBOUlHcFJkV1Z5ZVM1amMzTkliMjlyYzFzZ2JtRnRaU0JkTzF4dVhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSmxlSEJoYm1SY0lpQnBiaUJvYjI5cmN5QXBJSHRjYmx4MFhIUmNkSFpoYkhWbElEMGdhRzl2YTNNdVpYaHdZVzVrS0NCMllXeDFaU0FwTzF4dVhIUmNkRngwWkdWc1pYUmxJSEJ5YjNCeld5QnVZVzFsSUYwN1hHNWNibHgwWEhSY2RDOHZJRTV2ZENCeGRXbDBaU0FrTG1WNGRHVnVaQ3dnZEdocGN5QjNiMjRuZENCdmRtVnlkM0pwZEdVZ1pYaHBjM1JwYm1jZ2EyVjVjeTVjYmx4MFhIUmNkQzh2SUZKbGRYTnBibWNnSjJsdVpHVjRKeUJpWldOaGRYTmxJSGRsSUdoaGRtVWdkR2hsSUdOdmNuSmxZM1FnWENKdVlXMWxYQ0pjYmx4MFhIUmNkR1p2Y2lBb0lHbHVaR1Y0SUdsdUlIWmhiSFZsSUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUNFb0lHbHVaR1Y0SUdsdUlIQnliM0J6SUNrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY0hKdmNITmJJR2x1WkdWNElGMGdQU0IyWVd4MVpWc2dhVzVrWlhnZ1hUdGNibHgwWEhSY2RGeDBYSFJ6Y0dWamFXRnNSV0Z6YVc1bld5QnBibVJsZUNCZElEMGdaV0Z6YVc1bk8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEhOd1pXTnBZV3hGWVhOcGJtZGJJRzVoYldVZ1hTQTlJR1ZoYzJsdVp6dGNibHgwWEhSOVhHNWNkSDFjYm4xY2JseHVablZ1WTNScGIyNGdRVzVwYldGMGFXOXVLQ0JsYkdWdExDQndjbTl3WlhKMGFXVnpMQ0J2Y0hScGIyNXpJQ2tnZTF4dVhIUjJZWElnY21WemRXeDBMRnh1WEhSY2RITjBiM0J3WldRc1hHNWNkRngwYVc1a1pYZ2dQU0F3TEZ4dVhIUmNkR3hsYm1kMGFDQTlJRUZ1YVcxaGRHbHZiaTV3Y21WbWFXeDBaWEp6TG14bGJtZDBhQ3hjYmx4MFhIUmtaV1psY25KbFpDQTlJR3BSZFdWeWVTNUVaV1psY25KbFpDZ3BMbUZzZDJGNWN5Z2dablZ1WTNScGIyNG9LU0I3WEc1Y2JseDBYSFJjZEM4dklFUnZiaWQwSUcxaGRHTm9JR1ZzWlcwZ2FXNGdkR2hsSURwaGJtbHRZWFJsWkNCelpXeGxZM1J2Y2x4dVhIUmNkRngwWkdWc1pYUmxJSFJwWTJzdVpXeGxiVHRjYmx4MFhIUjlJQ2tzWEc1Y2RGeDBkR2xqYXlBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBhV1lnS0NCemRHOXdjR1ZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFIyWVhJZ1kzVnljbVZ1ZEZScGJXVWdQU0JtZUU1dmR5QjhmQ0JqY21WaGRHVkdlRTV2ZHlncExGeHVYSFJjZEZ4MFhIUnlaVzFoYVc1cGJtY2dQU0JOWVhSb0xtMWhlQ2dnTUN3Z1lXNXBiV0YwYVc5dUxuTjBZWEowVkdsdFpTQXJJR0Z1YVcxaGRHbHZiaTVrZFhKaGRHbHZiaUF0SUdOMWNuSmxiblJVYVcxbElDa3NYRzVjYmx4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1FXNWtjbTlwWkNBeUxqTWdiMjVzZVZ4dVhIUmNkRngwWEhRdkx5QkJjbU5vWVdsaklHTnlZWE5vSUdKMVp5QjNiMjRuZENCaGJHeHZkeUIxY3lCMGJ5QjFjMlVnWURFZ0xTQW9JREF1TlNCOGZDQXdJQ2xnSUNnak1USTBPVGNwWEc1Y2RGeDBYSFJjZEhSbGJYQWdQU0J5WlcxaGFXNXBibWNnTHlCaGJtbHRZWFJwYjI0dVpIVnlZWFJwYjI0Z2ZId2dNQ3hjYmx4MFhIUmNkRngwY0dWeVkyVnVkQ0E5SURFZ0xTQjBaVzF3TEZ4dVhIUmNkRngwWEhScGJtUmxlQ0E5SURBc1hHNWNkRngwWEhSY2RHeGxibWQwYUNBOUlHRnVhVzFoZEdsdmJpNTBkMlZsYm5NdWJHVnVaM1JvTzF4dVhHNWNkRngwWEhSbWIzSWdLQ0E3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JJQ2tnZTF4dVhIUmNkRngwWEhSaGJtbHRZWFJwYjI0dWRIZGxaVzV6V3lCcGJtUmxlQ0JkTG5KMWJpZ2djR1Z5WTJWdWRDQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJrWldabGNuSmxaQzV1YjNScFpubFhhWFJvS0NCbGJHVnRMQ0JiSUdGdWFXMWhkR2x2Yml3Z2NHVnlZMlZ1ZEN3Z2NtVnRZV2x1YVc1bklGMGdLVHRjYmx4dVhIUmNkRngwTHk4Z1NXWWdkR2hsY21VbmN5QnRiM0psSUhSdklHUnZMQ0I1YVdWc1pGeHVYSFJjZEZ4MGFXWWdLQ0J3WlhKalpXNTBJRHdnTVNBbUppQnNaVzVuZEdnZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaVzFoYVc1cGJtYzdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVsbUlIUm9hWE1nZDJGeklHRnVJR1Z0Y0hSNUlHRnVhVzFoZEdsdmJpd2djM2x1ZEdobGMybDZaU0JoSUdacGJtRnNJSEJ5YjJkeVpYTnpJRzV2ZEdsbWFXTmhkR2x2Ymx4dVhIUmNkRngwYVdZZ0tDQWhiR1Z1WjNSb0lDa2dlMXh1WEhSY2RGeDBYSFJrWldabGNuSmxaQzV1YjNScFpubFhhWFJvS0NCbGJHVnRMQ0JiSUdGdWFXMWhkR2x2Yml3Z01Td2dNQ0JkSUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRkpsYzI5c2RtVWdkR2hsSUdGdWFXMWhkR2x2YmlCaGJtUWdjbVZ3YjNKMElHbDBjeUJqYjI1amJIVnphVzl1WEc1Y2RGeDBYSFJrWldabGNuSmxaQzV5WlhOdmJIWmxWMmwwYUNnZ1pXeGxiU3dnV3lCaGJtbHRZWFJwYjI0Z1hTQXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkSDBzWEc1Y2RGeDBZVzVwYldGMGFXOXVJRDBnWkdWbVpYSnlaV1F1Y0hKdmJXbHpaU2dnZTF4dVhIUmNkRngwWld4bGJUb2daV3hsYlN4Y2JseDBYSFJjZEhCeWIzQnpPaUJxVVhWbGNua3VaWGgwWlc1a0tDQjdmU3dnY0hKdmNHVnlkR2xsY3lBcExGeHVYSFJjZEZ4MGIzQjBjem9nYWxGMVpYSjVMbVY0ZEdWdVpDZ2dkSEoxWlN3Z2UxeHVYSFJjZEZ4MFhIUnpjR1ZqYVdGc1JXRnphVzVuT2lCN2ZTeGNibHgwWEhSY2RGeDBaV0Z6YVc1bk9pQnFVWFZsY25rdVpXRnphVzVuTGw5a1pXWmhkV3gwWEc1Y2RGeDBYSFI5TENCdmNIUnBiMjV6SUNrc1hHNWNkRngwWEhSdmNtbG5hVzVoYkZCeWIzQmxjblJwWlhNNklIQnliM0JsY25ScFpYTXNYRzVjZEZ4MFhIUnZjbWxuYVc1aGJFOXdkR2x2Ym5NNklHOXdkR2x2Ym5Nc1hHNWNkRngwWEhSemRHRnlkRlJwYldVNklHWjRUbTkzSUh4OElHTnlaV0YwWlVaNFRtOTNLQ2tzWEc1Y2RGeDBYSFJrZFhKaGRHbHZiam9nYjNCMGFXOXVjeTVrZFhKaGRHbHZiaXhjYmx4MFhIUmNkSFIzWldWdWN6b2dXMTBzWEc1Y2RGeDBYSFJqY21WaGRHVlVkMlZsYmpvZ1puVnVZM1JwYjI0b0lIQnliM0FzSUdWdVpDQXBJSHRjYmx4MFhIUmNkRngwZG1GeUlIUjNaV1Z1SUQwZ2FsRjFaWEo1TGxSM1pXVnVLQ0JsYkdWdExDQmhibWx0WVhScGIyNHViM0IwY3l3Z2NISnZjQ3dnWlc1a0xGeHVYSFJjZEZ4MFhIUmNkRngwWVc1cGJXRjBhVzl1TG05d2RITXVjM0JsWTJsaGJFVmhjMmx1WjFzZ2NISnZjQ0JkSUh4OElHRnVhVzFoZEdsdmJpNXZjSFJ6TG1WaGMybHVaeUFwTzF4dVhIUmNkRngwWEhSaGJtbHRZWFJwYjI0dWRIZGxaVzV6TG5CMWMyZ29JSFIzWldWdUlDazdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBkMlZsYmp0Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSemRHOXdPaUJtZFc1amRHbHZiaWdnWjI5MGIwVnVaQ0FwSUh0Y2JseDBYSFJjZEZ4MGRtRnlJR2x1WkdWNElEMGdNQ3hjYmx4dVhIUmNkRngwWEhSY2RDOHZJRWxtSUhkbElHRnlaU0JuYjJsdVp5QjBieUIwYUdVZ1pXNWtMQ0IzWlNCM1lXNTBJSFJ2SUhKMWJpQmhiR3dnZEdobElIUjNaV1Z1YzF4dVhIUmNkRngwWEhSY2RDOHZJRzkwYUdWeWQybHpaU0IzWlNCemEybHdJSFJvYVhNZ2NHRnlkRnh1WEhSY2RGeDBYSFJjZEd4bGJtZDBhQ0E5SUdkdmRHOUZibVFnUHlCaGJtbHRZWFJwYjI0dWRIZGxaVzV6TG14bGJtZDBhQ0E2SURBN1hHNWNkRngwWEhSY2RHbG1JQ2dnYzNSdmNIQmxaQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSemRHOXdjR1ZrSUQwZ2RISjFaVHRjYmx4MFhIUmNkRngwWm05eUlDZ2dPeUJwYm1SbGVDQThJR3hsYm1kMGFEc2dhVzVrWlhnckt5QXBJSHRjYmx4MFhIUmNkRngwWEhSaGJtbHRZWFJwYjI0dWRIZGxaVzV6V3lCcGJtUmxlQ0JkTG5KMWJpZ2dNU0FwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnVW1WemIyeDJaU0IzYUdWdUlIZGxJSEJzWVhsbFpDQjBhR1VnYkdGemRDQm1jbUZ0WlRzZ2IzUm9aWEozYVhObExDQnlaV3BsWTNSY2JseDBYSFJjZEZ4MGFXWWdLQ0JuYjNSdlJXNWtJQ2tnZTF4dVhIUmNkRngwWEhSY2RHUmxabVZ5Y21Wa0xtNXZkR2xtZVZkcGRHZ29JR1ZzWlcwc0lGc2dZVzVwYldGMGFXOXVMQ0F4TENBd0lGMGdLVHRjYmx4MFhIUmNkRngwWEhSa1pXWmxjbkpsWkM1eVpYTnZiSFpsVjJsMGFDZ2daV3hsYlN3Z1d5QmhibWx0WVhScGIyNHNJR2R2ZEc5RmJtUWdYU0FwTzF4dVhIUmNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RHUmxabVZ5Y21Wa0xuSmxhbVZqZEZkcGRHZ29JR1ZzWlcwc0lGc2dZVzVwYldGMGFXOXVMQ0JuYjNSdlJXNWtJRjBnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MFhIUmNkSDFjYmx4MFhIUjlJQ2tzWEc1Y2RGeDBjSEp2Y0hNZ1BTQmhibWx0WVhScGIyNHVjSEp2Y0hNN1hHNWNibHgwY0hKdmNFWnBiSFJsY2lnZ2NISnZjSE1zSUdGdWFXMWhkR2x2Ymk1dmNIUnpMbk53WldOcFlXeEZZWE5wYm1jZ0tUdGNibHh1WEhSbWIzSWdLQ0E3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JJQ2tnZTF4dVhIUmNkSEpsYzNWc2RDQTlJRUZ1YVcxaGRHbHZiaTV3Y21WbWFXeDBaWEp6V3lCcGJtUmxlQ0JkTG1OaGJHd29JR0Z1YVcxaGRHbHZiaXdnWld4bGJTd2djSEp2Y0hNc0lHRnVhVzFoZEdsdmJpNXZjSFJ6SUNrN1hHNWNkRngwYVdZZ0tDQnlaWE4xYkhRZ0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUdselJuVnVZM1JwYjI0b0lISmxjM1ZzZEM1emRHOXdJQ2tnS1NCN1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVM1ZmNYVmxkV1ZJYjI5cmN5Z2dZVzVwYldGMGFXOXVMbVZzWlcwc0lHRnVhVzFoZEdsdmJpNXZjSFJ6TG5GMVpYVmxJQ2t1YzNSdmNDQTlYRzVjZEZ4MFhIUmNkRngwY21WemRXeDBMbk4wYjNBdVltbHVaQ2dnY21WemRXeDBJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHcFJkV1Z5ZVM1dFlYQW9JSEJ5YjNCekxDQmpjbVZoZEdWVWQyVmxiaXdnWVc1cGJXRjBhVzl1SUNrN1hHNWNibHgwYVdZZ0tDQnBjMFoxYm1OMGFXOXVLQ0JoYm1sdFlYUnBiMjR1YjNCMGN5NXpkR0Z5ZENBcElDa2dlMXh1WEhSY2RHRnVhVzFoZEdsdmJpNXZjSFJ6TG5OMFlYSjBMbU5oYkd3b0lHVnNaVzBzSUdGdWFXMWhkR2x2YmlBcE8xeHVYSFI5WEc1Y2JseDBMeThnUVhSMFlXTm9JR05oYkd4aVlXTnJjeUJtY205dElHOXdkR2x2Ym5OY2JseDBZVzVwYldGMGFXOXVYRzVjZEZ4MExuQnliMmR5WlhOektDQmhibWx0WVhScGIyNHViM0IwY3k1d2NtOW5jbVZ6Y3lBcFhHNWNkRngwTG1SdmJtVW9JR0Z1YVcxaGRHbHZiaTV2Y0hSekxtUnZibVVzSUdGdWFXMWhkR2x2Ymk1dmNIUnpMbU52YlhCc1pYUmxJQ2xjYmx4MFhIUXVabUZwYkNnZ1lXNXBiV0YwYVc5dUxtOXdkSE11Wm1GcGJDQXBYRzVjZEZ4MExtRnNkMkY1Y3lnZ1lXNXBiV0YwYVc5dUxtOXdkSE11WVd4M1lYbHpJQ2s3WEc1Y2JseDBhbEYxWlhKNUxtWjRMblJwYldWeUtGeHVYSFJjZEdwUmRXVnllUzVsZUhSbGJtUW9JSFJwWTJzc0lIdGNibHgwWEhSY2RHVnNaVzA2SUdWc1pXMHNYRzVjZEZ4MFhIUmhibWx0T2lCaGJtbHRZWFJwYjI0c1hHNWNkRngwWEhSeGRXVjFaVG9nWVc1cGJXRjBhVzl1TG05d2RITXVjWFZsZFdWY2JseDBYSFI5SUNsY2JseDBLVHRjYmx4dVhIUnlaWFIxY200Z1lXNXBiV0YwYVc5dU8xeHVmVnh1WEc1cVVYVmxjbmt1UVc1cGJXRjBhVzl1SUQwZ2FsRjFaWEo1TG1WNGRHVnVaQ2dnUVc1cGJXRjBhVzl1TENCN1hHNWNibHgwZEhkbFpXNWxjbk02SUh0Y2JseDBYSFJjSWlwY0lqb2dXeUJtZFc1amRHbHZiaWdnY0hKdmNDd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUjJZWElnZEhkbFpXNGdQU0IwYUdsekxtTnlaV0YwWlZSM1pXVnVLQ0J3Y205d0xDQjJZV3gxWlNBcE8xeHVYSFJjZEZ4MFlXUnFkWE4wUTFOVEtDQjBkMlZsYmk1bGJHVnRMQ0J3Y205d0xDQnlZM056VG5WdExtVjRaV01vSUhaaGJIVmxJQ2tzSUhSM1pXVnVJQ2s3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkSGRsWlc0N1hHNWNkRngwZlNCZFhHNWNkSDBzWEc1Y2JseDBkSGRsWlc1bGNqb2dablZ1WTNScGIyNG9JSEJ5YjNCekxDQmpZV3hzWW1GamF5QXBJSHRjYmx4MFhIUnBaaUFvSUdselJuVnVZM1JwYjI0b0lIQnliM0J6SUNrZ0tTQjdYRzVjZEZ4MFhIUmpZV3hzWW1GamF5QTlJSEJ5YjNCek8xeHVYSFJjZEZ4MGNISnZjSE1nUFNCYklGd2lLbHdpSUYwN1hHNWNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkSEJ5YjNCeklEMGdjSEp2Y0hNdWJXRjBZMmdvSUhKdWIzUm9kRzFzZDJocGRHVWdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjJZWElnY0hKdmNDeGNibHgwWEhSY2RHbHVaR1Y0SUQwZ01DeGNibHgwWEhSY2RHeGxibWQwYUNBOUlIQnliM0J6TG14bGJtZDBhRHRjYmx4dVhIUmNkR1p2Y2lBb0lEc2dhVzVrWlhnZ1BDQnNaVzVuZEdnN0lHbHVaR1Y0S3lzZ0tTQjdYRzVjZEZ4MFhIUndjbTl3SUQwZ2NISnZjSE5iSUdsdVpHVjRJRjA3WEc1Y2RGeDBYSFJCYm1sdFlYUnBiMjR1ZEhkbFpXNWxjbk5iSUhCeWIzQWdYU0E5SUVGdWFXMWhkR2x2Ymk1MGQyVmxibVZ5YzFzZ2NISnZjQ0JkSUh4OElGdGRPMXh1WEhSY2RGeDBRVzVwYldGMGFXOXVMblIzWldWdVpYSnpXeUJ3Y205d0lGMHVkVzV6YUdsbWRDZ2dZMkZzYkdKaFkyc2dLVHRjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwY0hKbFptbHNkR1Z5Y3pvZ1d5QmtaV1poZFd4MFVISmxabWxzZEdWeUlGMHNYRzVjYmx4MGNISmxabWxzZEdWeU9pQm1kVzVqZEdsdmJpZ2dZMkZzYkdKaFkyc3NJSEJ5WlhCbGJtUWdLU0I3WEc1Y2RGeDBhV1lnS0NCd2NtVndaVzVrSUNrZ2UxeHVYSFJjZEZ4MFFXNXBiV0YwYVc5dUxuQnlaV1pwYkhSbGNuTXVkVzV6YUdsbWRDZ2dZMkZzYkdKaFkyc2dLVHRjYmx4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFFXNXBiV0YwYVc5dUxuQnlaV1pwYkhSbGNuTXVjSFZ6YUNnZ1kyRnNiR0poWTJzZ0tUdGNibHgwWEhSOVhHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbk53WldWa0lEMGdablZ1WTNScGIyNG9JSE53WldWa0xDQmxZWE5wYm1jc0lHWnVJQ2tnZTF4dVhIUjJZWElnYjNCMElEMGdjM0JsWldRZ0ppWWdkSGx3Wlc5bUlITndaV1ZrSUQwOVBTQmNJbTlpYW1WamRGd2lJRDhnYWxGMVpYSjVMbVY0ZEdWdVpDZ2dlMzBzSUhOd1pXVmtJQ2tnT2lCN1hHNWNkRngwWTI5dGNHeGxkR1U2SUdadUlIeDhJQ0ZtYmlBbUppQmxZWE5wYm1jZ2ZIeGNibHgwWEhSY2RHbHpSblZ1WTNScGIyNG9JSE53WldWa0lDa2dKaVlnYzNCbFpXUXNYRzVjZEZ4MFpIVnlZWFJwYjI0NklITndaV1ZrTEZ4dVhIUmNkR1ZoYzJsdVp6b2dabTRnSmlZZ1pXRnphVzVuSUh4OElHVmhjMmx1WnlBbUppQWhhWE5HZFc1amRHbHZiaWdnWldGemFXNW5JQ2tnSmlZZ1pXRnphVzVuWEc1Y2RIMDdYRzVjYmx4MEx5OGdSMjhnZEc4Z2RHaGxJR1Z1WkNCemRHRjBaU0JwWmlCbWVDQmhjbVVnYjJabVhHNWNkR2xtSUNnZ2FsRjFaWEo1TG1aNExtOW1aaUFwSUh0Y2JseDBYSFJ2Y0hRdVpIVnlZWFJwYjI0Z1BTQXdPMXh1WEc1Y2RIMGdaV3h6WlNCN1hHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ2IzQjBMbVIxY21GMGFXOXVJQ0U5UFNCY0ltNTFiV0psY2x3aUlDa2dlMXh1WEhSY2RGeDBhV1lnS0NCdmNIUXVaSFZ5WVhScGIyNGdhVzRnYWxGMVpYSjVMbVo0TG5Od1pXVmtjeUFwSUh0Y2JseDBYSFJjZEZ4MGIzQjBMbVIxY21GMGFXOXVJRDBnYWxGMVpYSjVMbVo0TG5Od1pXVmtjMXNnYjNCMExtUjFjbUYwYVc5dUlGMDdYRzVjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRzl3ZEM1a2RYSmhkR2x2YmlBOUlHcFJkV1Z5ZVM1bWVDNXpjR1ZsWkhNdVgyUmxabUYxYkhRN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MEx5OGdUbTl5YldGc2FYcGxJRzl3ZEM1eGRXVjFaU0F0SUhSeWRXVXZkVzVrWldacGJtVmtMMjUxYkd3Z0xUNGdYQ0ptZUZ3aVhHNWNkR2xtSUNnZ2IzQjBMbkYxWlhWbElEMDlJRzUxYkd3Z2ZId2diM0IwTG5GMVpYVmxJRDA5UFNCMGNuVmxJQ2tnZTF4dVhIUmNkRzl3ZEM1eGRXVjFaU0E5SUZ3aVpuaGNJanRjYmx4MGZWeHVYRzVjZEM4dklGRjFaWFZsYVc1blhHNWNkRzl3ZEM1dmJHUWdQU0J2Y0hRdVkyOXRjR3hsZEdVN1hHNWNibHgwYjNCMExtTnZiWEJzWlhSbElEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBhV1lnS0NCcGMwWjFibU4wYVc5dUtDQnZjSFF1YjJ4a0lDa2dLU0I3WEc1Y2RGeDBYSFJ2Y0hRdWIyeGtMbU5oYkd3b0lIUm9hWE1nS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHOXdkQzV4ZFdWMVpTQXBJSHRjYmx4MFhIUmNkR3BSZFdWeWVTNWtaWEYxWlhWbEtDQjBhR2x6TENCdmNIUXVjWFZsZFdVZ0tUdGNibHgwWEhSOVhHNWNkSDA3WEc1Y2JseDBjbVYwZFhKdUlHOXdkRHRjYm4wN1hHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4MFptRmtaVlJ2T2lCbWRXNWpkR2x2YmlnZ2MzQmxaV1FzSUhSdkxDQmxZWE5wYm1jc0lHTmhiR3hpWVdOcklDa2dlMXh1WEc1Y2RGeDBMeThnVTJodmR5QmhibmtnYUdsa1pHVnVJR1ZzWlcxbGJuUnpJR0ZtZEdWeUlITmxkSFJwYm1jZ2IzQmhZMmwwZVNCMGJ5QXdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVabWxzZEdWeUtDQnBjMGhwWkdSbGJsZHBkR2hwYmxSeVpXVWdLUzVqYzNNb0lGd2liM0JoWTJsMGVWd2lMQ0F3SUNrdWMyaHZkeWdwWEc1Y2JseDBYSFJjZEM4dklFRnVhVzFoZEdVZ2RHOGdkR2hsSUhaaGJIVmxJSE53WldOcFptbGxaRnh1WEhSY2RGeDBMbVZ1WkNncExtRnVhVzFoZEdVb0lIc2diM0JoWTJsMGVUb2dkRzhnZlN3Z2MzQmxaV1FzSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNnS1R0Y2JseDBmU3hjYmx4MFlXNXBiV0YwWlRvZ1puVnVZM1JwYjI0b0lIQnliM0FzSUhOd1pXVmtMQ0JsWVhOcGJtY3NJR05oYkd4aVlXTnJJQ2tnZTF4dVhIUmNkSFpoY2lCbGJYQjBlU0E5SUdwUmRXVnllUzVwYzBWdGNIUjVUMkpxWldOMEtDQndjbTl3SUNrc1hHNWNkRngwWEhSdmNIUmhiR3dnUFNCcVVYVmxjbmt1YzNCbFpXUW9JSE53WldWa0xDQmxZWE5wYm1jc0lHTmhiR3hpWVdOcklDa3NYRzVjZEZ4MFhIUmtiMEZ1YVcxaGRHbHZiaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUU5d1pYSmhkR1VnYjI0Z1lTQmpiM0I1SUc5bUlIQnliM0FnYzI4Z2NHVnlMWEJ5YjNCbGNuUjVJR1ZoYzJsdVp5QjNiMjRuZENCaVpTQnNiM04wWEc1Y2RGeDBYSFJjZEhaaGNpQmhibWx0SUQwZ1FXNXBiV0YwYVc5dUtDQjBhR2x6TENCcVVYVmxjbmt1WlhoMFpXNWtLQ0I3ZlN3Z2NISnZjQ0FwTENCdmNIUmhiR3dnS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJGYlhCMGVTQmhibWx0WVhScGIyNXpMQ0J2Y2lCbWFXNXBjMmhwYm1jZ2NtVnpiMngyWlhNZ2FXMXRaV1JwWVhSbGJIbGNibHgwWEhSY2RGeDBhV1lnS0NCbGJYQjBlU0I4ZkNCa1lYUmhVSEpwZGk1blpYUW9JSFJvYVhNc0lGd2labWx1YVhOb1hDSWdLU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmhibWx0TG5OMGIzQW9JSFJ5ZFdVZ0tUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVHRjYmx4MFhIUmNkR1J2UVc1cGJXRjBhVzl1TG1acGJtbHphQ0E5SUdSdlFXNXBiV0YwYVc5dU8xeHVYRzVjZEZ4MGNtVjBkWEp1SUdWdGNIUjVJSHg4SUc5d2RHRnNiQzV4ZFdWMVpTQTlQVDBnWm1Gc2MyVWdQMXh1WEhSY2RGeDBkR2hwY3k1bFlXTm9LQ0JrYjBGdWFXMWhkR2x2YmlBcElEcGNibHgwWEhSY2RIUm9hWE11Y1hWbGRXVW9JRzl3ZEdGc2JDNXhkV1YxWlN3Z1pHOUJibWx0WVhScGIyNGdLVHRjYmx4MGZTeGNibHgwYzNSdmNEb2dablZ1WTNScGIyNG9JSFI1Y0dVc0lHTnNaV0Z5VVhWbGRXVXNJR2R2ZEc5RmJtUWdLU0I3WEc1Y2RGeDBkbUZ5SUhOMGIzQlJkV1YxWlNBOUlHWjFibU4wYVc5dUtDQm9iMjlyY3lBcElIdGNibHgwWEhSY2RIWmhjaUJ6ZEc5d0lEMGdhRzl2YTNNdWMzUnZjRHRjYmx4MFhIUmNkR1JsYkdWMFpTQm9iMjlyY3k1emRHOXdPMXh1WEhSY2RGeDBjM1J2Y0NnZ1oyOTBiMFZ1WkNBcE8xeHVYSFJjZEgwN1hHNWNibHgwWEhScFppQW9JSFI1Y0dWdlppQjBlWEJsSUNFOVBTQmNJbk4wY21sdVoxd2lJQ2tnZTF4dVhIUmNkRngwWjI5MGIwVnVaQ0E5SUdOc1pXRnlVWFZsZFdVN1hHNWNkRngwWEhSamJHVmhjbEYxWlhWbElEMGdkSGx3WlR0Y2JseDBYSFJjZEhSNWNHVWdQU0IxYm1SbFptbHVaV1E3WEc1Y2RGeDBmVnh1WEhSY2RHbG1JQ2dnWTJ4bFlYSlJkV1YxWlNBbUppQjBlWEJsSUNFOVBTQm1ZV3h6WlNBcElIdGNibHgwWEhSY2RIUm9hWE11Y1hWbGRXVW9JSFI1Y0dVZ2ZId2dYQ0ptZUZ3aUxDQmJYU0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwZG1GeUlHUmxjWFZsZFdVZ1BTQjBjblZsTEZ4dVhIUmNkRngwWEhScGJtUmxlQ0E5SUhSNWNHVWdJVDBnYm5Wc2JDQW1KaUIwZVhCbElDc2dYQ0p4ZFdWMVpVaHZiMnR6WENJc1hHNWNkRngwWEhSY2RIUnBiV1Z5Y3lBOUlHcFJkV1Z5ZVM1MGFXMWxjbk1zWEc1Y2RGeDBYSFJjZEdSaGRHRWdQU0JrWVhSaFVISnBkaTVuWlhRb0lIUm9hWE1nS1R0Y2JseHVYSFJjZEZ4MGFXWWdLQ0JwYm1SbGVDQXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tDQmtZWFJoV3lCcGJtUmxlQ0JkSUNZbUlHUmhkR0ZiSUdsdVpHVjRJRjB1YzNSdmNDQXBJSHRjYmx4MFhIUmNkRngwWEhSemRHOXdVWFZsZFdVb0lHUmhkR0ZiSUdsdVpHVjRJRjBnS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFptOXlJQ2dnYVc1a1pYZ2dhVzRnWkdGMFlTQXBJSHRjYmx4MFhIUmNkRngwWEhScFppQW9JR1JoZEdGYklHbHVaR1Y0SUYwZ0ppWWdaR0YwWVZzZ2FXNWtaWGdnWFM1emRHOXdJQ1ltSUhKeWRXNHVkR1Z6ZENnZ2FXNWtaWGdnS1NBcElIdGNibHgwWEhSY2RGeDBYSFJjZEhOMGIzQlJkV1YxWlNnZ1pHRjBZVnNnYVc1a1pYZ2dYU0FwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJtYjNJZ0tDQnBibVJsZUNBOUlIUnBiV1Z5Y3k1c1pXNW5kR2c3SUdsdVpHVjRMUzA3SUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSUhScGJXVnljMXNnYVc1a1pYZ2dYUzVsYkdWdElEMDlQU0IwYUdseklDWW1YRzVjZEZ4MFhIUmNkRngwS0NCMGVYQmxJRDA5SUc1MWJHd2dmSHdnZEdsdFpYSnpXeUJwYm1SbGVDQmRMbkYxWlhWbElEMDlQU0IwZVhCbElDa2dLU0I3WEc1Y2JseDBYSFJjZEZ4MFhIUjBhVzFsY25OYklHbHVaR1Y0SUYwdVlXNXBiUzV6ZEc5d0tDQm5iM1J2Ulc1a0lDazdYRzVjZEZ4MFhIUmNkRngwWkdWeGRXVjFaU0E5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFJjZEhScGJXVnljeTV6Y0d4cFkyVW9JR2x1WkdWNExDQXhJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdVM1JoY25RZ2RHaGxJRzVsZUhRZ2FXNGdkR2hsSUhGMVpYVmxJR2xtSUhSb1pTQnNZWE4wSUhOMFpYQWdkMkZ6YmlkMElHWnZjbU5sWkM1Y2JseDBYSFJjZEM4dklGUnBiV1Z5Y3lCamRYSnlaVzUwYkhrZ2QybHNiQ0JqWVd4c0lIUm9aV2x5SUdOdmJYQnNaWFJsSUdOaGJHeGlZV05yY3l3Z2QyaHBZMmhjYmx4MFhIUmNkQzh2SUhkcGJHd2daR1Z4ZFdWMVpTQmlkWFFnYjI1c2VTQnBaaUIwYUdWNUlIZGxjbVVnWjI5MGIwVnVaQzVjYmx4MFhIUmNkR2xtSUNnZ1pHVnhkV1YxWlNCOGZDQWhaMjkwYjBWdVpDQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVMbVJsY1hWbGRXVW9JSFJvYVhNc0lIUjVjR1VnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5SUNrN1hHNWNkSDBzWEc1Y2RHWnBibWx6YURvZ1puVnVZM1JwYjI0b0lIUjVjR1VnS1NCN1hHNWNkRngwYVdZZ0tDQjBlWEJsSUNFOVBTQm1ZV3h6WlNBcElIdGNibHgwWEhSY2RIUjVjR1VnUFNCMGVYQmxJSHg4SUZ3aVpuaGNJanRjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaV0ZqYUNnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUjJZWElnYVc1a1pYZ3NYRzVjZEZ4MFhIUmNkR1JoZEdFZ1BTQmtZWFJoVUhKcGRpNW5aWFFvSUhSb2FYTWdLU3hjYmx4MFhIUmNkRngwY1hWbGRXVWdQU0JrWVhSaFd5QjBlWEJsSUNzZ1hDSnhkV1YxWlZ3aUlGMHNYRzVjZEZ4MFhIUmNkR2h2YjJ0eklEMGdaR0YwWVZzZ2RIbHdaU0FySUZ3aWNYVmxkV1ZJYjI5cmMxd2lJRjBzWEc1Y2RGeDBYSFJjZEhScGJXVnljeUE5SUdwUmRXVnllUzUwYVcxbGNuTXNYRzVjZEZ4MFhIUmNkR3hsYm1kMGFDQTlJSEYxWlhWbElEOGdjWFZsZFdVdWJHVnVaM1JvSURvZ01EdGNibHh1WEhSY2RGeDBMeThnUlc1aFlteGxJR1pwYm1semFHbHVaeUJtYkdGbklHOXVJSEJ5YVhaaGRHVWdaR0YwWVZ4dVhIUmNkRngwWkdGMFlTNW1hVzVwYzJnZ1BTQjBjblZsTzF4dVhHNWNkRngwWEhRdkx5QkZiWEIwZVNCMGFHVWdjWFZsZFdVZ1ptbHljM1JjYmx4MFhIUmNkR3BSZFdWeWVTNXhkV1YxWlNnZ2RHaHBjeXdnZEhsd1pTd2dXMTBnS1R0Y2JseHVYSFJjZEZ4MGFXWWdLQ0JvYjI5cmN5QW1KaUJvYjI5cmN5NXpkRzl3SUNrZ2UxeHVYSFJjZEZ4MFhIUm9iMjlyY3k1emRHOXdMbU5oYkd3b0lIUm9hWE1zSUhSeWRXVWdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1RHOXZheUJtYjNJZ1lXNTVJR0ZqZEdsMlpTQmhibWx0WVhScGIyNXpMQ0JoYm1RZ1ptbHVhWE5vSUhSb1pXMWNibHgwWEhSY2RHWnZjaUFvSUdsdVpHVjRJRDBnZEdsdFpYSnpMbXhsYm1kMGFEc2dhVzVrWlhndExUc2dLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDZ2dkR2x0WlhKeld5QnBibVJsZUNCZExtVnNaVzBnUFQwOUlIUm9hWE1nSmlZZ2RHbHRaWEp6V3lCcGJtUmxlQ0JkTG5GMVpYVmxJRDA5UFNCMGVYQmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RIUnBiV1Z5YzFzZ2FXNWtaWGdnWFM1aGJtbHRMbk4wYjNBb0lIUnlkV1VnS1R0Y2JseDBYSFJjZEZ4MFhIUjBhVzFsY25NdWMzQnNhV05sS0NCcGJtUmxlQ3dnTVNBcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUV4dmIyc2dabTl5SUdGdWVTQmhibWx0WVhScGIyNXpJR2x1SUhSb1pTQnZiR1FnY1hWbGRXVWdZVzVrSUdacGJtbHphQ0IwYUdWdFhHNWNkRngwWEhSbWIzSWdLQ0JwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnYkdWdVozUm9PeUJwYm1SbGVDc3JJQ2tnZTF4dVhIUmNkRngwWEhScFppQW9JSEYxWlhWbFd5QnBibVJsZUNCZElDWW1JSEYxWlhWbFd5QnBibVJsZUNCZExtWnBibWx6YUNBcElIdGNibHgwWEhSY2RGeDBYSFJ4ZFdWMVpWc2dhVzVrWlhnZ1hTNW1hVzVwYzJndVkyRnNiQ2dnZEdocGN5QXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGUjFjbTRnYjJabUlHWnBibWx6YUdsdVp5Qm1iR0ZuWEc1Y2RGeDBYSFJrWld4bGRHVWdaR0YwWVM1bWFXNXBjMmc3WEc1Y2RGeDBmU0FwTzF4dVhIUjlYRzU5SUNrN1hHNWNibXBSZFdWeWVTNWxZV05vS0NCYklGd2lkRzluWjJ4bFhDSXNJRndpYzJodmQxd2lMQ0JjSW1ocFpHVmNJaUJkTENCbWRXNWpkR2x2YmlnZ2FTd2dibUZ0WlNBcElIdGNibHgwZG1GeUlHTnpjMFp1SUQwZ2FsRjFaWEo1TG1adVd5QnVZVzFsSUYwN1hHNWNkR3BSZFdWeWVTNW1ibHNnYm1GdFpTQmRJRDBnWm5WdVkzUnBiMjRvSUhOd1pXVmtMQ0JsWVhOcGJtY3NJR05oYkd4aVlXTnJJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnpjR1ZsWkNBOVBTQnVkV3hzSUh4OElIUjVjR1Z2WmlCemNHVmxaQ0E5UFQwZ1hDSmliMjlzWldGdVhDSWdQMXh1WEhSY2RGeDBZM056Um00dVlYQndiSGtvSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeUFwSURwY2JseDBYSFJjZEhSb2FYTXVZVzVwYldGMFpTZ2daMlZ1Um5nb0lHNWhiV1VzSUhSeWRXVWdLU3dnYzNCbFpXUXNJR1ZoYzJsdVp5d2dZMkZzYkdKaFkyc2dLVHRjYmx4MGZUdGNibjBnS1R0Y2JseHVMeThnUjJWdVpYSmhkR1VnYzJodmNuUmpkWFJ6SUdadmNpQmpkWE4wYjIwZ1lXNXBiV0YwYVc5dWMxeHVhbEYxWlhKNUxtVmhZMmdvSUh0Y2JseDBjMnhwWkdWRWIzZHVPaUJuWlc1R2VDZ2dYQ0p6YUc5M1hDSWdLU3hjYmx4MGMyeHBaR1ZWY0RvZ1oyVnVSbmdvSUZ3aWFHbGtaVndpSUNrc1hHNWNkSE5zYVdSbFZHOW5aMnhsT2lCblpXNUdlQ2dnWENKMGIyZG5iR1ZjSWlBcExGeHVYSFJtWVdSbFNXNDZJSHNnYjNCaFkybDBlVG9nWENKemFHOTNYQ0lnZlN4Y2JseDBabUZrWlU5MWREb2dleUJ2Y0dGamFYUjVPaUJjSW1ocFpHVmNJaUI5TEZ4dVhIUm1ZV1JsVkc5bloyeGxPaUI3SUc5d1lXTnBkSGs2SUZ3aWRHOW5aMnhsWENJZ2ZWeHVmU3dnWm5WdVkzUnBiMjRvSUc1aGJXVXNJSEJ5YjNCeklDa2dlMXh1WEhScVVYVmxjbmt1Wm01YklHNWhiV1VnWFNBOUlHWjFibU4wYVc5dUtDQnpjR1ZsWkN3Z1pXRnphVzVuTENCallXeHNZbUZqYXlBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWhibWx0WVhSbEtDQndjbTl3Y3l3Z2MzQmxaV1FzSUdWaGMybHVaeXdnWTJGc2JHSmhZMnNnS1R0Y2JseDBmVHRjYm4wZ0tUdGNibHh1YWxGMVpYSjVMblJwYldWeWN5QTlJRnRkTzF4dWFsRjFaWEo1TG1aNExuUnBZMnNnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwZG1GeUlIUnBiV1Z5TEZ4dVhIUmNkR2tnUFNBd0xGeHVYSFJjZEhScGJXVnljeUE5SUdwUmRXVnllUzUwYVcxbGNuTTdYRzVjYmx4MFpuaE9iM2NnUFNCRVlYUmxMbTV2ZHlncE8xeHVYRzVjZEdadmNpQW9JRHNnYVNBOElIUnBiV1Z5Y3k1c1pXNW5kR2c3SUdrckt5QXBJSHRjYmx4MFhIUjBhVzFsY2lBOUlIUnBiV1Z5YzFzZ2FTQmRPMXh1WEc1Y2RGeDBMeThnVW5WdUlIUm9aU0IwYVcxbGNpQmhibVFnYzJGbVpXeDVJSEpsYlc5MlpTQnBkQ0IzYUdWdUlHUnZibVVnS0dGc2JHOTNhVzVuSUdadmNpQmxlSFJsY201aGJDQnlaVzF2ZG1Gc0tWeHVYSFJjZEdsbUlDZ2dJWFJwYldWeUtDa2dKaVlnZEdsdFpYSnpXeUJwSUYwZ1BUMDlJSFJwYldWeUlDa2dlMXh1WEhSY2RGeDBkR2x0WlhKekxuTndiR2xqWlNnZ2FTMHRMQ0F4SUNrN1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MGFXWWdLQ0FoZEdsdFpYSnpMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUnFVWFZsY25rdVpuZ3VjM1J2Y0NncE8xeHVYSFI5WEc1Y2RHWjRUbTkzSUQwZ2RXNWtaV1pwYm1Wa08xeHVmVHRjYmx4dWFsRjFaWEo1TG1aNExuUnBiV1Z5SUQwZ1puVnVZM1JwYjI0b0lIUnBiV1Z5SUNrZ2UxeHVYSFJxVVhWbGNua3VkR2x0WlhKekxuQjFjMmdvSUhScGJXVnlJQ2s3WEc1Y2RHcFJkV1Z5ZVM1bWVDNXpkR0Z5ZENncE8xeHVmVHRjYmx4dWFsRjFaWEo1TG1aNExtbHVkR1Z5ZG1Gc0lEMGdNVE03WEc1cVVYVmxjbmt1Wm5ndWMzUmhjblFnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwYVdZZ0tDQnBibEJ5YjJkeVpYTnpJQ2tnZTF4dVhIUmNkSEpsZEhWeWJqdGNibHgwZlZ4dVhHNWNkR2x1VUhKdlozSmxjM01nUFNCMGNuVmxPMXh1WEhSelkyaGxaSFZzWlNncE8xeHVmVHRjYmx4dWFsRjFaWEo1TG1aNExuTjBiM0FnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwYVc1UWNtOW5jbVZ6Y3lBOUlHNTFiR3c3WEc1OU8xeHVYRzVxVVhWbGNua3Vabmd1YzNCbFpXUnpJRDBnZTF4dVhIUnpiRzkzT2lBMk1EQXNYRzVjZEdaaGMzUTZJREl3TUN4Y2JseHVYSFF2THlCRVpXWmhkV3gwSUhOd1pXVmtYRzVjZEY5a1pXWmhkV3gwT2lBME1EQmNibjA3WEc1Y2JseHVMeThnUW1GelpXUWdiMlptSUc5bUlIUm9aU0J3YkhWbmFXNGdZbmtnUTJ4cGJuUWdTR1ZzWm1WeWN5d2dkMmwwYUNCd1pYSnRhWE56YVc5dUxseHVMeThnYUhSMGNITTZMeTkzWldJdVlYSmphR2wyWlM1dmNtY3ZkMlZpTHpJd01UQXdNekkwTURFME56UTNMMmgwZEhBNkx5OWliR2x1WkhOcFoyNWhiSE11WTI5dEwybHVaR1Y0TG5Cb2NDOHlNREE1THpBM0wycHhkV1Z5ZVMxa1pXeGhlUzljYm1wUmRXVnllUzVtYmk1a1pXeGhlU0E5SUdaMWJtTjBhVzl1S0NCMGFXMWxMQ0IwZVhCbElDa2dlMXh1WEhSMGFXMWxJRDBnYWxGMVpYSjVMbVo0SUQ4Z2FsRjFaWEo1TG1aNExuTndaV1ZrYzFzZ2RHbHRaU0JkSUh4OElIUnBiV1VnT2lCMGFXMWxPMXh1WEhSMGVYQmxJRDBnZEhsd1pTQjhmQ0JjSW1aNFhDSTdYRzVjYmx4MGNtVjBkWEp1SUhSb2FYTXVjWFZsZFdVb0lIUjVjR1VzSUdaMWJtTjBhVzl1S0NCdVpYaDBMQ0JvYjI5cmN5QXBJSHRjYmx4MFhIUjJZWElnZEdsdFpXOTFkQ0E5SUhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0NCdVpYaDBMQ0IwYVcxbElDazdYRzVjZEZ4MGFHOXZhM011YzNSdmNDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwZDJsdVpHOTNMbU5zWldGeVZHbHRaVzkxZENnZ2RHbHRaVzkxZENBcE8xeHVYSFJjZEgwN1hHNWNkSDBnS1R0Y2JuMDdYRzVjYmx4dUtDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MGRtRnlJR2x1Y0hWMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnZ1hDSnBibkIxZEZ3aUlDa3NYRzVjZEZ4MGMyVnNaV04wSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2dnWENKelpXeGxZM1JjSWlBcExGeHVYSFJjZEc5d2RDQTlJSE5sYkdWamRDNWhjSEJsYm1SRGFHbHNaQ2dnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ2dYQ0p2Y0hScGIyNWNJaUFwSUNrN1hHNWNibHgwYVc1d2RYUXVkSGx3WlNBOUlGd2lZMmhsWTJ0aWIzaGNJanRjYmx4dVhIUXZMeUJUZFhCd2IzSjBPaUJCYm1SeWIybGtJRHc5TkM0eklHOXViSGxjYmx4MEx5OGdSR1ZtWVhWc2RDQjJZV3gxWlNCbWIzSWdZU0JqYUdWamEySnZlQ0J6YUc5MWJHUWdZbVVnWENKdmJsd2lYRzVjZEhOMWNIQnZjblF1WTJobFkydFBiaUE5SUdsdWNIVjBMblpoYkhWbElDRTlQU0JjSWx3aU8xeHVYRzVjZEM4dklGTjFjSEJ2Y25RNklFbEZJRHc5TVRFZ2IyNXNlVnh1WEhRdkx5Qk5kWE4wSUdGalkyVnpjeUJ6Wld4bFkzUmxaRWx1WkdWNElIUnZJRzFoYTJVZ1pHVm1ZWFZzZENCdmNIUnBiMjV6SUhObGJHVmpkRnh1WEhSemRYQndiM0owTG05d2RGTmxiR1ZqZEdWa0lEMGdiM0IwTG5ObGJHVmpkR1ZrTzF4dVhHNWNkQzh2SUZOMWNIQnZjblE2SUVsRklEdzlNVEVnYjI1c2VWeHVYSFF2THlCQmJpQnBibkIxZENCc2IzTmxjeUJwZEhNZ2RtRnNkV1VnWVdaMFpYSWdZbVZqYjIxcGJtY2dZU0J5WVdScGIxeHVYSFJwYm5CMWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0lGd2lhVzV3ZFhSY0lpQXBPMXh1WEhScGJuQjFkQzUyWVd4MVpTQTlJRndpZEZ3aU8xeHVYSFJwYm5CMWRDNTBlWEJsSUQwZ1hDSnlZV1JwYjF3aU8xeHVYSFJ6ZFhCd2IzSjBMbkpoWkdsdlZtRnNkV1VnUFNCcGJuQjFkQzUyWVd4MVpTQTlQVDBnWENKMFhDSTdYRzU5SUNrb0tUdGNibHh1WEc1MllYSWdZbTl2YkVodmIyc3NYRzVjZEdGMGRISklZVzVrYkdVZ1BTQnFVWFZsY25rdVpYaHdjaTVoZEhSeVNHRnVaR3hsTzF4dVhHNXFVWFZsY25rdVptNHVaWGgwWlc1a0tDQjdYRzVjZEdGMGRISTZJR1oxYm1OMGFXOXVLQ0J1WVcxbExDQjJZV3gxWlNBcElIdGNibHgwWEhSeVpYUjFjbTRnWVdOalpYTnpLQ0IwYUdsekxDQnFVWFZsY25rdVlYUjBjaXdnYm1GdFpTd2dkbUZzZFdVc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJQ2s3WEc1Y2RIMHNYRzVjYmx4MGNtVnRiM1psUVhSMGNqb2dablZ1WTNScGIyNG9JRzVoYldVZ0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaV0ZqYUNnZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnFVWFZsY25rdWNtVnRiM1psUVhSMGNpZ2dkR2hwY3l3Z2JtRnRaU0FwTzF4dVhIUmNkSDBnS1R0Y2JseDBmVnh1ZlNBcE8xeHVYRzVxVVhWbGNua3VaWGgwWlc1a0tDQjdYRzVjZEdGMGRISTZJR1oxYm1OMGFXOXVLQ0JsYkdWdExDQnVZVzFsTENCMllXeDFaU0FwSUh0Y2JseDBYSFIyWVhJZ2NtVjBMQ0JvYjI5cmN5eGNibHgwWEhSY2RHNVVlWEJsSUQwZ1pXeGxiUzV1YjJSbFZIbHdaVHRjYmx4dVhIUmNkQzh2SUVSdmJpZDBJR2RsZEM5elpYUWdZWFIwY21saWRYUmxjeUJ2YmlCMFpYaDBMQ0JqYjIxdFpXNTBJR0Z1WkNCaGRIUnlhV0oxZEdVZ2JtOWtaWE5jYmx4MFhIUnBaaUFvSUc1VWVYQmxJRDA5UFNBeklIeDhJRzVVZVhCbElEMDlQU0E0SUh4OElHNVVlWEJsSUQwOVBTQXlJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRVpoYkd4aVlXTnJJSFJ2SUhCeWIzQWdkMmhsYmlCaGRIUnlhV0oxZEdWeklHRnlaU0J1YjNRZ2MzVndjRzl5ZEdWa1hHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ1pXeGxiUzVuWlhSQmRIUnlhV0oxZEdVZ1BUMDlJRndpZFc1a1pXWnBibVZrWENJZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG5CeWIzQW9JR1ZzWlcwc0lHNWhiV1VzSUhaaGJIVmxJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUVhSMGNtbGlkWFJsSUdodmIydHpJR0Z5WlNCa1pYUmxjbTFwYm1Wa0lHSjVJSFJvWlNCc2IzZGxjbU5oYzJVZ2RtVnljMmx2Ymx4dVhIUmNkQzh2SUVkeVlXSWdibVZqWlhOellYSjVJR2h2YjJzZ2FXWWdiMjVsSUdseklHUmxabWx1WldSY2JseDBYSFJwWmlBb0lHNVVlWEJsSUNFOVBTQXhJSHg4SUNGcVVYVmxjbmt1YVhOWVRVeEViMk1vSUdWc1pXMGdLU0FwSUh0Y2JseDBYSFJjZEdodmIydHpJRDBnYWxGMVpYSjVMbUYwZEhKSWIyOXJjMXNnYm1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUYwZ2ZIeGNibHgwWEhSY2RGeDBLQ0JxVVhWbGNua3VaWGh3Y2k1dFlYUmphQzVpYjI5c0xuUmxjM1FvSUc1aGJXVWdLU0EvSUdKdmIyeEliMjlySURvZ2RXNWtaV1pwYm1Wa0lDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLQ0IyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0IyWVd4MVpTQTlQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVMbkpsYlc5MlpVRjBkSElvSUdWc1pXMHNJRzVoYldVZ0tUdGNibHgwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvSUdodmIydHpJQ1ltSUZ3aWMyVjBYQ0lnYVc0Z2FHOXZhM01nSmlaY2JseDBYSFJjZEZ4MEtDQnlaWFFnUFNCb2IyOXJjeTV6WlhRb0lHVnNaVzBzSUhaaGJIVmxMQ0J1WVcxbElDa2dLU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVYwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnZ2JtRnRaU3dnZG1Gc2RXVWdLeUJjSWx3aUlDazdYRzVjZEZ4MFhIUnlaWFIxY200Z2RtRnNkV1U3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCb2IyOXJjeUFtSmlCY0ltZGxkRndpSUdsdUlHaHZiMnR6SUNZbUlDZ2djbVYwSUQwZ2FHOXZhM011WjJWMEtDQmxiR1Z0TENCdVlXMWxJQ2tnS1NBaFBUMGdiblZzYkNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBJRDBnYWxGMVpYSjVMbVpwYm1RdVlYUjBjaWdnWld4bGJTd2dibUZ0WlNBcE8xeHVYRzVjZEZ4MEx5OGdUbTl1TFdWNGFYTjBaVzUwSUdGMGRISnBZblYwWlhNZ2NtVjBkWEp1SUc1MWJHd3NJSGRsSUc1dmNtMWhiR2w2WlNCMGJ5QjFibVJsWm1sdVpXUmNibHgwWEhSeVpYUjFjbTRnY21WMElEMDlJRzUxYkd3Z1B5QjFibVJsWm1sdVpXUWdPaUJ5WlhRN1hHNWNkSDBzWEc1Y2JseDBZWFIwY2todmIydHpPaUI3WEc1Y2RGeDBkSGx3WlRvZ2UxeHVYSFJjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaWdnWld4bGJTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lYTjFjSEJ2Y25RdWNtRmthVzlXWVd4MVpTQW1KaUIyWVd4MVpTQTlQVDBnWENKeVlXUnBiMXdpSUNZbVhHNWNkRngwWEhSY2RGeDBibTlrWlU1aGJXVW9JR1ZzWlcwc0lGd2lhVzV3ZFhSY0lpQXBJQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUIyWVd3Z1BTQmxiR1Z0TG5aaGJIVmxPMXh1WEhSY2RGeDBYSFJjZEdWc1pXMHVjMlYwUVhSMGNtbGlkWFJsS0NCY0luUjVjR1ZjSWl3Z2RtRnNkV1VnS1R0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUhaaGJDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHVnNaVzB1ZG1Gc2RXVWdQU0IyWVd3N1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIyWVd4MVpUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJ5WlcxdmRtVkJkSFJ5T2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnZG1Gc2RXVWdLU0I3WEc1Y2RGeDBkbUZ5SUc1aGJXVXNYRzVjZEZ4MFhIUnBJRDBnTUN4Y2JseHVYSFJjZEZ4MEx5OGdRWFIwY21saWRYUmxJRzVoYldWeklHTmhiaUJqYjI1MFlXbHVJRzV2YmkxSVZFMU1JSGRvYVhSbGMzQmhZMlVnWTJoaGNtRmpkR1Z5YzF4dVhIUmNkRngwTHk4Z2FIUjBjSE02THk5b2RHMXNMbk53WldNdWQyaGhkSGRuTG05eVp5OXRkV3gwYVhCaFoyVXZjM2x1ZEdGNExtaDBiV3dqWVhSMGNtbGlkWFJsY3kweVhHNWNkRngwWEhSaGRIUnlUbUZ0WlhNZ1BTQjJZV3gxWlNBbUppQjJZV3gxWlM1dFlYUmphQ2dnY201dmRHaDBiV3gzYUdsMFpTQXBPMXh1WEc1Y2RGeDBhV1lnS0NCaGRIUnlUbUZ0WlhNZ0ppWWdaV3hsYlM1dWIyUmxWSGx3WlNBOVBUMGdNU0FwSUh0Y2JseDBYSFJjZEhkb2FXeGxJQ2dnS0NCdVlXMWxJRDBnWVhSMGNrNWhiV1Z6V3lCcEt5c2dYU0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUmxiR1Z0TG5KbGJXOTJaVUYwZEhKcFluVjBaU2dnYm1GdFpTQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlZ4dWZTQXBPMXh1WEc0dkx5QkliMjlyY3lCbWIzSWdZbTl2YkdWaGJpQmhkSFJ5YVdKMWRHVnpYRzVpYjI5c1NHOXZheUE5SUh0Y2JseDBjMlYwT2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnZG1Gc2RXVXNJRzVoYldVZ0tTQjdYRzVjZEZ4MGFXWWdLQ0IyWVd4MVpTQTlQVDBnWm1Gc2MyVWdLU0I3WEc1Y2JseDBYSFJjZEM4dklGSmxiVzkyWlNCaWIyOXNaV0Z1SUdGMGRISnBZblYwWlhNZ2QyaGxiaUJ6WlhRZ2RHOGdabUZzYzJWY2JseDBYSFJjZEdwUmRXVnllUzV5WlcxdmRtVkJkSFJ5S0NCbGJHVnRMQ0J1WVcxbElDazdYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEdWc1pXMHVjMlYwUVhSMGNtbGlkWFJsS0NCdVlXMWxMQ0J1WVcxbElDazdYRzVjZEZ4MGZWeHVYSFJjZEhKbGRIVnliaUJ1WVcxbE8xeHVYSFI5WEc1OU8xeHVYRzVxVVhWbGNua3VaV0ZqYUNnZ2FsRjFaWEo1TG1WNGNISXViV0YwWTJndVltOXZiQzV6YjNWeVkyVXViV0YwWTJnb0lDOWNYSGNyTDJjZ0tTd2dablZ1WTNScGIyNG9JR2tzSUc1aGJXVWdLU0I3WEc1Y2RIWmhjaUJuWlhSMFpYSWdQU0JoZEhSeVNHRnVaR3hsV3lCdVlXMWxJRjBnZkh3Z2FsRjFaWEo1TG1acGJtUXVZWFIwY2p0Y2JseHVYSFJoZEhSeVNHRnVaR3hsV3lCdVlXMWxJRjBnUFNCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTd2dhWE5ZVFV3Z0tTQjdYRzVjZEZ4MGRtRnlJSEpsZEN3Z2FHRnVaR3hsTEZ4dVhIUmNkRngwYkc5M1pYSmpZWE5sVG1GdFpTQTlJRzVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4dVhIUmNkR2xtSUNnZ0lXbHpXRTFNSUNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJCZG05cFpDQmhiaUJwYm1acGJtbDBaU0JzYjI5d0lHSjVJSFJsYlhCdmNtRnlhV3g1SUhKbGJXOTJhVzVuSUhSb2FYTWdablZ1WTNScGIyNGdabkp2YlNCMGFHVWdaMlYwZEdWeVhHNWNkRngwWEhSb1lXNWtiR1VnUFNCaGRIUnlTR0Z1Wkd4bFd5QnNiM2RsY21OaGMyVk9ZVzFsSUYwN1hHNWNkRngwWEhSaGRIUnlTR0Z1Wkd4bFd5QnNiM2RsY21OaGMyVk9ZVzFsSUYwZ1BTQnlaWFE3WEc1Y2RGeDBYSFJ5WlhRZ1BTQm5aWFIwWlhJb0lHVnNaVzBzSUc1aGJXVXNJR2x6V0UxTUlDa2dJVDBnYm5Wc2JDQS9YRzVjZEZ4MFhIUmNkR3h2ZDJWeVkyRnpaVTVoYldVZ09seHVYSFJjZEZ4MFhIUnVkV3hzTzF4dVhIUmNkRngwWVhSMGNraGhibVJzWlZzZ2JHOTNaWEpqWVhObFRtRnRaU0JkSUQwZ2FHRnVaR3hsTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEhSOU8xeHVmU0FwTzF4dVhHNWNibHh1WEc1MllYSWdjbVp2WTNWellXSnNaU0E5SUM5ZUtEODZhVzV3ZFhSOGMyVnNaV04wZkhSbGVIUmhjbVZoZkdKMWRIUnZiaWtrTDJrc1hHNWNkSEpqYkdsamEyRmliR1VnUFNBdlhpZy9PbUY4WVhKbFlTa2tMMms3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwY0hKdmNEb2dablZ1WTNScGIyNG9JRzVoYldVc0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUJoWTJObGMzTW9JSFJvYVhNc0lHcFJkV1Z5ZVM1d2NtOXdMQ0J1WVcxbExDQjJZV3gxWlN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdLVHRjYmx4MGZTeGNibHh1WEhSeVpXMXZkbVZRY205d09pQm1kVzVqZEdsdmJpZ2dibUZ0WlNBcElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHUmxiR1YwWlNCMGFHbHpXeUJxVVhWbGNua3VjSEp2Y0VacGVGc2dibUZ0WlNCZElIeDhJRzVoYldVZ1hUdGNibHgwWEhSOUlDazdYRzVjZEgxY2JuMGdLVHRjYmx4dWFsRjFaWEo1TG1WNGRHVnVaQ2dnZTF4dVhIUndjbTl3T2lCbWRXNWpkR2x2YmlnZ1pXeGxiU3dnYm1GdFpTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGRtRnlJSEpsZEN3Z2FHOXZhM01zWEc1Y2RGeDBYSFJ1Vkhsd1pTQTlJR1ZzWlcwdWJtOWtaVlI1Y0dVN1hHNWNibHgwWEhRdkx5QkViMjRuZENCblpYUXZjMlYwSUhCeWIzQmxjblJwWlhNZ2IyNGdkR1Y0ZEN3Z1kyOXRiV1Z1ZENCaGJtUWdZWFIwY21saWRYUmxJRzV2WkdWelhHNWNkRngwYVdZZ0tDQnVWSGx3WlNBOVBUMGdNeUI4ZkNCdVZIbHdaU0E5UFQwZ09DQjhmQ0J1Vkhsd1pTQTlQVDBnTWlBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHNVVlWEJsSUNFOVBTQXhJSHg4SUNGcVVYVmxjbmt1YVhOWVRVeEViMk1vSUdWc1pXMGdLU0FwSUh0Y2JseHVYSFJjZEZ4MEx5OGdSbWw0SUc1aGJXVWdZVzVrSUdGMGRHRmphQ0JvYjI5cmMxeHVYSFJjZEZ4MGJtRnRaU0E5SUdwUmRXVnllUzV3Y205d1JtbDRXeUJ1WVcxbElGMGdmSHdnYm1GdFpUdGNibHgwWEhSY2RHaHZiMnR6SUQwZ2FsRjFaWEo1TG5CeWIzQkliMjlyYzFzZ2JtRnRaU0JkTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnZ2RtRnNkV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQXBJSHRjYmx4MFhIUmNkR2xtSUNnZ2FHOXZhM01nSmlZZ1hDSnpaWFJjSWlCcGJpQm9iMjlyY3lBbUpseHVYSFJjZEZ4MFhIUW9JSEpsZENBOUlHaHZiMnR6TG5ObGRDZ2daV3hsYlN3Z2RtRnNkV1VzSUc1aGJXVWdLU0FwSUNFOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ5WlhRN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxkSFZ5YmlBb0lHVnNaVzFiSUc1aGJXVWdYU0E5SUhaaGJIVmxJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCb2IyOXJjeUFtSmlCY0ltZGxkRndpSUdsdUlHaHZiMnR6SUNZbUlDZ2djbVYwSUQwZ2FHOXZhM011WjJWMEtDQmxiR1Z0TENCdVlXMWxJQ2tnS1NBaFBUMGdiblZzYkNBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdWc1pXMWJJRzVoYldVZ1hUdGNibHgwZlN4Y2JseHVYSFJ3Y205d1NHOXZhM002SUh0Y2JseDBYSFIwWVdKSmJtUmxlRG9nZTF4dVhIUmNkRngwWjJWME9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHh1WEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnTFNBeE1TQnZibXg1WEc1Y2RGeDBYSFJjZEM4dklHVnNaVzB1ZEdGaVNXNWtaWGdnWkc5bGMyNG5kQ0JoYkhkaGVYTWdjbVYwZFhKdUlIUm9aVnh1WEhSY2RGeDBYSFF2THlCamIzSnlaV04wSUhaaGJIVmxJSGRvWlc0Z2FYUWdhR0Z6YmlkMElHSmxaVzRnWlhod2JHbGphWFJzZVNCelpYUmNibHgwWEhSY2RGeDBMeThnYUhSMGNITTZMeTkzWldJdVlYSmphR2wyWlM1dmNtY3ZkMlZpTHpJd01UUXhNVEUyTWpNek16UTNMMmgwZEhBNkx5OW1iSFZwWkhCeWIycGxZM1F1YjNKbkwySnNiMmN2TWpBd09DOHdNUzh3T1M5blpYUjBhVzVuTFhObGRIUnBibWN0WVc1a0xYSmxiVzkyYVc1bkxYUmhZbWx1WkdWNExYWmhiSFZsY3kxM2FYUm9MV3BoZG1GelkzSnBjSFF2WEc1Y2RGeDBYSFJjZEM4dklGVnpaU0J3Y205d1pYSWdZWFIwY21saWRYUmxJSEpsZEhKcFpYWmhiQ2dqTVRJd056SXBYRzVjZEZ4MFhIUmNkSFpoY2lCMFlXSnBibVJsZUNBOUlHcFJkV1Z5ZVM1bWFXNWtMbUYwZEhJb0lHVnNaVzBzSUZ3aWRHRmlhVzVrWlhoY0lpQXBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dkR0ZpYVc1a1pYZ2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhCaGNuTmxTVzUwS0NCMFlXSnBibVJsZUN3Z01UQWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RHbG1JQ2hjYmx4MFhIUmNkRngwWEhSeVptOWpkWE5oWW14bExuUmxjM1FvSUdWc1pXMHVibTlrWlU1aGJXVWdLU0I4ZkZ4dVhIUmNkRngwWEhSY2RISmpiR2xqYTJGaWJHVXVkR1Z6ZENnZ1pXeGxiUzV1YjJSbFRtRnRaU0FwSUNZbVhHNWNkRngwWEhSY2RGeDBaV3hsYlM1b2NtVm1YRzVjZEZ4MFhIUmNkQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlBd08xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJQzB4TzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZTeGNibHh1WEhSd2NtOXdSbWw0T2lCN1hHNWNkRngwWENKbWIzSmNJam9nWENKb2RHMXNSbTl5WENJc1hHNWNkRngwWENKamJHRnpjMXdpT2lCY0ltTnNZWE56VG1GdFpWd2lYRzVjZEgxY2JuMGdLVHRjYmx4dUx5OGdVM1Z3Y0c5eWREb2dTVVVnUEQweE1TQnZibXg1WEc0dkx5QkJZMk5sYzNOcGJtY2dkR2hsSUhObGJHVmpkR1ZrU1c1a1pYZ2djSEp2Y0dWeWRIbGNiaTh2SUdadmNtTmxjeUIwYUdVZ1luSnZkM05sY2lCMGJ5QnlaWE53WldOMElITmxkSFJwYm1jZ2MyVnNaV04wWldSY2JpOHZJRzl1SUhSb1pTQnZjSFJwYjI1Y2JpOHZJRlJvWlNCblpYUjBaWElnWlc1emRYSmxjeUJoSUdSbFptRjFiSFFnYjNCMGFXOXVJR2x6SUhObGJHVmpkR1ZrWEc0dkx5QjNhR1Z1SUdsdUlHRnVJRzl3ZEdkeWIzVndYRzR2THlCbGMyeHBiblFnY25Wc1pTQmNJbTV2TFhWdWRYTmxaQzFsZUhCeVpYTnphVzl1YzF3aUlHbHpJR1JwYzJGaWJHVmtJR1p2Y2lCMGFHbHpJR052WkdWY2JpOHZJSE5wYm1ObElHbDBJR052Ym5OcFpHVnljeUJ6ZFdOb0lHRmpZMlZ6YzJsdmJuTWdibTl2Y0Z4dWFXWWdLQ0FoYzNWd2NHOXlkQzV2Y0hSVFpXeGxZM1JsWkNBcElIdGNibHgwYWxGMVpYSjVMbkJ5YjNCSWIyOXJjeTV6Wld4bFkzUmxaQ0E5SUh0Y2JseDBYSFJuWlhRNklHWjFibU4wYVc5dUtDQmxiR1Z0SUNrZ2UxeHVYRzVjZEZ4MFhIUXZLaUJsYzJ4cGJuUWdibTh0ZFc1MWMyVmtMV1Y0Y0hKbGMzTnBiMjV6T2lCY0ltOW1abHdpSUNvdlhHNWNibHgwWEhSY2RIWmhjaUJ3WVhKbGJuUWdQU0JsYkdWdExuQmhjbVZ1ZEU1dlpHVTdYRzVjZEZ4MFhIUnBaaUFvSUhCaGNtVnVkQ0FtSmlCd1lYSmxiblF1Y0dGeVpXNTBUbTlrWlNBcElIdGNibHgwWEhSY2RGeDBjR0Z5Wlc1MExuQmhjbVZ1ZEU1dlpHVXVjMlZzWldOMFpXUkpibVJsZUR0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEhKbGRIVnliaUJ1ZFd4c08xeHVYSFJjZEgwc1hHNWNkRngwYzJWME9pQm1kVzVqZEdsdmJpZ2daV3hsYlNBcElIdGNibHh1WEhSY2RGeDBMeW9nWlhOc2FXNTBJRzV2TFhWdWRYTmxaQzFsZUhCeVpYTnphVzl1Y3pvZ1hDSnZabVpjSWlBcUwxeHVYRzVjZEZ4MFhIUjJZWElnY0dGeVpXNTBJRDBnWld4bGJTNXdZWEpsYm5ST2IyUmxPMXh1WEhSY2RGeDBhV1lnS0NCd1lYSmxiblFnS1NCN1hHNWNkRngwWEhSY2RIQmhjbVZ1ZEM1elpXeGxZM1JsWkVsdVpHVjRPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2djR0Z5Wlc1MExuQmhjbVZ1ZEU1dlpHVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNHRnlaVzUwTG5CaGNtVnVkRTV2WkdVdWMyVnNaV04wWldSSmJtUmxlRHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZUdGNibjFjYmx4dWFsRjFaWEo1TG1WaFkyZ29JRnRjYmx4MFhDSjBZV0pKYm1SbGVGd2lMRnh1WEhSY0luSmxZV1JQYm14NVhDSXNYRzVjZEZ3aWJXRjRUR1Z1WjNSb1hDSXNYRzVjZEZ3aVkyVnNiRk53WVdOcGJtZGNJaXhjYmx4MFhDSmpaV3hzVUdGa1pHbHVaMXdpTEZ4dVhIUmNJbkp2ZDFOd1lXNWNJaXhjYmx4MFhDSmpiMnhUY0dGdVhDSXNYRzVjZEZ3aWRYTmxUV0Z3WENJc1hHNWNkRndpWm5KaGJXVkNiM0prWlhKY0lpeGNibHgwWENKamIyNTBaVzUwUldScGRHRmliR1ZjSWx4dVhTd2dablZ1WTNScGIyNG9LU0I3WEc1Y2RHcFJkV1Z5ZVM1d2NtOXdSbWw0V3lCMGFHbHpMblJ2VEc5M1pYSkRZWE5sS0NrZ1hTQTlJSFJvYVhNN1hHNTlJQ2s3WEc1Y2JseHVYRzVjYmx4MEx5OGdVM1J5YVhBZ1lXNWtJR052Ykd4aGNITmxJSGRvYVhSbGMzQmhZMlVnWVdOamIzSmthVzVuSUhSdklFaFVUVXdnYzNCbFkxeHVYSFF2THlCb2RIUndjem92TDJsdVpuSmhMbk53WldNdWQyaGhkSGRuTG05eVp5OGpjM1J5YVhBdFlXNWtMV052Ykd4aGNITmxMV0Z6WTJscExYZG9hWFJsYzNCaFkyVmNibHgwWm5WdVkzUnBiMjRnYzNSeWFYQkJibVJEYjJ4c1lYQnpaU2dnZG1Gc2RXVWdLU0I3WEc1Y2RGeDBkbUZ5SUhSdmEyVnVjeUE5SUhaaGJIVmxMbTFoZEdOb0tDQnlibTkwYUhSdGJIZG9hWFJsSUNrZ2ZId2dXMTA3WEc1Y2RGeDBjbVYwZFhKdUlIUnZhMlZ1Y3k1cWIybHVLQ0JjSWlCY0lpQXBPMXh1WEhSOVhHNWNibHh1Wm5WdVkzUnBiMjRnWjJWMFEyeGhjM01vSUdWc1pXMGdLU0I3WEc1Y2RISmxkSFZ5YmlCbGJHVnRMbWRsZEVGMGRISnBZblYwWlNBbUppQmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpTZ2dYQ0pqYkdGemMxd2lJQ2tnZkh3Z1hDSmNJanRjYm4xY2JseHVablZ1WTNScGIyNGdZMnhoYzNObGMxUnZRWEp5WVhrb0lIWmhiSFZsSUNrZ2UxeHVYSFJwWmlBb0lFRnljbUY1TG1selFYSnlZWGtvSUhaaGJIVmxJQ2tnS1NCN1hHNWNkRngwY21WMGRYSnVJSFpoYkhWbE8xeHVYSFI5WEc1Y2RHbG1JQ2dnZEhsd1pXOW1JSFpoYkhWbElEMDlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUIyWVd4MVpTNXRZWFJqYUNnZ2NtNXZkR2gwYld4M2FHbDBaU0FwSUh4OElGdGRPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQmJYVHRjYm4xY2JseHVhbEYxWlhKNUxtWnVMbVY0ZEdWdVpDZ2dlMXh1WEhSaFpHUkRiR0Z6Y3pvZ1puVnVZM1JwYjI0b0lIWmhiSFZsSUNrZ2UxeHVYSFJjZEhaaGNpQmpiR0Z6YzJWekxDQmxiR1Z0TENCamRYSXNJR04xY2xaaGJIVmxMQ0JqYkdGNmVpd2dhaXdnWm1sdVlXeFdZV3gxWlN4Y2JseDBYSFJjZEdrZ1BTQXdPMXh1WEc1Y2RGeDBhV1lnS0NCcGMwWjFibU4wYVc5dUtDQjJZV3gxWlNBcElDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9JR29nS1NCN1hHNWNkRngwWEhSY2RHcFJkV1Z5ZVNnZ2RHaHBjeUFwTG1Ga1pFTnNZWE56S0NCMllXeDFaUzVqWVd4c0tDQjBhR2x6TENCcUxDQm5aWFJEYkdGemN5Z2dkR2hwY3lBcElDa2dLVHRjYmx4MFhIUmNkSDBnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJqYkdGemMyVnpJRDBnWTJ4aGMzTmxjMVJ2UVhKeVlYa29JSFpoYkhWbElDazdYRzVjYmx4MFhIUnBaaUFvSUdOc1lYTnpaWE11YkdWdVozUm9JQ2tnZTF4dVhIUmNkRngwZDJocGJHVWdLQ0FvSUdWc1pXMGdQU0IwYUdseld5QnBLeXNnWFNBcElDa2dlMXh1WEhSY2RGeDBYSFJqZFhKV1lXeDFaU0E5SUdkbGRFTnNZWE56S0NCbGJHVnRJQ2s3WEc1Y2RGeDBYSFJjZEdOMWNpQTlJR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJREVnSmlZZ0tDQmNJaUJjSWlBcklITjBjbWx3UVc1a1EyOXNiR0Z3YzJVb0lHTjFjbFpoYkhWbElDa2dLeUJjSWlCY0lpQXBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dZM1Z5SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkR29nUFNBd08xeHVYSFJjZEZ4MFhIUmNkSGRvYVd4bElDZ2dLQ0JqYkdGNmVpQTlJR05zWVhOelpYTmJJR29yS3lCZElDa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdOMWNpNXBibVJsZUU5bUtDQmNJaUJjSWlBcklHTnNZWHA2SUNzZ1hDSWdYQ0lnS1NBOElEQWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR04xY2lBclBTQmpiR0Y2ZWlBcklGd2lJRndpTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkQzh2SUU5dWJIa2dZWE56YVdkdUlHbG1JR1JwWm1abGNtVnVkQ0IwYnlCaGRtOXBaQ0IxYm01bFpXUmxaQ0J5Wlc1a1pYSnBibWN1WEc1Y2RGeDBYSFJjZEZ4MFptbHVZV3hXWVd4MVpTQTlJSE4wY21sd1FXNWtRMjlzYkdGd2MyVW9JR04xY2lBcE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kzVnlWbUZzZFdVZ0lUMDlJR1pwYm1Gc1ZtRnNkV1VnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJsYkdWdExuTmxkRUYwZEhKcFluVjBaU2dnWENKamJHRnpjMXdpTENCbWFXNWhiRlpoYkhWbElDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDBzWEc1Y2JseDBjbVZ0YjNabFEyeGhjM002SUdaMWJtTjBhVzl1S0NCMllXeDFaU0FwSUh0Y2JseDBYSFIyWVhJZ1kyeGhjM05sY3l3Z1pXeGxiU3dnWTNWeUxDQmpkWEpXWVd4MVpTd2dZMnhoZW5vc0lHb3NJR1pwYm1Gc1ZtRnNkV1VzWEc1Y2RGeDBYSFJwSUQwZ01EdGNibHh1WEhSY2RHbG1JQ2dnYVhOR2RXNWpkR2x2YmlnZ2RtRnNkV1VnS1NBcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDQnFJQ2tnZTF4dVhIUmNkRngwWEhScVVYVmxjbmtvSUhSb2FYTWdLUzV5WlcxdmRtVkRiR0Z6Y3lnZ2RtRnNkV1V1WTJGc2JDZ2dkR2hwY3l3Z2Fpd2daMlYwUTJ4aGMzTW9JSFJvYVhNZ0tTQXBJQ2s3WEc1Y2RGeDBYSFI5SUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDQWhZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TG1GMGRISW9JRndpWTJ4aGMzTmNJaXdnWENKY0lpQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHTnNZWE56WlhNZ1BTQmpiR0Z6YzJWelZHOUJjbkpoZVNnZ2RtRnNkV1VnS1R0Y2JseHVYSFJjZEdsbUlDZ2dZMnhoYzNObGN5NXNaVzVuZEdnZ0tTQjdYRzVjZEZ4MFhIUjNhR2xzWlNBb0lDZ2daV3hsYlNBOUlIUm9hWE5iSUdrckt5QmRJQ2tnS1NCN1hHNWNkRngwWEhSY2RHTjFjbFpoYkhWbElEMGdaMlYwUTJ4aGMzTW9JR1ZzWlcwZ0tUdGNibHh1WEhSY2RGeDBYSFF2THlCVWFHbHpJR1Y0Y0hKbGMzTnBiMjRnYVhNZ2FHVnlaU0JtYjNJZ1ltVjBkR1Z5SUdOdmJYQnlaWE56YVdKcGJHbDBlU0FvYzJWbElHRmtaRU5zWVhOektWeHVYSFJjZEZ4MFhIUmpkWElnUFNCbGJHVnRMbTV2WkdWVWVYQmxJRDA5UFNBeElDWW1JQ2dnWENJZ1hDSWdLeUJ6ZEhKcGNFRnVaRU52Ykd4aGNITmxLQ0JqZFhKV1lXeDFaU0FwSUNzZ1hDSWdYQ0lnS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSUdOMWNpQXBJSHRjYmx4MFhIUmNkRngwWEhScUlEMGdNRHRjYmx4MFhIUmNkRngwWEhSM2FHbHNaU0FvSUNnZ1kyeGhlbm9nUFNCamJHRnpjMlZ6V3lCcUt5c2dYU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QlNaVzF2ZG1VZ0ttRnNiQ29nYVc1emRHRnVZMlZ6WEc1Y2RGeDBYSFJjZEZ4MFhIUjNhR2xzWlNBb0lHTjFjaTVwYm1SbGVFOW1LQ0JjSWlCY0lpQXJJR05zWVhwNklDc2dYQ0lnWENJZ0tTQStJQzB4SUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSamRYSWdQU0JqZFhJdWNtVndiR0ZqWlNnZ1hDSWdYQ0lnS3lCamJHRjZlaUFySUZ3aUlGd2lMQ0JjSWlCY0lpQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RDOHZJRTl1YkhrZ1lYTnphV2R1SUdsbUlHUnBabVpsY21WdWRDQjBieUJoZG05cFpDQjFibTVsWldSbFpDQnlaVzVrWlhKcGJtY3VYRzVjZEZ4MFhIUmNkRngwWm1sdVlXeFdZV3gxWlNBOUlITjBjbWx3UVc1a1EyOXNiR0Z3YzJVb0lHTjFjaUFwTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnWTNWeVZtRnNkV1VnSVQwOUlHWnBibUZzVm1Gc2RXVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0TG5ObGRFRjBkSEpwWW5WMFpTZ2dYQ0pqYkdGemMxd2lMQ0JtYVc1aGJGWmhiSFZsSUNrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMHNYRzVjYmx4MGRHOW5aMnhsUTJ4aGMzTTZJR1oxYm1OMGFXOXVLQ0IyWVd4MVpTd2djM1JoZEdWV1lXd2dLU0I3WEc1Y2RGeDBkbUZ5SUhSNWNHVWdQU0IwZVhCbGIyWWdkbUZzZFdVc1hHNWNkRngwWEhScGMxWmhiR2xrVm1Gc2RXVWdQU0IwZVhCbElEMDlQU0JjSW5OMGNtbHVaMXdpSUh4OElFRnljbUY1TG1selFYSnlZWGtvSUhaaGJIVmxJQ2s3WEc1Y2JseDBYSFJwWmlBb0lIUjVjR1Z2WmlCemRHRjBaVlpoYkNBOVBUMGdYQ0ppYjI5c1pXRnVYQ0lnSmlZZ2FYTldZV3hwWkZaaGJIVmxJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJSE4wWVhSbFZtRnNJRDhnZEdocGN5NWhaR1JEYkdGemN5Z2dkbUZzZFdVZ0tTQTZJSFJvYVhNdWNtVnRiM1psUTJ4aGMzTW9JSFpoYkhWbElDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLQ0JwYzBaMWJtTjBhVzl1S0NCMllXeDFaU0FwSUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaV0ZqYUNnZ1puVnVZM1JwYjI0b0lHa2dLU0I3WEc1Y2RGeDBYSFJjZEdwUmRXVnllU2dnZEdocGN5QXBMblJ2WjJkc1pVTnNZWE56S0Z4dVhIUmNkRngwWEhSY2RIWmhiSFZsTG1OaGJHd29JSFJvYVhNc0lHa3NJR2RsZEVOc1lYTnpLQ0IwYUdseklDa3NJSE4wWVhSbFZtRnNJQ2tzWEc1Y2RGeDBYSFJjZEZ4MGMzUmhkR1ZXWVd4Y2JseDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RIMGdLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkSFpoY2lCamJHRnpjMDVoYldVc0lHa3NJSE5sYkdZc0lHTnNZWE56VG1GdFpYTTdYRzVjYmx4MFhIUmNkR2xtSUNnZ2FYTldZV3hwWkZaaGJIVmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRlJ2WjJkc1pTQnBibVJwZG1sa2RXRnNJR05zWVhOeklHNWhiV1Z6WEc1Y2RGeDBYSFJjZEdrZ1BTQXdPMXh1WEhSY2RGeDBYSFJ6Wld4bUlEMGdhbEYxWlhKNUtDQjBhR2x6SUNrN1hHNWNkRngwWEhSY2RHTnNZWE56VG1GdFpYTWdQU0JqYkdGemMyVnpWRzlCY25KaGVTZ2dkbUZzZFdVZ0tUdGNibHh1WEhSY2RGeDBYSFIzYUdsc1pTQW9JQ2dnWTJ4aGMzTk9ZVzFsSUQwZ1kyeGhjM05PWVcxbGMxc2dhU3NySUYwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRU5vWldOcklHVmhZMmdnWTJ4aGMzTk9ZVzFsSUdkcGRtVnVMQ0J6Y0dGalpTQnpaWEJoY21GMFpXUWdiR2x6ZEZ4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYzJWc1ppNW9ZWE5EYkdGemN5Z2dZMnhoYzNOT1lXMWxJQ2tnS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ6Wld4bUxuSmxiVzkyWlVOc1lYTnpLQ0JqYkdGemMwNWhiV1VnS1R0Y2JseDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYzJWc1ppNWhaR1JEYkdGemN5Z2dZMnhoYzNOT1lXMWxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZSdloyZHNaU0IzYUc5c1pTQmpiR0Z6Y3lCdVlXMWxYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0IyWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrSUh4OElIUjVjR1VnUFQwOUlGd2lZbTl2YkdWaGJsd2lJQ2tnZTF4dVhIUmNkRngwWEhSamJHRnpjMDVoYldVZ1BTQm5aWFJEYkdGemN5Z2dkR2hwY3lBcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSUdOc1lYTnpUbUZ0WlNBcElIdGNibHh1WEhSY2RGeDBYSFJjZEM4dklGTjBiM0psSUdOc1lYTnpUbUZ0WlNCcFppQnpaWFJjYmx4MFhIUmNkRngwWEhSa1lYUmhVSEpwZGk1elpYUW9JSFJvYVhNc0lGd2lYMTlqYkdGemMwNWhiV1ZmWDF3aUxDQmpiR0Z6YzA1aGJXVWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRWxtSUhSb1pTQmxiR1Z0Wlc1MElHaGhjeUJoSUdOc1lYTnpJRzVoYldVZ2IzSWdhV1lnZDJVbmNtVWdjR0Z6YzJWa0lHQm1ZV3h6WldBc1hHNWNkRngwWEhSY2RDOHZJSFJvWlc0Z2NtVnRiM1psSUhSb1pTQjNhRzlzWlNCamJHRnpjMjVoYldVZ0tHbG1JSFJvWlhKbElIZGhjeUJ2Ym1Vc0lIUm9aU0JoWW05MlpTQnpZWFpsWkNCcGRDa3VYRzVjZEZ4MFhIUmNkQzh2SUU5MGFHVnlkMmx6WlNCaWNtbHVaeUJpWVdOcklIZG9ZWFJsZG1WeUlIZGhjeUJ3Y21WMmFXOTFjMng1SUhOaGRtVmtJQ2hwWmlCaGJubDBhR2x1Wnlrc1hHNWNkRngwWEhSY2RDOHZJR1poYkd4cGJtY2dZbUZqYXlCMGJ5QjBhR1VnWlcxd2RIa2djM1J5YVc1bklHbG1JRzV2ZEdocGJtY2dkMkZ6SUhOMGIzSmxaQzVjYmx4MFhIUmNkRngwYVdZZ0tDQjBhR2x6TG5ObGRFRjBkSEpwWW5WMFpTQXBJSHRjYmx4MFhIUmNkRngwWEhSMGFHbHpMbk5sZEVGMGRISnBZblYwWlNnZ1hDSmpiR0Z6YzF3aUxGeHVYSFJjZEZ4MFhIUmNkRngwWTJ4aGMzTk9ZVzFsSUh4OElIWmhiSFZsSUQwOVBTQm1ZV3h6WlNBL1hHNWNkRngwWEhSY2RGeDBYSFJjSWx3aUlEcGNibHgwWEhSY2RGeDBYSFJjZEdSaGRHRlFjbWwyTG1kbGRDZ2dkR2hwY3l3Z1hDSmZYMk5zWVhOelRtRnRaVjlmWENJZ0tTQjhmQ0JjSWx3aVhHNWNkRngwWEhSY2RGeDBLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBnS1R0Y2JseDBmU3hjYmx4dVhIUm9ZWE5EYkdGemN6b2dablZ1WTNScGIyNG9JSE5sYkdWamRHOXlJQ2tnZTF4dVhIUmNkSFpoY2lCamJHRnpjMDVoYldVc0lHVnNaVzBzWEc1Y2RGeDBYSFJwSUQwZ01EdGNibHh1WEhSY2RHTnNZWE56VG1GdFpTQTlJRndpSUZ3aUlDc2djMlZzWldOMGIzSWdLeUJjSWlCY0lqdGNibHgwWEhSM2FHbHNaU0FvSUNnZ1pXeGxiU0E5SUhSb2FYTmJJR2tyS3lCZElDa2dLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHVnNaVzB1Ym05a1pWUjVjR1VnUFQwOUlERWdKaVpjYmx4MFhIUmNkRngwS0NCY0lpQmNJaUFySUhOMGNtbHdRVzVrUTI5c2JHRndjMlVvSUdkbGRFTnNZWE56S0NCbGJHVnRJQ2tnS1NBcklGd2lJRndpSUNrdWFXNWtaWGhQWmlnZ1kyeGhjM05PWVcxbElDa2dQaUF0TVNBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkSDFjYm4wZ0tUdGNibHh1WEc1Y2JseHVkbUZ5SUhKeVpYUjFjbTRnUFNBdlhGeHlMMmM3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwZG1Gc09pQm1kVzVqZEdsdmJpZ2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MGRtRnlJR2h2YjJ0ekxDQnlaWFFzSUhaaGJIVmxTWE5HZFc1amRHbHZiaXhjYmx4MFhIUmNkR1ZzWlcwZ1BTQjBhR2x6V3lBd0lGMDdYRzVjYmx4MFhIUnBaaUFvSUNGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0JsYkdWdElDa2dlMXh1WEhSY2RGeDBYSFJvYjI5cmN5QTlJR3BSZFdWeWVTNTJZV3hJYjI5cmMxc2daV3hsYlM1MGVYQmxJRjBnZkh4Y2JseDBYSFJjZEZ4MFhIUnFVWFZsY25rdWRtRnNTRzl2YTNOYklHVnNaVzB1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTQmRPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dhRzl2YTNNZ0ppWmNibHgwWEhSY2RGeDBYSFJjSW1kbGRGd2lJR2x1SUdodmIydHpJQ1ltWEc1Y2RGeDBYSFJjZEZ4MEtDQnlaWFFnUFNCb2IyOXJjeTVuWlhRb0lHVnNaVzBzSUZ3aWRtRnNkV1ZjSWlBcElDa2dJVDA5SUhWdVpHVm1hVzVsWkZ4dVhIUmNkRngwWEhRcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVYwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVYwSUQwZ1pXeGxiUzUyWVd4MVpUdGNibHh1WEhSY2RGeDBYSFF2THlCSVlXNWtiR1VnYlc5emRDQmpiMjF0YjI0Z2MzUnlhVzVuSUdOaGMyVnpYRzVjZEZ4MFhIUmNkR2xtSUNnZ2RIbHdaVzltSUhKbGRDQTlQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVYwTG5KbGNHeGhZMlVvSUhKeVpYUjFjbTRzSUZ3aVhDSWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRWhoYm1Sc1pTQmpZWE5sY3lCM2FHVnlaU0IyWVd4MVpTQnBjeUJ1ZFd4c0wzVnVaR1ZtSUc5eUlHNTFiV0psY2x4dVhIUmNkRngwWEhSeVpYUjFjbTRnY21WMElEMDlJRzUxYkd3Z1B5QmNJbHdpSURvZ2NtVjBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRtRnNkV1ZKYzBaMWJtTjBhVzl1SUQwZ2FYTkdkVzVqZEdsdmJpZ2dkbUZzZFdVZ0tUdGNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDQnBJQ2tnZTF4dVhIUmNkRngwZG1GeUlIWmhiRHRjYmx4dVhIUmNkRngwYVdZZ0tDQjBhR2x6TG01dlpHVlVlWEJsSUNFOVBTQXhJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDZ2dkbUZzZFdWSmMwWjFibU4wYVc5dUlDa2dlMXh1WEhSY2RGeDBYSFIyWVd3Z1BTQjJZV3gxWlM1allXeHNLQ0IwYUdsekxDQnBMQ0JxVVhWbGNua29JSFJvYVhNZ0tTNTJZV3dvS1NBcE8xeHVYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MGRtRnNJRDBnZG1Gc2RXVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUZSeVpXRjBJRzUxYkd3dmRXNWtaV1pwYm1Wa0lHRnpJRndpWENJN0lHTnZiblpsY25RZ2JuVnRZbVZ5Y3lCMGJ5QnpkSEpwYm1kY2JseDBYSFJjZEdsbUlDZ2dkbUZzSUQwOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSY2RIWmhiQ0E5SUZ3aVhDSTdYRzVjYmx4MFhIUmNkSDBnWld4elpTQnBaaUFvSUhSNWNHVnZaaUIyWVd3Z1BUMDlJRndpYm5WdFltVnlYQ0lnS1NCN1hHNWNkRngwWEhSY2RIWmhiQ0FyUFNCY0lsd2lPMXh1WEc1Y2RGeDBYSFI5SUdWc2MyVWdhV1lnS0NCQmNuSmhlUzVwYzBGeWNtRjVLQ0IyWVd3Z0tTQXBJSHRjYmx4MFhIUmNkRngwZG1Gc0lEMGdhbEYxWlhKNUxtMWhjQ2dnZG1Gc0xDQm1kVzVqZEdsdmJpZ2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJSFpoYkhWbElEMDlJRzUxYkd3Z1B5QmNJbHdpSURvZ2RtRnNkV1VnS3lCY0lsd2lPMXh1WEhSY2RGeDBYSFI5SUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHaHZiMnR6SUQwZ2FsRjFaWEo1TG5aaGJFaHZiMnR6V3lCMGFHbHpMblI1Y0dVZ1hTQjhmQ0JxVVhWbGNua3VkbUZzU0c5dmEzTmJJSFJvYVhNdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LU0JkTzF4dVhHNWNkRngwWEhRdkx5QkpaaUJ6WlhRZ2NtVjBkWEp1Y3lCMWJtUmxabWx1WldRc0lHWmhiR3dnWW1GamF5QjBieUJ1YjNKdFlXd2djMlYwZEdsdVoxeHVYSFJjZEZ4MGFXWWdLQ0FoYUc5dmEzTWdmSHdnSVNnZ1hDSnpaWFJjSWlCcGJpQm9iMjlyY3lBcElIeDhJR2h2YjJ0ekxuTmxkQ2dnZEdocGN5d2dkbUZzTENCY0luWmhiSFZsWENJZ0tTQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG5aaGJIVmxJRDBnZG1Gc08xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwZ0tUdGNibHgwZlZ4dWZTQXBPMXh1WEc1cVVYVmxjbmt1WlhoMFpXNWtLQ0I3WEc1Y2RIWmhiRWh2YjJ0ek9pQjdYRzVjZEZ4MGIzQjBhVzl1T2lCN1hHNWNkRngwWEhSblpYUTZJR1oxYm1OMGFXOXVLQ0JsYkdWdElDa2dlMXh1WEc1Y2RGeDBYSFJjZEhaaGNpQjJZV3dnUFNCcVVYVmxjbmt1Wm1sdVpDNWhkSFJ5S0NCbGJHVnRMQ0JjSW5aaGJIVmxYQ0lnS1R0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhaaGJDQWhQU0J1ZFd4c0lEOWNibHgwWEhSY2RGeDBYSFIyWVd3Z09seHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdQRDB4TUNBdElERXhJRzl1YkhsY2JseDBYSFJjZEZ4MFhIUXZMeUJ2Y0hScGIyNHVkR1Y0ZENCMGFISnZkM01nWlhoalpYQjBhVzl1Y3lBb0l6RTBOamcyTENBak1UUTROVGdwWEc1Y2RGeDBYSFJjZEZ4MEx5OGdVM1J5YVhBZ1lXNWtJR052Ykd4aGNITmxJSGRvYVhSbGMzQmhZMlZjYmx4MFhIUmNkRngwWEhRdkx5Qm9kSFJ3Y3pvdkwyaDBiV3d1YzNCbFl5NTNhR0YwZDJjdWIzSm5MeU56ZEhKcGNDMWhibVF0WTI5c2JHRndjMlV0ZDJocGRHVnpjR0ZqWlZ4dVhIUmNkRngwWEhSY2RITjBjbWx3UVc1a1EyOXNiR0Z3YzJVb0lHcFJkV1Z5ZVM1MFpYaDBLQ0JsYkdWdElDa2dLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMRnh1WEhSY2RITmxiR1ZqZERvZ2UxeHVYSFJjZEZ4MFoyVjBPaUJtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkRngwZG1GeUlIWmhiSFZsTENCdmNIUnBiMjRzSUdrc1hHNWNkRngwWEhSY2RGeDBiM0IwYVc5dWN5QTlJR1ZzWlcwdWIzQjBhVzl1Y3l4Y2JseDBYSFJjZEZ4MFhIUnBibVJsZUNBOUlHVnNaVzB1YzJWc1pXTjBaV1JKYm1SbGVDeGNibHgwWEhSY2RGeDBYSFJ2Ym1VZ1BTQmxiR1Z0TG5SNWNHVWdQVDA5SUZ3aWMyVnNaV04wTFc5dVpWd2lMRnh1WEhSY2RGeDBYSFJjZEhaaGJIVmxjeUE5SUc5dVpTQS9JRzUxYkd3Z09pQmJYU3hjYmx4MFhIUmNkRngwWEhSdFlYZ2dQU0J2Ym1VZ1B5QnBibVJsZUNBcklERWdPaUJ2Y0hScGIyNXpMbXhsYm1kMGFEdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lHbHVaR1Y0SUR3Z01DQXBJSHRjYmx4MFhIUmNkRngwWEhScElEMGdiV0Y0TzF4dVhHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBhU0E5SUc5dVpTQS9JR2x1WkdWNElEb2dNRHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCaGJHd2dkR2hsSUhObGJHVmpkR1ZrSUc5d2RHbHZibk5jYmx4MFhIUmNkRngwWm05eUlDZ2dPeUJwSUR3Z2JXRjRPeUJwS3lzZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYjNCMGFXOXVJRDBnYjNCMGFXOXVjMXNnYVNCZE8xeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1UzVndjRzl5ZERvZ1NVVWdQRDA1SUc5dWJIbGNibHgwWEhSY2RGeDBYSFF2THlCSlJUZ3RPU0JrYjJWemJpZDBJSFZ3WkdGMFpTQnpaV3hsWTNSbFpDQmhablJsY2lCbWIzSnRJSEpsYzJWMElDZ2pNalUxTVNsY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUNnZ2IzQjBhVzl1TG5ObGJHVmpkR1ZrSUh4OElHa2dQVDA5SUdsdVpHVjRJQ2tnSmlaY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhRdkx5QkViMjRuZENCeVpYUjFjbTRnYjNCMGFXOXVjeUIwYUdGMElHRnlaU0JrYVhOaFlteGxaQ0J2Y2lCcGJpQmhJR1JwYzJGaWJHVmtJRzl3ZEdkeWIzVndYRzVjZEZ4MFhIUmNkRngwWEhSY2RDRnZjSFJwYjI0dVpHbHpZV0pzWldRZ0ppWmNibHgwWEhSY2RGeDBYSFJjZEZ4MEtDQWhiM0IwYVc5dUxuQmhjbVZ1ZEU1dlpHVXVaR2x6WVdKc1pXUWdmSHhjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFFoYm05a1pVNWhiV1VvSUc5d2RHbHZiaTV3WVhKbGJuUk9iMlJsTENCY0ltOXdkR2R5YjNWd1hDSWdLU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkhaWFFnZEdobElITndaV05wWm1saklIWmhiSFZsSUdadmNpQjBhR1VnYjNCMGFXOXVYRzVjZEZ4MFhIUmNkRngwWEhSMllXeDFaU0E5SUdwUmRXVnllU2dnYjNCMGFXOXVJQ2t1ZG1Gc0tDazdYRzVjYmx4MFhIUmNkRngwWEhSY2RDOHZJRmRsSUdSdmJpZDBJRzVsWldRZ1lXNGdZWEp5WVhrZ1ptOXlJRzl1WlNCelpXeGxZM1J6WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUc5dVpTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlIWmhiSFZsTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJOZFd4MGFTMVRaV3hsWTNSeklISmxkSFZ5YmlCaGJpQmhjbkpoZVZ4dVhIUmNkRngwWEhSY2RGeDBkbUZzZFdWekxuQjFjMmdvSUhaaGJIVmxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJSFpoYkhWbGN6dGNibHgwWEhSY2RIMHNYRzVjYmx4MFhIUmNkSE5sZERvZ1puVnVZM1JwYjI0b0lHVnNaVzBzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwWEhSMllYSWdiM0IwYVc5dVUyVjBMQ0J2Y0hScGIyNHNYRzVjZEZ4MFhIUmNkRngwYjNCMGFXOXVjeUE5SUdWc1pXMHViM0IwYVc5dWN5eGNibHgwWEhSY2RGeDBYSFIyWVd4MVpYTWdQU0JxVVhWbGNua3ViV0ZyWlVGeWNtRjVLQ0IyWVd4MVpTQXBMRnh1WEhSY2RGeDBYSFJjZEdrZ1BTQnZjSFJwYjI1ekxteGxibWQwYUR0Y2JseHVYSFJjZEZ4MFhIUjNhR2xzWlNBb0lHa3RMU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnZjSFJwYjI0Z1BTQnZjSFJwYjI1eld5QnBJRjA3WEc1Y2JseDBYSFJjZEZ4MFhIUXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTFqYjI1a0xXRnpjMmxuYmlBcUwxeHVYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQnZjSFJwYjI0dWMyVnNaV04wWldRZ1BWeHVYSFJjZEZ4MFhIUmNkRngwYWxGMVpYSjVMbWx1UVhKeVlYa29JR3BSZFdWeWVTNTJZV3hJYjI5cmN5NXZjSFJwYjI0dVoyVjBLQ0J2Y0hScGIyNGdLU3dnZG1Gc2RXVnpJQ2tnUGlBdE1WeHVYSFJjZEZ4MFhIUmNkQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBiM0IwYVc5dVUyVjBJRDBnZEhKMVpUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZLaUJsYzJ4cGJuUXRaVzVoWW14bElHNXZMV052Ym1RdFlYTnphV2R1SUNvdlhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCR2IzSmpaU0JpY205M2MyVnljeUIwYnlCaVpXaGhkbVVnWTI5dWMybHpkR1Z1ZEd4NUlIZG9aVzRnYm05dUxXMWhkR05vYVc1bklIWmhiSFZsSUdseklITmxkRnh1WEhSY2RGeDBYSFJwWmlBb0lDRnZjSFJwYjI1VFpYUWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFpXeGxiUzV6Wld4bFkzUmxaRWx1WkdWNElEMGdMVEU3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhaaGJIVmxjenRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JuMGdLVHRjYmx4dUx5OGdVbUZrYVc5eklHRnVaQ0JqYUdWamEySnZlR1Z6SUdkbGRIUmxjaTl6WlhSMFpYSmNibXBSZFdWeWVTNWxZV05vS0NCYklGd2ljbUZrYVc5Y0lpd2dYQ0pqYUdWamEySnZlRndpSUYwc0lHWjFibU4wYVc5dUtDa2dlMXh1WEhScVVYVmxjbmt1ZG1Gc1NHOXZhM05iSUhSb2FYTWdYU0E5SUh0Y2JseDBYSFJ6WlhRNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCMllXeDFaU0FwSUh0Y2JseDBYSFJjZEdsbUlDZ2dRWEp5WVhrdWFYTkJjbkpoZVNnZ2RtRnNkV1VnS1NBcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlDZ2daV3hsYlM1amFHVmphMlZrSUQwZ2FsRjFaWEo1TG1sdVFYSnlZWGtvSUdwUmRXVnllU2dnWld4bGJTQXBMblpoYkNncExDQjJZV3gxWlNBcElENGdMVEVnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMDdYRzVjZEdsbUlDZ2dJWE4xY0hCdmNuUXVZMmhsWTJ0UGJpQXBJSHRjYmx4MFhIUnFVWFZsY25rdWRtRnNTRzl2YTNOYklIUm9hWE1nWFM1blpYUWdQU0JtZFc1amRHbHZiaWdnWld4bGJTQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TG1kbGRFRjBkSEpwWW5WMFpTZ2dYQ0oyWVd4MVpWd2lJQ2tnUFQwOUlHNTFiR3dnUHlCY0ltOXVYQ0lnT2lCbGJHVnRMblpoYkhWbE8xeHVYSFJjZEgwN1hHNWNkSDFjYm4wZ0tUdGNibHh1WEc1Y2JseHVMeThnVW1WMGRYSnVJR3BSZFdWeWVTQm1iM0lnWVhSMGNtbGlkWFJsY3kxdmJteDVJR2x1WTJ4MWMybHZibHh1WEc1Y2JuTjFjSEJ2Y25RdVptOWpkWE5wYmlBOUlGd2liMjVtYjJOMWMybHVYQ0lnYVc0Z2QybHVaRzkzTzF4dVhHNWNiblpoY2lCeVptOWpkWE5OYjNKd2FDQTlJQzllS0Q4NlptOWpkWE5wYm1adlkzVnpmR1p2WTNWemIzVjBZbXgxY2lra0x5eGNibHgwYzNSdmNGQnliM0JoWjJGMGFXOXVRMkZzYkdKaFkyc2dQU0JtZFc1amRHbHZiaWdnWlNBcElIdGNibHgwWEhSbExuTjBiM0JRY205d1lXZGhkR2x2YmlncE8xeHVYSFI5TzF4dVhHNXFVWFZsY25rdVpYaDBaVzVrS0NCcVVYVmxjbmt1WlhabGJuUXNJSHRjYmx4dVhIUjBjbWxuWjJWeU9pQm1kVzVqZEdsdmJpZ2daWFpsYm5Rc0lHUmhkR0VzSUdWc1pXMHNJRzl1YkhsSVlXNWtiR1Z5Y3lBcElIdGNibHh1WEhSY2RIWmhjaUJwTENCamRYSXNJSFJ0Y0N3Z1luVmlZbXhsVkhsd1pTd2diMjUwZVhCbExDQm9ZVzVrYkdVc0lITndaV05wWVd3c0lHeGhjM1JGYkdWdFpXNTBMRnh1WEhSY2RGeDBaWFpsYm5SUVlYUm9JRDBnV3lCbGJHVnRJSHg4SUdSdlkzVnRaVzUwSUYwc1hHNWNkRngwWEhSMGVYQmxJRDBnYUdGelQzZHVMbU5oYkd3b0lHVjJaVzUwTENCY0luUjVjR1ZjSWlBcElEOGdaWFpsYm5RdWRIbHdaU0E2SUdWMlpXNTBMRnh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeUE5SUdoaGMwOTNiaTVqWVd4c0tDQmxkbVZ1ZEN3Z1hDSnVZVzFsYzNCaFkyVmNJaUFwSUQ4Z1pYWmxiblF1Ym1GdFpYTndZV05sTG5Od2JHbDBLQ0JjSWk1Y0lpQXBJRG9nVzEwN1hHNWNibHgwWEhSamRYSWdQU0JzWVhOMFJXeGxiV1Z1ZENBOUlIUnRjQ0E5SUdWc1pXMGdQU0JsYkdWdElIeDhJR1J2WTNWdFpXNTBPMXh1WEc1Y2RGeDBMeThnUkc5dUozUWdaRzhnWlhabGJuUnpJRzl1SUhSbGVIUWdZVzVrSUdOdmJXMWxiblFnYm05a1pYTmNibHgwWEhScFppQW9JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJRE1nZkh3Z1pXeGxiUzV1YjJSbFZIbHdaU0E5UFQwZ09DQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5Qm1iMk4xY3k5aWJIVnlJRzF2Y25Cb2N5QjBieUJtYjJOMWMybHVMMjkxZERzZ1pXNXpkWEpsSUhkbEozSmxJRzV2ZENCbWFYSnBibWNnZEdobGJTQnlhV2RvZENCdWIzZGNibHgwWEhScFppQW9JSEptYjJOMWMwMXZjbkJvTG5SbGMzUW9JSFI1Y0dVZ0t5QnFVWFZsY25rdVpYWmxiblF1ZEhKcFoyZGxjbVZrSUNrZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDQjBlWEJsTG1sdVpHVjRUMllvSUZ3aUxsd2lJQ2tnUGlBdE1TQXBJSHRjYmx4dVhIUmNkRngwTHk4Z1RtRnRaWE53WVdObFpDQjBjbWxuWjJWeU95QmpjbVZoZEdVZ1lTQnlaV2RsZUhBZ2RHOGdiV0YwWTJnZ1pYWmxiblFnZEhsd1pTQnBiaUJvWVc1a2JHVW9LVnh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeUE5SUhSNWNHVXVjM0JzYVhRb0lGd2lMbHdpSUNrN1hHNWNkRngwWEhSMGVYQmxJRDBnYm1GdFpYTndZV05sY3k1emFHbG1kQ2dwTzF4dVhIUmNkRngwYm1GdFpYTndZV05sY3k1emIzSjBLQ2s3WEc1Y2RGeDBmVnh1WEhSY2RHOXVkSGx3WlNBOUlIUjVjR1V1YVc1a1pYaFBaaWdnWENJNlhDSWdLU0E4SURBZ0ppWWdYQ0p2Ymx3aUlDc2dkSGx3WlR0Y2JseHVYSFJjZEM4dklFTmhiR3hsY2lCallXNGdjR0Z6Y3lCcGJpQmhJR3BSZFdWeWVTNUZkbVZ1ZENCdlltcGxZM1FzSUU5aWFtVmpkQ3dnYjNJZ2FuVnpkQ0JoYmlCbGRtVnVkQ0IwZVhCbElITjBjbWx1WjF4dVhIUmNkR1YyWlc1MElEMGdaWFpsYm5SYklHcFJkV1Z5ZVM1bGVIQmhibVJ2SUYwZ1AxeHVYSFJjZEZ4MFpYWmxiblFnT2x4dVhIUmNkRngwYm1WM0lHcFJkV1Z5ZVM1RmRtVnVkQ2dnZEhsd1pTd2dkSGx3Wlc5bUlHVjJaVzUwSUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUdWMlpXNTBJQ2s3WEc1Y2JseDBYSFF2THlCVWNtbG5aMlZ5SUdKcGRHMWhjMnM2SUNZZ01TQm1iM0lnYm1GMGFYWmxJR2hoYm1Sc1pYSnpPeUFtSURJZ1ptOXlJR3BSZFdWeWVTQW9ZV3gzWVhseklIUnlkV1VwWEc1Y2RGeDBaWFpsYm5RdWFYTlVjbWxuWjJWeUlEMGdiMjVzZVVoaGJtUnNaWEp6SUQ4Z01pQTZJRE03WEc1Y2RGeDBaWFpsYm5RdWJtRnRaWE53WVdObElEMGdibUZ0WlhOd1lXTmxjeTVxYjJsdUtDQmNJaTVjSWlBcE8xeHVYSFJjZEdWMlpXNTBMbkp1WVcxbGMzQmhZMlVnUFNCbGRtVnVkQzV1WVcxbGMzQmhZMlVnUDF4dVhIUmNkRngwYm1WM0lGSmxaMFY0Y0NnZ1hDSW9YbnhjWEZ4Y0xpbGNJaUFySUc1aGJXVnpjR0ZqWlhNdWFtOXBiaWdnWENKY1hGeGNMaWcvT2k0cVhGeGNYQzU4S1Z3aUlDa2dLeUJjSWloY1hGeGNMbndrS1Z3aUlDa2dPbHh1WEhSY2RGeDBiblZzYkR0Y2JseHVYSFJjZEM4dklFTnNaV0Z1SUhWd0lIUm9aU0JsZG1WdWRDQnBiaUJqWVhObElHbDBJR2x6SUdKbGFXNW5JSEpsZFhObFpGeHVYSFJjZEdWMlpXNTBMbkpsYzNWc2RDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUnBaaUFvSUNGbGRtVnVkQzUwWVhKblpYUWdLU0I3WEc1Y2RGeDBYSFJsZG1WdWRDNTBZWEpuWlhRZ1BTQmxiR1Z0TzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVOc2IyNWxJR0Z1ZVNCcGJtTnZiV2x1WnlCa1lYUmhJR0Z1WkNCd2NtVndaVzVrSUhSb1pTQmxkbVZ1ZEN3Z1kzSmxZWFJwYm1jZ2RHaGxJR2hoYm1Sc1pYSWdZWEpuSUd4cGMzUmNibHgwWEhSa1lYUmhJRDBnWkdGMFlTQTlQU0J1ZFd4c0lEOWNibHgwWEhSY2RGc2daWFpsYm5RZ1hTQTZYRzVjZEZ4MFhIUnFVWFZsY25rdWJXRnJaVUZ5Y21GNUtDQmtZWFJoTENCYklHVjJaVzUwSUYwZ0tUdGNibHh1WEhSY2RDOHZJRUZzYkc5M0lITndaV05wWVd3Z1pYWmxiblJ6SUhSdklHUnlZWGNnYjNWMGMybGtaU0IwYUdVZ2JHbHVaWE5jYmx4MFhIUnpjR1ZqYVdGc0lEMGdhbEYxWlhKNUxtVjJaVzUwTG5Od1pXTnBZV3hiSUhSNWNHVWdYU0I4ZkNCN2ZUdGNibHgwWEhScFppQW9JQ0Z2Ym14NVNHRnVaR3hsY25NZ0ppWWdjM0JsWTJsaGJDNTBjbWxuWjJWeUlDWW1JSE53WldOcFlXd3VkSEpwWjJkbGNpNWhjSEJzZVNnZ1pXeGxiU3dnWkdGMFlTQXBJRDA5UFNCbVlXeHpaU0FwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJFWlhSbGNtMXBibVVnWlhabGJuUWdjSEp2Y0dGbllYUnBiMjRnY0dGMGFDQnBiaUJoWkhaaGJtTmxMQ0J3WlhJZ1Z6TkRJR1YyWlc1MGN5QnpjR1ZqSUNnak9UazFNU2xjYmx4MFhIUXZMeUJDZFdKaWJHVWdkWEFnZEc4Z1pHOWpkVzFsYm5Rc0lIUm9aVzRnZEc4Z2QybHVaRzkzT3lCM1lYUmphQ0JtYjNJZ1lTQm5iRzlpWVd3Z2IzZHVaWEpFYjJOMWJXVnVkQ0IyWVhJZ0tDTTVOekkwS1Z4dVhIUmNkR2xtSUNnZ0lXOXViSGxJWVc1a2JHVnljeUFtSmlBaGMzQmxZMmxoYkM1dWIwSjFZbUpzWlNBbUppQWhhWE5YYVc1a2IzY29JR1ZzWlcwZ0tTQXBJSHRjYmx4dVhIUmNkRngwWW5WaVlteGxWSGx3WlNBOUlITndaV05wWVd3dVpHVnNaV2RoZEdWVWVYQmxJSHg4SUhSNWNHVTdYRzVjZEZ4MFhIUnBaaUFvSUNGeVptOWpkWE5OYjNKd2FDNTBaWE4wS0NCaWRXSmliR1ZVZVhCbElDc2dkSGx3WlNBcElDa2dlMXh1WEhSY2RGeDBYSFJqZFhJZ1BTQmpkWEl1Y0dGeVpXNTBUbTlrWlR0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdadmNpQW9JRHNnWTNWeU95QmpkWElnUFNCamRYSXVjR0Z5Wlc1MFRtOWtaU0FwSUh0Y2JseDBYSFJjZEZ4MFpYWmxiblJRWVhSb0xuQjFjMmdvSUdOMWNpQXBPMXh1WEhSY2RGeDBYSFIwYlhBZ1BTQmpkWEk3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFOXViSGtnWVdSa0lIZHBibVJ2ZHlCcFppQjNaU0JuYjNRZ2RHOGdaRzlqZFcxbGJuUWdLR1V1Wnk0c0lHNXZkQ0J3YkdGcGJpQnZZbW9nYjNJZ1pHVjBZV05vWldRZ1JFOU5LVnh1WEhSY2RGeDBhV1lnS0NCMGJYQWdQVDA5SUNnZ1pXeGxiUzV2ZDI1bGNrUnZZM1Z0Wlc1MElIeDhJR1J2WTNWdFpXNTBJQ2tnS1NCN1hHNWNkRngwWEhSY2RHVjJaVzUwVUdGMGFDNXdkWE5vS0NCMGJYQXVaR1ZtWVhWc2RGWnBaWGNnZkh3Z2RHMXdMbkJoY21WdWRGZHBibVJ2ZHlCOGZDQjNhVzVrYjNjZ0tUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkdhWEpsSUdoaGJtUnNaWEp6SUc5dUlIUm9aU0JsZG1WdWRDQndZWFJvWEc1Y2RGeDBhU0E5SURBN1hHNWNkRngwZDJocGJHVWdLQ0FvSUdOMWNpQTlJR1YyWlc1MFVHRjBhRnNnYVNzcklGMGdLU0FtSmlBaFpYWmxiblF1YVhOUWNtOXdZV2RoZEdsdmJsTjBiM0J3WldRb0tTQXBJSHRjYmx4MFhIUmNkR3hoYzNSRmJHVnRaVzUwSUQwZ1kzVnlPMXh1WEhSY2RGeDBaWFpsYm5RdWRIbHdaU0E5SUdrZ1BpQXhJRDljYmx4MFhIUmNkRngwWW5WaVlteGxWSGx3WlNBNlhHNWNkRngwWEhSY2RITndaV05wWVd3dVltbHVaRlI1Y0dVZ2ZId2dkSGx3WlR0Y2JseHVYSFJjZEZ4MEx5OGdhbEYxWlhKNUlHaGhibVJzWlhKY2JseDBYSFJjZEdoaGJtUnNaU0E5SUNnZ1pHRjBZVkJ5YVhZdVoyVjBLQ0JqZFhJc0lGd2laWFpsYm5SelhDSWdLU0I4ZkNCN2ZTQXBXeUJsZG1WdWRDNTBlWEJsSUYwZ0ppWmNibHgwWEhSY2RGeDBaR0YwWVZCeWFYWXVaMlYwS0NCamRYSXNJRndpYUdGdVpHeGxYQ0lnS1R0Y2JseDBYSFJjZEdsbUlDZ2dhR0Z1Wkd4bElDa2dlMXh1WEhSY2RGeDBYSFJvWVc1a2JHVXVZWEJ3Ykhrb0lHTjFjaXdnWkdGMFlTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCT1lYUnBkbVVnYUdGdVpHeGxjbHh1WEhSY2RGeDBhR0Z1Wkd4bElEMGdiMjUwZVhCbElDWW1JR04xY2xzZ2IyNTBlWEJsSUYwN1hHNWNkRngwWEhScFppQW9JR2hoYm1Sc1pTQW1KaUJvWVc1a2JHVXVZWEJ3YkhrZ0ppWWdZV05qWlhCMFJHRjBZU2dnWTNWeUlDa2dLU0I3WEc1Y2RGeDBYSFJjZEdWMlpXNTBMbkpsYzNWc2RDQTlJR2hoYm1Sc1pTNWhjSEJzZVNnZ1kzVnlMQ0JrWVhSaElDazdYRzVjZEZ4MFhIUmNkR2xtSUNnZ1pYWmxiblF1Y21WemRXeDBJRDA5UFNCbVlXeHpaU0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUmNkR1YyWlc1MExuUjVjR1VnUFNCMGVYQmxPMXh1WEc1Y2RGeDBMeThnU1dZZ2JtOWliMlI1SUhCeVpYWmxiblJsWkNCMGFHVWdaR1ZtWVhWc2RDQmhZM1JwYjI0c0lHUnZJR2wwSUc1dmQxeHVYSFJjZEdsbUlDZ2dJVzl1YkhsSVlXNWtiR1Z5Y3lBbUppQWhaWFpsYm5RdWFYTkVaV1poZFd4MFVISmxkbVZ1ZEdWa0tDa2dLU0I3WEc1Y2JseDBYSFJjZEdsbUlDZ2dLQ0FoYzNCbFkybGhiQzVmWkdWbVlYVnNkQ0I4ZkZ4dVhIUmNkRngwWEhSemNHVmphV0ZzTGw5a1pXWmhkV3gwTG1Gd2NHeDVLQ0JsZG1WdWRGQmhkR2d1Y0c5d0tDa3NJR1JoZEdFZ0tTQTlQVDBnWm1Gc2MyVWdLU0FtSmx4dVhIUmNkRngwWEhSaFkyTmxjSFJFWVhSaEtDQmxiR1Z0SUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1EyRnNiQ0JoSUc1aGRHbDJaU0JFVDAwZ2JXVjBhRzlrSUc5dUlIUm9aU0IwWVhKblpYUWdkMmwwYUNCMGFHVWdjMkZ0WlNCdVlXMWxJR0Z6SUhSb1pTQmxkbVZ1ZEM1Y2JseDBYSFJjZEZ4MEx5OGdSRzl1SjNRZ1pHOGdaR1ZtWVhWc2RDQmhZM1JwYjI1eklHOXVJSGRwYm1SdmR5d2dkR2hoZENkeklIZG9aWEpsSUdkc2IySmhiQ0IyWVhKcFlXSnNaWE1nWW1VZ0tDTTJNVGN3S1Z4dVhIUmNkRngwWEhScFppQW9JRzl1ZEhsd1pTQW1KaUJwYzBaMWJtTjBhVzl1S0NCbGJHVnRXeUIwZVhCbElGMGdLU0FtSmlBaGFYTlhhVzVrYjNjb0lHVnNaVzBnS1NBcElIdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFUnZiaWQwSUhKbExYUnlhV2RuWlhJZ1lXNGdiMjVHVDA4Z1pYWmxiblFnZDJobGJpQjNaU0JqWVd4c0lHbDBjeUJHVDA4b0tTQnRaWFJvYjJSY2JseDBYSFJjZEZ4MFhIUjBiWEFnUFNCbGJHVnRXeUJ2Ym5SNWNHVWdYVHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2dnZEcxd0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFpXeGxiVnNnYjI1MGVYQmxJRjBnUFNCdWRXeHNPMXh1WEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkQzh2SUZCeVpYWmxiblFnY21VdGRISnBaMmRsY21sdVp5QnZaaUIwYUdVZ2MyRnRaU0JsZG1WdWRDd2djMmx1WTJVZ2QyVWdZV3h5WldGa2VTQmlkV0ppYkdWa0lHbDBJR0ZpYjNabFhHNWNkRngwWEhSY2RGeDBhbEYxWlhKNUxtVjJaVzUwTG5SeWFXZG5aWEpsWkNBOUlIUjVjR1U3WEc1Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUdWMlpXNTBMbWx6VUhKdmNHRm5ZWFJwYjI1VGRHOXdjR1ZrS0NrZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSc1lYTjBSV3hsYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDQjBlWEJsTENCemRHOXdVSEp2Y0dGbllYUnBiMjVEWVd4c1ltRmpheUFwTzF4dVhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEdWc1pXMWJJSFI1Y0dVZ1hTZ3BPMXh1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0JsZG1WdWRDNXBjMUJ5YjNCaFoyRjBhVzl1VTNSdmNIQmxaQ2dwSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYkdGemRFVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ2dkSGx3WlN3Z2MzUnZjRkJ5YjNCaFoyRjBhVzl1UTJGc2JHSmhZMnNnS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhScVVYVmxjbmt1WlhabGJuUXVkSEpwWjJkbGNtVmtJRDBnZFc1a1pXWnBibVZrTzF4dVhHNWNkRngwWEhSY2RGeDBhV1lnS0NCMGJYQWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0V3lCdmJuUjVjR1VnWFNBOUlIUnRjRHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnWlhabGJuUXVjbVZ6ZFd4ME8xeHVYSFI5TEZ4dVhHNWNkQzh2SUZCcFoyZDVZbUZqYXlCdmJpQmhJR1J2Ym05eUlHVjJaVzUwSUhSdklITnBiWFZzWVhSbElHRWdaR2xtWm1WeVpXNTBJRzl1WlZ4dVhIUXZMeUJWYzJWa0lHOXViSGtnWm05eUlHQm1iMk4xY3locGJpQjhJRzkxZENsZ0lHVjJaVzUwYzF4dVhIUnphVzExYkdGMFpUb2dablZ1WTNScGIyNG9JSFI1Y0dVc0lHVnNaVzBzSUdWMlpXNTBJQ2tnZTF4dVhIUmNkSFpoY2lCbElEMGdhbEYxWlhKNUxtVjRkR1Z1WkNoY2JseDBYSFJjZEc1bGR5QnFVWFZsY25rdVJYWmxiblFvS1N4Y2JseDBYSFJjZEdWMlpXNTBMRnh1WEhSY2RGeDBlMXh1WEhSY2RGeDBYSFIwZVhCbE9pQjBlWEJsTEZ4dVhIUmNkRngwWEhScGMxTnBiWFZzWVhSbFpEb2dkSEoxWlZ4dVhIUmNkRngwZlZ4dVhIUmNkQ2s3WEc1Y2JseDBYSFJxVVhWbGNua3VaWFpsYm5RdWRISnBaMmRsY2lnZ1pTd2diblZzYkN3Z1pXeGxiU0FwTzF4dVhIUjlYRzVjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVp1TG1WNGRHVnVaQ2dnZTF4dVhHNWNkSFJ5YVdkblpYSTZJR1oxYm1OMGFXOXVLQ0IwZVhCbExDQmtZWFJoSUNrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtVmhZMmdvSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMblJ5YVdkblpYSW9JSFI1Y0dVc0lHUmhkR0VzSUhSb2FYTWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2RIMHNYRzVjZEhSeWFXZG5aWEpJWVc1a2JHVnlPaUJtZFc1amRHbHZiaWdnZEhsd1pTd2daR0YwWVNBcElIdGNibHgwWEhSMllYSWdaV3hsYlNBOUlIUm9hWE5iSURBZ1hUdGNibHgwWEhScFppQW9JR1ZzWlcwZ0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG1WMlpXNTBMblJ5YVdkblpYSW9JSFI1Y0dVc0lHUmhkR0VzSUdWc1pXMHNJSFJ5ZFdVZ0tUdGNibHgwWEhSOVhHNWNkSDFjYm4wZ0tUdGNibHh1WEc0dkx5QlRkWEJ3YjNKME9pQkdhWEpsWm05NElEdzlORFJjYmk4dklFWnBjbVZtYjNnZ1pHOWxjMjRuZENCb1lYWmxJR1p2WTNWektHbHVJSHdnYjNWMEtTQmxkbVZ1ZEhOY2JpOHZJRkpsYkdGMFpXUWdkR2xqYTJWMElDMGdhSFIwY0hNNkx5OWlkV2Q2YVd4c1lTNXRiM3BwYkd4aExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlOamczTnpnM1hHNHZMMXh1THk4Z1UzVndjRzl5ZERvZ1EyaHliMjFsSUR3OU5EZ2dMU0EwT1N3Z1UyRm1ZWEpwSUR3OU9TNHdJQzBnT1M0eFhHNHZMeUJtYjJOMWN5aHBiaUI4SUc5MWRDa2daWFpsYm5SeklHWnBjbVVnWVdaMFpYSWdabTlqZFhNZ0ppQmliSFZ5SUdWMlpXNTBjeXhjYmk4dklIZG9hV05vSUdseklITndaV01nZG1sdmJHRjBhVzl1SUMwZ2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZSRTlOTFV4bGRtVnNMVE10UlhabGJuUnpMeU5sZG1WdWRITXRabTlqZFhObGRtVnVkQzFsZG1WdWRDMXZjbVJsY2x4dUx5OGdVbVZzWVhSbFpDQjBhV05yWlhRZ0xTQm9kSFJ3Y3pvdkwySjFaM011WTJoeWIyMXBkVzB1YjNKbkwzQXZZMmh5YjIxcGRXMHZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMDBORGs0TlRkY2JtbG1JQ2dnSVhOMWNIQnZjblF1Wm05amRYTnBiaUFwSUh0Y2JseDBhbEYxWlhKNUxtVmhZMmdvSUhzZ1ptOWpkWE02SUZ3aVptOWpkWE5wYmx3aUxDQmliSFZ5T2lCY0ltWnZZM1Z6YjNWMFhDSWdmU3dnWm5WdVkzUnBiMjRvSUc5eWFXY3NJR1pwZUNBcElIdGNibHh1WEhSY2RDOHZJRUYwZEdGamFDQmhJSE5wYm1kc1pTQmpZWEIwZFhKcGJtY2dhR0Z1Wkd4bGNpQnZiaUIwYUdVZ1pHOWpkVzFsYm5RZ2QyaHBiR1VnYzI5dFpXOXVaU0IzWVc1MGN5Qm1iMk4xYzJsdUwyWnZZM1Z6YjNWMFhHNWNkRngwZG1GeUlHaGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpZ2daWFpsYm5RZ0tTQjdYRzVjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1YzJsdGRXeGhkR1VvSUdacGVDd2daWFpsYm5RdWRHRnlaMlYwTENCcVVYVmxjbmt1WlhabGJuUXVabWw0S0NCbGRtVnVkQ0FwSUNrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEdwUmRXVnllUzVsZG1WdWRDNXpjR1ZqYVdGc1d5Qm1hWGdnWFNBOUlIdGNibHgwWEhSY2RITmxkSFZ3T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBkbUZ5SUdSdll5QTlJSFJvYVhNdWIzZHVaWEpFYjJOMWJXVnVkQ0I4ZkNCMGFHbHpMRnh1WEhSY2RGeDBYSFJjZEdGMGRHRmphR1Z6SUQwZ1pHRjBZVkJ5YVhZdVlXTmpaWE56S0NCa2IyTXNJR1pwZUNBcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNnZ0lXRjBkR0ZqYUdWeklDa2dlMXh1WEhSY2RGeDBYSFJjZEdSdll5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDQnZjbWxuTENCb1lXNWtiR1Z5TENCMGNuVmxJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFpHRjBZVkJ5YVhZdVlXTmpaWE56S0NCa2IyTXNJR1pwZUN3Z0tDQmhkSFJoWTJobGN5QjhmQ0F3SUNrZ0t5QXhJQ2s3WEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwZEdWaGNtUnZkMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnWkc5aklEMGdkR2hwY3k1dmQyNWxja1J2WTNWdFpXNTBJSHg4SUhSb2FYTXNYRzVjZEZ4MFhIUmNkRngwWVhSMFlXTm9aWE1nUFNCa1lYUmhVSEpwZGk1aFkyTmxjM01vSUdSdll5d2dabWw0SUNrZ0xTQXhPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJV0YwZEdGamFHVnpJQ2tnZTF4dVhIUmNkRngwWEhSY2RHUnZZeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NCdmNtbG5MQ0JvWVc1a2JHVnlMQ0IwY25WbElDazdYRzVjZEZ4MFhIUmNkRngwWkdGMFlWQnlhWFl1Y21WdGIzWmxLQ0JrYjJNc0lHWnBlQ0FwTzF4dVhHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBaR0YwWVZCeWFYWXVZV05qWlhOektDQmtiMk1zSUdacGVDd2dZWFIwWVdOb1pYTWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDA3WEc1Y2RIMGdLVHRjYm4xY2JuWmhjaUJzYjJOaGRHbHZiaUE5SUhkcGJtUnZkeTVzYjJOaGRHbHZianRjYmx4dWRtRnlJRzV2Ym1ObElEMGdSR0YwWlM1dWIzY29LVHRjYmx4dWRtRnlJSEp4ZFdWeWVTQTlJQ2dnTDF4Y1B5OGdLVHRjYmx4dVhHNWNiaTh2SUVOeWIzTnpMV0p5YjNkelpYSWdlRzFzSUhCaGNuTnBibWRjYm1wUmRXVnllUzV3WVhKelpWaE5UQ0E5SUdaMWJtTjBhVzl1S0NCa1lYUmhJQ2tnZTF4dVhIUjJZWElnZUcxc08xeHVYSFJwWmlBb0lDRmtZWFJoSUh4OElIUjVjR1Z2WmlCa1lYUmhJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCdWRXeHNPMXh1WEhSOVhHNWNibHgwTHk4Z1UzVndjRzl5ZERvZ1NVVWdPU0F0SURFeElHOXViSGxjYmx4MEx5OGdTVVVnZEdoeWIzZHpJRzl1SUhCaGNuTmxSbkp2YlZOMGNtbHVaeUIzYVhSb0lHbHVkbUZzYVdRZ2FXNXdkWFF1WEc1Y2RIUnllU0I3WEc1Y2RGeDBlRzFzSUQwZ0tDQnVaWGNnZDJsdVpHOTNMa1JQVFZCaGNuTmxjaWdwSUNrdWNHRnljMlZHY205dFUzUnlhVzVuS0NCa1lYUmhMQ0JjSW5SbGVIUXZlRzFzWENJZ0tUdGNibHgwZlNCallYUmphQ0FvSUdVZ0tTQjdYRzVjZEZ4MGVHMXNJRDBnZFc1a1pXWnBibVZrTzF4dVhIUjlYRzVjYmx4MGFXWWdLQ0FoZUcxc0lIeDhJSGh0YkM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTZ2dYQ0p3WVhKelpYSmxjbkp2Y2x3aUlDa3ViR1Z1WjNSb0lDa2dlMXh1WEhSY2RHcFJkV1Z5ZVM1bGNuSnZjaWdnWENKSmJuWmhiR2xrSUZoTlREb2dYQ0lnS3lCa1lYUmhJQ2s3WEc1Y2RIMWNibHgwY21WMGRYSnVJSGh0YkR0Y2JuMDdYRzVjYmx4dWRtRnlYRzVjZEhKaWNtRmphMlYwSUQwZ0wxeGNXMXhjWFNRdkxGeHVYSFJ5UTFKTVJpQTlJQzljWEhJL1hGeHVMMmNzWEc1Y2RISnpkV0p0YVhSMFpYSlVlWEJsY3lBOUlDOWVLRDg2YzNWaWJXbDBmR0oxZEhSdmJueHBiV0ZuWlh4eVpYTmxkSHhtYVd4bEtTUXZhU3hjYmx4MGNuTjFZbTFwZEhSaFlteGxJRDBnTDE0b1B6cHBibkIxZEh4elpXeGxZM1I4ZEdWNGRHRnlaV0Y4YTJWNVoyVnVLUzlwTzF4dVhHNW1kVzVqZEdsdmJpQmlkV2xzWkZCaGNtRnRjeWdnY0hKbFptbDRMQ0J2WW1vc0lIUnlZV1JwZEdsdmJtRnNMQ0JoWkdRZ0tTQjdYRzVjZEhaaGNpQnVZVzFsTzF4dVhHNWNkR2xtSUNnZ1FYSnlZWGt1YVhOQmNuSmhlU2dnYjJKcUlDa2dLU0I3WEc1Y2JseDBYSFF2THlCVFpYSnBZV3hwZW1VZ1lYSnlZWGtnYVhSbGJTNWNibHgwWEhScVVYVmxjbmt1WldGamFDZ2diMkpxTENCbWRXNWpkR2x2YmlnZ2FTd2dkaUFwSUh0Y2JseDBYSFJjZEdsbUlDZ2dkSEpoWkdsMGFXOXVZV3dnZkh3Z2NtSnlZV05yWlhRdWRHVnpkQ2dnY0hKbFptbDRJQ2tnS1NCN1hHNWNibHgwWEhSY2RGeDBMeThnVkhKbFlYUWdaV0ZqYUNCaGNuSmhlU0JwZEdWdElHRnpJR0VnYzJOaGJHRnlMbHh1WEhSY2RGeDBYSFJoWkdRb0lIQnlaV1pwZUN3Z2RpQXBPMXh1WEc1Y2RGeDBYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBYSFJjZEM4dklFbDBaVzBnYVhNZ2JtOXVMWE5qWVd4aGNpQW9ZWEp5WVhrZ2IzSWdiMkpxWldOMEtTd2daVzVqYjJSbElHbDBjeUJ1ZFcxbGNtbGpJR2x1WkdWNExseHVYSFJjZEZ4MFhIUmlkV2xzWkZCaGNtRnRjeWhjYmx4MFhIUmNkRngwWEhSd2NtVm1hWGdnS3lCY0lsdGNJaUFySUNnZ2RIbHdaVzltSUhZZ1BUMDlJRndpYjJKcVpXTjBYQ0lnSmlZZ2RpQWhQU0J1ZFd4c0lEOGdhU0E2SUZ3aVhDSWdLU0FySUZ3aVhWd2lMRnh1WEhSY2RGeDBYSFJjZEhZc1hHNWNkRngwWEhSY2RGeDBkSEpoWkdsMGFXOXVZV3dzWEc1Y2RGeDBYSFJjZEZ4MFlXUmtYRzVjZEZ4MFhIUmNkQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU0FwTzF4dVhHNWNkSDBnWld4elpTQnBaaUFvSUNGMGNtRmthWFJwYjI1aGJDQW1KaUIwYjFSNWNHVW9JRzlpYWlBcElEMDlQU0JjSW05aWFtVmpkRndpSUNrZ2UxeHVYRzVjZEZ4MEx5OGdVMlZ5YVdGc2FYcGxJRzlpYW1WamRDQnBkR1Z0TGx4dVhIUmNkR1p2Y2lBb0lHNWhiV1VnYVc0Z2IySnFJQ2tnZTF4dVhIUmNkRngwWW5WcGJHUlFZWEpoYlhNb0lIQnlaV1pwZUNBcklGd2lXMXdpSUNzZ2JtRnRaU0FySUZ3aVhWd2lMQ0J2WW1wYklHNWhiV1VnWFN3Z2RISmhaR2wwYVc5dVlXd3NJR0ZrWkNBcE8xeHVYSFJjZEgxY2JseHVYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBMeThnVTJWeWFXRnNhWHBsSUhOallXeGhjaUJwZEdWdExseHVYSFJjZEdGa1pDZ2djSEpsWm1sNExDQnZZbW9nS1R0Y2JseDBmVnh1ZlZ4dVhHNHZMeUJUWlhKcFlXeHBlbVVnWVc0Z1lYSnlZWGtnYjJZZ1ptOXliU0JsYkdWdFpXNTBjeUJ2Y2lCaElITmxkQ0J2Wmx4dUx5OGdhMlY1TDNaaGJIVmxjeUJwYm5SdklHRWdjWFZsY25rZ2MzUnlhVzVuWEc1cVVYVmxjbmt1Y0dGeVlXMGdQU0JtZFc1amRHbHZiaWdnWVN3Z2RISmhaR2wwYVc5dVlXd2dLU0I3WEc1Y2RIWmhjaUJ3Y21WbWFYZ3NYRzVjZEZ4MGN5QTlJRnRkTEZ4dVhIUmNkR0ZrWkNBOUlHWjFibU4wYVc5dUtDQnJaWGtzSUhaaGJIVmxUM0pHZFc1amRHbHZiaUFwSUh0Y2JseHVYSFJjZEZ4MEx5OGdTV1lnZG1Gc2RXVWdhWE1nWVNCbWRXNWpkR2x2Yml3Z2FXNTJiMnRsSUdsMElHRnVaQ0IxYzJVZ2FYUnpJSEpsZEhWeWJpQjJZV3gxWlZ4dVhIUmNkRngwZG1GeUlIWmhiSFZsSUQwZ2FYTkdkVzVqZEdsdmJpZ2dkbUZzZFdWUGNrWjFibU4wYVc5dUlDa2dQMXh1WEhSY2RGeDBYSFIyWVd4MVpVOXlSblZ1WTNScGIyNG9LU0E2WEc1Y2RGeDBYSFJjZEhaaGJIVmxUM0pHZFc1amRHbHZianRjYmx4dVhIUmNkRngwYzFzZ2N5NXNaVzVuZEdnZ1hTQTlJR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2dnYTJWNUlDa2dLeUJjSWoxY0lpQXJYRzVjZEZ4MFhIUmNkR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2dnZG1Gc2RXVWdQVDBnYm5Wc2JDQS9JRndpWENJZ09pQjJZV3gxWlNBcE8xeHVYSFJjZEgwN1hHNWNibHgwTHk4Z1NXWWdZVzRnWVhKeVlYa2dkMkZ6SUhCaGMzTmxaQ0JwYml3Z1lYTnpkVzFsSUhSb1lYUWdhWFFnYVhNZ1lXNGdZWEp5WVhrZ2IyWWdabTl5YlNCbGJHVnRaVzUwY3k1Y2JseDBhV1lnS0NCQmNuSmhlUzVwYzBGeWNtRjVLQ0JoSUNrZ2ZId2dLQ0JoTG1weGRXVnllU0FtSmlBaGFsRjFaWEo1TG1selVHeGhhVzVQWW1wbFkzUW9JR0VnS1NBcElDa2dlMXh1WEc1Y2RGeDBMeThnVTJWeWFXRnNhWHBsSUhSb1pTQm1iM0p0SUdWc1pXMWxiblJ6WEc1Y2RGeDBhbEYxWlhKNUxtVmhZMmdvSUdFc0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBZV1JrS0NCMGFHbHpMbTVoYldVc0lIUm9hWE11ZG1Gc2RXVWdLVHRjYmx4MFhIUjlJQ2s3WEc1Y2JseDBmU0JsYkhObElIdGNibHh1WEhSY2RDOHZJRWxtSUhSeVlXUnBkR2x2Ym1Gc0xDQmxibU52WkdVZ2RHaGxJRndpYjJ4a1hDSWdkMkY1SUNoMGFHVWdkMkY1SURFdU15NHlJRzl5SUc5c1pHVnlYRzVjZEZ4MEx5OGdaR2xrSUdsMEtTd2diM1JvWlhKM2FYTmxJR1Z1WTI5a1pTQndZWEpoYlhNZ2NtVmpkWEp6YVhabGJIa3VYRzVjZEZ4MFptOXlJQ2dnY0hKbFptbDRJR2x1SUdFZ0tTQjdYRzVjZEZ4MFhIUmlkV2xzWkZCaGNtRnRjeWdnY0hKbFptbDRMQ0JoV3lCd2NtVm1hWGdnWFN3Z2RISmhaR2wwYVc5dVlXd3NJR0ZrWkNBcE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RDOHZJRkpsZEhWeWJpQjBhR1VnY21WemRXeDBhVzVuSUhObGNtbGhiR2w2WVhScGIyNWNibHgwY21WMGRYSnVJSE11YW05cGJpZ2dYQ0ltWENJZ0tUdGNibjA3WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwYzJWeWFXRnNhWHBsT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnYWxGMVpYSjVMbkJoY21GdEtDQjBhR2x6TG5ObGNtbGhiR2w2WlVGeWNtRjVLQ2tnS1R0Y2JseDBmU3hjYmx4MGMyVnlhV0ZzYVhwbFFYSnlZWGs2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtMWhjQ2dnWm5WdVkzUnBiMjRvS1NCN1hHNWNibHgwWEhSY2RDOHZJRU5oYmlCaFpHUWdjSEp2Y0VodmIyc2dabTl5SUZ3aVpXeGxiV1Z1ZEhOY0lpQjBieUJtYVd4MFpYSWdiM0lnWVdSa0lHWnZjbTBnWld4bGJXVnVkSE5jYmx4MFhIUmNkSFpoY2lCbGJHVnRaVzUwY3lBOUlHcFJkV1Z5ZVM1d2NtOXdLQ0IwYUdsekxDQmNJbVZzWlcxbGJuUnpYQ0lnS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJsYkdWdFpXNTBjeUEvSUdwUmRXVnllUzV0WVd0bFFYSnlZWGtvSUdWc1pXMWxiblJ6SUNrZ09pQjBhR2x6TzF4dVhIUmNkSDBnS1Z4dVhIUmNkQzVtYVd4MFpYSW9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwZG1GeUlIUjVjR1VnUFNCMGFHbHpMblI1Y0dVN1hHNWNibHgwWEhSY2RDOHZJRlZ6WlNBdWFYTW9JRndpT21ScGMyRmliR1ZrWENJZ0tTQnpieUIwYUdGMElHWnBaV3hrYzJWMFcyUnBjMkZpYkdWa1hTQjNiM0pyYzF4dVhIUmNkRngwY21WMGRYSnVJSFJvYVhNdWJtRnRaU0FtSmlBaGFsRjFaWEo1S0NCMGFHbHpJQ2t1YVhNb0lGd2lPbVJwYzJGaWJHVmtYQ0lnS1NBbUpseHVYSFJjZEZ4MFhIUnljM1ZpYldsMGRHRmliR1V1ZEdWemRDZ2dkR2hwY3k1dWIyUmxUbUZ0WlNBcElDWW1JQ0Z5YzNWaWJXbDBkR1Z5Vkhsd1pYTXVkR1Z6ZENnZ2RIbHdaU0FwSUNZbVhHNWNkRngwWEhSY2RDZ2dkR2hwY3k1amFHVmphMlZrSUh4OElDRnlZMmhsWTJ0aFlteGxWSGx3WlM1MFpYTjBLQ0IwZVhCbElDa2dLVHRjYmx4MFhIUjlJQ2xjYmx4MFhIUXViV0Z3S0NCbWRXNWpkR2x2YmlnZ2FTd2daV3hsYlNBcElIdGNibHgwWEhSY2RIWmhjaUIyWVd3Z1BTQnFVWFZsY25rb0lIUm9hWE1nS1M1MllXd29LVHRjYmx4dVhIUmNkRngwYVdZZ0tDQjJZV3dnUFQwZ2JuVnNiQ0FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNnZ1FYSnlZWGt1YVhOQmNuSmhlU2dnZG1Gc0lDa2dLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJxVVhWbGNua3ViV0Z3S0NCMllXd3NJR1oxYm1OMGFXOXVLQ0IyWVd3Z0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJSHNnYm1GdFpUb2daV3hsYlM1dVlXMWxMQ0IyWVd4MVpUb2dkbUZzTG5KbGNHeGhZMlVvSUhKRFVreEdMQ0JjSWx4Y2NseGNibHdpSUNrZ2ZUdGNibHgwWEhSY2RGeDBmU0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTRnZXlCdVlXMWxPaUJsYkdWdExtNWhiV1VzSUhaaGJIVmxPaUIyWVd3dWNtVndiR0ZqWlNnZ2NrTlNURVlzSUZ3aVhGeHlYRnh1WENJZ0tTQjlPMXh1WEhSY2RIMGdLUzVuWlhRb0tUdGNibHgwZlZ4dWZTQXBPMXh1WEc1Y2JuWmhjbHh1WEhSeU1qQWdQU0F2SlRJd0wyY3NYRzVjZEhKb1lYTm9JRDBnTHlNdUtpUXZMRnh1WEhSeVlXNTBhVU5oWTJobElEMGdMeWhiUHlaZEtWODlXMTRtWFNvdkxGeHVYSFJ5YUdWaFpHVnljeUE5SUM5ZUtDNHFQeWs2V3lCY1hIUmRLaWhiWGx4Y2NseGNibDBxS1NRdmJXY3NYRzVjYmx4MEx5OGdJemMyTlRNc0lDTTRNVEkxTENBak9ERTFNam9nYkc5allXd2djSEp2ZEc5amIyd2daR1YwWldOMGFXOXVYRzVjZEhKc2IyTmhiRkJ5YjNSdlkyOXNJRDBnTDE0b1B6cGhZbTkxZEh4aGNIQjhZWEJ3TFhOMGIzSmhaMlY4TGlzdFpYaDBaVzV6YVc5dWZHWnBiR1Y4Y21WemZIZHBaR2RsZENrNkpDOHNYRzVjZEhKdWIwTnZiblJsYm5RZ1BTQXZYaWcvT2tkRlZIeElSVUZFS1NRdkxGeHVYSFJ5Y0hKdmRHOWpiMndnUFNBdlhseGNMMXhjTHk4c1hHNWNibHgwTHlvZ1VISmxabWxzZEdWeWMxeHVYSFFnS2lBeEtTQlVhR1Y1SUdGeVpTQjFjMlZtZFd3Z2RHOGdhVzUwY205a2RXTmxJR04xYzNSdmJTQmtZWFJoVkhsd1pYTWdLSE5sWlNCaGFtRjRMMnB6YjI1d0xtcHpJR1p2Y2lCaGJpQmxlR0Z0Y0d4bEtWeHVYSFFnS2lBeUtTQlVhR1Z6WlNCaGNtVWdZMkZzYkdWa09seHVYSFFnS2lBZ0lDQXRJRUpGUms5U1JTQmhjMnRwYm1jZ1ptOXlJR0VnZEhKaGJuTndiM0owWEc1Y2RDQXFJQ0FnSUMwZ1FVWlVSVklnY0dGeVlXMGdjMlZ5YVdGc2FYcGhkR2x2YmlBb2N5NWtZWFJoSUdseklHRWdjM1J5YVc1bklHbG1JSE11Y0hKdlkyVnpjMFJoZEdFZ2FYTWdkSEoxWlNsY2JseDBJQ29nTXlrZ2EyVjVJR2x6SUhSb1pTQmtZWFJoVkhsd1pWeHVYSFFnS2lBMEtTQjBhR1VnWTJGMFkyaGhiR3dnYzNsdFltOXNJRndpS2x3aUlHTmhiaUJpWlNCMWMyVmtYRzVjZENBcUlEVXBJR1Y0WldOMWRHbHZiaUIzYVd4c0lITjBZWEowSUhkcGRHZ2dkSEpoYm5Od2IzSjBJR1JoZEdGVWVYQmxJR0Z1WkNCVVNFVk9JR052Ym5ScGJuVmxJR1J2ZDI0Z2RHOGdYQ0lxWENJZ2FXWWdibVZsWkdWa1hHNWNkQ0FxTDF4dVhIUndjbVZtYVd4MFpYSnpJRDBnZTMwc1hHNWNibHgwTHlvZ1ZISmhibk53YjNKMGN5QmlhVzVrYVc1bmMxeHVYSFFnS2lBeEtTQnJaWGtnYVhNZ2RHaGxJR1JoZEdGVWVYQmxYRzVjZENBcUlESXBJSFJvWlNCallYUmphR0ZzYkNCemVXMWliMndnWENJcVhDSWdZMkZ1SUdKbElIVnpaV1JjYmx4MElDb2dNeWtnYzJWc1pXTjBhVzl1SUhkcGJHd2djM1JoY25RZ2QybDBhQ0IwY21GdWMzQnZjblFnWkdGMFlWUjVjR1VnWVc1a0lGUklSVTRnWjI4Z2RHOGdYQ0lxWENJZ2FXWWdibVZsWkdWa1hHNWNkQ0FxTDF4dVhIUjBjbUZ1YzNCdmNuUnpJRDBnZTMwc1hHNWNibHgwTHk4Z1FYWnZhV1FnWTI5dGJXVnVkQzF3Y205c2IyY2dZMmhoY2lCelpYRjFaVzVqWlNBb0l6RXdNRGs0S1RzZ2JYVnpkQ0JoY0hCbFlYTmxJR3hwYm5RZ1lXNWtJR1YyWVdSbElHTnZiWEJ5WlhOemFXOXVYRzVjZEdGc2JGUjVjR1Z6SUQwZ1hDSXFMMXdpTG1OdmJtTmhkQ2dnWENJcVhDSWdLU3hjYmx4dVhIUXZMeUJCYm1Ob2IzSWdkR0ZuSUdadmNpQndZWEp6YVc1bklIUm9aU0JrYjJOMWJXVnVkQ0J2Y21sbmFXNWNibHgwYjNKcFoybHVRVzVqYUc5eUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnZ1hDSmhYQ0lnS1R0Y2JseDBiM0pwWjJsdVFXNWphRzl5TG1oeVpXWWdQU0JzYjJOaGRHbHZiaTVvY21WbU8xeHVYRzR2THlCQ1lYTmxJRndpWTI5dWMzUnlkV04wYjNKY0lpQm1iM0lnYWxGMVpYSjVMbUZxWVhoUWNtVm1hV3gwWlhJZ1lXNWtJR3BSZFdWeWVTNWhhbUY0VkhKaGJuTndiM0owWEc1bWRXNWpkR2x2YmlCaFpHUlViMUJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lITjBjblZqZEhWeVpTQXBJSHRjYmx4dVhIUXZMeUJrWVhSaFZIbHdaVVY0Y0hKbGMzTnBiMjRnYVhNZ2IzQjBhVzl1WVd3Z1lXNWtJR1JsWm1GMWJIUnpJSFJ2SUZ3aUtsd2lYRzVjZEhKbGRIVnliaUJtZFc1amRHbHZiaWdnWkdGMFlWUjVjR1ZGZUhCeVpYTnphVzl1TENCbWRXNWpJQ2tnZTF4dVhHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ1pHRjBZVlI1Y0dWRmVIQnlaWE56YVc5dUlDRTlQU0JjSW5OMGNtbHVaMXdpSUNrZ2UxeHVYSFJjZEZ4MFpuVnVZeUE5SUdSaGRHRlVlWEJsUlhod2NtVnpjMmx2Ymp0Y2JseDBYSFJjZEdSaGRHRlVlWEJsUlhod2NtVnpjMmx2YmlBOUlGd2lLbHdpTzF4dVhIUmNkSDFjYmx4dVhIUmNkSFpoY2lCa1lYUmhWSGx3WlN4Y2JseDBYSFJjZEdrZ1BTQXdMRnh1WEhSY2RGeDBaR0YwWVZSNWNHVnpJRDBnWkdGMFlWUjVjR1ZGZUhCeVpYTnphVzl1TG5SdlRHOTNaWEpEWVhObEtDa3ViV0YwWTJnb0lISnViM1JvZEcxc2QyaHBkR1VnS1NCOGZDQmJYVHRjYmx4dVhIUmNkR2xtSUNnZ2FYTkdkVzVqZEdsdmJpZ2dablZ1WXlBcElDa2dlMXh1WEc1Y2RGeDBYSFF2THlCR2IzSWdaV0ZqYUNCa1lYUmhWSGx3WlNCcGJpQjBhR1VnWkdGMFlWUjVjR1ZGZUhCeVpYTnphVzl1WEc1Y2RGeDBYSFIzYUdsc1pTQW9JQ2dnWkdGMFlWUjVjR1VnUFNCa1lYUmhWSGx3WlhOYklHa3JLeUJkSUNrZ0tTQjdYRzVjYmx4MFhIUmNkRngwTHk4Z1VISmxjR1Z1WkNCcFppQnlaWEYxWlhOMFpXUmNibHgwWEhSY2RGeDBhV1lnS0NCa1lYUmhWSGx3WlZzZ01DQmRJRDA5UFNCY0lpdGNJaUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmtZWFJoVkhsd1pTQTlJR1JoZEdGVWVYQmxMbk5zYVdObEtDQXhJQ2tnZkh3Z1hDSXFYQ0k3WEc1Y2RGeDBYSFJjZEZ4MEtDQnpkSEoxWTNSMWNtVmJJR1JoZEdGVWVYQmxJRjBnUFNCemRISjFZM1IxY21WYklHUmhkR0ZVZVhCbElGMGdmSHdnVzEwZ0tTNTFibk5vYVdaMEtDQm1kVzVqSUNrN1hHNWNibHgwWEhSY2RGeDBMeThnVDNSb1pYSjNhWE5sSUdGd2NHVnVaRnh1WEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZENnZ2MzUnlkV04wZFhKbFd5QmtZWFJoVkhsd1pTQmRJRDBnYzNSeWRXTjBkWEpsV3lCa1lYUmhWSGx3WlNCZElIeDhJRnRkSUNrdWNIVnphQ2dnWm5WdVl5QXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOU8xeHVmVnh1WEc0dkx5QkNZWE5sSUdsdWMzQmxZM1JwYjI0Z1puVnVZM1JwYjI0Z1ptOXlJSEJ5WldacGJIUmxjbk1nWVc1a0lIUnlZVzV6Y0c5eWRITmNibVoxYm1OMGFXOXVJR2x1YzNCbFkzUlFjbVZtYVd4MFpYSnpUM0pVY21GdWMzQnZjblJ6S0NCemRISjFZM1IxY21Vc0lHOXdkR2x2Ym5Nc0lHOXlhV2RwYm1Gc1QzQjBhVzl1Y3l3Z2FuRllTRklnS1NCN1hHNWNibHgwZG1GeUlHbHVjM0JsWTNSbFpDQTlJSHQ5TEZ4dVhIUmNkSE5sWld0cGJtZFVjbUZ1YzNCdmNuUWdQU0FvSUhOMGNuVmpkSFZ5WlNBOVBUMGdkSEpoYm5Od2IzSjBjeUFwTzF4dVhHNWNkR1oxYm1OMGFXOXVJR2x1YzNCbFkzUW9JR1JoZEdGVWVYQmxJQ2tnZTF4dVhIUmNkSFpoY2lCelpXeGxZM1JsWkR0Y2JseDBYSFJwYm5Od1pXTjBaV1JiSUdSaGRHRlVlWEJsSUYwZ1BTQjBjblZsTzF4dVhIUmNkR3BSZFdWeWVTNWxZV05vS0NCemRISjFZM1IxY21WYklHUmhkR0ZVZVhCbElGMGdmSHdnVzEwc0lHWjFibU4wYVc5dUtDQmZMQ0J3Y21WbWFXeDBaWEpQY2taaFkzUnZjbmtnS1NCN1hHNWNkRngwWEhSMllYSWdaR0YwWVZSNWNHVlBjbFJ5WVc1emNHOXlkQ0E5SUhCeVpXWnBiSFJsY2s5eVJtRmpkRzl5ZVNnZ2IzQjBhVzl1Y3l3Z2IzSnBaMmx1WVd4UGNIUnBiMjV6TENCcWNWaElVaUFwTzF4dVhIUmNkRngwYVdZZ0tDQjBlWEJsYjJZZ1pHRjBZVlI1Y0dWUGNsUnlZVzV6Y0c5eWRDQTlQVDBnWENKemRISnBibWRjSWlBbUpseHVYSFJjZEZ4MFhIUWhjMlZsYTJsdVoxUnlZVzV6Y0c5eWRDQW1KaUFoYVc1emNHVmpkR1ZrV3lCa1lYUmhWSGx3WlU5eVZISmhibk53YjNKMElGMGdLU0I3WEc1Y2JseDBYSFJjZEZ4MGIzQjBhVzl1Y3k1a1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ1pHRjBZVlI1Y0dWUGNsUnlZVzV6Y0c5eWRDQXBPMXh1WEhSY2RGeDBYSFJwYm5Od1pXTjBLQ0JrWVhSaFZIbHdaVTl5VkhKaGJuTndiM0owSUNrN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkSDBnWld4elpTQnBaaUFvSUhObFpXdHBibWRVY21GdWMzQnZjblFnS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlBaEtDQnpaV3hsWTNSbFpDQTlJR1JoZEdGVWVYQmxUM0pVY21GdWMzQnZjblFnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5SUNrN1hHNWNkRngwY21WMGRYSnVJSE5sYkdWamRHVmtPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJR2x1YzNCbFkzUW9JRzl3ZEdsdmJuTXVaR0YwWVZSNWNHVnpXeUF3SUYwZ0tTQjhmQ0FoYVc1emNHVmpkR1ZrV3lCY0lpcGNJaUJkSUNZbUlHbHVjM0JsWTNRb0lGd2lLbHdpSUNrN1hHNTlYRzVjYmk4dklFRWdjM0JsWTJsaGJDQmxlSFJsYm1RZ1ptOXlJR0ZxWVhnZ2IzQjBhVzl1YzF4dUx5OGdkR2hoZENCMFlXdGxjeUJjSW1ac1lYUmNJaUJ2Y0hScGIyNXpJQ2h1YjNRZ2RHOGdZbVVnWkdWbGNDQmxlSFJsYm1SbFpDbGNiaTh2SUVacGVHVnpJQ001T0RnM1hHNW1kVzVqZEdsdmJpQmhhbUY0UlhoMFpXNWtLQ0IwWVhKblpYUXNJSE55WXlBcElIdGNibHgwZG1GeUlHdGxlU3dnWkdWbGNDeGNibHgwWEhSbWJHRjBUM0IwYVc5dWN5QTlJR3BSZFdWeWVTNWhhbUY0VTJWMGRHbHVaM011Wm14aGRFOXdkR2x2Ym5NZ2ZId2dlMzA3WEc1Y2JseDBabTl5SUNnZ2EyVjVJR2x1SUhOeVl5QXBJSHRjYmx4MFhIUnBaaUFvSUhOeVkxc2dhMlY1SUYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJjZENnZ1pteGhkRTl3ZEdsdmJuTmJJR3RsZVNCZElEOGdkR0Z5WjJWMElEb2dLQ0JrWldWd0lIeDhJQ2dnWkdWbGNDQTlJSHQ5SUNrZ0tTQXBXeUJyWlhrZ1hTQTlJSE55WTFzZ2EyVjVJRjA3WEc1Y2RGeDBmVnh1WEhSOVhHNWNkR2xtSUNnZ1pHVmxjQ0FwSUh0Y2JseDBYSFJxVVhWbGNua3VaWGgwWlc1a0tDQjBjblZsTENCMFlYSm5aWFFzSUdSbFpYQWdLVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUIwWVhKblpYUTdYRzU5WEc1Y2JpOHFJRWhoYm1Sc1pYTWdjbVZ6Y0c5dWMyVnpJSFJ2SUdGdUlHRnFZWGdnY21WeGRXVnpkRHBjYmlBcUlDMGdabWx1WkhNZ2RHaGxJSEpwWjJoMElHUmhkR0ZVZVhCbElDaHRaV1JwWVhSbGN5QmlaWFIzWldWdUlHTnZiblJsYm5RdGRIbHdaU0JoYm1RZ1pYaHdaV04wWldRZ1pHRjBZVlI1Y0dVcFhHNGdLaUF0SUhKbGRIVnlibk1nZEdobElHTnZjbkpsYzNCdmJtUnBibWNnY21WemNHOXVjMlZjYmlBcUwxeHVablZ1WTNScGIyNGdZV3BoZUVoaGJtUnNaVkpsYzNCdmJuTmxjeWdnY3l3Z2FuRllTRklzSUhKbGMzQnZibk5sY3lBcElIdGNibHh1WEhSMllYSWdZM1FzSUhSNWNHVXNJR1pwYm1Gc1JHRjBZVlI1Y0dVc0lHWnBjbk4wUkdGMFlWUjVjR1VzWEc1Y2RGeDBZMjl1ZEdWdWRITWdQU0J6TG1OdmJuUmxiblJ6TEZ4dVhIUmNkR1JoZEdGVWVYQmxjeUE5SUhNdVpHRjBZVlI1Y0dWek8xeHVYRzVjZEM4dklGSmxiVzkyWlNCaGRYUnZJR1JoZEdGVWVYQmxJR0Z1WkNCblpYUWdZMjl1ZEdWdWRDMTBlWEJsSUdsdUlIUm9aU0J3Y205alpYTnpYRzVjZEhkb2FXeGxJQ2dnWkdGMFlWUjVjR1Z6V3lBd0lGMGdQVDA5SUZ3aUtsd2lJQ2tnZTF4dVhIUmNkR1JoZEdGVWVYQmxjeTV6YUdsbWRDZ3BPMXh1WEhSY2RHbG1JQ2dnWTNRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FwSUh0Y2JseDBYSFJjZEdOMElEMGdjeTV0YVcxbFZIbHdaU0I4ZkNCcWNWaElVaTVuWlhSU1pYTndiMjV6WlVobFlXUmxjaWdnWENKRGIyNTBaVzUwTFZSNWNHVmNJaUFwTzF4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4dklFTm9aV05ySUdsbUlIZGxKM0psSUdSbFlXeHBibWNnZDJsMGFDQmhJR3R1YjNkdUlHTnZiblJsYm5RdGRIbHdaVnh1WEhScFppQW9JR04wSUNrZ2UxeHVYSFJjZEdadmNpQW9JSFI1Y0dVZ2FXNGdZMjl1ZEdWdWRITWdLU0I3WEc1Y2RGeDBYSFJwWmlBb0lHTnZiblJsYm5Seld5QjBlWEJsSUYwZ0ppWWdZMjl1ZEdWdWRITmJJSFI1Y0dVZ1hTNTBaWE4wS0NCamRDQXBJQ2tnZTF4dVhIUmNkRngwWEhSa1lYUmhWSGx3WlhNdWRXNXphR2xtZENnZ2RIbHdaU0FwTzF4dVhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFF2THlCRGFHVmpheUIwYnlCelpXVWdhV1lnZDJVZ2FHRjJaU0JoSUhKbGMzQnZibk5sSUdadmNpQjBhR1VnWlhod1pXTjBaV1FnWkdGMFlWUjVjR1ZjYmx4MGFXWWdLQ0JrWVhSaFZIbHdaWE5iSURBZ1hTQnBiaUJ5WlhOd2IyNXpaWE1nS1NCN1hHNWNkRngwWm1sdVlXeEVZWFJoVkhsd1pTQTlJR1JoZEdGVWVYQmxjMXNnTUNCZE8xeHVYSFI5SUdWc2MyVWdlMXh1WEc1Y2RGeDBMeThnVkhKNUlHTnZiblpsY25ScFlteGxJR1JoZEdGVWVYQmxjMXh1WEhSY2RHWnZjaUFvSUhSNWNHVWdhVzRnY21WemNHOXVjMlZ6SUNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0FoWkdGMFlWUjVjR1Z6V3lBd0lGMGdmSHdnY3k1amIyNTJaWEowWlhKeld5QjBlWEJsSUNzZ1hDSWdYQ0lnS3lCa1lYUmhWSGx3WlhOYklEQWdYU0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUm1hVzVoYkVSaGRHRlVlWEJsSUQwZ2RIbHdaVHRjYmx4MFhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnBaaUFvSUNGbWFYSnpkRVJoZEdGVWVYQmxJQ2tnZTF4dVhIUmNkRngwWEhSbWFYSnpkRVJoZEdGVWVYQmxJRDBnZEhsd1pUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlBjaUJxZFhOMElIVnpaU0JtYVhKemRDQnZibVZjYmx4MFhIUm1hVzVoYkVSaGRHRlVlWEJsSUQwZ1ptbHVZV3hFWVhSaFZIbHdaU0I4ZkNCbWFYSnpkRVJoZEdGVWVYQmxPMXh1WEhSOVhHNWNibHgwTHk4Z1NXWWdkMlVnWm05MWJtUWdZU0JrWVhSaFZIbHdaVnh1WEhRdkx5QlhaU0JoWkdRZ2RHaGxJR1JoZEdGVWVYQmxJSFJ2SUhSb1pTQnNhWE4wSUdsbUlHNWxaV1JsWkZ4dVhIUXZMeUJoYm1RZ2NtVjBkWEp1SUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuSUhKbGMzQnZibk5sWEc1Y2RHbG1JQ2dnWm1sdVlXeEVZWFJoVkhsd1pTQXBJSHRjYmx4MFhIUnBaaUFvSUdacGJtRnNSR0YwWVZSNWNHVWdJVDA5SUdSaGRHRlVlWEJsYzFzZ01DQmRJQ2tnZTF4dVhIUmNkRngwWkdGMFlWUjVjR1Z6TG5WdWMyaHBablFvSUdacGJtRnNSR0YwWVZSNWNHVWdLVHRjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUhKbGMzQnZibk5sYzFzZ1ptbHVZV3hFWVhSaFZIbHdaU0JkTzF4dVhIUjlYRzU5WEc1Y2JpOHFJRU5vWVdsdUlHTnZiblpsY25OcGIyNXpJR2RwZG1WdUlIUm9aU0J5WlhGMVpYTjBJR0Z1WkNCMGFHVWdiM0pwWjJsdVlXd2djbVZ6Y0c5dWMyVmNiaUFxSUVGc2MyOGdjMlYwY3lCMGFHVWdjbVZ6Y0c5dWMyVllXRmdnWm1sbGJHUnpJRzl1SUhSb1pTQnFjVmhJVWlCcGJuTjBZVzVqWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYW1GNFEyOXVkbVZ5ZENnZ2N5d2djbVZ6Y0c5dWMyVXNJR3B4V0VoU0xDQnBjMU4xWTJObGMzTWdLU0I3WEc1Y2RIWmhjaUJqYjI1Mk1pd2dZM1Z5Y21WdWRDd2dZMjl1ZGl3Z2RHMXdMQ0J3Y21WMkxGeHVYSFJjZEdOdmJuWmxjblJsY25NZ1BTQjdmU3hjYmx4dVhIUmNkQzh2SUZkdmNtc2dkMmwwYUNCaElHTnZjSGtnYjJZZ1pHRjBZVlI1Y0dWeklHbHVJR05oYzJVZ2QyVWdibVZsWkNCMGJ5QnRiMlJwWm5rZ2FYUWdabTl5SUdOdmJuWmxjbk5wYjI1Y2JseDBYSFJrWVhSaFZIbHdaWE1nUFNCekxtUmhkR0ZVZVhCbGN5NXpiR2xqWlNncE8xeHVYRzVjZEM4dklFTnlaV0YwWlNCamIyNTJaWEowWlhKeklHMWhjQ0IzYVhSb0lHeHZkMlZ5WTJGelpXUWdhMlY1YzF4dVhIUnBaaUFvSUdSaGRHRlVlWEJsYzFzZ01TQmRJQ2tnZTF4dVhIUmNkR1p2Y2lBb0lHTnZibllnYVc0Z2N5NWpiMjUyWlhKMFpYSnpJQ2tnZTF4dVhIUmNkRngwWTI5dWRtVnlkR1Z5YzFzZ1kyOXVkaTUwYjB4dmQyVnlRMkZ6WlNncElGMGdQU0J6TG1OdmJuWmxjblJsY25OYklHTnZibllnWFR0Y2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSamRYSnlaVzUwSUQwZ1pHRjBZVlI1Y0dWekxuTm9hV1owS0NrN1hHNWNibHgwTHk4Z1EyOXVkbVZ5ZENCMGJ5QmxZV05vSUhObGNYVmxiblJwWVd3Z1pHRjBZVlI1Y0dWY2JseDBkMmhwYkdVZ0tDQmpkWEp5Wlc1MElDa2dlMXh1WEc1Y2RGeDBhV1lnS0NCekxuSmxjM0J2Ym5ObFJtbGxiR1J6V3lCamRYSnlaVzUwSUYwZ0tTQjdYRzVjZEZ4MFhIUnFjVmhJVWxzZ2N5NXlaWE53YjI1elpVWnBaV3hrYzFzZ1kzVnljbVZ1ZENCZElGMGdQU0J5WlhOd2IyNXpaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJCY0hCc2VTQjBhR1VnWkdGMFlVWnBiSFJsY2lCcFppQndjbTkyYVdSbFpGeHVYSFJjZEdsbUlDZ2dJWEJ5WlhZZ0ppWWdhWE5UZFdOalpYTnpJQ1ltSUhNdVpHRjBZVVpwYkhSbGNpQXBJSHRjYmx4MFhIUmNkSEpsYzNCdmJuTmxJRDBnY3k1a1lYUmhSbWxzZEdWeUtDQnlaWE53YjI1elpTd2djeTVrWVhSaFZIbHdaU0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEJ5WlhZZ1BTQmpkWEp5Wlc1ME8xeHVYSFJjZEdOMWNuSmxiblFnUFNCa1lYUmhWSGx3WlhNdWMyaHBablFvS1R0Y2JseHVYSFJjZEdsbUlDZ2dZM1Z5Y21WdWRDQXBJSHRjYmx4dVhIUmNkRngwTHk4Z1ZHaGxjbVVuY3lCdmJteDVJSGR2Y21zZ2RHOGdaRzhnYVdZZ1kzVnljbVZ1ZENCa1lYUmhWSGx3WlNCcGN5QnViMjR0WVhWMGIxeHVYSFJjZEZ4MGFXWWdLQ0JqZFhKeVpXNTBJRDA5UFNCY0lpcGNJaUFwSUh0Y2JseHVYSFJjZEZ4MFhIUmpkWEp5Wlc1MElEMGdjSEpsZGp0Y2JseHVYSFJjZEZ4MEx5OGdRMjl1ZG1WeWRDQnlaWE53YjI1elpTQnBaaUJ3Y21WMklHUmhkR0ZVZVhCbElHbHpJRzV2YmkxaGRYUnZJR0Z1WkNCa2FXWm1aWEp6SUdaeWIyMGdZM1Z5Y21WdWRGeHVYSFJjZEZ4MGZTQmxiSE5sSUdsbUlDZ2djSEpsZGlBaFBUMGdYQ0lxWENJZ0ppWWdjSEpsZGlBaFBUMGdZM1Z5Y21WdWRDQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5QlRaV1ZySUdFZ1pHbHlaV04wSUdOdmJuWmxjblJsY2x4dVhIUmNkRngwWEhSamIyNTJJRDBnWTI5dWRtVnlkR1Z5YzFzZ2NISmxkaUFySUZ3aUlGd2lJQ3NnWTNWeWNtVnVkQ0JkSUh4OElHTnZiblpsY25SbGNuTmJJRndpS2lCY0lpQXJJR04xY25KbGJuUWdYVHRjYmx4dVhIUmNkRngwWEhRdkx5QkpaaUJ1YjI1bElHWnZkVzVrTENCelpXVnJJR0VnY0dGcGNseHVYSFJjZEZ4MFhIUnBaaUFvSUNGamIyNTJJQ2tnZTF4dVhIUmNkRngwWEhSY2RHWnZjaUFvSUdOdmJuWXlJR2x1SUdOdmJuWmxjblJsY25NZ0tTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RDOHZJRWxtSUdOdmJuWXlJRzkxZEhCMWRITWdZM1Z5Y21WdWRGeHVYSFJjZEZ4MFhIUmNkRngwZEcxd0lEMGdZMjl1ZGpJdWMzQnNhWFFvSUZ3aUlGd2lJQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhSdGNGc2dNU0JkSUQwOVBTQmpkWEp5Wlc1MElDa2dlMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVsbUlIQnlaWFlnWTJGdUlHSmxJR052Ym5abGNuUmxaQ0IwYnlCaFkyTmxjSFJsWkNCcGJuQjFkRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmpiMjUySUQwZ1kyOXVkbVZ5ZEdWeWMxc2djSEpsZGlBcklGd2lJRndpSUNzZ2RHMXdXeUF3SUYwZ1hTQjhmRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5abGNuUmxjbk5iSUZ3aUtpQmNJaUFySUhSdGNGc2dNQ0JkSUYwN1hHNWNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2dZMjl1ZGlBcElIdGNibHh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkQzh2SUVOdmJtUmxibk5sSUdWeGRXbDJZV3hsYm1ObElHTnZiblpsY25SbGNuTmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUdOdmJuWWdQVDA5SUhSeWRXVWdLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSamIyNTJJRDBnWTI5dWRtVnlkR1Z5YzFzZ1kyOXVkaklnWFR0Y2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRTkwYUdWeWQybHpaU3dnYVc1elpYSjBJSFJvWlNCcGJuUmxjbTFsWkdsaGRHVWdaR0YwWVZSNWNHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0JqYjI1MlpYSjBaWEp6V3lCamIyNTJNaUJkSUNFOVBTQjBjblZsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBZM1Z5Y21WdWRDQTlJSFJ0Y0ZzZ01DQmRPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWkdGMFlWUjVjR1Z6TG5WdWMyaHBablFvSUhSdGNGc2dNU0JkSUNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnUVhCd2JIa2dZMjl1ZG1WeWRHVnlJQ2hwWmlCdWIzUWdZVzRnWlhGMWFYWmhiR1Z1WTJVcFhHNWNkRngwWEhSY2RHbG1JQ2dnWTI5dWRpQWhQVDBnZEhKMVpTQXBJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRlZ1YkdWemN5Qmxjbkp2Y25NZ1lYSmxJR0ZzYkc5M1pXUWdkRzhnWW5WaVlteGxMQ0JqWVhSamFDQmhibVFnY21WMGRYSnVJSFJvWlcxY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUdOdmJuWWdKaVlnY3k1MGFISnZkM01nS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhOd2IyNXpaU0E5SUdOdmJuWW9JSEpsYzNCdmJuTmxJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFJ5ZVNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMzQnZibk5sSUQwZ1kyOXVkaWdnY21WemNHOXVjMlVnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhOMFlYUmxPaUJjSW5CaGNuTmxjbVZ5Y205eVhDSXNYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBaWEp5YjNJNklHTnZibllnUHlCbElEb2dYQ0pPYnlCamIyNTJaWEp6YVc5dUlHWnliMjBnWENJZ0t5QndjbVYySUNzZ1hDSWdkRzhnWENJZ0t5QmpkWEp5Wlc1MFhHNWNkRngwWEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlIc2djM1JoZEdVNklGd2ljM1ZqWTJWemMxd2lMQ0JrWVhSaE9pQnlaWE53YjI1elpTQjlPMXh1ZlZ4dVhHNXFVWFZsY25rdVpYaDBaVzVrS0NCN1hHNWNibHgwTHk4Z1EyOTFiblJsY2lCbWIzSWdhRzlzWkdsdVp5QjBhR1VnYm5WdFltVnlJRzltSUdGamRHbDJaU0J4ZFdWeWFXVnpYRzVjZEdGamRHbDJaVG9nTUN4Y2JseHVYSFF2THlCTVlYTjBMVTF2WkdsbWFXVmtJR2hsWVdSbGNpQmpZV05vWlNCbWIzSWdibVY0ZENCeVpYRjFaWE4wWEc1Y2RHeGhjM1JOYjJScFptbGxaRG9nZTMwc1hHNWNkR1YwWVdjNklIdDlMRnh1WEc1Y2RHRnFZWGhUWlhSMGFXNW5jem9nZTF4dVhIUmNkSFZ5YkRvZ2JHOWpZWFJwYjI0dWFISmxaaXhjYmx4MFhIUjBlWEJsT2lCY0lrZEZWRndpTEZ4dVhIUmNkR2x6VEc5allXdzZJSEpzYjJOaGJGQnliM1J2WTI5c0xuUmxjM1FvSUd4dlkyRjBhVzl1TG5CeWIzUnZZMjlzSUNrc1hHNWNkRngwWjJ4dlltRnNPaUIwY25WbExGeHVYSFJjZEhCeWIyTmxjM05FWVhSaE9pQjBjblZsTEZ4dVhIUmNkR0Z6ZVc1ak9pQjBjblZsTEZ4dVhIUmNkR052Ym5SbGJuUlVlWEJsT2lCY0ltRndjR3hwWTJGMGFXOXVMM2d0ZDNkM0xXWnZjbTB0ZFhKc1pXNWpiMlJsWkRzZ1kyaGhjbk5sZEQxVlZFWXRPRndpTEZ4dVhHNWNkRngwTHlwY2JseDBYSFIwYVcxbGIzVjBPaUF3TEZ4dVhIUmNkR1JoZEdFNklHNTFiR3dzWEc1Y2RGeDBaR0YwWVZSNWNHVTZJRzUxYkd3c1hHNWNkRngwZFhObGNtNWhiV1U2SUc1MWJHd3NYRzVjZEZ4MGNHRnpjM2R2Y21RNklHNTFiR3dzWEc1Y2RGeDBZMkZqYUdVNklHNTFiR3dzWEc1Y2RGeDBkR2h5YjNkek9pQm1ZV3h6WlN4Y2JseDBYSFIwY21Ga2FYUnBiMjVoYkRvZ1ptRnNjMlVzWEc1Y2RGeDBhR1ZoWkdWeWN6b2dlMzBzWEc1Y2RGeDBLaTljYmx4dVhIUmNkR0ZqWTJWd2RITTZJSHRjYmx4MFhIUmNkRndpS2x3aU9pQmhiR3hVZVhCbGN5eGNibHgwWEhSY2RIUmxlSFE2SUZ3aWRHVjRkQzl3YkdGcGJsd2lMRnh1WEhSY2RGeDBhSFJ0YkRvZ1hDSjBaWGgwTDJoMGJXeGNJaXhjYmx4MFhIUmNkSGh0YkRvZ1hDSmhjSEJzYVdOaGRHbHZiaTk0Yld3c0lIUmxlSFF2ZUcxc1hDSXNYRzVjZEZ4MFhIUnFjMjl1T2lCY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI0c0lIUmxlSFF2YW1GMllYTmpjbWx3ZEZ3aVhHNWNkRngwZlN4Y2JseHVYSFJjZEdOdmJuUmxiblJ6T2lCN1hHNWNkRngwWEhSNGJXdzZJQzljWEdKNGJXeGNYR0l2TEZ4dVhIUmNkRngwYUhSdGJEb2dMMXhjWW1oMGJXd3ZMRnh1WEhSY2RGeDBhbk52YmpvZ0wxeGNZbXB6YjI1Y1hHSXZYRzVjZEZ4MGZTeGNibHh1WEhSY2RISmxjM0J2Ym5ObFJtbGxiR1J6T2lCN1hHNWNkRngwWEhSNGJXdzZJRndpY21WemNHOXVjMlZZVFV4Y0lpeGNibHgwWEhSY2RIUmxlSFE2SUZ3aWNtVnpjRzl1YzJWVVpYaDBYQ0lzWEc1Y2RGeDBYSFJxYzI5dU9pQmNJbkpsYzNCdmJuTmxTbE5QVGx3aVhHNWNkRngwZlN4Y2JseHVYSFJjZEM4dklFUmhkR0VnWTI5dWRtVnlkR1Z5YzF4dVhIUmNkQzh2SUV0bGVYTWdjMlZ3WVhKaGRHVWdjMjkxY21ObElDaHZjaUJqWVhSamFHRnNiQ0JjSWlwY0lpa2dZVzVrSUdSbGMzUnBibUYwYVc5dUlIUjVjR1Z6SUhkcGRHZ2dZU0J6YVc1bmJHVWdjM0JoWTJWY2JseDBYSFJqYjI1MlpYSjBaWEp6T2lCN1hHNWNibHgwWEhSY2RDOHZJRU52Ym5abGNuUWdZVzU1ZEdocGJtY2dkRzhnZEdWNGRGeHVYSFJjZEZ4MFhDSXFJSFJsZUhSY0lqb2dVM1J5YVc1bkxGeHVYRzVjZEZ4MFhIUXZMeUJVWlhoMElIUnZJR2gwYld3Z0tIUnlkV1VnUFNCdWJ5QjBjbUZ1YzJadmNtMWhkR2x2YmlsY2JseDBYSFJjZEZ3aWRHVjRkQ0JvZEcxc1hDSTZJSFJ5ZFdVc1hHNWNibHgwWEhSY2RDOHZJRVYyWVd4MVlYUmxJSFJsZUhRZ1lYTWdZU0JxYzI5dUlHVjRjSEpsYzNOcGIyNWNibHgwWEhSY2RGd2lkR1Y0ZENCcWMyOXVYQ0k2SUVwVFQwNHVjR0Z5YzJVc1hHNWNibHgwWEhSY2RDOHZJRkJoY25ObElIUmxlSFFnWVhNZ2VHMXNYRzVjZEZ4MFhIUmNJblJsZUhRZ2VHMXNYQ0k2SUdwUmRXVnllUzV3WVhKelpWaE5URnh1WEhSY2RIMHNYRzVjYmx4MFhIUXZMeUJHYjNJZ2IzQjBhVzl1Y3lCMGFHRjBJSE5vYjNWc1pHNG5kQ0JpWlNCa1pXVndJR1Y0ZEdWdVpHVmtPbHh1WEhSY2RDOHZJSGx2ZFNCallXNGdZV1JrSUhsdmRYSWdiM2R1SUdOMWMzUnZiU0J2Y0hScGIyNXpJR2hsY21VZ2FXWmNibHgwWEhRdkx5QmhibVFnZDJobGJpQjViM1VnWTNKbFlYUmxJRzl1WlNCMGFHRjBJSE5vYjNWc1pHNG5kQ0JpWlZ4dVhIUmNkQzh2SUdSbFpYQWdaWGgwWlc1a1pXUWdLSE5sWlNCaGFtRjRSWGgwWlc1a0tWeHVYSFJjZEdac1lYUlBjSFJwYjI1ek9pQjdYRzVjZEZ4MFhIUjFjbXc2SUhSeWRXVXNYRzVjZEZ4MFhIUmpiMjUwWlhoME9pQjBjblZsWEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEM4dklFTnlaV0YwWlhNZ1lTQm1kV3hzSUdac1pXUm5aV1FnYzJWMGRHbHVaM01nYjJKcVpXTjBJR2x1ZEc4Z2RHRnlaMlYwWEc1Y2RDOHZJSGRwZEdnZ1ltOTBhQ0JoYW1GNFUyVjBkR2x1WjNNZ1lXNWtJSE5sZEhScGJtZHpJR1pwWld4a2N5NWNibHgwTHk4Z1NXWWdkR0Z5WjJWMElHbHpJRzl0YVhSMFpXUXNJSGR5YVhSbGN5QnBiblJ2SUdGcVlYaFRaWFIwYVc1bmN5NWNibHgwWVdwaGVGTmxkSFZ3T2lCbWRXNWpkR2x2YmlnZ2RHRnlaMlYwTENCelpYUjBhVzVuY3lBcElIdGNibHgwWEhSeVpYUjFjbTRnYzJWMGRHbHVaM01nUDF4dVhHNWNkRngwWEhRdkx5QkNkV2xzWkdsdVp5QmhJSE5sZEhScGJtZHpJRzlpYW1WamRGeHVYSFJjZEZ4MFlXcGhlRVY0ZEdWdVpDZ2dZV3BoZUVWNGRHVnVaQ2dnZEdGeVoyVjBMQ0JxVVhWbGNua3VZV3BoZUZObGRIUnBibWR6SUNrc0lITmxkSFJwYm1keklDa2dPbHh1WEc1Y2RGeDBYSFF2THlCRmVIUmxibVJwYm1jZ1lXcGhlRk5sZEhScGJtZHpYRzVjZEZ4MFhIUmhhbUY0UlhoMFpXNWtLQ0JxVVhWbGNua3VZV3BoZUZObGRIUnBibWR6TENCMFlYSm5aWFFnS1R0Y2JseDBmU3hjYmx4dVhIUmhhbUY0VUhKbFptbHNkR1Z5T2lCaFpHUlViMUJ5WldacGJIUmxjbk5QY2xSeVlXNXpjRzl5ZEhNb0lIQnlaV1pwYkhSbGNuTWdLU3hjYmx4MFlXcGhlRlJ5WVc1emNHOXlkRG9nWVdSa1ZHOVFjbVZtYVd4MFpYSnpUM0pVY21GdWMzQnZjblJ6S0NCMGNtRnVjM0J2Y25SeklDa3NYRzVjYmx4MEx5OGdUV0ZwYmlCdFpYUm9iMlJjYmx4MFlXcGhlRG9nWm5WdVkzUnBiMjRvSUhWeWJDd2diM0IwYVc5dWN5QXBJSHRjYmx4dVhIUmNkQzh2SUVsbUlIVnliQ0JwY3lCaGJpQnZZbXBsWTNRc0lITnBiWFZzWVhSbElIQnlaUzB4TGpVZ2MybG5ibUYwZFhKbFhHNWNkRngwYVdZZ0tDQjBlWEJsYjJZZ2RYSnNJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDa2dlMXh1WEhSY2RGeDBiM0IwYVc5dWN5QTlJSFZ5YkR0Y2JseDBYSFJjZEhWeWJDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJHYjNKalpTQnZjSFJwYjI1eklIUnZJR0psSUdGdUlHOWlhbVZqZEZ4dVhIUmNkRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVYRzVjZEZ4MGRtRnlJSFJ5WVc1emNHOXlkQ3hjYmx4dVhIUmNkRngwTHk4Z1ZWSk1JSGRwZEdodmRYUWdZVzUwYVMxallXTm9aU0J3WVhKaGJWeHVYSFJjZEZ4MFkyRmphR1ZWVWt3c1hHNWNibHgwWEhSY2RDOHZJRkpsYzNCdmJuTmxJR2hsWVdSbGNuTmNibHgwWEhSY2RISmxjM0J2Ym5ObFNHVmhaR1Z5YzFOMGNtbHVaeXhjYmx4MFhIUmNkSEpsYzNCdmJuTmxTR1ZoWkdWeWN5eGNibHh1WEhSY2RGeDBMeThnZEdsdFpXOTFkQ0JvWVc1a2JHVmNibHgwWEhSY2RIUnBiV1Z2ZFhSVWFXMWxjaXhjYmx4dVhIUmNkRngwTHk4Z1ZYSnNJR05zWldGdWRYQWdkbUZ5WEc1Y2RGeDBYSFIxY214QmJtTm9iM0lzWEc1Y2JseDBYSFJjZEM4dklGSmxjWFZsYzNRZ2MzUmhkR1VnS0dKbFkyOXRaWE1nWm1Gc2MyVWdkWEJ2YmlCelpXNWtJR0Z1WkNCMGNuVmxJSFZ3YjI0Z1kyOXRjR3hsZEdsdmJpbGNibHgwWEhSY2RHTnZiWEJzWlhSbFpDeGNibHh1WEhSY2RGeDBMeThnVkc4Z2EyNXZkeUJwWmlCbmJHOWlZV3dnWlhabGJuUnpJR0Z5WlNCMGJ5QmlaU0JrYVhOd1lYUmphR1ZrWEc1Y2RGeDBYSFJtYVhKbFIyeHZZbUZzY3l4Y2JseHVYSFJjZEZ4MEx5OGdURzl2Y0NCMllYSnBZV0pzWlZ4dVhIUmNkRngwYVN4Y2JseHVYSFJjZEZ4MEx5OGdkVzVqWVdOb1pXUWdjR0Z5ZENCdlppQjBhR1VnZFhKc1hHNWNkRngwWEhSMWJtTmhZMmhsWkN4Y2JseHVYSFJjZEZ4MEx5OGdRM0psWVhSbElIUm9aU0JtYVc1aGJDQnZjSFJwYjI1eklHOWlhbVZqZEZ4dVhIUmNkRngwY3lBOUlHcFJkV1Z5ZVM1aGFtRjRVMlYwZFhBb0lIdDlMQ0J2Y0hScGIyNXpJQ2tzWEc1Y2JseDBYSFJjZEM4dklFTmhiR3hpWVdOcmN5QmpiMjUwWlhoMFhHNWNkRngwWEhSallXeHNZbUZqYTBOdmJuUmxlSFFnUFNCekxtTnZiblJsZUhRZ2ZId2djeXhjYmx4dVhIUmNkRngwTHk4Z1EyOXVkR1Y0ZENCbWIzSWdaMnh2WW1Gc0lHVjJaVzUwY3lCcGN5QmpZV3hzWW1GamEwTnZiblJsZUhRZ2FXWWdhWFFnYVhNZ1lTQkVUMDBnYm05a1pTQnZjaUJxVVhWbGNua2dZMjlzYkdWamRHbHZibHh1WEhSY2RGeDBaMnh2WW1Gc1JYWmxiblJEYjI1MFpYaDBJRDBnY3k1amIyNTBaWGgwSUNZbVhHNWNkRngwWEhSY2RDZ2dZMkZzYkdKaFkydERiMjUwWlhoMExtNXZaR1ZVZVhCbElIeDhJR05oYkd4aVlXTnJRMjl1ZEdWNGRDNXFjWFZsY25rZ0tTQS9YRzVjZEZ4MFhIUmNkRngwYWxGMVpYSjVLQ0JqWVd4c1ltRmphME52Ym5SbGVIUWdLU0E2WEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG1WMlpXNTBMRnh1WEc1Y2RGeDBYSFF2THlCRVpXWmxjbkpsWkhOY2JseDBYSFJjZEdSbFptVnljbVZrSUQwZ2FsRjFaWEo1TGtSbFptVnljbVZrS0Nrc1hHNWNkRngwWEhSamIyMXdiR1YwWlVSbFptVnljbVZrSUQwZ2FsRjFaWEo1TGtOaGJHeGlZV05yY3lnZ1hDSnZibU5sSUcxbGJXOXllVndpSUNrc1hHNWNibHgwWEhSY2RDOHZJRk4wWVhSMWN5MWtaWEJsYm1SbGJuUWdZMkZzYkdKaFkydHpYRzVjZEZ4MFhIUnpkR0YwZFhORGIyUmxJRDBnY3k1emRHRjBkWE5EYjJSbElIeDhJSHQ5TEZ4dVhHNWNkRngwWEhRdkx5QklaV0ZrWlhKeklDaDBhR1Y1SUdGeVpTQnpaVzUwSUdGc2JDQmhkQ0J2Ym1ObEtWeHVYSFJjZEZ4MGNtVnhkV1Z6ZEVobFlXUmxjbk1nUFNCN2ZTeGNibHgwWEhSY2RISmxjWFZsYzNSSVpXRmtaWEp6VG1GdFpYTWdQU0I3ZlN4Y2JseHVYSFJjZEZ4MEx5OGdSR1ZtWVhWc2RDQmhZbTl5ZENCdFpYTnpZV2RsWEc1Y2RGeDBYSFJ6ZEhKQlltOXlkQ0E5SUZ3aVkyRnVZMlZzWldSY0lpeGNibHh1WEhSY2RGeDBMeThnUm1GclpTQjRhSEpjYmx4MFhIUmNkR3B4V0VoU0lEMGdlMXh1WEhSY2RGeDBYSFJ5WldGa2VWTjBZWFJsT2lBd0xGeHVYRzVjZEZ4MFhIUmNkQzh2SUVKMWFXeGtjeUJvWldGa1pYSnpJR2hoYzJoMFlXSnNaU0JwWmlCdVpXVmtaV1JjYmx4MFhIUmNkRngwWjJWMFVtVnpjRzl1YzJWSVpXRmtaWEk2SUdaMWJtTjBhVzl1S0NCclpYa2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRtRnlJRzFoZEdOb08xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ1kyOXRjR3hsZEdWa0lDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0FoY21WemNHOXVjMlZJWldGa1pYSnpJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhOd2IyNXpaVWhsWVdSbGNuTWdQU0I3ZlR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZDJocGJHVWdLQ0FvSUcxaGRHTm9JRDBnY21obFlXUmxjbk11WlhobFl5Z2djbVZ6Y0c5dWMyVklaV0ZrWlhKelUzUnlhVzVuSUNrZ0tTQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJ5WlhOd2IyNXpaVWhsWVdSbGNuTmJJRzFoZEdOb1d5QXhJRjB1ZEc5TWIzZGxja05oYzJVb0tTQmRJRDBnYldGMFkyaGJJRElnWFR0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGJXRjBZMmdnUFNCeVpYTndiMjV6WlVobFlXUmxjbk5iSUd0bGVTNTBiMHh2ZDJWeVEyRnpaU2dwSUYwN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ0WVhSamFDQTlQU0J1ZFd4c0lEOGdiblZzYkNBNklHMWhkR05vTzF4dVhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkQzh2SUZKaGR5QnpkSEpwYm1kY2JseDBYSFJjZEZ4MFoyVjBRV3hzVW1WemNHOXVjMlZJWldGa1pYSnpPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1kyOXRjR3hsZEdWa0lEOGdjbVZ6Y0c5dWMyVklaV0ZrWlhKelUzUnlhVzVuSURvZ2JuVnNiRHRjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUXZMeUJEWVdOb1pYTWdkR2hsSUdobFlXUmxjbHh1WEhSY2RGeDBYSFJ6WlhSU1pYRjFaWE4wU0dWaFpHVnlPaUJtZFc1amRHbHZiaWdnYm1GdFpTd2dkbUZzZFdVZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tDQmpiMjF3YkdWMFpXUWdQVDBnYm5Wc2JDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHNWhiV1VnUFNCeVpYRjFaWE4wU0dWaFpHVnljMDVoYldWeld5QnVZVzFsTG5SdlRHOTNaWEpEWVhObEtDa2dYU0E5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEpsY1hWbGMzUklaV0ZrWlhKelRtRnRaWE5iSUc1aGJXVXVkRzlNYjNkbGNrTmhjMlVvS1NCZElIeDhJRzVoYldVN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhGMVpYTjBTR1ZoWkdWeWMxc2dibUZ0WlNCZElEMGdkbUZzZFdVN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEZ4MFhIUjlMRnh1WEc1Y2RGeDBYSFJjZEM4dklFOTJaWEp5YVdSbGN5QnlaWE53YjI1elpTQmpiMjUwWlc1MExYUjVjR1VnYUdWaFpHVnlYRzVjZEZ4MFhIUmNkRzkyWlhKeWFXUmxUV2x0WlZSNWNHVTZJR1oxYm1OMGFXOXVLQ0IwZVhCbElDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDZ2dZMjl0Y0d4bGRHVmtJRDA5SUc1MWJHd2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnpMbTFwYldWVWVYQmxJRDBnZEhsd1pUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MEx5OGdVM1JoZEhWekxXUmxjR1Z1WkdWdWRDQmpZV3hzWW1GamEzTmNibHgwWEhSY2RGeDBjM1JoZEhWelEyOWtaVG9nWm5WdVkzUnBiMjRvSUcxaGNDQXBJSHRjYmx4MFhIUmNkRngwWEhSMllYSWdZMjlrWlR0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSUcxaGNDQXBJSHRjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2dnWTI5dGNHeGxkR1ZrSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RDOHZJRVY0WldOMWRHVWdkR2hsSUdGd2NISnZjSEpwWVhSbElHTmhiR3hpWVdOcmMxeHVYSFJjZEZ4MFhIUmNkRngwWEhScWNWaElVaTVoYkhkaGVYTW9JRzFoY0ZzZ2FuRllTRkl1YzNSaGRIVnpJRjBnS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVEdGNmVTMWhaR1FnZEdobElHNWxkeUJqWVd4c1ltRmphM01nYVc0Z1lTQjNZWGtnZEdoaGRDQndjbVZ6WlhKMlpYTWdiMnhrSUc5dVpYTmNibHgwWEhSY2RGeDBYSFJjZEZ4MFptOXlJQ2dnWTI5a1pTQnBiaUJ0WVhBZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBjM1JoZEhWelEyOWtaVnNnWTI5a1pTQmRJRDBnV3lCemRHRjBkWE5EYjJSbFd5QmpiMlJsSUYwc0lHMWhjRnNnWTI5a1pTQmRJRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MEx5OGdRMkZ1WTJWc0lIUm9aU0J5WlhGMVpYTjBYRzVjZEZ4MFhIUmNkR0ZpYjNKME9pQm1kVzVqZEdsdmJpZ2djM1JoZEhWelZHVjRkQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnWm1sdVlXeFVaWGgwSUQwZ2MzUmhkSFZ6VkdWNGRDQjhmQ0J6ZEhKQlltOXlkRHRjYmx4MFhIUmNkRngwWEhScFppQW9JSFJ5WVc1emNHOXlkQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFJ5WVc1emNHOXlkQzVoWW05eWRDZ2dabWx1WVd4VVpYaDBJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkR1J2Ym1Vb0lEQXNJR1pwYm1Gc1ZHVjRkQ0FwTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5TzF4dVhHNWNkRngwTHk4Z1FYUjBZV05vSUdSbFptVnljbVZrYzF4dVhIUmNkR1JsWm1WeWNtVmtMbkJ5YjIxcGMyVW9JR3B4V0VoU0lDazdYRzVjYmx4MFhIUXZMeUJCWkdRZ2NISnZkRzlqYjJ3Z2FXWWdibTkwSUhCeWIzWnBaR1ZrSUNod2NtVm1hV3gwWlhKeklHMXBaMmgwSUdWNGNHVmpkQ0JwZENsY2JseDBYSFF2THlCSVlXNWtiR1VnWm1Gc2Mza2dkWEpzSUdsdUlIUm9aU0J6WlhSMGFXNW5jeUJ2WW1wbFkzUWdLQ014TURBNU16b2dZMjl1YzJsemRHVnVZM2tnZDJsMGFDQnZiR1FnYzJsbmJtRjBkWEpsS1Z4dVhIUmNkQzh2SUZkbElHRnNjMjhnZFhObElIUm9aU0IxY213Z2NHRnlZVzFsZEdWeUlHbG1JR0YyWVdsc1lXSnNaVnh1WEhSY2RITXVkWEpzSUQwZ0tDQW9JSFZ5YkNCOGZDQnpMblZ5YkNCOGZDQnNiMk5oZEdsdmJpNW9jbVZtSUNrZ0t5QmNJbHdpSUNsY2JseDBYSFJjZEM1eVpYQnNZV05sS0NCeWNISnZkRzlqYjJ3c0lHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lDc2dYQ0l2TDF3aUlDazdYRzVjYmx4MFhIUXZMeUJCYkdsaGN5QnRaWFJvYjJRZ2IzQjBhVzl1SUhSdklIUjVjR1VnWVhNZ2NHVnlJSFJwWTJ0bGRDQWpNVEl3TURSY2JseDBYSFJ6TG5SNWNHVWdQU0J2Y0hScGIyNXpMbTFsZEdodlpDQjhmQ0J2Y0hScGIyNXpMblI1Y0dVZ2ZId2djeTV0WlhSb2IyUWdmSHdnY3k1MGVYQmxPMXh1WEc1Y2RGeDBMeThnUlhoMGNtRmpkQ0JrWVhSaFZIbHdaWE1nYkdsemRGeHVYSFJjZEhNdVpHRjBZVlI1Y0dWeklEMGdLQ0J6TG1SaGRHRlVlWEJsSUh4OElGd2lLbHdpSUNrdWRHOU1iM2RsY2tOaGMyVW9LUzV0WVhSamFDZ2djbTV2ZEdoMGJXeDNhR2wwWlNBcElIeDhJRnNnWENKY0lpQmRPMXh1WEc1Y2RGeDBMeThnUVNCamNtOXpjeTFrYjIxaGFXNGdjbVZ4ZFdWemRDQnBjeUJwYmlCdmNtUmxjaUIzYUdWdUlIUm9aU0J2Y21sbmFXNGdaRzlsYzI0bmRDQnRZWFJqYUNCMGFHVWdZM1Z5Y21WdWRDQnZjbWxuYVc0dVhHNWNkRngwYVdZZ0tDQnpMbU55YjNOelJHOXRZV2x1SUQwOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSMWNteEJibU5vYjNJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NCY0ltRmNJaUFwTzF4dVhHNWNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRnZ0xTQXhNU3dnUldSblpTQXhNaUF0SURFMVhHNWNkRngwWEhRdkx5QkpSU0IwYUhKdmQzTWdaWGhqWlhCMGFXOXVJRzl1SUdGalkyVnpjMmx1WnlCMGFHVWdhSEpsWmlCd2NtOXdaWEowZVNCcFppQjFjbXdnYVhNZ2JXRnNabTl5YldWa0xGeHVYSFJjZEZ4MEx5OGdaUzVuTGlCb2RIUndPaTh2WlhoaGJYQnNaUzVqYjIwNk9EQjRMMXh1WEhSY2RGeDBkSEo1SUh0Y2JseDBYSFJjZEZ4MGRYSnNRVzVqYUc5eUxtaHlaV1lnUFNCekxuVnliRHRjYmx4dVhIUmNkRngwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRnZ0xTQXhNU0J2Ym14NVhHNWNkRngwWEhSY2RDOHZJRUZ1WTJodmNpZHpJR2h2YzNRZ2NISnZjR1Z5ZEhrZ2FYTnVKM1FnWTI5eWNtVmpkR3g1SUhObGRDQjNhR1Z1SUhNdWRYSnNJR2x6SUhKbGJHRjBhWFpsWEc1Y2RGeDBYSFJjZEhWeWJFRnVZMmh2Y2k1b2NtVm1JRDBnZFhKc1FXNWphRzl5TG1oeVpXWTdYRzVjZEZ4MFhIUmNkSE11WTNKdmMzTkViMjFoYVc0Z1BTQnZjbWxuYVc1QmJtTm9iM0l1Y0hKdmRHOWpiMndnS3lCY0lpOHZYQ0lnS3lCdmNtbG5hVzVCYm1Ob2IzSXVhRzl6ZENBaFBUMWNibHgwWEhSY2RGeDBYSFIxY214QmJtTm9iM0l1Y0hKdmRHOWpiMndnS3lCY0lpOHZYQ0lnS3lCMWNteEJibU5vYjNJdWFHOXpkRHRjYmx4MFhIUmNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUVsbUlIUm9aWEpsSUdseklHRnVJR1Z5Y205eUlIQmhjbk5wYm1jZ2RHaGxJRlZTVEN3Z1lYTnpkVzFsSUdsMElHbHpJR055YjNOelJHOXRZV2x1TEZ4dVhIUmNkRngwWEhRdkx5QnBkQ0JqWVc0Z1ltVWdjbVZxWldOMFpXUWdZbmtnZEdobElIUnlZVzV6Y0c5eWRDQnBaaUJwZENCcGN5QnBiblpoYkdsa1hHNWNkRngwWEhSY2RITXVZM0p2YzNORWIyMWhhVzRnUFNCMGNuVmxPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU52Ym5abGNuUWdaR0YwWVNCcFppQnViM1FnWVd4eVpXRmtlU0JoSUhOMGNtbHVaMXh1WEhSY2RHbG1JQ2dnY3k1a1lYUmhJQ1ltSUhNdWNISnZZMlZ6YzBSaGRHRWdKaVlnZEhsd1pXOW1JSE11WkdGMFlTQWhQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSY2RITXVaR0YwWVNBOUlHcFJkV1Z5ZVM1d1lYSmhiU2dnY3k1a1lYUmhMQ0J6TG5SeVlXUnBkR2x2Ym1Gc0lDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdRWEJ3YkhrZ2NISmxabWxzZEdWeWMxeHVYSFJjZEdsdWMzQmxZM1JRY21WbWFXeDBaWEp6VDNKVWNtRnVjM0J2Y25SektDQndjbVZtYVd4MFpYSnpMQ0J6TENCdmNIUnBiMjV6TENCcWNWaElVaUFwTzF4dVhHNWNkRngwTHk4Z1NXWWdjbVZ4ZFdWemRDQjNZWE1nWVdKdmNuUmxaQ0JwYm5OcFpHVWdZU0J3Y21WbWFXeDBaWElzSUhOMGIzQWdkR2hsY21WY2JseDBYSFJwWmlBb0lHTnZiWEJzWlhSbFpDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnFjVmhJVWp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCWFpTQmpZVzRnWm1seVpTQm5iRzlpWVd3Z1pYWmxiblJ6SUdGeklHOW1JRzV2ZHlCcFppQmhjMnRsWkNCMGIxeHVYSFJjZEM4dklFUnZiaWQwSUdacGNtVWdaWFpsYm5SeklHbG1JR3BSZFdWeWVTNWxkbVZ1ZENCcGN5QjFibVJsWm1sdVpXUWdhVzRnWVc0Z1FVMUVMWFZ6WVdkbElITmpaVzVoY21sdklDZ2pNVFV4TVRncFhHNWNkRngwWm1seVpVZHNiMkpoYkhNZ1BTQnFVWFZsY25rdVpYWmxiblFnSmlZZ2N5NW5iRzlpWVd3N1hHNWNibHgwWEhRdkx5QlhZWFJqYUNCbWIzSWdZU0J1WlhjZ2MyVjBJRzltSUhKbGNYVmxjM1J6WEc1Y2RGeDBhV1lnS0NCbWFYSmxSMnh2WW1Gc2N5QW1KaUJxVVhWbGNua3VZV04wYVhabEt5c2dQVDA5SURBZ0tTQjdYRzVjZEZ4MFhIUnFVWFZsY25rdVpYWmxiblF1ZEhKcFoyZGxjaWdnWENKaGFtRjRVM1JoY25SY0lpQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRlZ3Y0dWeVkyRnpaU0IwYUdVZ2RIbHdaVnh1WEhSY2RITXVkSGx3WlNBOUlITXVkSGx3WlM1MGIxVndjR1Z5UTJGelpTZ3BPMXh1WEc1Y2RGeDBMeThnUkdWMFpYSnRhVzVsSUdsbUlISmxjWFZsYzNRZ2FHRnpJR052Ym5SbGJuUmNibHgwWEhSekxtaGhjME52Ym5SbGJuUWdQU0FoY201dlEyOXVkR1Z1ZEM1MFpYTjBLQ0J6TG5SNWNHVWdLVHRjYmx4dVhIUmNkQzh2SUZOaGRtVWdkR2hsSUZWU1RDQnBiaUJqWVhObElIZGxKM0psSUhSdmVXbHVaeUIzYVhSb0lIUm9aU0JKWmkxTmIyUnBabWxsWkMxVGFXNWpaVnh1WEhSY2RDOHZJR0Z1WkM5dmNpQkpaaTFPYjI1bExVMWhkR05vSUdobFlXUmxjaUJzWVhSbGNpQnZibHh1WEhSY2RDOHZJRkpsYlc5MlpTQm9ZWE5vSUhSdklITnBiWEJzYVdaNUlIVnliQ0J0WVc1cGNIVnNZWFJwYjI1Y2JseDBYSFJqWVdOb1pWVlNUQ0E5SUhNdWRYSnNMbkpsY0d4aFkyVW9JSEpvWVhOb0xDQmNJbHdpSUNrN1hHNWNibHgwWEhRdkx5Qk5iM0psSUc5d2RHbHZibk1nYUdGdVpHeHBibWNnWm05eUlISmxjWFZsYzNSeklIZHBkR2dnYm04Z1kyOXVkR1Z1ZEZ4dVhIUmNkR2xtSUNnZ0lYTXVhR0Z6UTI5dWRHVnVkQ0FwSUh0Y2JseHVYSFJjZEZ4MEx5OGdVbVZ0WlcxaVpYSWdkR2hsSUdoaGMyZ2djMjhnZDJVZ1kyRnVJSEIxZENCcGRDQmlZV05yWEc1Y2RGeDBYSFIxYm1OaFkyaGxaQ0E5SUhNdWRYSnNMbk5zYVdObEtDQmpZV05vWlZWU1RDNXNaVzVuZEdnZ0tUdGNibHh1WEhSY2RGeDBMeThnU1dZZ1pHRjBZU0JwY3lCaGRtRnBiR0ZpYkdVZ1lXNWtJSE5vYjNWc1pDQmlaU0J3Y205alpYTnpaV1FzSUdGd2NHVnVaQ0JrWVhSaElIUnZJSFZ5YkZ4dVhIUmNkRngwYVdZZ0tDQnpMbVJoZEdFZ0ppWWdLQ0J6TG5CeWIyTmxjM05FWVhSaElIeDhJSFI1Y0dWdlppQnpMbVJoZEdFZ1BUMDlJRndpYzNSeWFXNW5YQ0lnS1NBcElIdGNibHgwWEhSY2RGeDBZMkZqYUdWVlVrd2dLejBnS0NCeWNYVmxjbmt1ZEdWemRDZ2dZMkZqYUdWVlVrd2dLU0EvSUZ3aUpsd2lJRG9nWENJL1hDSWdLU0FySUhNdVpHRjBZVHRjYmx4dVhIUmNkRngwWEhRdkx5QWpPVFk0TWpvZ2NtVnRiM1psSUdSaGRHRWdjMjhnZEdoaGRDQnBkQ2R6SUc1dmRDQjFjMlZrSUdsdUlHRnVJR1YyWlc1MGRXRnNJSEpsZEhKNVhHNWNkRngwWEhSY2RHUmxiR1YwWlNCekxtUmhkR0U3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFRmtaQ0J2Y2lCMWNHUmhkR1VnWVc1MGFTMWpZV05vWlNCd1lYSmhiU0JwWmlCdVpXVmtaV1JjYmx4MFhIUmNkR2xtSUNnZ2N5NWpZV05vWlNBOVBUMGdabUZzYzJVZ0tTQjdYRzVjZEZ4MFhIUmNkR05oWTJobFZWSk1JRDBnWTJGamFHVlZVa3d1Y21Wd2JHRmpaU2dnY21GdWRHbERZV05vWlN3Z1hDSWtNVndpSUNrN1hHNWNkRngwWEhSY2RIVnVZMkZqYUdWa0lEMGdLQ0J5Y1hWbGNua3VkR1Z6ZENnZ1kyRmphR1ZWVWt3Z0tTQS9JRndpSmx3aUlEb2dYQ0kvWENJZ0tTQXJJRndpWHoxY0lpQXJJQ2dnYm05dVkyVXJLeUFwSUNzZ2RXNWpZV05vWldRN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRkIxZENCb1lYTm9JR0Z1WkNCaGJuUnBMV05oWTJobElHOXVJSFJvWlNCVlVrd2dkR2hoZENCM2FXeHNJR0psSUhKbGNYVmxjM1JsWkNBb1oyZ3RNVGN6TWlsY2JseDBYSFJjZEhNdWRYSnNJRDBnWTJGamFHVlZVa3dnS3lCMWJtTmhZMmhsWkR0Y2JseHVYSFJjZEM4dklFTm9ZVzVuWlNBbkpUSXdKeUIwYnlBbkt5Y2dhV1lnZEdocGN5QnBjeUJsYm1OdlpHVmtJR1p2Y20wZ1ltOWtlU0JqYjI1MFpXNTBJQ2huYUMweU5qVTRLVnh1WEhSY2RIMGdaV3h6WlNCcFppQW9JSE11WkdGMFlTQW1KaUJ6TG5CeWIyTmxjM05FWVhSaElDWW1YRzVjZEZ4MFhIUW9JSE11WTI5dWRHVnVkRlI1Y0dVZ2ZId2dYQ0pjSWlBcExtbHVaR1Y0VDJZb0lGd2lZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa1hDSWdLU0E5UFQwZ01DQXBJSHRjYmx4MFhIUmNkSE11WkdGMFlTQTlJSE11WkdGMFlTNXlaWEJzWVdObEtDQnlNakFzSUZ3aUsxd2lJQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVTJWMElIUm9aU0JKWmkxTmIyUnBabWxsWkMxVGFXNWpaU0JoYm1RdmIzSWdTV1l0VG05dVpTMU5ZWFJqYUNCb1pXRmtaWElzSUdsbUlHbHVJR2xtVFc5a2FXWnBaV1FnYlc5a1pTNWNibHgwWEhScFppQW9JSE11YVdaTmIyUnBabWxsWkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnYWxGMVpYSjVMbXhoYzNSTmIyUnBabWxsWkZzZ1kyRmphR1ZWVWt3Z1hTQXBJSHRjYmx4MFhIUmNkRngwYW5GWVNGSXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpZ2dYQ0pKWmkxTmIyUnBabWxsWkMxVGFXNWpaVndpTENCcVVYVmxjbmt1YkdGemRFMXZaR2xtYVdWa1d5QmpZV05vWlZWU1RDQmRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJwWmlBb0lHcFJkV1Z5ZVM1bGRHRm5XeUJqWVdOb1pWVlNUQ0JkSUNrZ2UxeHVYSFJjZEZ4MFhIUnFjVmhJVWk1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0NCY0lrbG1MVTV2Ym1VdFRXRjBZMmhjSWl3Z2FsRjFaWEo1TG1WMFlXZGJJR05oWTJobFZWSk1JRjBnS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVFpYUWdkR2hsSUdOdmNuSmxZM1FnYUdWaFpHVnlMQ0JwWmlCa1lYUmhJR2x6SUdKbGFXNW5JSE5sYm5SY2JseDBYSFJwWmlBb0lITXVaR0YwWVNBbUppQnpMbWhoYzBOdmJuUmxiblFnSmlZZ2N5NWpiMjUwWlc1MFZIbHdaU0FoUFQwZ1ptRnNjMlVnZkh3Z2IzQjBhVzl1Y3k1amIyNTBaVzUwVkhsd1pTQXBJSHRjYmx4MFhIUmNkR3B4V0VoU0xuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb0lGd2lRMjl1ZEdWdWRDMVVlWEJsWENJc0lITXVZMjl1ZEdWdWRGUjVjR1VnS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVFpYUWdkR2hsSUVGalkyVndkSE1nYUdWaFpHVnlJR1p2Y2lCMGFHVWdjMlZ5ZG1WeUxDQmtaWEJsYm1ScGJtY2diMjRnZEdobElHUmhkR0ZVZVhCbFhHNWNkRngwYW5GWVNGSXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaGNibHgwWEhSY2RGd2lRV05qWlhCMFhDSXNYRzVjZEZ4MFhIUnpMbVJoZEdGVWVYQmxjMXNnTUNCZElDWW1JSE11WVdOalpYQjBjMXNnY3k1a1lYUmhWSGx3WlhOYklEQWdYU0JkSUQ5Y2JseDBYSFJjZEZ4MGN5NWhZMk5sY0hSeld5QnpMbVJoZEdGVWVYQmxjMXNnTUNCZElGMGdLMXh1WEhSY2RGeDBYSFJjZENnZ2N5NWtZWFJoVkhsd1pYTmJJREFnWFNBaFBUMGdYQ0lxWENJZ1B5QmNJaXdnWENJZ0t5QmhiR3hVZVhCbGN5QXJJRndpT3lCeFBUQXVNREZjSWlBNklGd2lYQ0lnS1NBNlhHNWNkRngwWEhSY2RITXVZV05qWlhCMGMxc2dYQ0lxWENJZ1hWeHVYSFJjZENrN1hHNWNibHgwWEhRdkx5QkRhR1ZqYXlCbWIzSWdhR1ZoWkdWeWN5QnZjSFJwYjI1Y2JseDBYSFJtYjNJZ0tDQnBJR2x1SUhNdWFHVmhaR1Z5Y3lBcElIdGNibHgwWEhSY2RHcHhXRWhTTG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvSUdrc0lITXVhR1ZoWkdWeWMxc2dhU0JkSUNrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1FXeHNiM2NnWTNWemRHOXRJR2hsWVdSbGNuTXZiV2x0WlhSNWNHVnpJR0Z1WkNCbFlYSnNlU0JoWW05eWRGeHVYSFJjZEdsbUlDZ2djeTVpWldadmNtVlRaVzVrSUNZbVhHNWNkRngwWEhRb0lITXVZbVZtYjNKbFUyVnVaQzVqWVd4c0tDQmpZV3hzWW1GamEwTnZiblJsZUhRc0lHcHhXRWhTTENCeklDa2dQVDA5SUdaaGJITmxJSHg4SUdOdmJYQnNaWFJsWkNBcElDa2dlMXh1WEc1Y2RGeDBYSFF2THlCQlltOXlkQ0JwWmlCdWIzUWdaRzl1WlNCaGJISmxZV1I1SUdGdVpDQnlaWFIxY201Y2JseDBYSFJjZEhKbGRIVnliaUJxY1ZoSVVpNWhZbTl5ZENncE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFRmliM0owYVc1bklHbHpJRzV2SUd4dmJtZGxjaUJoSUdOaGJtTmxiR3hoZEdsdmJseHVYSFJjZEhOMGNrRmliM0owSUQwZ1hDSmhZbTl5ZEZ3aU8xeHVYRzVjZEZ4MEx5OGdTVzV6ZEdGc2JDQmpZV3hzWW1GamEzTWdiMjRnWkdWbVpYSnlaV1J6WEc1Y2RGeDBZMjl0Y0d4bGRHVkVaV1psY25KbFpDNWhaR1FvSUhNdVkyOXRjR3hsZEdVZ0tUdGNibHgwWEhScWNWaElVaTVrYjI1bEtDQnpMbk4xWTJObGMzTWdLVHRjYmx4MFhIUnFjVmhJVWk1bVlXbHNLQ0J6TG1WeWNtOXlJQ2s3WEc1Y2JseDBYSFF2THlCSFpYUWdkSEpoYm5Od2IzSjBYRzVjZEZ4MGRISmhibk53YjNKMElEMGdhVzV6Y0dWamRGQnlaV1pwYkhSbGNuTlBjbFJ5WVc1emNHOXlkSE1vSUhSeVlXNXpjRzl5ZEhNc0lITXNJRzl3ZEdsdmJuTXNJR3B4V0VoU0lDazdYRzVjYmx4MFhIUXZMeUJKWmlCdWJ5QjBjbUZ1YzNCdmNuUXNJSGRsSUdGMWRHOHRZV0p2Y25SY2JseDBYSFJwWmlBb0lDRjBjbUZ1YzNCdmNuUWdLU0I3WEc1Y2RGeDBYSFJrYjI1bEtDQXRNU3dnWENKT2J5QlVjbUZ1YzNCdmNuUmNJaUFwTzF4dVhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUnFjVmhJVWk1eVpXRmtlVk4wWVhSbElEMGdNVHRjYmx4dVhIUmNkRngwTHk4Z1UyVnVaQ0JuYkc5aVlXd2daWFpsYm5SY2JseDBYSFJjZEdsbUlDZ2dabWx5WlVkc2IySmhiSE1nS1NCN1hHNWNkRngwWEhSY2RHZHNiMkpoYkVWMlpXNTBRMjl1ZEdWNGRDNTBjbWxuWjJWeUtDQmNJbUZxWVhoVFpXNWtYQ0lzSUZzZ2FuRllTRklzSUhNZ1hTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCSlppQnlaWEYxWlhOMElIZGhjeUJoWW05eWRHVmtJR2x1YzJsa1pTQmhhbUY0VTJWdVpDd2djM1J2Y0NCMGFHVnlaVnh1WEhSY2RGeDBhV1lnS0NCamIyMXdiR1YwWldRZ0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnFjVmhJVWp0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdWR2x0Wlc5MWRGeHVYSFJjZEZ4MGFXWWdLQ0J6TG1GemVXNWpJQ1ltSUhNdWRHbHRaVzkxZENBK0lEQWdLU0I3WEc1Y2RGeDBYSFJjZEhScGJXVnZkWFJVYVcxbGNpQTlJSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUnFjVmhJVWk1aFltOXlkQ2dnWENKMGFXMWxiM1YwWENJZ0tUdGNibHgwWEhSY2RGeDBmU3dnY3k1MGFXMWxiM1YwSUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RIUnllU0I3WEc1Y2RGeDBYSFJjZEdOdmJYQnNaWFJsWkNBOUlHWmhiSE5sTzF4dVhIUmNkRngwWEhSMGNtRnVjM0J2Y25RdWMyVnVaQ2dnY21WeGRXVnpkRWhsWVdSbGNuTXNJR1J2Ym1VZ0tUdGNibHgwWEhSY2RIMGdZMkYwWTJnZ0tDQmxJQ2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRkpsZEdoeWIzY2djRzl6ZEMxamIyMXdiR1YwYVc5dUlHVjRZMlZ3ZEdsdmJuTmNibHgwWEhSY2RGeDBhV1lnS0NCamIyMXdiR1YwWldRZ0tTQjdYRzVjZEZ4MFhIUmNkRngwZEdoeWIzY2daVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHZJRkJ5YjNCaFoyRjBaU0J2ZEdobGNuTWdZWE1nY21WemRXeDBjMXh1WEhSY2RGeDBYSFJrYjI1bEtDQXRNU3dnWlNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFTmhiR3hpWVdOcklHWnZjaUIzYUdWdUlHVjJaWEo1ZEdocGJtY2dhWE1nWkc5dVpWeHVYSFJjZEdaMWJtTjBhVzl1SUdSdmJtVW9JSE4wWVhSMWN5d2dibUYwYVhabFUzUmhkSFZ6VkdWNGRDd2djbVZ6Y0c5dWMyVnpMQ0JvWldGa1pYSnpJQ2tnZTF4dVhIUmNkRngwZG1GeUlHbHpVM1ZqWTJWemN5d2djM1ZqWTJWemN5d2daWEp5YjNJc0lISmxjM0J2Ym5ObExDQnRiMlJwWm1sbFpDeGNibHgwWEhSY2RGeDBjM1JoZEhWelZHVjRkQ0E5SUc1aGRHbDJaVk4wWVhSMWMxUmxlSFE3WEc1Y2JseDBYSFJjZEM4dklFbG5ibTl5WlNCeVpYQmxZWFFnYVc1MmIyTmhkR2x2Ym5OY2JseDBYSFJjZEdsbUlDZ2dZMjl0Y0d4bGRHVmtJQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdOdmJYQnNaWFJsWkNBOUlIUnlkV1U3WEc1Y2JseDBYSFJjZEM4dklFTnNaV0Z5SUhScGJXVnZkWFFnYVdZZ2FYUWdaWGhwYzNSelhHNWNkRngwWEhScFppQW9JSFJwYldWdmRYUlVhVzFsY2lBcElIdGNibHgwWEhSY2RGeDBkMmx1Wkc5M0xtTnNaV0Z5VkdsdFpXOTFkQ2dnZEdsdFpXOTFkRlJwYldWeUlDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVSbGNtVm1aWEpsYm1ObElIUnlZVzV6Y0c5eWRDQm1iM0lnWldGeWJIa2daMkZ5WW1GblpTQmpiMnhzWldOMGFXOXVYRzVjZEZ4MFhIUXZMeUFvYm04Z2JXRjBkR1Z5SUdodmR5QnNiMjVuSUhSb1pTQnFjVmhJVWlCdlltcGxZM1FnZDJsc2JDQmlaU0IxYzJWa0tWeHVYSFJjZEZ4MGRISmhibk53YjNKMElEMGdkVzVrWldacGJtVmtPMXh1WEc1Y2RGeDBYSFF2THlCRFlXTm9aU0J5WlhOd2IyNXpaU0JvWldGa1pYSnpYRzVjZEZ4MFhIUnlaWE53YjI1elpVaGxZV1JsY25OVGRISnBibWNnUFNCb1pXRmtaWEp6SUh4OElGd2lYQ0k3WEc1Y2JseDBYSFJjZEM4dklGTmxkQ0J5WldGa2VWTjBZWFJsWEc1Y2RGeDBYSFJxY1ZoSVVpNXlaV0ZrZVZOMFlYUmxJRDBnYzNSaGRIVnpJRDRnTUNBL0lEUWdPaUF3TzF4dVhHNWNkRngwWEhRdkx5QkVaWFJsY20xcGJtVWdhV1lnYzNWalkyVnpjMloxYkZ4dVhIUmNkRngwYVhOVGRXTmpaWE56SUQwZ2MzUmhkSFZ6SUQ0OUlESXdNQ0FtSmlCemRHRjBkWE1nUENBek1EQWdmSHdnYzNSaGRIVnpJRDA5UFNBek1EUTdYRzVjYmx4MFhIUmNkQzh2SUVkbGRDQnlaWE53YjI1elpTQmtZWFJoWEc1Y2RGeDBYSFJwWmlBb0lISmxjM0J2Ym5ObGN5QXBJSHRjYmx4MFhIUmNkRngwY21WemNHOXVjMlVnUFNCaGFtRjRTR0Z1Wkd4bFVtVnpjRzl1YzJWektDQnpMQ0JxY1ZoSVVpd2djbVZ6Y0c5dWMyVnpJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFTnZiblpsY25RZ2JtOGdiV0YwZEdWeUlIZG9ZWFFnS0hSb1lYUWdkMkY1SUhKbGMzQnZibk5sV0ZoWUlHWnBaV3hrY3lCaGNtVWdZV3gzWVhseklITmxkQ2xjYmx4MFhIUmNkSEpsYzNCdmJuTmxJRDBnWVdwaGVFTnZiblpsY25Rb0lITXNJSEpsYzNCdmJuTmxMQ0JxY1ZoSVVpd2dhWE5UZFdOalpYTnpJQ2s3WEc1Y2JseDBYSFJjZEM4dklFbG1JSE4xWTJObGMzTm1kV3dzSUdoaGJtUnNaU0IwZVhCbElHTm9ZV2x1YVc1blhHNWNkRngwWEhScFppQW9JR2x6VTNWalkyVnpjeUFwSUh0Y2JseHVYSFJjZEZ4MFhIUXZMeUJUWlhRZ2RHaGxJRWxtTFUxdlpHbG1hV1ZrTFZOcGJtTmxJR0Z1WkM5dmNpQkpaaTFPYjI1bExVMWhkR05vSUdobFlXUmxjaXdnYVdZZ2FXNGdhV1pOYjJScFptbGxaQ0J0YjJSbExseHVYSFJjZEZ4MFhIUnBaaUFvSUhNdWFXWk5iMlJwWm1sbFpDQXBJSHRjYmx4MFhIUmNkRngwWEhSdGIyUnBabWxsWkNBOUlHcHhXRWhTTG1kbGRGSmxjM0J2Ym5ObFNHVmhaR1Z5S0NCY0lreGhjM1F0VFc5a2FXWnBaV1JjSWlBcE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnZ2JXOWthV1pwWldRZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhScVVYVmxjbmt1YkdGemRFMXZaR2xtYVdWa1d5QmpZV05vWlZWU1RDQmRJRDBnYlc5a2FXWnBaV1E3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRzF2WkdsbWFXVmtJRDBnYW5GWVNGSXVaMlYwVW1WemNHOXVjMlZJWldGa1pYSW9JRndpWlhSaFoxd2lJQ2s3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQ0J0YjJScFptbGxaQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR3BSZFdWeWVTNWxkR0ZuV3lCallXTm9aVlZTVENCZElEMGdiVzlrYVdacFpXUTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnYVdZZ2JtOGdZMjl1ZEdWdWRGeHVYSFJjZEZ4MFhIUnBaaUFvSUhOMFlYUjFjeUE5UFQwZ01qQTBJSHg4SUhNdWRIbHdaU0E5UFQwZ1hDSklSVUZFWENJZ0tTQjdYRzVjZEZ4MFhIUmNkRngwYzNSaGRIVnpWR1Y0ZENBOUlGd2libTlqYjI1MFpXNTBYQ0k3WEc1Y2JseDBYSFJjZEZ4MEx5OGdhV1lnYm05MElHMXZaR2xtYVdWa1hHNWNkRngwWEhSY2RIMGdaV3h6WlNCcFppQW9JSE4wWVhSMWN5QTlQVDBnTXpBMElDa2dlMXh1WEhSY2RGeDBYSFJjZEhOMFlYUjFjMVJsZUhRZ1BTQmNJbTV2ZEcxdlpHbG1hV1ZrWENJN1hHNWNibHgwWEhSY2RGeDBMeThnU1dZZ2QyVWdhR0YyWlNCa1lYUmhMQ0JzWlhRbmN5QmpiMjUyWlhKMElHbDBYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwYzNSaGRIVnpWR1Y0ZENBOUlISmxjM0J2Ym5ObExuTjBZWFJsTzF4dVhIUmNkRngwWEhSY2RITjFZMk5sYzNNZ1BTQnlaWE53YjI1elpTNWtZWFJoTzF4dVhIUmNkRngwWEhSY2RHVnljbTl5SUQwZ2NtVnpjRzl1YzJVdVpYSnliM0k3WEc1Y2RGeDBYSFJjZEZ4MGFYTlRkV05qWlhOeklEMGdJV1Z5Y205eU8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUVWNGRISmhZM1FnWlhKeWIzSWdabkp2YlNCemRHRjBkWE5VWlhoMElHRnVaQ0J1YjNKdFlXeHBlbVVnWm05eUlHNXZiaTFoWW05eWRITmNibHgwWEhSY2RGeDBaWEp5YjNJZ1BTQnpkR0YwZFhOVVpYaDBPMXh1WEhSY2RGeDBYSFJwWmlBb0lITjBZWFIxY3lCOGZDQWhjM1JoZEhWelZHVjRkQ0FwSUh0Y2JseDBYSFJjZEZ4MFhIUnpkR0YwZFhOVVpYaDBJRDBnWENKbGNuSnZjbHdpTzF4dVhIUmNkRngwWEhSY2RHbG1JQ2dnYzNSaGRIVnpJRHdnTUNBcElIdGNibHgwWEhSY2RGeDBYSFJjZEhOMFlYUjFjeUE5SURBN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklGTmxkQ0JrWVhSaElHWnZjaUIwYUdVZ1ptRnJaU0I0YUhJZ2IySnFaV04wWEc1Y2RGeDBYSFJxY1ZoSVVpNXpkR0YwZFhNZ1BTQnpkR0YwZFhNN1hHNWNkRngwWEhScWNWaElVaTV6ZEdGMGRYTlVaWGgwSUQwZ0tDQnVZWFJwZG1WVGRHRjBkWE5VWlhoMElIeDhJSE4wWVhSMWMxUmxlSFFnS1NBcklGd2lYQ0k3WEc1Y2JseDBYSFJjZEM4dklGTjFZMk5sYzNNdlJYSnliM0pjYmx4MFhIUmNkR2xtSUNnZ2FYTlRkV05qWlhOeklDa2dlMXh1WEhSY2RGeDBYSFJrWldabGNuSmxaQzV5WlhOdmJIWmxWMmwwYUNnZ1kyRnNiR0poWTJ0RGIyNTBaWGgwTENCYklITjFZMk5sYzNNc0lITjBZWFIxYzFSbGVIUXNJR3B4V0VoU0lGMGdLVHRjYmx4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkR1JsWm1WeWNtVmtMbkpsYW1WamRGZHBkR2dvSUdOaGJHeGlZV05yUTI5dWRHVjRkQ3dnV3lCcWNWaElVaXdnYzNSaGRIVnpWR1Y0ZEN3Z1pYSnliM0lnWFNBcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUZEdGMGRYTXRaR1Z3Wlc1a1pXNTBJR05oYkd4aVlXTnJjMXh1WEhSY2RGeDBhbkZZU0ZJdWMzUmhkSFZ6UTI5a1pTZ2djM1JoZEhWelEyOWtaU0FwTzF4dVhIUmNkRngwYzNSaGRIVnpRMjlrWlNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1WEhSY2RGeDBhV1lnS0NCbWFYSmxSMnh2WW1Gc2N5QXBJSHRjYmx4MFhIUmNkRngwWjJ4dlltRnNSWFpsYm5SRGIyNTBaWGgwTG5SeWFXZG5aWElvSUdselUzVmpZMlZ6Y3lBL0lGd2lZV3BoZUZOMVkyTmxjM05jSWlBNklGd2lZV3BoZUVWeWNtOXlYQ0lzWEc1Y2RGeDBYSFJjZEZ4MFd5QnFjVmhJVWl3Z2N5d2dhWE5UZFdOalpYTnpJRDhnYzNWalkyVnpjeUE2SUdWeWNtOXlJRjBnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdRMjl0Y0d4bGRHVmNibHgwWEhSY2RHTnZiWEJzWlhSbFJHVm1aWEp5WldRdVptbHlaVmRwZEdnb0lHTmhiR3hpWVdOclEyOXVkR1Y0ZEN3Z1d5QnFjVmhJVWl3Z2MzUmhkSFZ6VkdWNGRDQmRJQ2s3WEc1Y2JseDBYSFJjZEdsbUlDZ2dabWx5WlVkc2IySmhiSE1nS1NCN1hHNWNkRngwWEhSY2RHZHNiMkpoYkVWMlpXNTBRMjl1ZEdWNGRDNTBjbWxuWjJWeUtDQmNJbUZxWVhoRGIyMXdiR1YwWlZ3aUxDQmJJR3B4V0VoU0xDQnpJRjBnS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJJWVc1a2JHVWdkR2hsSUdkc2IySmhiQ0JCU2tGWUlHTnZkVzUwWlhKY2JseDBYSFJjZEZ4MGFXWWdLQ0FoS0NBdExXcFJkV1Z5ZVM1aFkzUnBkbVVnS1NBcElIdGNibHgwWEhSY2RGeDBYSFJxVVhWbGNua3VaWFpsYm5RdWRISnBaMmRsY2lnZ1hDSmhhbUY0VTNSdmNGd2lJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdhbkZZU0ZJN1hHNWNkSDBzWEc1Y2JseDBaMlYwU2xOUFRqb2dablZ1WTNScGIyNG9JSFZ5YkN3Z1pHRjBZU3dnWTJGc2JHSmhZMnNnS1NCN1hHNWNkRngwY21WMGRYSnVJR3BSZFdWeWVTNW5aWFFvSUhWeWJDd2daR0YwWVN3Z1kyRnNiR0poWTJzc0lGd2lhbk52Ymx3aUlDazdYRzVjZEgwc1hHNWNibHgwWjJWMFUyTnlhWEIwT2lCbWRXNWpkR2x2YmlnZ2RYSnNMQ0JqWVd4c1ltRmpheUFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdhbEYxWlhKNUxtZGxkQ2dnZFhKc0xDQjFibVJsWm1sdVpXUXNJR05oYkd4aVlXTnJMQ0JjSW5OamNtbHdkRndpSUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1YWxGMVpYSjVMbVZoWTJnb0lGc2dYQ0puWlhSY0lpd2dYQ0p3YjNOMFhDSWdYU3dnWm5WdVkzUnBiMjRvSUdrc0lHMWxkR2h2WkNBcElIdGNibHgwYWxGMVpYSjVXeUJ0WlhSb2IyUWdYU0E5SUdaMWJtTjBhVzl1S0NCMWNtd3NJR1JoZEdFc0lHTmhiR3hpWVdOckxDQjBlWEJsSUNrZ2UxeHVYRzVjZEZ4MEx5OGdVMmhwWm5RZ1lYSm5kVzFsYm5SeklHbG1JR1JoZEdFZ1lYSm5kVzFsYm5RZ2QyRnpJRzl0YVhSMFpXUmNibHgwWEhScFppQW9JR2x6Um5WdVkzUnBiMjRvSUdSaGRHRWdLU0FwSUh0Y2JseDBYSFJjZEhSNWNHVWdQU0IwZVhCbElIeDhJR05oYkd4aVlXTnJPMXh1WEhSY2RGeDBZMkZzYkdKaFkyc2dQU0JrWVhSaE8xeHVYSFJjZEZ4MFpHRjBZU0E5SUhWdVpHVm1hVzVsWkR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVWFHVWdkWEpzSUdOaGJpQmlaU0JoYmlCdmNIUnBiMjV6SUc5aWFtVmpkQ0FvZDJocFkyZ2dkR2hsYmlCdGRYTjBJR2hoZG1VZ0xuVnliQ2xjYmx4MFhIUnlaWFIxY200Z2FsRjFaWEo1TG1GcVlYZ29JR3BSZFdWeWVTNWxlSFJsYm1Rb0lIdGNibHgwWEhSY2RIVnliRG9nZFhKc0xGeHVYSFJjZEZ4MGRIbHdaVG9nYldWMGFHOWtMRnh1WEhSY2RGeDBaR0YwWVZSNWNHVTZJSFI1Y0dVc1hHNWNkRngwWEhSa1lYUmhPaUJrWVhSaExGeHVYSFJjZEZ4MGMzVmpZMlZ6Y3pvZ1kyRnNiR0poWTJ0Y2JseDBYSFI5TENCcVVYVmxjbmt1YVhOUWJHRnBiazlpYW1WamRDZ2dkWEpzSUNrZ0ppWWdkWEpzSUNrZ0tUdGNibHgwZlR0Y2JuMGdLVHRjYmx4dVhHNXFVWFZsY25rdVgyVjJZV3hWY213Z1BTQm1kVzVqZEdsdmJpZ2dkWEpzSUNrZ2UxeHVYSFJ5WlhSMWNtNGdhbEYxWlhKNUxtRnFZWGdvSUh0Y2JseDBYSFIxY213NklIVnliQ3hjYmx4dVhIUmNkQzh2SUUxaGEyVWdkR2hwY3lCbGVIQnNhV05wZEN3Z2MybHVZMlVnZFhObGNpQmpZVzRnYjNabGNuSnBaR1VnZEdocGN5QjBhSEp2ZFdkb0lHRnFZWGhUWlhSMWNDQW9JekV4TWpZMEtWeHVYSFJjZEhSNWNHVTZJRndpUjBWVVhDSXNYRzVjZEZ4MFpHRjBZVlI1Y0dVNklGd2ljMk55YVhCMFhDSXNYRzVjZEZ4MFkyRmphR1U2SUhSeWRXVXNYRzVjZEZ4MFlYTjVibU02SUdaaGJITmxMRnh1WEhSY2RHZHNiMkpoYkRvZ1ptRnNjMlVzWEc1Y2RGeDBYQ0owYUhKdmQzTmNJam9nZEhKMVpWeHVYSFI5SUNrN1hHNTlPMXh1WEc1Y2JtcFJkV1Z5ZVM1bWJpNWxlSFJsYm1Rb0lIdGNibHgwZDNKaGNFRnNiRG9nWm5WdVkzUnBiMjRvSUdoMGJXd2dLU0I3WEc1Y2RGeDBkbUZ5SUhkeVlYQTdYRzVjYmx4MFhIUnBaaUFvSUhSb2FYTmJJREFnWFNBcElIdGNibHgwWEhSY2RHbG1JQ2dnYVhOR2RXNWpkR2x2YmlnZ2FIUnRiQ0FwSUNrZ2UxeHVYSFJjZEZ4MFhIUm9kRzFzSUQwZ2FIUnRiQzVqWVd4c0tDQjBhR2x6V3lBd0lGMGdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1ZHaGxJR1ZzWlcxbGJuUnpJSFJ2SUhkeVlYQWdkR2hsSUhSaGNtZGxkQ0JoY205MWJtUmNibHgwWEhSY2RIZHlZWEFnUFNCcVVYVmxjbmtvSUdoMGJXd3NJSFJvYVhOYklEQWdYUzV2ZDI1bGNrUnZZM1Z0Wlc1MElDa3VaWEVvSURBZ0tTNWpiRzl1WlNnZ2RISjFaU0FwTzF4dVhHNWNkRngwWEhScFppQW9JSFJvYVhOYklEQWdYUzV3WVhKbGJuUk9iMlJsSUNrZ2UxeHVYSFJjZEZ4MFhIUjNjbUZ3TG1sdWMyVnlkRUpsWm05eVpTZ2dkR2hwYzFzZ01DQmRJQ2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhkeVlYQXViV0Z3S0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBkbUZ5SUdWc1pXMGdQU0IwYUdsek8xeHVYRzVjZEZ4MFhIUmNkSGRvYVd4bElDZ2daV3hsYlM1bWFYSnpkRVZzWlcxbGJuUkRhR2xzWkNBcElIdGNibHgwWEhSY2RGeDBYSFJsYkdWdElEMGdaV3hsYlM1bWFYSnpkRVZzWlcxbGJuUkRhR2xzWkR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQmxiR1Z0TzF4dVhIUmNkRngwZlNBcExtRndjR1Z1WkNnZ2RHaHBjeUFwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlMRnh1WEc1Y2RIZHlZWEJKYm01bGNqb2dablZ1WTNScGIyNG9JR2gwYld3Z0tTQjdYRzVjZEZ4MGFXWWdLQ0JwYzBaMWJtTjBhVzl1S0NCb2RHMXNJQ2tnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWxZV05vS0NCbWRXNWpkR2x2YmlnZ2FTQXBJSHRjYmx4MFhIUmNkRngwYWxGMVpYSjVLQ0IwYUdseklDa3VkM0poY0VsdWJtVnlLQ0JvZEcxc0xtTmhiR3dvSUhSb2FYTXNJR2tnS1NBcE8xeHVYSFJjZEZ4MGZTQXBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb0lHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkbUZ5SUhObGJHWWdQU0JxVVhWbGNua29JSFJvYVhNZ0tTeGNibHgwWEhSY2RGeDBZMjl1ZEdWdWRITWdQU0J6Wld4bUxtTnZiblJsYm5SektDazdYRzVjYmx4MFhIUmNkR2xtSUNnZ1kyOXVkR1Z1ZEhNdWJHVnVaM1JvSUNrZ2UxeHVYSFJjZEZ4MFhIUmpiMjUwWlc1MGN5NTNjbUZ3UVd4c0tDQm9kRzFzSUNrN1hHNWNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RITmxiR1l1WVhCd1pXNWtLQ0JvZEcxc0lDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTQXBPMXh1WEhSOUxGeHVYRzVjZEhkeVlYQTZJR1oxYm1OMGFXOXVLQ0JvZEcxc0lDa2dlMXh1WEhSY2RIWmhjaUJvZEcxc1NYTkdkVzVqZEdsdmJpQTlJR2x6Um5WdVkzUnBiMjRvSUdoMGJXd2dLVHRjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29JR1oxYm1OMGFXOXVLQ0JwSUNrZ2UxeHVYSFJjZEZ4MGFsRjFaWEo1S0NCMGFHbHpJQ2t1ZDNKaGNFRnNiQ2dnYUhSdGJFbHpSblZ1WTNScGIyNGdQeUJvZEcxc0xtTmhiR3dvSUhSb2FYTXNJR2tnS1NBNklHaDBiV3dnS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDBzWEc1Y2JseDBkVzUzY21Gd09pQm1kVzVqZEdsdmJpZ2djMlZzWldOMGIzSWdLU0I3WEc1Y2RGeDBkR2hwY3k1d1lYSmxiblFvSUhObGJHVmpkRzl5SUNrdWJtOTBLQ0JjSW1KdlpIbGNJaUFwTG1WaFkyZ29JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwYWxGMVpYSjVLQ0IwYUdseklDa3VjbVZ3YkdGalpWZHBkR2dvSUhSb2FYTXVZMmhwYkdST2IyUmxjeUFwTzF4dVhIUmNkSDBnS1R0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1ZlNBcE8xeHVYRzVjYm1wUmRXVnllUzVsZUhCeUxuQnpaWFZrYjNNdWFHbGtaR1Z1SUQwZ1puVnVZM1JwYjI0b0lHVnNaVzBnS1NCN1hHNWNkSEpsZEhWeWJpQWhhbEYxWlhKNUxtVjRjSEl1Y0hObGRXUnZjeTUyYVhOcFlteGxLQ0JsYkdWdElDazdYRzU5TzF4dWFsRjFaWEo1TG1WNGNISXVjSE5sZFdSdmN5NTJhWE5wWW14bElEMGdablZ1WTNScGIyNG9JR1ZzWlcwZ0tTQjdYRzVjZEhKbGRIVnliaUFoSVNnZ1pXeGxiUzV2Wm1aelpYUlhhV1IwYUNCOGZDQmxiR1Z0TG05bVpuTmxkRWhsYVdkb2RDQjhmQ0JsYkdWdExtZGxkRU5zYVdWdWRGSmxZM1J6S0NrdWJHVnVaM1JvSUNrN1hHNTlPMXh1WEc1Y2JseHVYRzVxVVhWbGNua3VZV3BoZUZObGRIUnBibWR6TG5ob2NpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUjBjbmtnZTF4dVhIUmNkSEpsZEhWeWJpQnVaWGNnZDJsdVpHOTNMbGhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzVjZEgwZ1kyRjBZMmdnS0NCbElDa2dlMzFjYm4wN1hHNWNiblpoY2lCNGFISlRkV05qWlhOelUzUmhkSFZ6SUQwZ2UxeHVYRzVjZEZ4MEx5OGdSbWxzWlNCd2NtOTBiMk52YkNCaGJIZGhlWE1nZVdsbGJHUnpJSE4wWVhSMWN5QmpiMlJsSURBc0lHRnpjM1Z0WlNBeU1EQmNibHgwWEhRd09pQXlNREFzWEc1Y2JseDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnYjI1c2VWeHVYSFJjZEM4dklDTXhORFV3T2lCemIyMWxkR2x0WlhNZ1NVVWdjbVYwZFhKdWN5QXhNakl6SUhkb1pXNGdhWFFnYzJodmRXeGtJR0psSURJd05GeHVYSFJjZERFeU1qTTZJREl3TkZ4dVhIUjlMRnh1WEhSNGFISlRkWEJ3YjNKMFpXUWdQU0JxVVhWbGNua3VZV3BoZUZObGRIUnBibWR6TG5ob2NpZ3BPMXh1WEc1emRYQndiM0owTG1OdmNuTWdQU0FoSVhob2NsTjFjSEJ2Y25SbFpDQW1KaUFvSUZ3aWQybDBhRU55WldSbGJuUnBZV3h6WENJZ2FXNGdlR2h5VTNWd2NHOXlkR1ZrSUNrN1hHNXpkWEJ3YjNKMExtRnFZWGdnUFNCNGFISlRkWEJ3YjNKMFpXUWdQU0FoSVhob2NsTjFjSEJ2Y25SbFpEdGNibHh1YWxGMVpYSjVMbUZxWVhoVWNtRnVjM0J2Y25Rb0lHWjFibU4wYVc5dUtDQnZjSFJwYjI1eklDa2dlMXh1WEhSMllYSWdZMkZzYkdKaFkyc3NJR1Z5Y205eVEyRnNiR0poWTJzN1hHNWNibHgwTHk4Z1EzSnZjM01nWkc5dFlXbHVJRzl1YkhrZ1lXeHNiM2RsWkNCcFppQnpkWEJ3YjNKMFpXUWdkR2h5YjNWbmFDQllUVXhJZEhSd1VtVnhkV1Z6ZEZ4dVhIUnBaaUFvSUhOMWNIQnZjblF1WTI5eWN5QjhmQ0I0YUhKVGRYQndiM0owWldRZ0ppWWdJVzl3ZEdsdmJuTXVZM0p2YzNORWIyMWhhVzRnS1NCN1hHNWNkRngwY21WMGRYSnVJSHRjYmx4MFhIUmNkSE5sYm1RNklHWjFibU4wYVc5dUtDQm9aV0ZrWlhKekxDQmpiMjF3YkdWMFpTQXBJSHRjYmx4MFhIUmNkRngwZG1GeUlHa3NYRzVjZEZ4MFhIUmNkRngwZUdoeUlEMGdiM0IwYVc5dWN5NTRhSElvS1R0Y2JseHVYSFJjZEZ4MFhIUjRhSEl1YjNCbGJpaGNibHgwWEhSY2RGeDBYSFJ2Y0hScGIyNXpMblI1Y0dVc1hHNWNkRngwWEhSY2RGeDBiM0IwYVc5dWN5NTFjbXdzWEc1Y2RGeDBYSFJjZEZ4MGIzQjBhVzl1Y3k1aGMzbHVZeXhjYmx4MFhIUmNkRngwWEhSdmNIUnBiMjV6TG5WelpYSnVZVzFsTEZ4dVhIUmNkRngwWEhSY2RHOXdkR2x2Ym5NdWNHRnpjM2R2Y21SY2JseDBYSFJjZEZ4MEtUdGNibHh1WEhSY2RGeDBYSFF2THlCQmNIQnNlU0JqZFhOMGIyMGdabWxsYkdSeklHbG1JSEJ5YjNacFpHVmtYRzVjZEZ4MFhIUmNkR2xtSUNnZ2IzQjBhVzl1Y3k1NGFISkdhV1ZzWkhNZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWm05eUlDZ2dhU0JwYmlCdmNIUnBiMjV6TG5ob2NrWnBaV3hrY3lBcElIdGNibHgwWEhSY2RGeDBYSFJjZEhob2Nsc2dhU0JkSUQwZ2IzQjBhVzl1Y3k1NGFISkdhV1ZzWkhOYklHa2dYVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCUGRtVnljbWxrWlNCdGFXMWxJSFI1Y0dVZ2FXWWdibVZsWkdWa1hHNWNkRngwWEhSY2RHbG1JQ2dnYjNCMGFXOXVjeTV0YVcxbFZIbHdaU0FtSmlCNGFISXViM1psY25KcFpHVk5hVzFsVkhsd1pTQXBJSHRjYmx4MFhIUmNkRngwWEhSNGFISXViM1psY25KcFpHVk5hVzFsVkhsd1pTZ2diM0IwYVc5dWN5NXRhVzFsVkhsd1pTQXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdXQzFTWlhGMVpYTjBaV1F0VjJsMGFDQm9aV0ZrWlhKY2JseDBYSFJjZEZ4MEx5OGdSbTl5SUdOeWIzTnpMV1J2YldGcGJpQnlaWEYxWlhOMGN5d2djMlZsYVc1bklHRnpJR052Ym1ScGRHbHZibk1nWm05eUlHRWdjSEpsWm14cFoyaDBJR0Z5WlZ4dVhIUmNkRngwWEhRdkx5QmhhMmx1SUhSdklHRWdhbWxuYzJGM0lIQjFlbnBzWlN3Z2QyVWdjMmx0Y0d4NUlHNWxkbVZ5SUhObGRDQnBkQ0IwYnlCaVpTQnpkWEpsTGx4dVhIUmNkRngwWEhRdkx5QW9hWFFnWTJGdUlHRnNkMkY1Y3lCaVpTQnpaWFFnYjI0Z1lTQndaWEl0Y21WeGRXVnpkQ0JpWVhOcGN5QnZjaUJsZG1WdUlIVnphVzVuSUdGcVlYaFRaWFIxY0NsY2JseDBYSFJjZEZ4MEx5OGdSbTl5SUhOaGJXVXRaRzl0WVdsdUlISmxjWFZsYzNSekxDQjNiMjRuZENCamFHRnVaMlVnYUdWaFpHVnlJR2xtSUdGc2NtVmhaSGtnY0hKdmRtbGtaV1F1WEc1Y2RGeDBYSFJjZEdsbUlDZ2dJVzl3ZEdsdmJuTXVZM0p2YzNORWIyMWhhVzRnSmlZZ0lXaGxZV1JsY25OYklGd2lXQzFTWlhGMVpYTjBaV1F0VjJsMGFGd2lJRjBnS1NCN1hHNWNkRngwWEhSY2RGeDBhR1ZoWkdWeWMxc2dYQ0pZTFZKbGNYVmxjM1JsWkMxWGFYUm9YQ0lnWFNBOUlGd2lXRTFNU0hSMGNGSmxjWFZsYzNSY0lqdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEM4dklGTmxkQ0JvWldGa1pYSnpYRzVjZEZ4MFhIUmNkR1p2Y2lBb0lHa2dhVzRnYUdWaFpHVnljeUFwSUh0Y2JseDBYSFJjZEZ4MFhIUjRhSEl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWdnYVN3Z2FHVmhaR1Z5YzFzZ2FTQmRJQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUXZMeUJEWVd4c1ltRmphMXh1WEhSY2RGeDBYSFJqWVd4c1ltRmpheUE5SUdaMWJtTjBhVzl1S0NCMGVYQmxJQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR05oYkd4aVlXTnJJRDBnWlhKeWIzSkRZV3hzWW1GamF5QTlJSGhvY2k1dmJteHZZV1FnUFZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhob2NpNXZibVZ5Y205eUlEMGdlR2h5TG05dVlXSnZjblFnUFNCNGFISXViMjUwYVcxbGIzVjBJRDFjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhob2NpNXZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWdQU0J1ZFd4c08xeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2dnZEhsd1pTQTlQVDBnWENKaFltOXlkRndpSUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RIaG9jaTVoWW05eWRDZ3BPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2FXWWdLQ0IwZVhCbElEMDlQU0JjSW1WeWNtOXlYQ0lnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJUZFhCd2IzSjBPaUJKUlNBOFBUa2diMjVzZVZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEM4dklFOXVJR0VnYldGdWRXRnNJRzVoZEdsMlpTQmhZbTl5ZEN3Z1NVVTVJSFJvY205M2MxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR1Z5Y205eWN5QnZiaUJoYm5rZ2NISnZjR1Z5ZEhrZ1lXTmpaWE56SUhSb1lYUWdhWE1nYm05MElISmxZV1I1VTNSaGRHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSUhSNWNHVnZaaUI0YUhJdWMzUmhkSFZ6SUNFOVBTQmNJbTUxYldKbGNsd2lJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyOXRjR3hsZEdVb0lEQXNJRndpWlhKeWIzSmNJaUFwTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSamIyMXdiR1YwWlNoY2JseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCR2FXeGxPaUJ3Y205MGIyTnZiQ0JoYkhkaGVYTWdlV2xsYkdSeklITjBZWFIxY3lBd095QnpaV1VnSXpnMk1EVXNJQ014TkRJd04xeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFI0YUhJdWMzUmhkSFZ6TEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjRhSEl1YzNSaGRIVnpWR1Y0ZEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyOXRjR3hsZEdVb1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUjRhSEpUZFdOalpYTnpVM1JoZEhWeld5QjRhSEl1YzNSaGRIVnpJRjBnZkh3Z2VHaHlMbk4wWVhSMWN5eGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSGhvY2k1emRHRjBkWE5VWlhoMExGeHVYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFF2THlCVGRYQndiM0owT2lCSlJTQThQVGtnYjI1c2VWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnU1VVNUlHaGhjeUJ1YnlCWVNGSXlJR0oxZENCMGFISnZkM01nYjI0Z1ltbHVZWEo1SUNoMGNtRmpMVEV4TkRJMktWeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBMeThnUm05eUlGaElVaklnYm05dUxYUmxlSFFzSUd4bGRDQjBhR1VnWTJGc2JHVnlJR2hoYm1Sc1pTQnBkQ0FvWjJndE1qUTVPQ2xjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFJjZENnZ2VHaHlMbkpsYzNCdmJuTmxWSGx3WlNCOGZDQmNJblJsZUhSY0lpQXBJQ0U5UFNCY0luUmxlSFJjSWlBZ2ZIeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dWdlppQjRhSEl1Y21WemNHOXVjMlZVWlhoMElDRTlQU0JjSW5OMGNtbHVaMXdpSUQ5Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBleUJpYVc1aGNuazZJSGhvY2k1eVpYTndiMjV6WlNCOUlEcGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZXlCMFpYaDBPaUI0YUhJdWNtVnpjRzl1YzJWVVpYaDBJSDBzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSNGFISXVaMlYwUVd4c1VtVnpjRzl1YzJWSVpXRmtaWEp6S0NsY2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRcE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBmVHRjYmx4dVhIUmNkRngwWEhRdkx5Qk1hWE4wWlc0Z2RHOGdaWFpsYm5SelhHNWNkRngwWEhSY2RIaG9jaTV2Ym14dllXUWdQU0JqWVd4c1ltRmpheWdwTzF4dVhIUmNkRngwWEhSbGNuSnZja05oYkd4aVlXTnJJRDBnZUdoeUxtOXVaWEp5YjNJZ1BTQjRhSEl1YjI1MGFXMWxiM1YwSUQwZ1kyRnNiR0poWTJzb0lGd2laWEp5YjNKY0lpQXBPMXh1WEc1Y2RGeDBYSFJjZEM4dklGTjFjSEJ2Y25RNklFbEZJRGtnYjI1c2VWeHVYSFJjZEZ4MFhIUXZMeUJWYzJVZ2IyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElIUnZJSEpsY0d4aFkyVWdiMjVoWW05eWRGeHVYSFJjZEZ4MFhIUXZMeUIwYnlCb1lXNWtiR1VnZFc1allYVm5hSFFnWVdKdmNuUnpYRzVjZEZ4MFhIUmNkR2xtSUNnZ2VHaHlMbTl1WVdKdmNuUWdJVDA5SUhWdVpHVm1hVzVsWkNBcElIdGNibHgwWEhSY2RGeDBYSFI0YUhJdWIyNWhZbTl5ZENBOUlHVnljbTl5UTJGc2JHSmhZMnM3WEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MGVHaHlMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QkRhR1ZqYXlCeVpXRmtlVk4wWVhSbElHSmxabTl5WlNCMGFXMWxiM1YwSUdGeklHbDBJR05vWVc1blpYTmNibHgwWEhSY2RGeDBYSFJjZEdsbUlDZ2dlR2h5TG5KbFlXUjVVM1JoZEdVZ1BUMDlJRFFnS1NCN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdRV3hzYjNjZ2IyNWxjbkp2Y2lCMGJ5QmlaU0JqWVd4c1pXUWdabWx5YzNRc1hHNWNkRngwWEhSY2RGeDBYSFJjZEM4dklHSjFkQ0IwYUdGMElIZHBiR3dnYm05MElHaGhibVJzWlNCaElHNWhkR2wyWlNCaFltOXlkRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUXZMeUJCYkhOdkxDQnpZWFpsSUdWeWNtOXlRMkZzYkdKaFkyc2dkRzhnWVNCMllYSnBZV0pzWlZ4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCaGN5QjRhSEl1YjI1bGNuSnZjaUJqWVc1dWIzUWdZbVVnWVdOalpYTnpaV1JjYmx4MFhIUmNkRngwWEhSY2RGeDBkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9JR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2dZMkZzYkdKaFkyc2dLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSbGNuSnZja05oYkd4aVlXTnJLQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBYSFI5SUNrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEM4dklFTnlaV0YwWlNCMGFHVWdZV0p2Y25RZ1kyRnNiR0poWTJ0Y2JseDBYSFJjZEZ4MFkyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF5Z2dYQ0poWW05eWRGd2lJQ2s3WEc1Y2JseDBYSFJjZEZ4MGRISjVJSHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRVJ2SUhObGJtUWdkR2hsSUhKbGNYVmxjM1FnS0hSb2FYTWdiV0Y1SUhKaGFYTmxJR0Z1SUdWNFkyVndkR2x2YmlsY2JseDBYSFJjZEZ4MFhIUjRhSEl1YzJWdVpDZ2diM0IwYVc5dWN5NW9ZWE5EYjI1MFpXNTBJQ1ltSUc5d2RHbHZibk11WkdGMFlTQjhmQ0J1ZFd4c0lDazdYRzVjZEZ4MFhIUmNkSDBnWTJGMFkyZ2dLQ0JsSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z0l6RTBOamd6T2lCUGJteDVJSEpsZEdoeWIzY2dhV1lnZEdocGN5Qm9ZWE51SjNRZ1ltVmxiaUJ1YjNScFptbGxaQ0JoY3lCaGJpQmxjbkp2Y2lCNVpYUmNibHgwWEhSY2RGeDBYSFJwWmlBb0lHTmhiR3hpWVdOcklDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHliM2NnWlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEdGaWIzSjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLQ0JqWVd4c1ltRmpheUFwSUh0Y2JseDBYSFJjZEZ4MFhIUmpZV3hzWW1GamF5Z3BPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVHRjYmx4MGZWeHVmU0FwTzF4dVhHNWNibHh1WEc0dkx5QlFjbVYyWlc1MElHRjFkRzh0WlhobFkzVjBhVzl1SUc5bUlITmpjbWx3ZEhNZ2QyaGxiaUJ1YnlCbGVIQnNhV05wZENCa1lYUmhWSGx3WlNCM1lYTWdjSEp2ZG1sa1pXUWdLRk5sWlNCbmFDMHlORE15S1Z4dWFsRjFaWEo1TG1GcVlYaFFjbVZtYVd4MFpYSW9JR1oxYm1OMGFXOXVLQ0J6SUNrZ2UxeHVYSFJwWmlBb0lITXVZM0p2YzNORWIyMWhhVzRnS1NCN1hHNWNkRngwY3k1amIyNTBaVzUwY3k1elkzSnBjSFFnUFNCbVlXeHpaVHRjYmx4MGZWeHVmU0FwTzF4dVhHNHZMeUJKYm5OMFlXeHNJSE5qY21sd2RDQmtZWFJoVkhsd1pWeHVhbEYxWlhKNUxtRnFZWGhUWlhSMWNDZ2dlMXh1WEhSaFkyTmxjSFJ6T2lCN1hHNWNkRngwYzJOeWFYQjBPaUJjSW5SbGVIUXZhbUYyWVhOamNtbHdkQ3dnWVhCd2JHbGpZWFJwYjI0dmFtRjJZWE5qY21sd2RDd2dYQ0lnSzF4dVhIUmNkRngwWENKaGNIQnNhV05oZEdsdmJpOWxZMjFoYzJOeWFYQjBMQ0JoY0hCc2FXTmhkR2x2Ymk5NExXVmpiV0Z6WTNKcGNIUmNJbHh1WEhSOUxGeHVYSFJqYjI1MFpXNTBjem9nZTF4dVhIUmNkSE5qY21sd2REb2dMMXhjWWlnL09tcGhkbUY4WldOdFlTbHpZM0pwY0hSY1hHSXZYRzVjZEgwc1hHNWNkR052Ym5abGNuUmxjbk02SUh0Y2JseDBYSFJjSW5SbGVIUWdjMk55YVhCMFhDSTZJR1oxYm1OMGFXOXVLQ0IwWlhoMElDa2dlMXh1WEhSY2RGeDBhbEYxWlhKNUxtZHNiMkpoYkVWMllXd29JSFJsZUhRZ0tUdGNibHgwWEhSY2RISmxkSFZ5YmlCMFpYaDBPMXh1WEhSY2RIMWNibHgwZlZ4dWZTQXBPMXh1WEc0dkx5QklZVzVrYkdVZ1kyRmphR1VuY3lCemNHVmphV0ZzSUdOaGMyVWdZVzVrSUdOeWIzTnpSRzl0WVdsdVhHNXFVWFZsY25rdVlXcGhlRkJ5WldacGJIUmxjaWdnWENKelkzSnBjSFJjSWl3Z1puVnVZM1JwYjI0b0lITWdLU0I3WEc1Y2RHbG1JQ2dnY3k1allXTm9aU0E5UFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RITXVZMkZqYUdVZ1BTQm1ZV3h6WlR0Y2JseDBmVnh1WEhScFppQW9JSE11WTNKdmMzTkViMjFoYVc0Z0tTQjdYRzVjZEZ4MGN5NTBlWEJsSUQwZ1hDSkhSVlJjSWp0Y2JseDBmVnh1ZlNBcE8xeHVYRzR2THlCQ2FXNWtJSE5qY21sd2RDQjBZV2NnYUdGamF5QjBjbUZ1YzNCdmNuUmNibXBSZFdWeWVTNWhhbUY0VkhKaGJuTndiM0owS0NCY0luTmpjbWx3ZEZ3aUxDQm1kVzVqZEdsdmJpZ2djeUFwSUh0Y2JseHVYSFF2THlCVWFHbHpJSFJ5WVc1emNHOXlkQ0J2Ym14NUlHUmxZV3h6SUhkcGRHZ2dZM0p2YzNNZ1pHOXRZV2x1SUhKbGNYVmxjM1J6WEc1Y2RHbG1JQ2dnY3k1amNtOXpjMFJ2YldGcGJpQXBJSHRjYmx4MFhIUjJZWElnYzJOeWFYQjBMQ0JqWVd4c1ltRmphenRjYmx4MFhIUnlaWFIxY200Z2UxeHVYSFJjZEZ4MGMyVnVaRG9nWm5WdVkzUnBiMjRvSUY4c0lHTnZiWEJzWlhSbElDa2dlMXh1WEhSY2RGeDBYSFJ6WTNKcGNIUWdQU0JxVVhWbGNua29JRndpUEhOamNtbHdkRDVjSWlBcExuQnliM0FvSUh0Y2JseDBYSFJjZEZ4MFhIUmphR0Z5YzJWME9pQnpMbk5qY21sd2RFTm9ZWEp6WlhRc1hHNWNkRngwWEhSY2RGeDBjM0pqT2lCekxuVnliRnh1WEhSY2RGeDBYSFI5SUNrdWIyNG9YRzVjZEZ4MFhIUmNkRngwWENKc2IyRmtJR1Z5Y205eVhDSXNYRzVjZEZ4MFhIUmNkRngwWTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlnZ1pYWjBJQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjMk55YVhCMExuSmxiVzkyWlNncE8xeHVYSFJjZEZ4MFhIUmNkRngwWTJGc2JHSmhZMnNnUFNCdWRXeHNPMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0JsZG5RZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RHTnZiWEJzWlhSbEtDQmxkblF1ZEhsd1pTQTlQVDBnWENKbGNuSnZjbHdpSUQ4Z05EQTBJRG9nTWpBd0xDQmxkblF1ZEhsd1pTQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwS1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJWYzJVZ2JtRjBhWFpsSUVSUFRTQnRZVzVwY0hWc1lYUnBiMjRnZEc4Z1lYWnZhV1FnYjNWeUlHUnZiVTFoYm1sd0lFRktRVmdnZEhKcFkydGxjbmxjYmx4MFhIUmNkRngwWkc5amRXMWxiblF1YUdWaFpDNWhjSEJsYm1SRGFHbHNaQ2dnYzJOeWFYQjBXeUF3SUYwZ0tUdGNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmhZbTl5ZERvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ1kyRnNiR0poWTJzZ0tTQjdYRzVjZEZ4MFhIUmNkRngwWTJGc2JHSmhZMnNvS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNkSDFjYm4wZ0tUdGNibHh1WEc1Y2JseHVkbUZ5SUc5c1pFTmhiR3hpWVdOcmN5QTlJRnRkTEZ4dVhIUnlhbk52Ym5BZ1BTQXZLRDBwWEZ3L0tEODlKbndrS1h4Y1hEOWNYRDh2TzF4dVhHNHZMeUJFWldaaGRXeDBJR3B6YjI1d0lITmxkSFJwYm1kelhHNXFVWFZsY25rdVlXcGhlRk5sZEhWd0tDQjdYRzVjZEdwemIyNXdPaUJjSW1OaGJHeGlZV05yWENJc1hHNWNkR3B6YjI1d1EyRnNiR0poWTJzNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RIWmhjaUJqWVd4c1ltRmpheUE5SUc5c1pFTmhiR3hpWVdOcmN5NXdiM0FvS1NCOGZDQW9JR3BSZFdWeWVTNWxlSEJoYm1SdklDc2dYQ0pmWENJZ0t5QW9JRzV2Ym1ObEt5c2dLU0FwTzF4dVhIUmNkSFJvYVhOYklHTmhiR3hpWVdOcklGMGdQU0IwY25WbE8xeHVYSFJjZEhKbGRIVnliaUJqWVd4c1ltRmphenRjYmx4MGZWeHVmU0FwTzF4dVhHNHZMeUJFWlhSbFkzUXNJRzV2Y20xaGJHbDZaU0J2Y0hScGIyNXpJR0Z1WkNCcGJuTjBZV3hzSUdOaGJHeGlZV05yY3lCbWIzSWdhbk52Ym5BZ2NtVnhkV1Z6ZEhOY2JtcFJkV1Z5ZVM1aGFtRjRVSEpsWm1sc2RHVnlLQ0JjSW1wemIyNGdhbk52Ym5CY0lpd2dablZ1WTNScGIyNG9JSE1zSUc5eWFXZHBibUZzVTJWMGRHbHVaM01zSUdweFdFaFNJQ2tnZTF4dVhHNWNkSFpoY2lCallXeHNZbUZqYTA1aGJXVXNJRzkyWlhKM2NtbDBkR1Z1TENCeVpYTndiMjV6WlVOdmJuUmhhVzVsY2l4Y2JseDBYSFJxYzI5dVVISnZjQ0E5SUhNdWFuTnZibkFnSVQwOUlHWmhiSE5sSUNZbUlDZ2djbXB6YjI1d0xuUmxjM1FvSUhNdWRYSnNJQ2tnUDF4dVhIUmNkRngwWENKMWNteGNJaUE2WEc1Y2RGeDBYSFIwZVhCbGIyWWdjeTVrWVhSaElEMDlQU0JjSW5OMGNtbHVaMXdpSUNZbVhHNWNkRngwWEhSY2RDZ2djeTVqYjI1MFpXNTBWSGx3WlNCOGZDQmNJbHdpSUNsY2JseDBYSFJjZEZ4MFhIUXVhVzVrWlhoUFppZ2dYQ0poY0hCc2FXTmhkR2x2Ymk5NExYZDNkeTFtYjNKdExYVnliR1Z1WTI5a1pXUmNJaUFwSUQwOVBTQXdJQ1ltWEc1Y2RGeDBYSFJjZEhKcWMyOXVjQzUwWlhOMEtDQnpMbVJoZEdFZ0tTQW1KaUJjSW1SaGRHRmNJbHh1WEhSY2RDazdYRzVjYmx4MEx5OGdTR0Z1Wkd4bElHbG1aaUIwYUdVZ1pYaHdaV04wWldRZ1pHRjBZU0IwZVhCbElHbHpJRndpYW5OdmJuQmNJaUJ2Y2lCM1pTQm9ZWFpsSUdFZ2NHRnlZVzFsZEdWeUlIUnZJSE5sZEZ4dVhIUnBaaUFvSUdwemIyNVFjbTl3SUh4OElITXVaR0YwWVZSNWNHVnpXeUF3SUYwZ1BUMDlJRndpYW5OdmJuQmNJaUFwSUh0Y2JseHVYSFJjZEM4dklFZGxkQ0JqWVd4c1ltRmpheUJ1WVcxbExDQnlaVzFsYldKbGNtbHVaeUJ3Y21WbGVHbHpkR2x1WnlCMllXeDFaU0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dhWFJjYmx4MFhIUmpZV3hzWW1GamEwNWhiV1VnUFNCekxtcHpiMjV3UTJGc2JHSmhZMnNnUFNCcGMwWjFibU4wYVc5dUtDQnpMbXB6YjI1d1EyRnNiR0poWTJzZ0tTQS9YRzVjZEZ4MFhIUnpMbXB6YjI1d1EyRnNiR0poWTJzb0tTQTZYRzVjZEZ4MFhIUnpMbXB6YjI1d1EyRnNiR0poWTJzN1hHNWNibHgwWEhRdkx5Qkpibk5sY25RZ1kyRnNiR0poWTJzZ2FXNTBieUIxY213Z2IzSWdabTl5YlNCa1lYUmhYRzVjZEZ4MGFXWWdLQ0JxYzI5dVVISnZjQ0FwSUh0Y2JseDBYSFJjZEhOYklHcHpiMjVRY205d0lGMGdQU0J6V3lCcWMyOXVVSEp2Y0NCZExuSmxjR3hoWTJVb0lISnFjMjl1Y0N3Z1hDSWtNVndpSUNzZ1kyRnNiR0poWTJ0T1lXMWxJQ2s3WEc1Y2RGeDBmU0JsYkhObElHbG1JQ2dnY3k1cWMyOXVjQ0FoUFQwZ1ptRnNjMlVnS1NCN1hHNWNkRngwWEhSekxuVnliQ0FyUFNBb0lISnhkV1Z5ZVM1MFpYTjBLQ0J6TG5WeWJDQXBJRDhnWENJbVhDSWdPaUJjSWo5Y0lpQXBJQ3NnY3k1cWMyOXVjQ0FySUZ3aVBWd2lJQ3NnWTJGc2JHSmhZMnRPWVcxbE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGVnpaU0JrWVhSaElHTnZiblpsY25SbGNpQjBieUJ5WlhSeWFXVjJaU0JxYzI5dUlHRm1kR1Z5SUhOamNtbHdkQ0JsZUdWamRYUnBiMjVjYmx4MFhIUnpMbU52Ym5abGNuUmxjbk5iSUZ3aWMyTnlhWEIwSUdwemIyNWNJaUJkSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUnBaaUFvSUNGeVpYTndiMjV6WlVOdmJuUmhhVzVsY2lBcElIdGNibHgwWEhSY2RGeDBhbEYxWlhKNUxtVnljbTl5S0NCallXeHNZbUZqYTA1aGJXVWdLeUJjSWlCM1lYTWdibTkwSUdOaGJHeGxaRndpSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSeVpYUjFjbTRnY21WemNHOXVjMlZEYjI1MFlXbHVaWEpiSURBZ1hUdGNibHgwWEhSOU8xeHVYRzVjZEZ4MEx5OGdSbTl5WTJVZ2FuTnZiaUJrWVhSaFZIbHdaVnh1WEhSY2RITXVaR0YwWVZSNWNHVnpXeUF3SUYwZ1BTQmNJbXB6YjI1Y0lqdGNibHh1WEhSY2RDOHZJRWx1YzNSaGJHd2dZMkZzYkdKaFkydGNibHgwWEhSdmRtVnlkM0pwZEhSbGJpQTlJSGRwYm1SdmQxc2dZMkZzYkdKaFkydE9ZVzFsSUYwN1hHNWNkRngwZDJsdVpHOTNXeUJqWVd4c1ltRmphMDVoYldVZ1hTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwY21WemNHOXVjMlZEYjI1MFlXbHVaWElnUFNCaGNtZDFiV1Z1ZEhNN1hHNWNkRngwZlR0Y2JseHVYSFJjZEM4dklFTnNaV0Z1TFhWd0lHWjFibU4wYVc5dUlDaG1hWEpsY3lCaFpuUmxjaUJqYjI1MlpYSjBaWEp6S1Z4dVhIUmNkR3B4V0VoU0xtRnNkMkY1Y3lnZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVsbUlIQnlaWFpwYjNWeklIWmhiSFZsSUdScFpHNG5kQ0JsZUdsemRDQXRJSEpsYlc5MlpTQnBkRnh1WEhSY2RGeDBhV1lnS0NCdmRtVnlkM0pwZEhSbGJpQTlQVDBnZFc1a1pXWnBibVZrSUNrZ2UxeHVYSFJjZEZ4MFhIUnFVWFZsY25rb0lIZHBibVJ2ZHlBcExuSmxiVzkyWlZCeWIzQW9JR05oYkd4aVlXTnJUbUZ0WlNBcE8xeHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnY21WemRHOXlaU0J3Y21WbGVHbHpkR2x1WnlCMllXeDFaVnh1WEhSY2RGeDBmU0JsYkhObElIdGNibHgwWEhSY2RGeDBkMmx1Wkc5M1d5QmpZV3hzWW1GamEwNWhiV1VnWFNBOUlHOTJaWEozY21sMGRHVnVPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCVFlYWmxJR0poWTJzZ1lYTWdabkpsWlZ4dVhIUmNkRngwYVdZZ0tDQnpXeUJqWVd4c1ltRmphMDVoYldVZ1hTQXBJSHRjYmx4dVhIUmNkRngwWEhRdkx5Qk5ZV3RsSUhOMWNtVWdkR2hoZENCeVpTMTFjMmx1WnlCMGFHVWdiM0IwYVc5dWN5QmtiMlZ6YmlkMElITmpjbVYzSUhSb2FXNW5jeUJoY205MWJtUmNibHgwWEhSY2RGeDBjeTVxYzI5dWNFTmhiR3hpWVdOcklEMGdiM0pwWjJsdVlXeFRaWFIwYVc1bmN5NXFjMjl1Y0VOaGJHeGlZV05yTzF4dVhHNWNkRngwWEhSY2RDOHZJRk5oZG1VZ2RHaGxJR05oYkd4aVlXTnJJRzVoYldVZ1ptOXlJR1oxZEhWeVpTQjFjMlZjYmx4MFhIUmNkRngwYjJ4a1EyRnNiR0poWTJ0ekxuQjFjMmdvSUdOaGJHeGlZV05yVG1GdFpTQXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCRFlXeHNJR2xtSUdsMElIZGhjeUJoSUdaMWJtTjBhVzl1SUdGdVpDQjNaU0JvWVhabElHRWdjbVZ6Y0c5dWMyVmNibHgwWEhSY2RHbG1JQ2dnY21WemNHOXVjMlZEYjI1MFlXbHVaWElnSmlZZ2FYTkdkVzVqZEdsdmJpZ2diM1psY25keWFYUjBaVzRnS1NBcElIdGNibHgwWEhSY2RGeDBiM1psY25keWFYUjBaVzRvSUhKbGMzQnZibk5sUTI5dWRHRnBibVZ5V3lBd0lGMGdLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WemNHOXVjMlZEYjI1MFlXbHVaWElnUFNCdmRtVnlkM0pwZEhSbGJpQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MFhIUjlJQ2s3WEc1Y2JseDBYSFF2THlCRVpXeGxaMkYwWlNCMGJ5QnpZM0pwY0hSY2JseDBYSFJ5WlhSMWNtNGdYQ0p6WTNKcGNIUmNJanRjYmx4MGZWeHVmU0FwTzF4dVhHNWNibHh1WEc0dkx5QlRkWEJ3YjNKME9pQlRZV1poY21rZ09DQnZibXg1WEc0dkx5QkpiaUJUWVdaaGNta2dPQ0JrYjJOMWJXVnVkSE1nWTNKbFlYUmxaQ0IyYVdFZ1pHOWpkVzFsYm5RdWFXMXdiR1Z0Wlc1MFlYUnBiMjR1WTNKbFlYUmxTRlJOVEVSdlkzVnRaVzUwWEc0dkx5QmpiMnhzWVhCelpTQnphV0pzYVc1bklHWnZjbTF6T2lCMGFHVWdjMlZqYjI1a0lHOXVaU0JpWldOdmJXVnpJR0VnWTJocGJHUWdiMllnZEdobElHWnBjbk4wSUc5dVpTNWNiaTh2SUVKbFkyRjFjMlVnYjJZZ2RHaGhkQ3dnZEdocGN5QnpaV04xY21sMGVTQnRaV0Z6ZFhKbElHaGhjeUIwYnlCaVpTQmthWE5oWW14bFpDQnBiaUJUWVdaaGNta2dPQzVjYmk4dklHaDBkSEJ6T2k4dlluVm5jeTUzWldKcmFYUXViM0puTDNOb2IzZGZZblZuTG1ObmFUOXBaRDB4TXpjek16ZGNibk4xY0hCdmNuUXVZM0psWVhSbFNGUk5URVJ2WTNWdFpXNTBJRDBnS0NCbWRXNWpkR2x2YmlncElIdGNibHgwZG1GeUlHSnZaSGtnUFNCa2IyTjFiV1Z1ZEM1cGJYQnNaVzFsYm5SaGRHbHZiaTVqY21WaGRHVklWRTFNUkc5amRXMWxiblFvSUZ3aVhDSWdLUzVpYjJSNU8xeHVYSFJpYjJSNUxtbHVibVZ5U0ZSTlRDQTlJRndpUEdadmNtMCtQQzltYjNKdFBqeG1iM0p0UGp3dlptOXliVDVjSWp0Y2JseDBjbVYwZFhKdUlHSnZaSGt1WTJocGJHUk9iMlJsY3k1c1pXNW5kR2dnUFQwOUlESTdYRzU5SUNrb0tUdGNibHh1WEc0dkx5QkJjbWQxYldWdWRDQmNJbVJoZEdGY0lpQnphRzkxYkdRZ1ltVWdjM1J5YVc1bklHOW1JR2gwYld4Y2JpOHZJR052Ym5SbGVIUWdLRzl3ZEdsdmJtRnNLVG9nU1dZZ2MzQmxZMmxtYVdWa0xDQjBhR1VnWm5KaFoyMWxiblFnZDJsc2JDQmlaU0JqY21WaGRHVmtJR2x1SUhSb2FYTWdZMjl1ZEdWNGRDeGNiaTh2SUdSbFptRjFiSFJ6SUhSdklHUnZZM1Z0Wlc1MFhHNHZMeUJyWldWd1UyTnlhWEIwY3lBb2IzQjBhVzl1WVd3cE9pQkpaaUIwY25WbExDQjNhV3hzSUdsdVkyeDFaR1VnYzJOeWFYQjBjeUJ3WVhOelpXUWdhVzRnZEdobElHaDBiV3dnYzNSeWFXNW5YRzVxVVhWbGNua3VjR0Z5YzJWSVZFMU1JRDBnWm5WdVkzUnBiMjRvSUdSaGRHRXNJR052Ym5SbGVIUXNJR3RsWlhCVFkzSnBjSFJ6SUNrZ2UxeHVYSFJwWmlBb0lIUjVjR1Z2WmlCa1lYUmhJQ0U5UFNCY0luTjBjbWx1WjF3aUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCYlhUdGNibHgwZlZ4dVhIUnBaaUFvSUhSNWNHVnZaaUJqYjI1MFpYaDBJRDA5UFNCY0ltSnZiMnhsWVc1Y0lpQXBJSHRjYmx4MFhIUnJaV1Z3VTJOeWFYQjBjeUE5SUdOdmJuUmxlSFE3WEc1Y2RGeDBZMjl1ZEdWNGRDQTlJR1poYkhObE8xeHVYSFI5WEc1Y2JseDBkbUZ5SUdKaGMyVXNJSEJoY25ObFpDd2djMk55YVhCMGN6dGNibHh1WEhScFppQW9JQ0ZqYjI1MFpYaDBJQ2tnZTF4dVhHNWNkRngwTHk4Z1UzUnZjQ0J6WTNKcGNIUnpJRzl5SUdsdWJHbHVaU0JsZG1WdWRDQm9ZVzVrYkdWeWN5Qm1jbTl0SUdKbGFXNW5JR1Y0WldOMWRHVmtJR2x0YldWa2FXRjBaV3g1WEc1Y2RGeDBMeThnWW5rZ2RYTnBibWNnWkc5amRXMWxiblF1YVcxd2JHVnRaVzUwWVhScGIyNWNibHgwWEhScFppQW9JSE4xY0hCdmNuUXVZM0psWVhSbFNGUk5URVJ2WTNWdFpXNTBJQ2tnZTF4dVhIUmNkRngwWTI5dWRHVjRkQ0E5SUdSdlkzVnRaVzUwTG1sdGNHeGxiV1Z1ZEdGMGFXOXVMbU55WldGMFpVaFVUVXhFYjJOMWJXVnVkQ2dnWENKY0lpQXBPMXh1WEc1Y2RGeDBYSFF2THlCVFpYUWdkR2hsSUdKaGMyVWdhSEpsWmlCbWIzSWdkR2hsSUdOeVpXRjBaV1FnWkc5amRXMWxiblJjYmx4MFhIUmNkQzh2SUhOdklHRnVlU0J3WVhKelpXUWdaV3hsYldWdWRITWdkMmwwYUNCVlVreHpYRzVjZEZ4MFhIUXZMeUJoY21VZ1ltRnpaV1FnYjI0Z2RHaGxJR1J2WTNWdFpXNTBKM01nVlZKTUlDaG5hQzB5T1RZMUtWeHVYSFJjZEZ4MFltRnpaU0E5SUdOdmJuUmxlSFF1WTNKbFlYUmxSV3hsYldWdWRDZ2dYQ0ppWVhObFhDSWdLVHRjYmx4MFhIUmNkR0poYzJVdWFISmxaaUE5SUdSdlkzVnRaVzUwTG14dlkyRjBhVzl1TG1oeVpXWTdYRzVjZEZ4MFhIUmpiMjUwWlhoMExtaGxZV1F1WVhCd1pXNWtRMmhwYkdRb0lHSmhjMlVnS1R0Y2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBZMjl1ZEdWNGRDQTlJR1J2WTNWdFpXNTBPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkSEJoY25ObFpDQTlJSEp6YVc1bmJHVlVZV2N1WlhobFl5Z2daR0YwWVNBcE8xeHVYSFJ6WTNKcGNIUnpJRDBnSVd0bFpYQlRZM0pwY0hSeklDWW1JRnRkTzF4dVhHNWNkQzh2SUZOcGJtZHNaU0IwWVdkY2JseDBhV1lnS0NCd1lYSnpaV1FnS1NCN1hHNWNkRngwY21WMGRYSnVJRnNnWTI5dWRHVjRkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDQndZWEp6WldSYklERWdYU0FwSUYwN1hHNWNkSDFjYmx4dVhIUndZWEp6WldRZ1BTQmlkV2xzWkVaeVlXZHRaVzUwS0NCYklHUmhkR0VnWFN3Z1kyOXVkR1Y0ZEN3Z2MyTnlhWEIwY3lBcE8xeHVYRzVjZEdsbUlDZ2djMk55YVhCMGN5QW1KaUJ6WTNKcGNIUnpMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUnFVWFZsY25rb0lITmpjbWx3ZEhNZ0tTNXlaVzF2ZG1Vb0tUdGNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQnFVWFZsY25rdWJXVnlaMlVvSUZ0ZExDQndZWEp6WldRdVkyaHBiR1JPYjJSbGN5QXBPMXh1ZlR0Y2JseHVYRzR2S2lwY2JpQXFJRXh2WVdRZ1lTQjFjbXdnYVc1MGJ5QmhJSEJoWjJWY2JpQXFMMXh1YWxGMVpYSjVMbVp1TG14dllXUWdQU0JtZFc1amRHbHZiaWdnZFhKc0xDQndZWEpoYlhNc0lHTmhiR3hpWVdOcklDa2dlMXh1WEhSMllYSWdjMlZzWldOMGIzSXNJSFI1Y0dVc0lISmxjM0J2Ym5ObExGeHVYSFJjZEhObGJHWWdQU0IwYUdsekxGeHVYSFJjZEc5bVppQTlJSFZ5YkM1cGJtUmxlRTltS0NCY0lpQmNJaUFwTzF4dVhHNWNkR2xtSUNnZ2IyWm1JRDRnTFRFZ0tTQjdYRzVjZEZ4MGMyVnNaV04wYjNJZ1BTQnpkSEpwY0VGdVpFTnZiR3hoY0hObEtDQjFjbXd1YzJ4cFkyVW9JRzltWmlBcElDazdYRzVjZEZ4MGRYSnNJRDBnZFhKc0xuTnNhV05sS0NBd0xDQnZabVlnS1R0Y2JseDBmVnh1WEc1Y2RDOHZJRWxtSUdsMEozTWdZU0JtZFc1amRHbHZibHh1WEhScFppQW9JR2x6Um5WdVkzUnBiMjRvSUhCaGNtRnRjeUFwSUNrZ2UxeHVYRzVjZEZ4MEx5OGdWMlVnWVhOemRXMWxJSFJvWVhRZ2FYUW5jeUIwYUdVZ1kyRnNiR0poWTJ0Y2JseDBYSFJqWVd4c1ltRmpheUE5SUhCaGNtRnRjenRjYmx4MFhIUndZWEpoYlhNZ1BTQjFibVJsWm1sdVpXUTdYRzVjYmx4MEx5OGdUM1JvWlhKM2FYTmxMQ0JpZFdsc1pDQmhJSEJoY21GdElITjBjbWx1WjF4dVhIUjlJR1ZzYzJVZ2FXWWdLQ0J3WVhKaGJYTWdKaVlnZEhsd1pXOW1JSEJoY21GdGN5QTlQVDBnWENKdlltcGxZM1JjSWlBcElIdGNibHgwWEhSMGVYQmxJRDBnWENKUVQxTlVYQ0k3WEc1Y2RIMWNibHh1WEhRdkx5QkpaaUIzWlNCb1lYWmxJR1ZzWlcxbGJuUnpJSFJ2SUcxdlpHbG1lU3dnYldGclpTQjBhR1VnY21WeGRXVnpkRnh1WEhScFppQW9JSE5sYkdZdWJHVnVaM1JvSUQ0Z01DQXBJSHRjYmx4MFhIUnFVWFZsY25rdVlXcGhlQ2dnZTF4dVhIUmNkRngwZFhKc09pQjFjbXdzWEc1Y2JseDBYSFJjZEM4dklFbG1JRndpZEhsd1pWd2lJSFpoY21saFlteGxJR2x6SUhWdVpHVm1hVzVsWkN3Z2RHaGxiaUJjSWtkRlZGd2lJRzFsZEdodlpDQjNhV3hzSUdKbElIVnpaV1F1WEc1Y2RGeDBYSFF2THlCTllXdGxJSFpoYkhWbElHOW1JSFJvYVhNZ1ptbGxiR1FnWlhod2JHbGphWFFnYzJsdVkyVmNibHgwWEhSY2RDOHZJSFZ6WlhJZ1kyRnVJRzkyWlhKeWFXUmxJR2wwSUhSb2NtOTFaMmdnWVdwaGVGTmxkSFZ3SUcxbGRHaHZaRnh1WEhSY2RGeDBkSGx3WlRvZ2RIbHdaU0I4ZkNCY0lrZEZWRndpTEZ4dVhIUmNkRngwWkdGMFlWUjVjR1U2SUZ3aWFIUnRiRndpTEZ4dVhIUmNkRngwWkdGMFlUb2djR0Z5WVcxelhHNWNkRngwZlNBcExtUnZibVVvSUdaMWJtTjBhVzl1S0NCeVpYTndiMjV6WlZSbGVIUWdLU0I3WEc1Y2JseDBYSFJjZEM4dklGTmhkbVVnY21WemNHOXVjMlVnWm05eUlIVnpaU0JwYmlCamIyMXdiR1YwWlNCallXeHNZbUZqYTF4dVhIUmNkRngwY21WemNHOXVjMlVnUFNCaGNtZDFiV1Z1ZEhNN1hHNWNibHgwWEhSY2RITmxiR1l1YUhSdGJDZ2djMlZzWldOMGIzSWdQMXh1WEc1Y2RGeDBYSFJjZEM4dklFbG1JR0VnYzJWc1pXTjBiM0lnZDJGeklITndaV05wWm1sbFpDd2diRzlqWVhSbElIUm9aU0J5YVdkb2RDQmxiR1Z0Wlc1MGN5QnBiaUJoSUdSMWJXMTVJR1JwZGx4dVhIUmNkRngwWEhRdkx5QkZlR05zZFdSbElITmpjbWx3ZEhNZ2RHOGdZWFp2YVdRZ1NVVWdKMUJsY20xcGMzTnBiMjRnUkdWdWFXVmtKeUJsY25KdmNuTmNibHgwWEhSY2RGeDBhbEYxWlhKNUtDQmNJanhrYVhZK1hDSWdLUzVoY0hCbGJtUW9JR3BSZFdWeWVTNXdZWEp6WlVoVVRVd29JSEpsYzNCdmJuTmxWR1Y0ZENBcElDa3VabWx1WkNnZ2MyVnNaV04wYjNJZ0tTQTZYRzVjYmx4MFhIUmNkRngwTHk4Z1QzUm9aWEozYVhObElIVnpaU0IwYUdVZ1puVnNiQ0J5WlhOMWJIUmNibHgwWEhSY2RGeDBjbVZ6Y0c5dWMyVlVaWGgwSUNrN1hHNWNibHgwWEhRdkx5QkpaaUIwYUdVZ2NtVnhkV1Z6ZENCemRXTmpaV1ZrY3l3Z2RHaHBjeUJtZFc1amRHbHZiaUJuWlhSeklGd2laR0YwWVZ3aUxDQmNJbk4wWVhSMWMxd2lMQ0JjSW1weFdFaFNYQ0pjYmx4MFhIUXZMeUJpZFhRZ2RHaGxlU0JoY21VZ2FXZHViM0psWkNCaVpXTmhkWE5sSUhKbGMzQnZibk5sSUhkaGN5QnpaWFFnWVdKdmRtVXVYRzVjZEZ4MEx5OGdTV1lnYVhRZ1ptRnBiSE1zSUhSb2FYTWdablZ1WTNScGIyNGdaMlYwY3lCY0ltcHhXRWhTWENJc0lGd2ljM1JoZEhWelhDSXNJRndpWlhKeWIzSmNJbHh1WEhSY2RIMGdLUzVoYkhkaGVYTW9JR05oYkd4aVlXTnJJQ1ltSUdaMWJtTjBhVzl1S0NCcWNWaElVaXdnYzNSaGRIVnpJQ2tnZTF4dVhIUmNkRngwYzJWc1ppNWxZV05vS0NCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBZMkZzYkdKaFkyc3VZWEJ3Ykhrb0lIUm9hWE1zSUhKbGMzQnZibk5sSUh4OElGc2dhbkZZU0ZJdWNtVnpjRzl1YzJWVVpYaDBMQ0J6ZEdGMGRYTXNJR3B4V0VoU0lGMGdLVHRjYmx4MFhIUmNkSDBnS1R0Y2JseDBYSFI5SUNrN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNibHh1WEc1Y2JpOHZJRUYwZEdGamFDQmhJR0oxYm1Ob0lHOW1JR1oxYm1OMGFXOXVjeUJtYjNJZ2FHRnVaR3hwYm1jZ1kyOXRiVzl1SUVGS1FWZ2daWFpsYm5SelhHNXFVWFZsY25rdVpXRmphQ2dnVzF4dVhIUmNJbUZxWVhoVGRHRnlkRndpTEZ4dVhIUmNJbUZxWVhoVGRHOXdYQ0lzWEc1Y2RGd2lZV3BoZUVOdmJYQnNaWFJsWENJc1hHNWNkRndpWVdwaGVFVnljbTl5WENJc1hHNWNkRndpWVdwaGVGTjFZMk5sYzNOY0lpeGNibHgwWENKaGFtRjRVMlZ1WkZ3aVhHNWRMQ0JtZFc1amRHbHZiaWdnYVN3Z2RIbHdaU0FwSUh0Y2JseDBhbEYxWlhKNUxtWnVXeUIwZVhCbElGMGdQU0JtZFc1amRHbHZiaWdnWm00Z0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXViMjRvSUhSNWNHVXNJR1p1SUNrN1hHNWNkSDA3WEc1OUlDazdYRzVjYmx4dVhHNWNibXBSZFdWeWVTNWxlSEJ5TG5CelpYVmtiM011WVc1cGJXRjBaV1FnUFNCbWRXNWpkR2x2YmlnZ1pXeGxiU0FwSUh0Y2JseDBjbVYwZFhKdUlHcFJkV1Z5ZVM1bmNtVndLQ0JxVVhWbGNua3VkR2x0WlhKekxDQm1kVzVqZEdsdmJpZ2dabTRnS1NCN1hHNWNkRngwY21WMGRYSnVJR1ZzWlcwZ1BUMDlJR1p1TG1Wc1pXMDdYRzVjZEgwZ0tTNXNaVzVuZEdnN1hHNTlPMXh1WEc1Y2JseHVYRzVxVVhWbGNua3ViMlptYzJWMElEMGdlMXh1WEhSelpYUlBabVp6WlhRNklHWjFibU4wYVc5dUtDQmxiR1Z0TENCdmNIUnBiMjV6TENCcElDa2dlMXh1WEhSY2RIWmhjaUJqZFhKUWIzTnBkR2x2Yml3Z1kzVnlUR1ZtZEN3Z1kzVnlRMU5UVkc5d0xDQmpkWEpVYjNBc0lHTjFjazltWm5ObGRDd2dZM1Z5UTFOVFRHVm1kQ3dnWTJGc1kzVnNZWFJsVUc5emFYUnBiMjRzWEc1Y2RGeDBYSFJ3YjNOcGRHbHZiaUE5SUdwUmRXVnllUzVqYzNNb0lHVnNaVzBzSUZ3aWNHOXphWFJwYjI1Y0lpQXBMRnh1WEhSY2RGeDBZM1Z5Uld4bGJTQTlJR3BSZFdWeWVTZ2daV3hsYlNBcExGeHVYSFJjZEZ4MGNISnZjSE1nUFNCN2ZUdGNibHh1WEhSY2RDOHZJRk5sZENCd2IzTnBkR2x2YmlCbWFYSnpkQ3dnYVc0dFkyRnpaU0IwYjNBdmJHVm1kQ0JoY21VZ2MyVjBJR1YyWlc0Z2IyNGdjM1JoZEdsaklHVnNaVzFjYmx4MFhIUnBaaUFvSUhCdmMybDBhVzl1SUQwOVBTQmNJbk4wWVhScFkxd2lJQ2tnZTF4dVhIUmNkRngwWld4bGJTNXpkSGxzWlM1d2IzTnBkR2x2YmlBOUlGd2ljbVZzWVhScGRtVmNJanRjYmx4MFhIUjlYRzVjYmx4MFhIUmpkWEpQWm1aelpYUWdQU0JqZFhKRmJHVnRMbTltWm5ObGRDZ3BPMXh1WEhSY2RHTjFja05UVTFSdmNDQTlJR3BSZFdWeWVTNWpjM01vSUdWc1pXMHNJRndpZEc5d1hDSWdLVHRjYmx4MFhIUmpkWEpEVTFOTVpXWjBJRDBnYWxGMVpYSjVMbU56Y3lnZ1pXeGxiU3dnWENKc1pXWjBYQ0lnS1R0Y2JseDBYSFJqWVd4amRXeGhkR1ZRYjNOcGRHbHZiaUE5SUNnZ2NHOXphWFJwYjI0Z1BUMDlJRndpWVdKemIyeDFkR1ZjSWlCOGZDQndiM05wZEdsdmJpQTlQVDBnWENKbWFYaGxaRndpSUNrZ0ppWmNibHgwWEhSY2RDZ2dZM1Z5UTFOVFZHOXdJQ3NnWTNWeVExTlRUR1ZtZENBcExtbHVaR1Y0VDJZb0lGd2lZWFYwYjF3aUlDa2dQaUF0TVR0Y2JseHVYSFJjZEM4dklFNWxaV1FnZEc4Z1ltVWdZV0pzWlNCMGJ5QmpZV3hqZFd4aGRHVWdjRzl6YVhScGIyNGdhV1lnWldsMGFHVnlYRzVjZEZ4MEx5OGdkRzl3SUc5eUlHeGxablFnYVhNZ1lYVjBieUJoYm1RZ2NHOXphWFJwYjI0Z2FYTWdaV2wwYUdWeUlHRmljMjlzZFhSbElHOXlJR1pwZUdWa1hHNWNkRngwYVdZZ0tDQmpZV3hqZFd4aGRHVlFiM05wZEdsdmJpQXBJSHRjYmx4MFhIUmNkR04xY2xCdmMybDBhVzl1SUQwZ1kzVnlSV3hsYlM1d2IzTnBkR2x2YmlncE8xeHVYSFJjZEZ4MFkzVnlWRzl3SUQwZ1kzVnlVRzl6YVhScGIyNHVkRzl3TzF4dVhIUmNkRngwWTNWeVRHVm1kQ0E5SUdOMWNsQnZjMmwwYVc5dUxteGxablE3WEc1Y2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBZM1Z5Vkc5d0lEMGdjR0Z5YzJWR2JHOWhkQ2dnWTNWeVExTlRWRzl3SUNrZ2ZId2dNRHRjYmx4MFhIUmNkR04xY2t4bFpuUWdQU0J3WVhKelpVWnNiMkYwS0NCamRYSkRVMU5NWldaMElDa2dmSHdnTUR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lHbHpSblZ1WTNScGIyNG9JRzl3ZEdsdmJuTWdLU0FwSUh0Y2JseHVYSFJjZEZ4MEx5OGdWWE5sSUdwUmRXVnllUzVsZUhSbGJtUWdhR1Z5WlNCMGJ5QmhiR3h2ZHlCdGIyUnBabWxqWVhScGIyNGdiMllnWTI5dmNtUnBibUYwWlhNZ1lYSm5kVzFsYm5RZ0tHZG9MVEU0TkRncFhHNWNkRngwWEhSdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3k1allXeHNLQ0JsYkdWdExDQnBMQ0JxVVhWbGNua3VaWGgwWlc1a0tDQjdmU3dnWTNWeVQyWm1jMlYwSUNrZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9JRzl3ZEdsdmJuTXVkRzl3SUNFOUlHNTFiR3dnS1NCN1hHNWNkRngwWEhSd2NtOXdjeTUwYjNBZ1BTQW9JRzl3ZEdsdmJuTXVkRzl3SUMwZ1kzVnlUMlptYzJWMExuUnZjQ0FwSUNzZ1kzVnlWRzl3TzF4dVhIUmNkSDFjYmx4MFhIUnBaaUFvSUc5d2RHbHZibk11YkdWbWRDQWhQU0J1ZFd4c0lDa2dlMXh1WEhSY2RGeDBjSEp2Y0hNdWJHVm1kQ0E5SUNnZ2IzQjBhVzl1Y3k1c1pXWjBJQzBnWTNWeVQyWm1jMlYwTG14bFpuUWdLU0FySUdOMWNreGxablE3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NCY0luVnphVzVuWENJZ2FXNGdiM0IwYVc5dWN5QXBJSHRjYmx4MFhIUmNkRzl3ZEdsdmJuTXVkWE5wYm1jdVkyRnNiQ2dnWld4bGJTd2djSEp2Y0hNZ0tUdGNibHh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSamRYSkZiR1Z0TG1OemN5Z2djSEp2Y0hNZ0tUdGNibHgwWEhSOVhHNWNkSDFjYm4wN1hHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4dVhIUXZMeUJ2Wm1aelpYUW9LU0J5Wld4aGRHVnpJR0Z1SUdWc1pXMWxiblFuY3lCaWIzSmtaWElnWW05NElIUnZJSFJvWlNCa2IyTjFiV1Z1ZENCdmNtbG5hVzVjYmx4MGIyWm1jMlYwT2lCbWRXNWpkR2x2YmlnZ2IzQjBhVzl1Y3lBcElIdGNibHh1WEhSY2RDOHZJRkJ5WlhObGNuWmxJR05vWVdsdWFXNW5JR1p2Y2lCelpYUjBaWEpjYmx4MFhIUnBaaUFvSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnYjNCMGFXOXVjeUE5UFQwZ2RXNWtaV1pwYm1Wa0lEOWNibHgwWEhSY2RGeDBkR2hwY3lBNlhHNWNkRngwWEhSY2RIUm9hWE11WldGamFDZ2dablZ1WTNScGIyNG9JR2tnS1NCN1hHNWNkRngwWEhSY2RGeDBhbEYxWlhKNUxtOW1abk5sZEM1elpYUlBabVp6WlhRb0lIUm9hWE1zSUc5d2RHbHZibk1zSUdrZ0tUdGNibHgwWEhSY2RGeDBmU0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSFpoY2lCeVpXTjBMQ0IzYVc0c1hHNWNkRngwWEhSbGJHVnRJRDBnZEdocGMxc2dNQ0JkTzF4dVhHNWNkRngwYVdZZ0tDQWhaV3hsYlNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCU1pYUjFjbTRnZW1WeWIzTWdabTl5SUdScGMyTnZibTVsWTNSbFpDQmhibVFnYUdsa1pHVnVJQ2hrYVhOd2JHRjVPaUJ1YjI1bEtTQmxiR1Z0Wlc1MGN5QW9aMmd0TWpNeE1DbGNibHgwWEhRdkx5QlRkWEJ3YjNKME9pQkpSU0E4UFRFeElHOXViSGxjYmx4MFhIUXZMeUJTZFc1dWFXNW5JR2RsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENCdmJpQmhYRzVjZEZ4MEx5OGdaR2x6WTI5dWJtVmpkR1ZrSUc1dlpHVWdhVzRnU1VVZ2RHaHliM2R6SUdGdUlHVnljbTl5WEc1Y2RGeDBhV1lnS0NBaFpXeGxiUzVuWlhSRGJHbGxiblJTWldOMGN5Z3BMbXhsYm1kMGFDQXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjdJSFJ2Y0RvZ01Dd2diR1ZtZERvZ01DQjlPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRWRsZENCa2IyTjFiV1Z1ZEMxeVpXeGhkR2wyWlNCd2IzTnBkR2x2YmlCaWVTQmhaR1JwYm1jZ2RtbGxkM0J2Y25RZ2MyTnliMnhzSUhSdklIWnBaWGR3YjNKMExYSmxiR0YwYVhabElHZENRMUpjYmx4MFhIUnlaV04wSUQwZ1pXeGxiUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNibHgwWEhSM2FXNGdQU0JsYkdWdExtOTNibVZ5Ukc5amRXMWxiblF1WkdWbVlYVnNkRlpwWlhjN1hHNWNkRngwY21WMGRYSnVJSHRjYmx4MFhIUmNkSFJ2Y0RvZ2NtVmpkQzUwYjNBZ0t5QjNhVzR1Y0dGblpWbFBabVp6WlhRc1hHNWNkRngwWEhSc1pXWjBPaUJ5WldOMExteGxablFnS3lCM2FXNHVjR0ZuWlZoUFptWnpaWFJjYmx4MFhIUjlPMXh1WEhSOUxGeHVYRzVjZEM4dklIQnZjMmwwYVc5dUtDa2djbVZzWVhSbGN5QmhiaUJsYkdWdFpXNTBKM01nYldGeVoybHVJR0p2ZUNCMGJ5QnBkSE1nYjJabWMyVjBJSEJoY21WdWRDZHpJSEJoWkdScGJtY2dZbTk0WEc1Y2RDOHZJRlJvYVhNZ1kyOXljbVZ6Y0c5dVpITWdkRzhnZEdobElHSmxhR0YyYVc5eUlHOW1JRU5UVXlCaFluTnZiSFYwWlNCd2IzTnBkR2x2Ym1sdVoxeHVYSFJ3YjNOcGRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwYVdZZ0tDQWhkR2hwYzFzZ01DQmRJQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHh1WEhSY2RIWmhjaUJ2Wm1aelpYUlFZWEpsYm5Rc0lHOW1abk5sZEN3Z1pHOWpMRnh1WEhSY2RGeDBaV3hsYlNBOUlIUm9hWE5iSURBZ1hTeGNibHgwWEhSY2RIQmhjbVZ1ZEU5bVpuTmxkQ0E5SUhzZ2RHOXdPaUF3TENCc1pXWjBPaUF3SUgwN1hHNWNibHgwWEhRdkx5QndiM05wZEdsdmJqcG1hWGhsWkNCbGJHVnRaVzUwY3lCaGNtVWdiMlptYzJWMElHWnliMjBnZEdobElIWnBaWGR3YjNKMExDQjNhR2xqYUNCcGRITmxiR1lnWVd4M1lYbHpJR2hoY3lCNlpYSnZJRzltWm5ObGRGeHVYSFJjZEdsbUlDZ2dhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0p3YjNOcGRHbHZibHdpSUNrZ1BUMDlJRndpWm1sNFpXUmNJaUFwSUh0Y2JseHVYSFJjZEZ4MEx5OGdRWE56ZFcxbElIQnZjMmwwYVc5dU9tWnBlR1ZrSUdsdGNHeHBaWE1nWVhaaGFXeGhZbWxzYVhSNUlHOW1JR2RsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZEZ4dVhIUmNkRngwYjJabWMyVjBJRDBnWld4bGJTNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1R0Y2JseHVYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJ2Wm1aelpYUWdQU0IwYUdsekxtOW1abk5sZENncE8xeHVYRzVjZEZ4MFhIUXZMeUJCWTJOdmRXNTBJR1p2Y2lCMGFHVWdLbkpsWVd3cUlHOW1abk5sZENCd1lYSmxiblFzSUhkb2FXTm9JR05oYmlCaVpTQjBhR1VnWkc5amRXMWxiblFnYjNJZ2FYUnpJSEp2YjNRZ1pXeGxiV1Z1ZEZ4dVhIUmNkRngwTHk4Z2QyaGxiaUJoSUhOMFlYUnBZMkZzYkhrZ2NHOXphWFJwYjI1bFpDQmxiR1Z0Wlc1MElHbHpJR2xrWlc1MGFXWnBaV1JjYmx4MFhIUmNkR1J2WXlBOUlHVnNaVzB1YjNkdVpYSkViMk4xYldWdWREdGNibHgwWEhSY2RHOW1abk5sZEZCaGNtVnVkQ0E5SUdWc1pXMHViMlptYzJWMFVHRnlaVzUwSUh4OElHUnZZeTVrYjJOMWJXVnVkRVZzWlcxbGJuUTdYRzVjZEZ4MFhIUjNhR2xzWlNBb0lHOW1abk5sZEZCaGNtVnVkQ0FtSmx4dVhIUmNkRngwWEhRb0lHOW1abk5sZEZCaGNtVnVkQ0E5UFQwZ1pHOWpMbUp2WkhrZ2ZId2diMlptYzJWMFVHRnlaVzUwSUQwOVBTQmtiMk11Wkc5amRXMWxiblJGYkdWdFpXNTBJQ2tnSmlaY2JseDBYSFJjZEZ4MGFsRjFaWEo1TG1OemN5Z2diMlptYzJWMFVHRnlaVzUwTENCY0luQnZjMmwwYVc5dVhDSWdLU0E5UFQwZ1hDSnpkR0YwYVdOY0lpQXBJSHRjYmx4dVhIUmNkRngwWEhSdlptWnpaWFJRWVhKbGJuUWdQU0J2Wm1aelpYUlFZWEpsYm5RdWNHRnlaVzUwVG05a1pUdGNibHgwWEhSY2RIMWNibHgwWEhSY2RHbG1JQ2dnYjJabWMyVjBVR0Z5Wlc1MElDWW1JRzltWm5ObGRGQmhjbVZ1ZENBaFBUMGdaV3hsYlNBbUppQnZabVp6WlhSUVlYSmxiblF1Ym05a1pWUjVjR1VnUFQwOUlERWdLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTVzVqYjNKd2IzSmhkR1VnWW05eVpHVnljeUJwYm5SdklHbDBjeUJ2Wm1aelpYUXNJSE5wYm1ObElIUm9aWGtnWVhKbElHOTFkSE5wWkdVZ2FYUnpJR052Ym5SbGJuUWdiM0pwWjJsdVhHNWNkRngwWEhSY2RIQmhjbVZ1ZEU5bVpuTmxkQ0E5SUdwUmRXVnllU2dnYjJabWMyVjBVR0Z5Wlc1MElDa3ViMlptYzJWMEtDazdYRzVjZEZ4MFhIUmNkSEJoY21WdWRFOW1abk5sZEM1MGIzQWdLejBnYWxGMVpYSjVMbU56Y3lnZ2IyWm1jMlYwVUdGeVpXNTBMQ0JjSW1KdmNtUmxjbFJ2Y0ZkcFpIUm9YQ0lzSUhSeWRXVWdLVHRjYmx4MFhIUmNkRngwY0dGeVpXNTBUMlptYzJWMExteGxablFnS3owZ2FsRjFaWEo1TG1OemN5Z2diMlptYzJWMFVHRnlaVzUwTENCY0ltSnZjbVJsY2t4bFpuUlhhV1IwYUZ3aUxDQjBjblZsSUNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1UzVmlkSEpoWTNRZ2NHRnlaVzUwSUc5bVpuTmxkSE1nWVc1a0lHVnNaVzFsYm5RZ2JXRnlaMmx1YzF4dVhIUmNkSEpsZEhWeWJpQjdYRzVjZEZ4MFhIUjBiM0E2SUc5bVpuTmxkQzUwYjNBZ0xTQndZWEpsYm5SUFptWnpaWFF1ZEc5d0lDMGdhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dYQ0p0WVhKbmFXNVViM0JjSWl3Z2RISjFaU0FwTEZ4dVhIUmNkRngwYkdWbWREb2diMlptYzJWMExteGxablFnTFNCd1lYSmxiblJQWm1aelpYUXViR1ZtZENBdElHcFJkV1Z5ZVM1amMzTW9JR1ZzWlcwc0lGd2liV0Z5WjJsdVRHVm1kRndpTENCMGNuVmxJQ2xjYmx4MFhIUjlPMXh1WEhSOUxGeHVYRzVjZEM4dklGUm9hWE1nYldWMGFHOWtJSGRwYkd3Z2NtVjBkWEp1SUdSdlkzVnRaVzUwUld4bGJXVnVkQ0JwYmlCMGFHVWdabTlzYkc5M2FXNW5JR05oYzJWek9seHVYSFF2THlBeEtTQkdiM0lnZEdobElHVnNaVzFsYm5RZ2FXNXphV1JsSUhSb1pTQnBabkpoYldVZ2QybDBhRzkxZENCdlptWnpaWFJRWVhKbGJuUXNJSFJvYVhNZ2JXVjBhRzlrSUhkcGJHd2djbVYwZFhKdVhHNWNkQzh2SUNBZ0lHUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENCdlppQjBhR1VnY0dGeVpXNTBJSGRwYm1SdmQxeHVYSFF2THlBeUtTQkdiM0lnZEdobElHaHBaR1JsYmlCdmNpQmtaWFJoWTJobFpDQmxiR1Z0Wlc1MFhHNWNkQzh2SURNcElFWnZjaUJpYjJSNUlHOXlJR2gwYld3Z1pXeGxiV1Z1ZEN3Z2FTNWxMaUJwYmlCallYTmxJRzltSUhSb1pTQm9kRzFzSUc1dlpHVWdMU0JwZENCM2FXeHNJSEpsZEhWeWJpQnBkSE5sYkdaY2JseDBMeTljYmx4MEx5OGdZblYwSUhSb2IzTmxJR1Y0WTJWd2RHbHZibk1nZDJWeVpTQnVaWFpsY2lCd2NtVnpaVzUwWldRZ1lYTWdZU0J5WldGc0lHeHBabVVnZFhObExXTmhjMlZ6WEc1Y2RDOHZJR0Z1WkNCdGFXZG9kQ0JpWlNCamIyNXphV1JsY21Wa0lHRnpJRzF2Y21VZ2NISmxabVZ5WVdKc1pTQnlaWE4xYkhSekxseHVYSFF2TDF4dVhIUXZMeUJVYUdseklHeHZaMmxqTENCb2IzZGxkbVZ5TENCcGN5QnViM1FnWjNWaGNtRnVkR1ZsWkNCaGJtUWdZMkZ1SUdOb1lXNW5aU0JoZENCaGJua2djRzlwYm5RZ2FXNGdkR2hsSUdaMWRIVnlaVnh1WEhSdlptWnpaWFJRWVhKbGJuUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG0xaGNDZ2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFIyWVhJZ2IyWm1jMlYwVUdGeVpXNTBJRDBnZEdocGN5NXZabVp6WlhSUVlYSmxiblE3WEc1Y2JseDBYSFJjZEhkb2FXeGxJQ2dnYjJabWMyVjBVR0Z5Wlc1MElDWW1JR3BSZFdWeWVTNWpjM01vSUc5bVpuTmxkRkJoY21WdWRDd2dYQ0p3YjNOcGRHbHZibHdpSUNrZ1BUMDlJRndpYzNSaGRHbGpYQ0lnS1NCN1hHNWNkRngwWEhSY2RHOW1abk5sZEZCaGNtVnVkQ0E5SUc5bVpuTmxkRkJoY21WdWRDNXZabVp6WlhSUVlYSmxiblE3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJ2Wm1aelpYUlFZWEpsYm5RZ2ZId2daRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVYSFJjZEgwZ0tUdGNibHgwZlZ4dWZTQXBPMXh1WEc0dkx5QkRjbVZoZEdVZ2MyTnliMnhzVEdWbWRDQmhibVFnYzJOeWIyeHNWRzl3SUcxbGRHaHZaSE5jYm1wUmRXVnllUzVsWVdOb0tDQjdJSE5qY205c2JFeGxablE2SUZ3aWNHRm5aVmhQWm1aelpYUmNJaXdnYzJOeWIyeHNWRzl3T2lCY0luQmhaMlZaVDJabWMyVjBYQ0lnZlN3Z1puVnVZM1JwYjI0b0lHMWxkR2h2WkN3Z2NISnZjQ0FwSUh0Y2JseDBkbUZ5SUhSdmNDQTlJRndpY0dGblpWbFBabVp6WlhSY0lpQTlQVDBnY0hKdmNEdGNibHh1WEhScVVYVmxjbmt1Wm01YklHMWxkR2h2WkNCZElEMGdablZ1WTNScGIyNG9JSFpoYkNBcElIdGNibHgwWEhSeVpYUjFjbTRnWVdOalpYTnpLQ0IwYUdsekxDQm1kVzVqZEdsdmJpZ2daV3hsYlN3Z2JXVjBhRzlrTENCMllXd2dLU0I3WEc1Y2JseDBYSFJjZEM4dklFTnZZV3hsYzJObElHUnZZM1Z0Wlc1MGN5QmhibVFnZDJsdVpHOTNjMXh1WEhSY2RGeDBkbUZ5SUhkcGJqdGNibHgwWEhSY2RHbG1JQ2dnYVhOWGFXNWtiM2NvSUdWc1pXMGdLU0FwSUh0Y2JseDBYSFJjZEZ4MGQybHVJRDBnWld4bGJUdGNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnS1NCN1hHNWNkRngwWEhSY2RIZHBiaUE5SUdWc1pXMHVaR1ZtWVhWc2RGWnBaWGM3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDZ2dkbUZzSUQwOVBTQjFibVJsWm1sdVpXUWdLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIzYVc0Z1B5QjNhVzViSUhCeWIzQWdYU0E2SUdWc1pXMWJJRzFsZEdodlpDQmRPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb0lIZHBiaUFwSUh0Y2JseDBYSFJjZEZ4MGQybHVMbk5qY205c2JGUnZLRnh1WEhSY2RGeDBYSFJjZENGMGIzQWdQeUIyWVd3Z09pQjNhVzR1Y0dGblpWaFBabVp6WlhRc1hHNWNkRngwWEhSY2RGeDBkRzl3SUQ4Z2RtRnNJRG9nZDJsdUxuQmhaMlZaVDJabWMyVjBYRzVjZEZ4MFhIUmNkQ2s3WEc1Y2JseDBYSFJjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBYSFJjZEdWc1pXMWJJRzFsZEdodlpDQmRJRDBnZG1Gc08xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwc0lHMWxkR2h2WkN3Z2RtRnNMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JQ2s3WEc1Y2RIMDdYRzU5SUNrN1hHNWNiaTh2SUZOMWNIQnZjblE2SUZOaFptRnlhU0E4UFRjZ0xTQTVMakVzSUVOb2NtOXRaU0E4UFRNM0lDMGdORGxjYmk4dklFRmtaQ0IwYUdVZ2RHOXdMMnhsWm5RZ1kzTnpTRzl2YTNNZ2RYTnBibWNnYWxGMVpYSjVMbVp1TG5CdmMybDBhVzl1WEc0dkx5QlhaV0pyYVhRZ1luVm5PaUJvZEhSd2N6b3ZMMkoxWjNNdWQyVmlhMmwwTG05eVp5OXphRzkzWDJKMVp5NWpaMmsvYVdROU1qa3dPRFJjYmk4dklFSnNhVzVySUdKMVp6b2dhSFIwY0hNNkx5OWlkV2R6TG1Ob2NtOXRhWFZ0TG05eVp5OXdMMk5vY205dGFYVnRMMmx6YzNWbGN5OWtaWFJoYVd3L2FXUTlOVGc1TXpRM1hHNHZMeUJuWlhSRGIyMXdkWFJsWkZOMGVXeGxJSEpsZEhWeWJuTWdjR1Z5WTJWdWRDQjNhR1Z1SUhOd1pXTnBabWxsWkNCbWIzSWdkRzl3TDJ4bFpuUXZZbTkwZEc5dEwzSnBaMmgwTzF4dUx5OGdjbUYwYUdWeUlIUm9ZVzRnYldGclpTQjBhR1VnWTNOeklHMXZaSFZzWlNCa1pYQmxibVFnYjI0Z2RHaGxJRzltWm5ObGRDQnRiMlIxYkdVc0lHcDFjM1FnWTJobFkyc2dabTl5SUdsMElHaGxjbVZjYm1wUmRXVnllUzVsWVdOb0tDQmJJRndpZEc5d1hDSXNJRndpYkdWbWRGd2lJRjBzSUdaMWJtTjBhVzl1S0NCcExDQndjbTl3SUNrZ2UxeHVYSFJxVVhWbGNua3VZM056U0c5dmEzTmJJSEJ5YjNBZ1hTQTlJR0ZrWkVkbGRFaHZiMnRKWmlnZ2MzVndjRzl5ZEM1d2FYaGxiRkJ2YzJsMGFXOXVMRnh1WEhSY2RHWjFibU4wYVc5dUtDQmxiR1Z0TENCamIyMXdkWFJsWkNBcElIdGNibHgwWEhSY2RHbG1JQ2dnWTI5dGNIVjBaV1FnS1NCN1hHNWNkRngwWEhSY2RHTnZiWEIxZEdWa0lEMGdZM1Z5UTFOVEtDQmxiR1Z0TENCd2NtOXdJQ2s3WEc1Y2JseDBYSFJjZEZ4MEx5OGdTV1lnWTNWeVExTlRJSEpsZEhWeWJuTWdjR1Z5WTJWdWRHRm5aU3dnWm1Gc2JHSmhZMnNnZEc4Z2IyWm1jMlYwWEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ5Ym5WdGJtOXVjSGd1ZEdWemRDZ2dZMjl0Y0hWMFpXUWdLU0EvWEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1S0NCbGJHVnRJQ2t1Y0c5emFYUnBiMjRvS1ZzZ2NISnZjQ0JkSUNzZ1hDSndlRndpSURwY2JseDBYSFJjZEZ4MFhIUmpiMjF3ZFhSbFpEdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkQ2s3WEc1OUlDazdYRzVjYmx4dUx5OGdRM0psWVhSbElHbHVibVZ5U0dWcFoyaDBMQ0JwYm01bGNsZHBaSFJvTENCb1pXbG5hSFFzSUhkcFpIUm9MQ0J2ZFhSbGNraGxhV2RvZENCaGJtUWdiM1YwWlhKWGFXUjBhQ0J0WlhSb2IyUnpYRzVxVVhWbGNua3VaV0ZqYUNnZ2V5QklaV2xuYUhRNklGd2lhR1ZwWjJoMFhDSXNJRmRwWkhSb09pQmNJbmRwWkhSb1hDSWdmU3dnWm5WdVkzUnBiMjRvSUc1aGJXVXNJSFI1Y0dVZ0tTQjdYRzVjZEdwUmRXVnllUzVsWVdOb0tDQjdJSEJoWkdScGJtYzZJRndpYVc1dVpYSmNJaUFySUc1aGJXVXNJR052Ym5SbGJuUTZJSFI1Y0dVc0lGd2lYQ0k2SUZ3aWIzVjBaWEpjSWlBcklHNWhiV1VnZlN4Y2JseDBYSFJtZFc1amRHbHZiaWdnWkdWbVlYVnNkRVY0ZEhKaExDQm1kVzVqVG1GdFpTQXBJSHRjYmx4dVhIUmNkQzh2SUUxaGNtZHBiaUJwY3lCdmJteDVJR1p2Y2lCdmRYUmxja2hsYVdkb2RDd2diM1YwWlhKWGFXUjBhRnh1WEhSY2RHcFJkV1Z5ZVM1bWJsc2dablZ1WTA1aGJXVWdYU0E5SUdaMWJtTjBhVzl1S0NCdFlYSm5hVzRzSUhaaGJIVmxJQ2tnZTF4dVhIUmNkRngwZG1GeUlHTm9ZV2x1WVdKc1pTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dKaVlnS0NCa1pXWmhkV3gwUlhoMGNtRWdmSHdnZEhsd1pXOW1JRzFoY21kcGJpQWhQVDBnWENKaWIyOXNaV0Z1WENJZ0tTeGNibHgwWEhSY2RGeDBaWGgwY21FZ1BTQmtaV1poZFd4MFJYaDBjbUVnZkh3Z0tDQnRZWEpuYVc0Z1BUMDlJSFJ5ZFdVZ2ZId2dkbUZzZFdVZ1BUMDlJSFJ5ZFdVZ1B5QmNJbTFoY21kcGJsd2lJRG9nWENKaWIzSmtaWEpjSWlBcE8xeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1lXTmpaWE56S0NCMGFHbHpMQ0JtZFc1amRHbHZiaWdnWld4bGJTd2dkSGx3WlN3Z2RtRnNkV1VnS1NCN1hHNWNkRngwWEhSY2RIWmhjaUJrYjJNN1hHNWNibHgwWEhSY2RGeDBhV1lnS0NCcGMxZHBibVJ2ZHlnZ1pXeGxiU0FwSUNrZ2UxeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z0pDZ2dkMmx1Wkc5M0lDa3ViM1YwWlhKWGFXUjBhQzlJWldsbmFIUWdjbVYwZFhKdUlIY3ZhQ0JwYm1Oc2RXUnBibWNnYzJOeWIyeHNZbUZ5Y3lBb1oyZ3RNVGN5T1NsY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1puVnVZMDVoYldVdWFXNWtaWGhQWmlnZ1hDSnZkWFJsY2x3aUlDa2dQVDA5SURBZ1AxeHVYSFJjZEZ4MFhIUmNkRngwWld4bGJWc2dYQ0pwYm01bGNsd2lJQ3NnYm1GdFpTQmRJRHBjYmx4MFhIUmNkRngwWEhSY2RHVnNaVzB1Wkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBXeUJjSW1Oc2FXVnVkRndpSUNzZ2JtRnRaU0JkTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBMeThnUjJWMElHUnZZM1Z0Wlc1MElIZHBaSFJvSUc5eUlHaGxhV2RvZEZ4dVhIUmNkRngwWEhScFppQW9JR1ZzWlcwdWJtOWtaVlI1Y0dVZ1BUMDlJRGtnS1NCN1hHNWNkRngwWEhSY2RGeDBaRzlqSUQwZ1pXeGxiUzVrYjJOMWJXVnVkRVZzWlcxbGJuUTdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QkZhWFJvWlhJZ2MyTnliMnhzVzFkcFpIUm9MMGhsYVdkb2RGMGdiM0lnYjJabWMyVjBXMWRwWkhSb0wwaGxhV2RvZEYwZ2IzSWdZMnhwWlc1MFcxZHBaSFJvTDBobGFXZG9kRjBzWEc1Y2RGeDBYSFJjZEZ4MEx5OGdkMmhwWTJobGRtVnlJR2x6SUdkeVpXRjBaWE4wWEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUUxaGRHZ3ViV0Y0S0Z4dVhIUmNkRngwWEhSY2RGeDBaV3hsYlM1aWIyUjVXeUJjSW5OamNtOXNiRndpSUNzZ2JtRnRaU0JkTENCa2IyTmJJRndpYzJOeWIyeHNYQ0lnS3lCdVlXMWxJRjBzWEc1Y2RGeDBYSFJjZEZ4MFhIUmxiR1Z0TG1KdlpIbGJJRndpYjJabWMyVjBYQ0lnS3lCdVlXMWxJRjBzSUdSdlkxc2dYQ0p2Wm1aelpYUmNJaUFySUc1aGJXVWdYU3hjYmx4MFhIUmNkRngwWEhSY2RHUnZZMXNnWENKamJHbGxiblJjSWlBcklHNWhiV1VnWFZ4dVhIUmNkRngwWEhSY2RDazdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNBL1hHNWNibHgwWEhSY2RGeDBYSFF2THlCSFpYUWdkMmxrZEdnZ2IzSWdhR1ZwWjJoMElHOXVJSFJvWlNCbGJHVnRaVzUwTENCeVpYRjFaWE4wYVc1bklHSjFkQ0J1YjNRZ1ptOXlZMmx1WnlCd1lYSnpaVVpzYjJGMFhHNWNkRngwWEhSY2RGeDBhbEYxWlhKNUxtTnpjeWdnWld4bGJTd2dkSGx3WlN3Z1pYaDBjbUVnS1NBNlhHNWNibHgwWEhSY2RGeDBYSFF2THlCVFpYUWdkMmxrZEdnZ2IzSWdhR1ZwWjJoMElHOXVJSFJvWlNCbGJHVnRaVzUwWEc1Y2RGeDBYSFJjZEZ4MGFsRjFaWEo1TG5OMGVXeGxLQ0JsYkdWdExDQjBlWEJsTENCMllXeDFaU3dnWlhoMGNtRWdLVHRjYmx4MFhIUmNkSDBzSUhSNWNHVXNJR05vWVdsdVlXSnNaU0EvSUcxaGNtZHBiaUE2SUhWdVpHVm1hVzVsWkN3Z1kyaGhhVzVoWW14bElDazdYRzVjZEZ4MGZUdGNibHgwZlNBcE8xeHVmU0FwTzF4dVhHNWNibXBSZFdWeWVTNWxZV05vS0NBb0lGd2lZbXgxY2lCbWIyTjFjeUJtYjJOMWMybHVJR1p2WTNWemIzVjBJSEpsYzJsNlpTQnpZM0p2Ykd3Z1kyeHBZMnNnWkdKc1kyeHBZMnNnWENJZ0sxeHVYSFJjSW0xdmRYTmxaRzkzYmlCdGIzVnpaWFZ3SUcxdmRYTmxiVzkyWlNCdGIzVnpaVzkyWlhJZ2JXOTFjMlZ2ZFhRZ2JXOTFjMlZsYm5SbGNpQnRiM1Z6Wld4bFlYWmxJRndpSUN0Y2JseDBYQ0pqYUdGdVoyVWdjMlZzWldOMElITjFZbTFwZENCclpYbGtiM2R1SUd0bGVYQnlaWE56SUd0bGVYVndJR052Ym5SbGVIUnRaVzUxWENJZ0tTNXpjR3hwZENnZ1hDSWdYQ0lnS1N4Y2JseDBablZ1WTNScGIyNG9JR2tzSUc1aGJXVWdLU0I3WEc1Y2JseDBMeThnU0dGdVpHeGxJR1YyWlc1MElHSnBibVJwYm1kY2JseDBhbEYxWlhKNUxtWnVXeUJ1WVcxbElGMGdQU0JtZFc1amRHbHZiaWdnWkdGMFlTd2dabTRnS1NCN1hHNWNkRngwY21WMGRYSnVJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF3SUQ5Y2JseDBYSFJjZEhSb2FYTXViMjRvSUc1aGJXVXNJRzUxYkd3c0lHUmhkR0VzSUdadUlDa2dPbHh1WEhSY2RGeDBkR2hwY3k1MGNtbG5aMlZ5S0NCdVlXMWxJQ2s3WEc1Y2RIMDdYRzU5SUNrN1hHNWNibXBSZFdWeWVTNW1iaTVsZUhSbGJtUW9JSHRjYmx4MGFHOTJaWEk2SUdaMWJtTjBhVzl1S0NCbWJrOTJaWElzSUdadVQzVjBJQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG0xdmRYTmxaVzUwWlhJb0lHWnVUM1psY2lBcExtMXZkWE5sYkdWaGRtVW9JR1p1VDNWMElIeDhJR1p1VDNabGNpQXBPMXh1WEhSOVhHNTlJQ2s3WEc1Y2JseHVYRzVjYm1wUmRXVnllUzVtYmk1bGVIUmxibVFvSUh0Y2JseHVYSFJpYVc1a09pQm1kVzVqZEdsdmJpZ2dkSGx3WlhNc0lHUmhkR0VzSUdadUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbTl1S0NCMGVYQmxjeXdnYm5Wc2JDd2daR0YwWVN3Z1ptNGdLVHRjYmx4MGZTeGNibHgwZFc1aWFXNWtPaUJtZFc1amRHbHZiaWdnZEhsd1pYTXNJR1p1SUNrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtOW1aaWdnZEhsd1pYTXNJRzUxYkd3c0lHWnVJQ2s3WEc1Y2RIMHNYRzVjYmx4MFpHVnNaV2RoZEdVNklHWjFibU4wYVc5dUtDQnpaV3hsWTNSdmNpd2dkSGx3WlhNc0lHUmhkR0VzSUdadUlDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbTl1S0NCMGVYQmxjeXdnYzJWc1pXTjBiM0lzSUdSaGRHRXNJR1p1SUNrN1hHNWNkSDBzWEc1Y2RIVnVaR1ZzWldkaGRHVTZJR1oxYm1OMGFXOXVLQ0J6Wld4bFkzUnZjaXdnZEhsd1pYTXNJR1p1SUNrZ2UxeHVYRzVjZEZ4MEx5OGdLQ0J1WVcxbGMzQmhZMlVnS1NCdmNpQW9JSE5sYkdWamRHOXlMQ0IwZVhCbGN5QmJMQ0JtYmwwZ0tWeHVYSFJjZEhKbGRIVnliaUJoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBeElEOWNibHgwWEhSY2RIUm9hWE11YjJabUtDQnpaV3hsWTNSdmNpd2dYQ0lxS2x3aUlDa2dPbHh1WEhSY2RGeDBkR2hwY3k1dlptWW9JSFI1Y0dWekxDQnpaV3hsWTNSdmNpQjhmQ0JjSWlvcVhDSXNJR1p1SUNrN1hHNWNkSDFjYm4wZ0tUdGNibHh1THk4Z1FtbHVaQ0JoSUdaMWJtTjBhVzl1SUhSdklHRWdZMjl1ZEdWNGRDd2diM0IwYVc5dVlXeHNlU0J3WVhKMGFXRnNiSGtnWVhCd2JIbHBibWNnWVc1NVhHNHZMeUJoY21kMWJXVnVkSE11WEc0dkx5QnFVWFZsY25rdWNISnZlSGtnYVhNZ1pHVndjbVZqWVhSbFpDQjBieUJ3Y205dGIzUmxJSE4wWVc1a1lYSmtjeUFvYzNCbFkybG1hV05oYkd4NUlFWjFibU4wYVc5dUkySnBibVFwWEc0dkx5QkliM2RsZG1WeUxDQnBkQ0JwY3lCdWIzUWdjMnhoZEdWa0lHWnZjaUJ5WlcxdmRtRnNJR0Z1ZVNCMGFXMWxJSE52YjI1Y2JtcFJkV1Z5ZVM1d2NtOTRlU0E5SUdaMWJtTjBhVzl1S0NCbWJpd2dZMjl1ZEdWNGRDQXBJSHRjYmx4MGRtRnlJSFJ0Y0N3Z1lYSm5jeXdnY0hKdmVIazdYRzVjYmx4MGFXWWdLQ0IwZVhCbGIyWWdZMjl1ZEdWNGRDQTlQVDBnWENKemRISnBibWRjSWlBcElIdGNibHgwWEhSMGJYQWdQU0JtYmxzZ1kyOXVkR1Y0ZENCZE8xeHVYSFJjZEdOdmJuUmxlSFFnUFNCbWJqdGNibHgwWEhSbWJpQTlJSFJ0Y0R0Y2JseDBmVnh1WEc1Y2RDOHZJRkYxYVdOcklHTm9aV05ySUhSdklHUmxkR1Z5YldsdVpTQnBaaUIwWVhKblpYUWdhWE1nWTJGc2JHRmliR1VzSUdsdUlIUm9aU0J6Y0dWalhHNWNkQzh2SUhSb2FYTWdkR2h5YjNkeklHRWdWSGx3WlVWeWNtOXlMQ0JpZFhRZ2QyVWdkMmxzYkNCcWRYTjBJSEpsZEhWeWJpQjFibVJsWm1sdVpXUXVYRzVjZEdsbUlDZ2dJV2x6Um5WdVkzUnBiMjRvSUdadUlDa2dLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNibHgwZlZ4dVhHNWNkQzh2SUZOcGJYVnNZWFJsWkNCaWFXNWtYRzVjZEdGeVozTWdQU0J6YkdsalpTNWpZV3hzS0NCaGNtZDFiV1Z1ZEhNc0lESWdLVHRjYmx4MGNISnZlSGtnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnWm00dVlYQndiSGtvSUdOdmJuUmxlSFFnZkh3Z2RHaHBjeXdnWVhKbmN5NWpiMjVqWVhRb0lITnNhV05sTG1OaGJHd29JR0Z5WjNWdFpXNTBjeUFwSUNrZ0tUdGNibHgwZlR0Y2JseHVYSFF2THlCVFpYUWdkR2hsSUdkMWFXUWdiMllnZFc1cGNYVmxJR2hoYm1Sc1pYSWdkRzhnZEdobElITmhiV1VnYjJZZ2IzSnBaMmx1WVd3Z2FHRnVaR3hsY2l3Z2MyOGdhWFFnWTJGdUlHSmxJSEpsYlc5MlpXUmNibHgwY0hKdmVIa3VaM1ZwWkNBOUlHWnVMbWQxYVdRZ1BTQm1iaTVuZFdsa0lIeDhJR3BSZFdWeWVTNW5kV2xrS3lzN1hHNWNibHgwY21WMGRYSnVJSEJ5YjNoNU8xeHVmVHRjYmx4dWFsRjFaWEo1TG1odmJHUlNaV0ZrZVNBOUlHWjFibU4wYVc5dUtDQm9iMnhrSUNrZ2UxeHVYSFJwWmlBb0lHaHZiR1FnS1NCN1hHNWNkRngwYWxGMVpYSjVMbkpsWVdSNVYyRnBkQ3NyTzF4dVhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEdwUmRXVnllUzV5WldGa2VTZ2dkSEoxWlNBcE8xeHVYSFI5WEc1OU8xeHVhbEYxWlhKNUxtbHpRWEp5WVhrZ1BTQkJjbkpoZVM1cGMwRnljbUY1TzF4dWFsRjFaWEo1TG5CaGNuTmxTbE5QVGlBOUlFcFRUMDR1Y0dGeWMyVTdYRzVxVVhWbGNua3VibTlrWlU1aGJXVWdQU0J1YjJSbFRtRnRaVHRjYm1wUmRXVnllUzVwYzBaMWJtTjBhVzl1SUQwZ2FYTkdkVzVqZEdsdmJqdGNibXBSZFdWeWVTNXBjMWRwYm1SdmR5QTlJR2x6VjJsdVpHOTNPMXh1YWxGMVpYSjVMbU5oYldWc1EyRnpaU0E5SUdOaGJXVnNRMkZ6WlR0Y2JtcFJkV1Z5ZVM1MGVYQmxJRDBnZEc5VWVYQmxPMXh1WEc1cVVYVmxjbmt1Ym05M0lEMGdSR0YwWlM1dWIzYzdYRzVjYm1wUmRXVnllUzVwYzA1MWJXVnlhV01nUFNCbWRXNWpkR2x2YmlnZ2IySnFJQ2tnZTF4dVhHNWNkQzh2SUVGeklHOW1JR3BSZFdWeWVTQXpMakFzSUdselRuVnRaWEpwWXlCcGN5QnNhVzFwZEdWa0lIUnZYRzVjZEM4dklITjBjbWx1WjNNZ1lXNWtJRzUxYldKbGNuTWdLSEJ5YVcxcGRHbDJaWE1nYjNJZ2IySnFaV04wY3lsY2JseDBMeThnZEdoaGRDQmpZVzRnWW1VZ1kyOWxjbU5sWkNCMGJ5Qm1hVzVwZEdVZ2JuVnRZbVZ5Y3lBb1oyZ3RNalkyTWlsY2JseDBkbUZ5SUhSNWNHVWdQU0JxVVhWbGNua3VkSGx3WlNnZ2IySnFJQ2s3WEc1Y2RISmxkSFZ5YmlBb0lIUjVjR1VnUFQwOUlGd2liblZ0WW1WeVhDSWdmSHdnZEhsd1pTQTlQVDBnWENKemRISnBibWRjSWlBcElDWW1YRzVjYmx4MFhIUXZMeUJ3WVhKelpVWnNiMkYwSUU1aFRuTWdiblZ0WlhKcFl5MWpZWE4wSUdaaGJITmxJSEJ2YzJsMGFYWmxjeUFvWENKY0lpbGNibHgwWEhRdkx5QXVMaTVpZFhRZ2JXbHphVzUwWlhKd2NtVjBjeUJzWldGa2FXNW5MVzUxYldKbGNpQnpkSEpwYm1kekxDQndZWEowYVdOMWJHRnliSGtnYUdWNElHeHBkR1Z5WVd4eklDaGNJakI0TGk0dVhDSXBYRzVjZEZ4MEx5OGdjM1ZpZEhKaFkzUnBiMjRnWm05eVkyVnpJR2x1Wm1sdWFYUnBaWE1nZEc4Z1RtRk9YRzVjZEZ4MElXbHpUbUZPS0NCdlltb2dMU0J3WVhKelpVWnNiMkYwS0NCdlltb2dLU0FwTzF4dWZUdGNibHh1WEc1Y2JseHVMeThnVW1WbmFYTjBaWElnWVhNZ1lTQnVZVzFsWkNCQlRVUWdiVzlrZFd4bExDQnphVzVqWlNCcVVYVmxjbmtnWTJGdUlHSmxJR052Ym1OaGRHVnVZWFJsWkNCM2FYUm9JRzkwYUdWeVhHNHZMeUJtYVd4bGN5QjBhR0YwSUcxaGVTQjFjMlVnWkdWbWFXNWxMQ0JpZFhRZ2JtOTBJSFpwWVNCaElIQnliM0JsY2lCamIyNWpZWFJsYm1GMGFXOXVJSE5qY21sd2RDQjBhR0YwWEc0dkx5QjFibVJsY25OMFlXNWtjeUJoYm05dWVXMXZkWE1nUVUxRUlHMXZaSFZzWlhNdUlFRWdibUZ0WldRZ1FVMUVJR2x6SUhOaFptVnpkQ0JoYm1RZ2JXOXpkQ0J5YjJKMWMzUmNiaTh2SUhkaGVTQjBieUJ5WldkcGMzUmxjaTRnVEc5M1pYSmpZWE5sSUdweGRXVnllU0JwY3lCMWMyVmtJR0psWTJGMWMyVWdRVTFFSUcxdlpIVnNaU0J1WVcxbGN5QmhjbVZjYmk4dklHUmxjbWwyWldRZ1puSnZiU0JtYVd4bElHNWhiV1Z6TENCaGJtUWdhbEYxWlhKNUlHbHpJRzV2Y20xaGJHeDVJR1JsYkdsMlpYSmxaQ0JwYmlCaElHeHZkMlZ5WTJGelpWeHVMeThnWm1sc1pTQnVZVzFsTGlCRWJ5QjBhR2x6SUdGbWRHVnlJR055WldGMGFXNW5JSFJvWlNCbmJHOWlZV3dnYzI4Z2RHaGhkQ0JwWmlCaGJpQkJUVVFnYlc5a2RXeGxJSGRoYm5SelhHNHZMeUIwYnlCallXeHNJRzV2UTI5dVpteHBZM1FnZEc4Z2FHbGtaU0IwYUdseklIWmxjbk5wYjI0Z2IyWWdhbEYxWlhKNUxDQnBkQ0IzYVd4c0lIZHZjbXN1WEc1Y2JpOHZJRTV2ZEdVZ2RHaGhkQ0JtYjNJZ2JXRjRhVzExYlNCd2IzSjBZV0pwYkdsMGVTd2diR2xpY21GeWFXVnpJSFJvWVhRZ1lYSmxJRzV2ZENCcVVYVmxjbmtnYzJodmRXeGtYRzR2THlCa1pXTnNZWEpsSUhSb1pXMXpaV3gyWlhNZ1lYTWdZVzV2Ym5sdGIzVnpJRzF2WkhWc1pYTXNJR0Z1WkNCaGRtOXBaQ0J6WlhSMGFXNW5JR0VnWjJ4dlltRnNJR2xtSUdGdVhHNHZMeUJCVFVRZ2JHOWhaR1Z5SUdseklIQnlaWE5sYm5RdUlHcFJkV1Z5ZVNCcGN5QmhJSE53WldOcFlXd2dZMkZ6WlM0Z1JtOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNHNJSE5sWlZ4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMnB5WW5WeWEyVXZjbVZ4ZFdseVpXcHpMM2RwYTJrdlZYQmtZWFJwYm1jdFpYaHBjM1JwYm1jdGJHbGljbUZ5YVdWekkzZHBhMmt0WVc1dmJseHVYRzVwWmlBb0lIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCa1pXWnBibVV1WVcxa0lDa2dlMXh1WEhSa1pXWnBibVVvSUZ3aWFuRjFaWEo1WENJc0lGdGRMQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJ5WlhSMWNtNGdhbEYxWlhKNU8xeHVYSFI5SUNrN1hHNTlYRzVjYmx4dVhHNWNiblpoY2x4dVhHNWNkQzh2SUUxaGNDQnZkbVZ5SUdwUmRXVnllU0JwYmlCallYTmxJRzltSUc5MlpYSjNjbWwwWlZ4dVhIUmZhbEYxWlhKNUlEMGdkMmx1Wkc5M0xtcFJkV1Z5ZVN4Y2JseHVYSFF2THlCTllYQWdiM1psY2lCMGFHVWdKQ0JwYmlCallYTmxJRzltSUc5MlpYSjNjbWwwWlZ4dVhIUmZKQ0E5SUhkcGJtUnZkeTRrTzF4dVhHNXFVWFZsY25rdWJtOURiMjVtYkdsamRDQTlJR1oxYm1OMGFXOXVLQ0JrWldWd0lDa2dlMXh1WEhScFppQW9JSGRwYm1SdmR5NGtJRDA5UFNCcVVYVmxjbmtnS1NCN1hHNWNkRngwZDJsdVpHOTNMaVFnUFNCZkpEdGNibHgwZlZ4dVhHNWNkR2xtSUNnZ1pHVmxjQ0FtSmlCM2FXNWtiM2N1YWxGMVpYSjVJRDA5UFNCcVVYVmxjbmtnS1NCN1hHNWNkRngwZDJsdVpHOTNMbXBSZFdWeWVTQTlJRjlxVVhWbGNuazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdhbEYxWlhKNU8xeHVmVHRjYmx4dUx5OGdSWGh3YjNObElHcFJkV1Z5ZVNCaGJtUWdKQ0JwWkdWdWRHbG1hV1Z5Y3l3Z1pYWmxiaUJwYmlCQlRVUmNiaTh2SUNnak56RXdNaU5qYjIxdFpXNTBPakV3TENCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmFuRjFaWEo1TDJweGRXVnllUzl3ZFd4c0x6VTFOeWxjYmk4dklHRnVaQ0JEYjIxdGIyNUtVeUJtYjNJZ1luSnZkM05sY2lCbGJYVnNZWFJ2Y25NZ0tDTXhNelUyTmlsY2JtbG1JQ2dnSVc1dlIyeHZZbUZzSUNrZ2UxeHVYSFIzYVc1a2IzY3VhbEYxWlhKNUlEMGdkMmx1Wkc5M0xpUWdQU0JxVVhWbGNuazdYRzU5WEc1Y2JseHVYRzVjYm5KbGRIVnliaUJxVVhWbGNuazdYRzU5SUNrN1hHNGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ0lDQmNJbVpoWTJWaWIyOXJYQ0k2SUh0Y2JpQWdJQ0FnSUNBZ2RYSnNPaUFuYUhSMGNITTZMeTkzZDNjdVptRmpaV0p2YjJzdVkyOXRMM1ZrYVc1bGFuTW5MRnh1SUNBZ0lDQWdJQ0JwWTI5dU9pQW5abUZpSUdaaExXWmhZMlZpYjI5ckxXWW5YRzRnSUNBZ2ZTeGNiaUFnSUNCY0luUjNhWFIwWlhKY0lqb2dlMXh1SUNBZ0lDQWdJQ0IxY213NklDZG9kSFJ3Y3pvdkwzUjNhWFIwWlhJdVkyOXRMMVZrYVc1bFgwcFRKeXhjYmlBZ0lDQWdJQ0FnYVdOdmJqb2dKMlpoWWlCbVlTMTBkMmwwZEdWeUoxeHVJQ0FnSUgwc1hHNGdJQ0FnWENKcGJuTjBZV2R5WVcxY0lqb2dlMXh1SUNBZ0lDQWdJQ0IxY213NklDZG9kSFJ3Y3pvdkwzZDNkeTVwYm5OMFlXZHlZVzB1WTI5dEwzVmthVzVsYW5NbkxGeHVJQ0FnSUNBZ0lDQnBZMjl1T2lBblptRmlJR1poTFdsdWMzUmhaM0poYlNkY2JpQWdJQ0I5WEc1OUlpd2lZMjl1YzNRZ0pDQTlJSEpsY1hWcGNtVW9KMnB4ZFdWeWVTY3BPMXh1WTI5dWMzUWdZVzVwYldVZ1BTQnlaWEYxYVhKbEtDZGhibWx0Wldwekp5azdYRzVjYm1OdmJuTjBJSGR5YVhSbGNpQWdQU0J5WlhGMWFYSmxLQ2N1TDNOamNtbHdkSE12ZDNKcGRHVnlKeWs3WEc1amIyNXpkQ0J6YjJOcFlXeHpJRDBnY21WeGRXbHlaU2duTGk5a1lYUmhMM052WTJsaGJITW5LVHRjYmx4dVkyOXVjM1FnY25WdVRHOW5iMEZ1YVcxaGRHbHZiaUE5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCc2IyZHZYM054ZFdGeVpTQTlJR0Z1YVcxbExuUnBiV1ZzYVc1bEtIdGNiaUFnSUNBZ0lDQWdZWFYwYjNCc1lYazZJSFJ5ZFdWY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUd4dloyOWZjM0YxWVhKbFhHNGdJQ0FnTG1Ga1pDaDdYRzRnSUNBZ0lDQWdJSFJoY21kbGRITWdJQ0FnSUNBZ0lDQTZJQ2N1YVdOdklIQmhkR2d1YzNGMVlYSmxKeXhjYmlBZ0lDQWdJQ0FnYzNSeWIydGxSR0Z6YUc5bVpuTmxkRG9nVzJGdWFXMWxMbk5sZEVSaGMyaHZabVp6WlhRc0lEQmRMRnh1SUNBZ0lDQWdJQ0JsWVhOcGJtY2dJQ0FnSUNBZ0lDQWdPaUFuWldGelpVbHVUM1YwVTJsdVpTY3NYRzRnSUNBZ0lDQWdJR1IxY21GMGFXOXVJQ0FnSUNBZ0lDQTZJREV5TURCY2JpQWdJQ0I5S1M1aFpHUW9lMXh1SUNBZ0lDQWdJQ0IwWVhKblpYUnpJRG9nSnk1cFkyOGdjR0YwYUM1emNYVmhjbVVuTEZ4dUlDQWdJQ0FnSUNCbWFXeHNJQ0FnSURvZ0p5Tm1NR1JqTkdZbkxGeHVJQ0FnSUNBZ0lDQmxZWE5wYm1jZ0lEb2dKMlZoYzJWSmJrOTFkRk5wYm1VbkxGeHVJQ0FnSUNBZ0lDQmtkWEpoZEdsdmJqb2dPREF3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnNiMmR2WDJvZ1BTQmhibWx0WlNoN1hHNGdJQ0FnSUNBZ0lIUmhjbWRsZEhNZ0lDQWdJQ0FnSUNBNklDY3VhV052SUhCaGRHZ3VhaWNzWEc0Z0lDQWdJQ0FnSUhOMGNtOXJaVVJoYzJodlptWnpaWFE2SUZ0aGJtbHRaUzV6WlhSRVlYTm9iMlptYzJWMExDQXdYU3hjYmlBZ0lDQWdJQ0FnWldGemFXNW5JQ0FnSUNBZ0lDQWdJRG9nSjJWaGMyVkpiazkxZEZOcGJtVW5MRnh1SUNBZ0lDQWdJQ0JrZFhKaGRHbHZiaUFnSUNBZ0lDQWdPaUEyTURCY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR3h2WjI5ZmN5QTlJR0Z1YVcxbEtIdGNiaUFnSUNBZ0lDQWdaR1ZzWVhrZ0lDQWdJQ0FnSUNBZ0lEb2dOakF3TEZ4dUlDQWdJQ0FnSUNCMFlYSm5aWFJ6SUNBZ0lDQWdJQ0FnT2lBbkxtbGpieUJ3WVhSb0xuTW5MRnh1SUNBZ0lDQWdJQ0J6ZEhKdmEyVkVZWE5vYjJabWMyVjBPaUJiWVc1cGJXVXVjMlYwUkdGemFHOW1abk5sZEN3Z01GMHNYRzRnSUNBZ0lDQWdJR1ZoYzJsdVp5QWdJQ0FnSUNBZ0lDQTZJQ2RsWVhObFNXNVBkWFJUYVc1bEp5eGNiaUFnSUNBZ0lDQWdaSFZ5WVhScGIyNGdJQ0FnSUNBZ0lEb2dOakF3TEZ4dUlDQWdJSDBwTzF4dWZUdGNibHh1WTI5dWMzUWdZV1JrVTI5amFXRnNjMHhwYzNSbGJtVnljeUE5SUNncElEMCtJSHRjYmlBZ0lDQWtLQ2NqYzI5amFXRnNjeTFqYjI1MFlXbHVaWEluS1M1amFHbHNaSEpsYmlncExtVmhZMmdvS0drc0lHVnNaVzFsYm5RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTV2Y0dWdUtITnZZMmxoYkhOYlpXeGxiV1Z1ZEM1cFpGMHVkWEpzTENBblgySnNZVzVySnlrN1hHNGdJQ0FnSUNBZ0lIMHNJR1poYkhObEtWeHVJQ0FnSUgwcE8xeHVmVHRjYmx4dVkyOXVjM1FnYVc1cGRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCeWRXNU1iMmR2UVc1cGJXRjBhVzl1S0NrN1hHNWNiaUFnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHVnlMblJwZEd4bGN5Z3BPMXh1SUNBZ0lIMHNJRFV3TUNrN1hHNWNiaUFnSUNBa0tIZHBibVJ2ZHlrdWMyTnliMnhzS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NRb2RHaHBjeWt1YzJOeWIyeHNWRzl3S0NrZ1BqMGdNVEF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NkbWIyOTBaWEluS1M1amMzTW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QwY21GdWMyWnZjbTBuT2lBbmRISmhibk5zWVhSbFdTZ3djSGdwSjF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JuMDdYRzVjYm5kcGJtUnZkeTV2Ym14dllXUWdQU0FvS0NrZ1BUNGdlMXh1SUNBZ0lHbHVhWFFvS1R0Y2JpQWdJQ0JoWkdSVGIyTnBZV3h6VEdsemRHVnVaWEp6S0NrN1hHNTlLVHNpTENKamIyNXpkQ0FrSUQwZ2NtVnhkV2x5WlNnbmFuRjFaWEo1SnlrN1hHNWNibXhsZENCc1pXNGdQU0F3TzF4dVhHNWpiMjV6ZENCM2NtbDBaU0E5SUNoMFlYSm5aWFFzSUhSbGVIUXNJR05pS1NBOVBpQjdYRzRnSUNBZ2RHRnlaMlYwTG1oMGJXd29kR1Y0ZEM1emRXSnpkSElvTUN3Z2JHVnVLeXNwS1R0Y2JpQWdJQ0JwWmlBb2JHVnVJRHdnZEdWNGRDNXNaVzVuZEdnZ0t5QXhLU0I3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkM0pwZEdVb2RHRnlaMlYwTENCMFpYaDBMQ0JqWWlrN1hHNGdJQ0FnSUNBZ0lIMHNJRTFoZEdndVkyVnBiQ2hOWVhSb0xuSmhibVJ2YlNncElDb2dNakF3S1NBcklERXdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpZaWdwTzF4dUlDQWdJSDFjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lIUnBkR3hsY3lncElIdGNiaUFnSUNBZ0lDQWdkM0pwZEdVb0pDZ25JMk52ZG1WeUxYUnBkR3hsSnlrc0lDZDFaR2x1WlNCcWN5Y3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOa2IzZHVMV2xqYjI0bktTNW1ZV1JsU1c0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lESTFNQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMDdJbDE5In0=
